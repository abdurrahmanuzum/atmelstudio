
g18a_xosc32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003238  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00003238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000400  20000068  000032a0  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000468  000036a0  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021170  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003413  00000000  00000000  00041259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ab3b  00000000  00000000  0004466c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000818  00000000  00000000  0004f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000810  00000000  00000000  0004f9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019c17  00000000  00000000  000501cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ed57  00000000  00000000  00069de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00085a9c  00000000  00000000  00078b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000148c  00000000  00000000  000fe5dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 24 00 20 25 01 00 00 21 01 00 00 21 01 00 00     h$. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	21 01 00 00 d1 0b 00 00 21 01 00 00 21 01 00 00     !.......!...!...
      5c:	89 20 00 00 21 01 00 00 21 01 00 00 21 01 00 00     . ..!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00003238 	.word	0x00003238

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00003238 	.word	0x00003238
     10c:	00003238 	.word	0x00003238
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000003d9 	.word	0x000003d9

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
     128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
     12a:	429a      	cmp	r2, r3
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
     130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
     132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     134:	6811      	ldr	r1, [r2, #0]
     136:	6019      	str	r1, [r3, #0]
     138:	3304      	adds	r3, #4
     13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
     13e:	428b      	cmp	r3, r1
     140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
     144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
     146:	2200      	movs	r2, #0
     148:	601a      	str	r2, [r3, #0]
     14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
     14e:	4293      	cmp	r3, r2
     150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
     154:	21ff      	movs	r1, #255	; 0xff
     156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
     158:	438b      	bics	r3, r1
     15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	39fd      	subs	r1, #253	; 0xfd
     15e:	2390      	movs	r3, #144	; 0x90
     160:	005b      	lsls	r3, r3, #1
     162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
     164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	2503      	movs	r5, #3
     16c:	43ab      	bics	r3, r5
     16e:	2402      	movs	r4, #2
     170:	4323      	orrs	r3, r4
     172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     174:	78d3      	ldrb	r3, [r2, #3]
     176:	270c      	movs	r7, #12
     178:	43bb      	bics	r3, r7
     17a:	2608      	movs	r6, #8
     17c:	4333      	orrs	r3, r6
     17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	2230      	movs	r2, #48	; 0x30
     186:	4390      	bics	r0, r2
     188:	2220      	movs	r2, #32
     18a:	4310      	orrs	r0, r2
     18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     18e:	7b99      	ldrb	r1, [r3, #14]
     190:	43b9      	bics	r1, r7
     192:	4331      	orrs	r1, r6
     194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     196:	7b9a      	ldrb	r2, [r3, #14]
     198:	43aa      	bics	r2, r5
     19a:	4322      	orrs	r2, r4
     19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
     1a0:	6851      	ldr	r1, [r2, #4]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	430b      	orrs	r3, r1
     1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
     1aa:	4798      	blx	r3
        main();
     1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
     1ae:	4798      	blx	r3
     1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00003238 	.word	0x00003238
     1b8:	20000000 	.word	0x20000000
     1bc:	20000068 	.word	0x20000068
     1c0:	20000068 	.word	0x20000068
     1c4:	20000468 	.word	0x20000468
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	000030cd 	.word	0x000030cd
     1e4:	00002095 	.word	0x00002095

000001e8 <EXTERNAL_IRQ_0_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void EXTERNAL_IRQ_0_init(void)
{
     1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1ea:	46de      	mov	lr, fp
     1ec:	4657      	mov	r7, sl
     1ee:	464e      	mov	r6, r9
     1f0:	4645      	mov	r5, r8
     1f2:	b5e0      	push	{r5, r6, r7, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1f4:	4a3a      	ldr	r2, [pc, #232]	; (2e0 <EXTERNAL_IRQ_0_init+0xf8>)
     1f6:	4b3b      	ldr	r3, [pc, #236]	; (2e4 <EXTERNAL_IRQ_0_init+0xfc>)
     1f8:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1fa:	27c0      	movs	r7, #192	; 0xc0
     1fc:	05ff      	lsls	r7, r7, #23
     1fe:	2384      	movs	r3, #132	; 0x84
     200:	469a      	mov	sl, r3
     202:	3b7c      	subs	r3, #124	; 0x7c
     204:	4652      	mov	r2, sl
     206:	50bb      	str	r3, [r7, r2]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     208:	4b37      	ldr	r3, [pc, #220]	; (2e8 <EXTERNAL_IRQ_0_init+0x100>)
     20a:	3224      	adds	r2, #36	; 0x24
     20c:	4690      	mov	r8, r2
     20e:	4a37      	ldr	r2, [pc, #220]	; (2ec <EXTERNAL_IRQ_0_init+0x104>)
     210:	4641      	mov	r1, r8
     212:	505a      	str	r2, [r3, r1]
     214:	4e36      	ldr	r6, [pc, #216]	; (2f0 <EXTERNAL_IRQ_0_init+0x108>)
     216:	4642      	mov	r2, r8
     218:	505e      	str	r6, [r3, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     21a:	25c3      	movs	r5, #195	; 0xc3
     21c:	5d59      	ldrb	r1, [r3, r5]
     21e:	3aa4      	subs	r2, #164	; 0xa4
     220:	4391      	bics	r1, r2
     222:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     224:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     226:	2401      	movs	r4, #1
     228:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     22a:	2001      	movs	r0, #1
     22c:	4301      	orrs	r1, r0
     22e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     230:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     232:	21b1      	movs	r1, #177	; 0xb1
     234:	4689      	mov	r9, r1
     236:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     238:	3db4      	subs	r5, #180	; 0xb4
     23a:	46ab      	mov	fp, r5
     23c:	4029      	ands	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     23e:	464d      	mov	r5, r9
     240:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     242:	2140      	movs	r1, #64	; 0x40
     244:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     246:	492b      	ldr	r1, [pc, #172]	; (2f4 <EXTERNAL_IRQ_0_init+0x10c>)
     248:	6299      	str	r1, [r3, #40]	; 0x28
     24a:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     24c:	2146      	movs	r1, #70	; 0x46
     24e:	4689      	mov	r9, r1
     250:	5c59      	ldrb	r1, [r3, r1]
     252:	4391      	bics	r1, r2
     254:	464d      	mov	r5, r9
     256:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     258:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     25a:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     25c:	4301      	orrs	r1, r0
     25e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     260:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     262:	2133      	movs	r1, #51	; 0x33
     264:	4689      	mov	r9, r1
     266:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     268:	465d      	mov	r5, fp
     26a:	43a9      	bics	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26c:	464d      	mov	r5, r9
     26e:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     270:	2180      	movs	r1, #128	; 0x80
     272:	0089      	lsls	r1, r1, #2
     274:	4655      	mov	r5, sl
     276:	5179      	str	r1, [r7, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     278:	491f      	ldr	r1, [pc, #124]	; (2f8 <EXTERNAL_IRQ_0_init+0x110>)
     27a:	4645      	mov	r5, r8
     27c:	5159      	str	r1, [r3, r5]
     27e:	4641      	mov	r1, r8
     280:	515e      	str	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     282:	3121      	adds	r1, #33	; 0x21
     284:	4688      	mov	r8, r1
     286:	5c59      	ldrb	r1, [r3, r1]
     288:	4391      	bics	r1, r2
     28a:	4645      	mov	r5, r8
     28c:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     28e:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     290:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     292:	4301      	orrs	r1, r0
     294:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     296:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     298:	21b4      	movs	r1, #180	; 0xb4
     29a:	4688      	mov	r8, r1
     29c:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     29e:	465d      	mov	r5, fp
     2a0:	4029      	ands	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2a2:	4645      	mov	r5, r8
     2a4:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2a6:	2180      	movs	r1, #128	; 0x80
     2a8:	00c9      	lsls	r1, r1, #3
     2aa:	6079      	str	r1, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ac:	4913      	ldr	r1, [pc, #76]	; (2fc <EXTERNAL_IRQ_0_init+0x114>)
     2ae:	6299      	str	r1, [r3, #40]	; 0x28
     2b0:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2b2:	214a      	movs	r1, #74	; 0x4a
     2b4:	5c5e      	ldrb	r6, [r3, r1]
     2b6:	4396      	bics	r6, r2
     2b8:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ba:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2bc:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2be:	4302      	orrs	r2, r0
     2c0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2c4:	3915      	subs	r1, #21
     2c6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c8:	4658      	mov	r0, fp
     2ca:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2cc:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA10, PINMUX_PA10A_EIC_EXTINT10);

	ext_irq_init();
     2ce:	4b0c      	ldr	r3, [pc, #48]	; (300 <EXTERNAL_IRQ_0_init+0x118>)
     2d0:	4798      	blx	r3
}
     2d2:	bc3c      	pop	{r2, r3, r4, r5}
     2d4:	4690      	mov	r8, r2
     2d6:	4699      	mov	r9, r3
     2d8:	46a2      	mov	sl, r4
     2da:	46ab      	mov	fp, r5
     2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00004005 	.word	0x00004005
     2e4:	40000c00 	.word	0x40000c00
     2e8:	41004400 	.word	0x41004400
     2ec:	40020008 	.word	0x40020008
     2f0:	c0020000 	.word	0xc0020000
     2f4:	40020040 	.word	0x40020040
     2f8:	40020200 	.word	0x40020200
     2fc:	40020400 	.word	0x40020400
     300:	000004a1 	.word	0x000004a1

00000304 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     304:	b5f0      	push	{r4, r5, r6, r7, lr}
     306:	46c6      	mov	lr, r8
     308:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     30a:	24c0      	movs	r4, #192	; 0xc0
     30c:	05e4      	lsls	r4, r4, #23
     30e:	2280      	movs	r2, #128	; 0x80
     310:	0452      	lsls	r2, r2, #17
     312:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     314:	4b1c      	ldr	r3, [pc, #112]	; (388 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     316:	2780      	movs	r7, #128	; 0x80
     318:	05ff      	lsls	r7, r7, #23
     31a:	629f      	str	r7, [r3, #40]	; 0x28
     31c:	491b      	ldr	r1, [pc, #108]	; (38c <USB_DEVICE_INSTANCE_PORT_init+0x88>)
     31e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     320:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     322:	2058      	movs	r0, #88	; 0x58
     324:	5c19      	ldrb	r1, [r3, r0]
     326:	2204      	movs	r2, #4
     328:	4690      	mov	r8, r2
     32a:	4391      	bics	r1, r2
     32c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     32e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     330:	2601      	movs	r6, #1
     332:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     334:	2501      	movs	r5, #1
     336:	4329      	orrs	r1, r5
     338:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     33c:	381c      	subs	r0, #28
     33e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     340:	320b      	adds	r2, #11
     342:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     344:	2206      	movs	r2, #6
     346:	4694      	mov	ip, r2
     348:	4662      	mov	r2, ip
     34a:	4311      	orrs	r1, r2
     34c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     34e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     350:	2180      	movs	r1, #128	; 0x80
     352:	0489      	lsls	r1, r1, #18
     354:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     356:	629f      	str	r7, [r3, #40]	; 0x28
     358:	4f0d      	ldr	r7, [pc, #52]	; (390 <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
     35a:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     35c:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35e:	2159      	movs	r1, #89	; 0x59
     360:	5c5c      	ldrb	r4, [r3, r1]
     362:	4642      	mov	r2, r8
     364:	4394      	bics	r4, r2
     366:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     368:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     36a:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     36c:	432a      	orrs	r2, r5
     36e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     370:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     372:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     374:	394a      	subs	r1, #74	; 0x4a
     376:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     378:	2160      	movs	r1, #96	; 0x60
     37a:	430a      	orrs	r2, r1
     37c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     37e:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     380:	bc04      	pop	{r2}
     382:	4690      	mov	r8, r2
     384:	bdf0      	pop	{r4, r5, r6, r7, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	41004400 	.word	0x41004400
     38c:	c0000100 	.word	0xc0000100
     390:	c0000200 	.word	0xc0000200

00000394 <USB_DEVICE_INSTANCE_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     396:	69da      	ldr	r2, [r3, #28]
     398:	2120      	movs	r1, #32
     39a:	430a      	orrs	r2, r1
     39c:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     39e:	695a      	ldr	r2, [r3, #20]
     3a0:	3120      	adds	r1, #32
     3a2:	430a      	orrs	r2, r1
     3a4:	615a      	str	r2, [r3, #20]
     3a6:	4a03      	ldr	r2, [pc, #12]	; (3b4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     3a8:	4b03      	ldr	r3, [pc, #12]	; (3b8 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     3aa:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     3ac:	4770      	bx	lr
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	40000400 	.word	0x40000400
     3b4:	00004006 	.word	0x00004006
     3b8:	40000c00 	.word	0x40000c00

000003bc <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     3bc:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     3be:	4b03      	ldr	r3, [pc, #12]	; (3cc <USB_DEVICE_INSTANCE_init+0x10>)
     3c0:	4798      	blx	r3
	usb_d_init();
     3c2:	4b03      	ldr	r3, [pc, #12]	; (3d0 <USB_DEVICE_INSTANCE_init+0x14>)
     3c4:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     3c6:	4b03      	ldr	r3, [pc, #12]	; (3d4 <USB_DEVICE_INSTANCE_init+0x18>)
     3c8:	4798      	blx	r3
}
     3ca:	bd10      	pop	{r4, pc}
     3cc:	00000395 	.word	0x00000395
     3d0:	00000721 	.word	0x00000721
     3d4:	00000305 	.word	0x00000305

000003d8 <system_init>:

void system_init(void)
{
     3d8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3da:	4b0c      	ldr	r3, [pc, #48]	; (40c <system_init+0x34>)
     3dc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3de:	23c0      	movs	r3, #192	; 0xc0
     3e0:	05db      	lsls	r3, r3, #23
     3e2:	2280      	movs	r2, #128	; 0x80
     3e4:	0252      	lsls	r2, r2, #9
     3e6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <system_init+0x38>)
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	05d2      	lsls	r2, r2, #23
     3f0:	629a      	str	r2, [r3, #40]	; 0x28
     3f2:	4a08      	ldr	r2, [pc, #32]	; (414 <system_init+0x3c>)
     3f4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f6:	2150      	movs	r1, #80	; 0x50
     3f8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3fa:	2001      	movs	r0, #1
     3fc:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fe:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_LED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_LED, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     400:	4b05      	ldr	r3, [pc, #20]	; (418 <system_init+0x40>)
     402:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <system_init+0x44>)
     406:	4798      	blx	r3
}
     408:	bd10      	pop	{r4, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	00000b01 	.word	0x00000b01
     410:	41004400 	.word	0x41004400
     414:	c0000001 	.word	0xc0000001
     418:	000001e9 	.word	0x000001e9
     41c:	000003bd 	.word	0x000003bd

00000420 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     420:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     424:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     426:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     428:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     42c:	4770      	bx	lr

0000042e <atomic_leave_critical>:
     42e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     432:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     434:	f383 8810 	msr	PRIMASK, r3
}
     438:	4770      	bx	lr
	...

0000043c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     43c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     43e:	4b04      	ldr	r3, [pc, #16]	; (450 <delay_ms+0x14>)
     440:	681c      	ldr	r4, [r3, #0]
     442:	4b04      	ldr	r3, [pc, #16]	; (454 <delay_ms+0x18>)
     444:	4798      	blx	r3
     446:	0001      	movs	r1, r0
     448:	0020      	movs	r0, r4
     44a:	4b03      	ldr	r3, [pc, #12]	; (458 <delay_ms+0x1c>)
     44c:	4798      	blx	r3
}
     44e:	bd10      	pop	{r4, pc}
     450:	20000084 	.word	0x20000084
     454:	00000add 	.word	0x00000add
     458:	00000af9 	.word	0x00000af9

0000045c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     45c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     45e:	2504      	movs	r5, #4
     460:	2400      	movs	r4, #0

	while (upper >= lower) {
     462:	e007      	b.n	474 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     464:	4a0d      	ldr	r2, [pc, #52]	; (49c <process_ext_irq+0x40>)
     466:	58b3      	ldr	r3, [r6, r2]
     468:	2b00      	cmp	r3, #0
     46a:	d000      	beq.n	46e <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     46c:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     46e:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     470:	3a01      	subs	r2, #1
     472:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     474:	42ac      	cmp	r4, r5
     476:	d8fa      	bhi.n	46e <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     478:	192b      	adds	r3, r5, r4
     47a:	105b      	asrs	r3, r3, #1
     47c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     47e:	2a03      	cmp	r2, #3
     480:	d8f5      	bhi.n	46e <process_ext_irq+0x12>
     482:	21ff      	movs	r1, #255	; 0xff
     484:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     486:	00de      	lsls	r6, r3, #3
     488:	4904      	ldr	r1, [pc, #16]	; (49c <process_ext_irq+0x40>)
     48a:	1989      	adds	r1, r1, r6
     48c:	6849      	ldr	r1, [r1, #4]
     48e:	4281      	cmp	r1, r0
     490:	d0e8      	beq.n	464 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     492:	d2ed      	bcs.n	470 <process_ext_irq+0x14>
			lower = middle + 1;
     494:	3201      	adds	r2, #1
     496:	b2d4      	uxtb	r4, r2
     498:	e7ec      	b.n	474 <process_ext_irq+0x18>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	20000088 	.word	0x20000088

000004a0 <ext_irq_init>:
{
     4a0:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4a2:	2300      	movs	r3, #0
     4a4:	e009      	b.n	4ba <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     4a6:	4a08      	ldr	r2, [pc, #32]	; (4c8 <ext_irq_init+0x28>)
     4a8:	00d9      	lsls	r1, r3, #3
     4aa:	1850      	adds	r0, r2, r1
     4ac:	2401      	movs	r4, #1
     4ae:	4264      	negs	r4, r4
     4b0:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     4b2:	2000      	movs	r0, #0
     4b4:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4b6:	3301      	adds	r3, #1
     4b8:	b29b      	uxth	r3, r3
     4ba:	2b03      	cmp	r3, #3
     4bc:	d9f3      	bls.n	4a6 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     4be:	4803      	ldr	r0, [pc, #12]	; (4cc <ext_irq_init+0x2c>)
     4c0:	4b03      	ldr	r3, [pc, #12]	; (4d0 <ext_irq_init+0x30>)
     4c2:	4798      	blx	r3
}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	20000088 	.word	0x20000088
     4cc:	0000045d 	.word	0x0000045d
     4d0:	00000b35 	.word	0x00000b35

000004d4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     4d4:	b510      	push	{r4, lr}
     4d6:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     4d8:	2000      	movs	r0, #0
     4da:	e001      	b.n	4e0 <_usb_d_find_ep+0xc>
     4dc:	3001      	adds	r0, #1
     4de:	b240      	sxtb	r0, r0
     4e0:	2803      	cmp	r0, #3
     4e2:	dc0f      	bgt.n	504 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     4e4:	0142      	lsls	r2, r0, #5
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <_usb_d_find_ep+0x38>)
     4e8:	189b      	adds	r3, r3, r2
     4ea:	785a      	ldrb	r2, [r3, #1]
     4ec:	428a      	cmp	r2, r1
     4ee:	d00b      	beq.n	508 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     4f0:	0143      	lsls	r3, r0, #5
     4f2:	4c06      	ldr	r4, [pc, #24]	; (50c <_usb_d_find_ep+0x38>)
     4f4:	5d1b      	ldrb	r3, [r3, r4]
     4f6:	2b00      	cmp	r3, #0
     4f8:	d1f0      	bne.n	4dc <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     4fa:	330f      	adds	r3, #15
     4fc:	400b      	ands	r3, r1
     4fe:	4293      	cmp	r3, r2
     500:	d1ec      	bne.n	4dc <_usb_d_find_ep+0x8>
     502:	e001      	b.n	508 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     504:	2001      	movs	r0, #1
     506:	4240      	negs	r0, r0
}
     508:	bd10      	pop	{r4, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	200000a8 	.word	0x200000a8

00000510 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     510:	2000      	movs	r0, #0
     512:	4770      	bx	lr

00000514 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     514:	b570      	push	{r4, r5, r6, lr}
     516:	0004      	movs	r4, r0
     518:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     51a:	4b08      	ldr	r3, [pc, #32]	; (53c <usb_d_cb_trans_more+0x28>)
     51c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     51e:	0142      	lsls	r2, r0, #5
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <usb_d_cb_trans_more+0x2c>)
     522:	189b      	adds	r3, r3, r2
     524:	789b      	ldrb	r3, [r3, #2]
     526:	2b03      	cmp	r3, #3
     528:	d001      	beq.n	52e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     52a:	2000      	movs	r0, #0
}
     52c:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     52e:	4b04      	ldr	r3, [pc, #16]	; (540 <usb_d_cb_trans_more+0x2c>)
     530:	1898      	adds	r0, r3, r2
     532:	6983      	ldr	r3, [r0, #24]
     534:	0029      	movs	r1, r5
     536:	0020      	movs	r0, r4
     538:	4798      	blx	r3
     53a:	e7f7      	b.n	52c <usb_d_cb_trans_more+0x18>
     53c:	000004d5 	.word	0x000004d5
     540:	200000a8 	.word	0x200000a8

00000544 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     544:	b5f0      	push	{r4, r5, r6, r7, lr}
     546:	b087      	sub	sp, #28
     548:	0005      	movs	r5, r0
     54a:	000f      	movs	r7, r1
     54c:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     54e:	4b4a      	ldr	r3, [pc, #296]	; (678 <_usb_d_cb_trans_done+0x134>)
     550:	4798      	blx	r3
     552:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     554:	0146      	lsls	r6, r0, #5
     556:	4a49      	ldr	r2, [pc, #292]	; (67c <_usb_d_cb_trans_done+0x138>)
     558:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
     55a:	2f00      	cmp	r7, #0
     55c:	d151      	bne.n	602 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
     55e:	0013      	movs	r3, r2
     560:	0142      	lsls	r2, r0, #5
     562:	2000      	movs	r0, #0
     564:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     566:	5cd3      	ldrb	r3, [r2, r3]
     568:	2b00      	cmp	r3, #0
     56a:	d00e      	beq.n	58a <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     56c:	0162      	lsls	r2, r4, #5
     56e:	4b43      	ldr	r3, [pc, #268]	; (67c <_usb_d_cb_trans_done+0x138>)
     570:	189b      	adds	r3, r3, r2
     572:	2201      	movs	r2, #1
     574:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     576:	0164      	lsls	r4, r4, #5
     578:	4b40      	ldr	r3, [pc, #256]	; (67c <_usb_d_cb_trans_done+0x138>)
     57a:	191c      	adds	r4, r3, r4
     57c:	69e3      	ldr	r3, [r4, #28]
     57e:	78e1      	ldrb	r1, [r4, #3]
     580:	9a01      	ldr	r2, [sp, #4]
     582:	0028      	movs	r0, r5
     584:	4798      	blx	r3
}
     586:	b007      	add	sp, #28
     588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
     58a:	78b3      	ldrb	r3, [r6, #2]
     58c:	240c      	movs	r4, #12
     58e:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
     590:	2b03      	cmp	r3, #3
     592:	d008      	beq.n	5a6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     594:	0032      	movs	r2, r6
     596:	320c      	adds	r2, #12
     598:	7870      	ldrb	r0, [r6, #1]
     59a:	2100      	movs	r1, #0
     59c:	69f3      	ldr	r3, [r6, #28]
     59e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     5a0:	2302      	movs	r3, #2
     5a2:	70b3      	strb	r3, [r6, #2]
     5a4:	e7ef      	b.n	586 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     5a6:	7870      	ldrb	r0, [r6, #1]
     5a8:	0032      	movs	r2, r6
     5aa:	320c      	adds	r2, #12
     5ac:	2101      	movs	r1, #1
     5ae:	69f3      	ldr	r3, [r6, #28]
     5b0:	4798      	blx	r3
		if (err) {
     5b2:	2800      	cmp	r0, #0
     5b4:	d010      	beq.n	5d8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     5b6:	2305      	movs	r3, #5
     5b8:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     5ba:	3b03      	subs	r3, #3
     5bc:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     5be:	2c00      	cmp	r4, #0
     5c0:	db08      	blt.n	5d4 <_usb_d_cb_trans_done+0x90>
     5c2:	7873      	ldrb	r3, [r6, #1]
     5c4:	2080      	movs	r0, #128	; 0x80
     5c6:	4240      	negs	r0, r0
     5c8:	4318      	orrs	r0, r3
     5ca:	b2c0      	uxtb	r0, r0
     5cc:	2101      	movs	r1, #1
     5ce:	4b2c      	ldr	r3, [pc, #176]	; (680 <_usb_d_cb_trans_done+0x13c>)
     5d0:	4798      	blx	r3
     5d2:	e7d8      	b.n	586 <_usb_d_cb_trans_done+0x42>
     5d4:	7870      	ldrb	r0, [r6, #1]
     5d6:	e7f9      	b.n	5cc <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     5d8:	2304      	movs	r3, #4
     5da:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     5dc:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
     5de:	2200      	movs	r2, #0
     5e0:	9203      	str	r2, [sp, #12]
     5e2:	9204      	str	r2, [sp, #16]
     5e4:	2c00      	cmp	r4, #0
     5e6:	db09      	blt.n	5fc <_usb_d_cb_trans_done+0xb8>
     5e8:	3b84      	subs	r3, #132	; 0x84
     5ea:	430b      	orrs	r3, r1
     5ec:	b2da      	uxtb	r2, r3
     5ee:	a803      	add	r0, sp, #12
     5f0:	7202      	strb	r2, [r0, #8]
     5f2:	2301      	movs	r3, #1
     5f4:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     5f6:	4b23      	ldr	r3, [pc, #140]	; (684 <_usb_d_cb_trans_done+0x140>)
     5f8:	4798      	blx	r3
     5fa:	e7c4      	b.n	586 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     5fc:	220f      	movs	r2, #15
     5fe:	400a      	ands	r2, r1
     600:	e7f5      	b.n	5ee <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
     602:	2f01      	cmp	r7, #1
     604:	d00a      	beq.n	61c <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
     606:	2f02      	cmp	r7, #2
     608:	d01d      	beq.n	646 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
     60a:	2f03      	cmp	r7, #3
     60c:	d02c      	beq.n	668 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     60e:	0142      	lsls	r2, r0, #5
     610:	4b1a      	ldr	r3, [pc, #104]	; (67c <_usb_d_cb_trans_done+0x138>)
     612:	189b      	adds	r3, r3, r2
     614:	2206      	movs	r2, #6
     616:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     618:	70da      	strb	r2, [r3, #3]
     61a:	e7ac      	b.n	576 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     61c:	4b17      	ldr	r3, [pc, #92]	; (67c <_usb_d_cb_trans_done+0x138>)
     61e:	0142      	lsls	r2, r0, #5
     620:	1899      	adds	r1, r3, r2
     622:	2002      	movs	r0, #2
     624:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     626:	5cd3      	ldrb	r3, [r2, r3]
     628:	2b00      	cmp	r3, #0
     62a:	d005      	beq.n	638 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     62c:	0162      	lsls	r2, r4, #5
     62e:	4b13      	ldr	r3, [pc, #76]	; (67c <_usb_d_cb_trans_done+0x138>)
     630:	189b      	adds	r3, r3, r2
     632:	2205      	movs	r2, #5
     634:	709a      	strb	r2, [r3, #2]
     636:	e79e      	b.n	576 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     638:	2202      	movs	r2, #2
     63a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     63c:	2100      	movs	r1, #0
     63e:	0028      	movs	r0, r5
     640:	4b0f      	ldr	r3, [pc, #60]	; (680 <_usb_d_cb_trans_done+0x13c>)
     642:	4798      	blx	r3
     644:	e797      	b.n	576 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     646:	4b0d      	ldr	r3, [pc, #52]	; (67c <_usb_d_cb_trans_done+0x138>)
     648:	0142      	lsls	r2, r0, #5
     64a:	1899      	adds	r1, r3, r2
     64c:	2004      	movs	r0, #4
     64e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     650:	5cd3      	ldrb	r3, [r2, r3]
     652:	2b00      	cmp	r3, #0
     654:	d005      	beq.n	662 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     656:	0162      	lsls	r2, r4, #5
     658:	4b08      	ldr	r3, [pc, #32]	; (67c <_usb_d_cb_trans_done+0x138>)
     65a:	189b      	adds	r3, r3, r2
     65c:	2201      	movs	r2, #1
     65e:	709a      	strb	r2, [r3, #2]
     660:	e789      	b.n	576 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     662:	2302      	movs	r3, #2
     664:	708b      	strb	r3, [r1, #2]
			return;
     666:	e78e      	b.n	586 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     668:	0142      	lsls	r2, r0, #5
     66a:	4b04      	ldr	r3, [pc, #16]	; (67c <_usb_d_cb_trans_done+0x138>)
     66c:	189b      	adds	r3, r3, r2
     66e:	2200      	movs	r2, #0
     670:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     672:	3205      	adds	r2, #5
     674:	70da      	strb	r2, [r3, #3]
     676:	e77e      	b.n	576 <_usb_d_cb_trans_done+0x32>
     678:	000004d5 	.word	0x000004d5
     67c:	200000a8 	.word	0x200000a8
     680:	00001c8d 	.word	0x00001c8d
     684:	00001e5d 	.word	0x00001e5d

00000688 <usb_d_cb_trans_setup>:
{
     688:	b5f0      	push	{r4, r5, r6, r7, lr}
     68a:	46c6      	mov	lr, r8
     68c:	b500      	push	{lr}
     68e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     690:	4b1f      	ldr	r3, [pc, #124]	; (710 <usb_d_cb_trans_setup+0x88>)
     692:	4798      	blx	r3
     694:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     696:	0143      	lsls	r3, r0, #5
     698:	3308      	adds	r3, #8
     69a:	4c1e      	ldr	r4, [pc, #120]	; (714 <usb_d_cb_trans_setup+0x8c>)
     69c:	18e4      	adds	r4, r4, r3
     69e:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     6a0:	0021      	movs	r1, r4
     6a2:	0028      	movs	r0, r5
     6a4:	4b1c      	ldr	r3, [pc, #112]	; (718 <usb_d_cb_trans_setup+0x90>)
     6a6:	4798      	blx	r3
     6a8:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     6aa:	2808      	cmp	r0, #8
     6ac:	d00c      	beq.n	6c8 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     6ae:	2101      	movs	r1, #1
     6b0:	0028      	movs	r0, r5
     6b2:	4c1a      	ldr	r4, [pc, #104]	; (71c <usb_d_cb_trans_setup+0x94>)
     6b4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     6b6:	2080      	movs	r0, #128	; 0x80
     6b8:	4240      	negs	r0, r0
     6ba:	4328      	orrs	r0, r5
     6bc:	b2c0      	uxtb	r0, r0
     6be:	2101      	movs	r1, #1
     6c0:	47a0      	blx	r4
}
     6c2:	bc04      	pop	{r2}
     6c4:	4690      	mov	r8, r2
     6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     6c8:	2100      	movs	r1, #0
     6ca:	0028      	movs	r0, r5
     6cc:	4b13      	ldr	r3, [pc, #76]	; (71c <usb_d_cb_trans_setup+0x94>)
     6ce:	4698      	mov	r8, r3
     6d0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     6d2:	2780      	movs	r7, #128	; 0x80
     6d4:	427f      	negs	r7, r7
     6d6:	432f      	orrs	r7, r5
     6d8:	b2ff      	uxtb	r7, r7
     6da:	2100      	movs	r1, #0
     6dc:	0038      	movs	r0, r7
     6de:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     6e0:	0172      	lsls	r2, r6, #5
     6e2:	4b0c      	ldr	r3, [pc, #48]	; (714 <usb_d_cb_trans_setup+0x8c>)
     6e4:	189b      	adds	r3, r3, r2
     6e6:	2201      	movs	r2, #1
     6e8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     6ea:	695b      	ldr	r3, [r3, #20]
     6ec:	0021      	movs	r1, r4
     6ee:	0028      	movs	r0, r5
     6f0:	4798      	blx	r3
     6f2:	2800      	cmp	r0, #0
     6f4:	d1e5      	bne.n	6c2 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     6f6:	0176      	lsls	r6, r6, #5
     6f8:	4b06      	ldr	r3, [pc, #24]	; (714 <usb_d_cb_trans_setup+0x8c>)
     6fa:	199e      	adds	r6, r3, r6
     6fc:	2305      	movs	r3, #5
     6fe:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     700:	2101      	movs	r1, #1
     702:	0028      	movs	r0, r5
     704:	4c05      	ldr	r4, [pc, #20]	; (71c <usb_d_cb_trans_setup+0x94>)
     706:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     708:	2101      	movs	r1, #1
     70a:	0038      	movs	r0, r7
     70c:	47a0      	blx	r4
     70e:	e7d8      	b.n	6c2 <usb_d_cb_trans_setup+0x3a>
     710:	000004d5 	.word	0x000004d5
     714:	200000a8 	.word	0x200000a8
     718:	00001de5 	.word	0x00001de5
     71c:	00001c8d 	.word	0x00001c8d

00000720 <usb_d_init>:

int32_t usb_d_init(void)
{
     720:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     722:	4b12      	ldr	r3, [pc, #72]	; (76c <usb_d_init+0x4c>)
     724:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     726:	2800      	cmp	r0, #0
     728:	db1e      	blt.n	768 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     72a:	2280      	movs	r2, #128	; 0x80
     72c:	2100      	movs	r1, #0
     72e:	4810      	ldr	r0, [pc, #64]	; (770 <usb_d_init+0x50>)
     730:	4b10      	ldr	r3, [pc, #64]	; (774 <usb_d_init+0x54>)
     732:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     734:	2200      	movs	r2, #0
     736:	e00a      	b.n	74e <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     738:	0151      	lsls	r1, r2, #5
     73a:	4b0d      	ldr	r3, [pc, #52]	; (770 <usb_d_init+0x50>)
     73c:	185b      	adds	r3, r3, r1
     73e:	21ff      	movs	r1, #255	; 0xff
     740:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     742:	490d      	ldr	r1, [pc, #52]	; (778 <usb_d_init+0x58>)
     744:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     746:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     748:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     74a:	3201      	adds	r2, #1
     74c:	b2d2      	uxtb	r2, r2
     74e:	2a03      	cmp	r2, #3
     750:	d9f2      	bls.n	738 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     752:	490a      	ldr	r1, [pc, #40]	; (77c <usb_d_init+0x5c>)
     754:	2000      	movs	r0, #0
     756:	4c0a      	ldr	r4, [pc, #40]	; (780 <usb_d_init+0x60>)
     758:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     75a:	490a      	ldr	r1, [pc, #40]	; (784 <usb_d_init+0x64>)
     75c:	2001      	movs	r0, #1
     75e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     760:	4909      	ldr	r1, [pc, #36]	; (788 <usb_d_init+0x68>)
     762:	2002      	movs	r0, #2
     764:	47a0      	blx	r4
	return ERR_NONE;
     766:	2000      	movs	r0, #0
}
     768:	bd10      	pop	{r4, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00001665 	.word	0x00001665
     770:	200000a8 	.word	0x200000a8
     774:	00003127 	.word	0x00003127
     778:	00000511 	.word	0x00000511
     77c:	00000689 	.word	0x00000689
     780:	00002059 	.word	0x00002059
     784:	00000515 	.word	0x00000515
     788:	00000545 	.word	0x00000545

0000078c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     78c:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     78e:	4b01      	ldr	r3, [pc, #4]	; (794 <usb_d_register_callback+0x8>)
     790:	4798      	blx	r3
}
     792:	bd10      	pop	{r4, pc}
     794:	00002035 	.word	0x00002035

00000798 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     798:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     79a:	4b01      	ldr	r3, [pc, #4]	; (7a0 <usb_d_enable+0x8>)
     79c:	4798      	blx	r3
}
     79e:	bd10      	pop	{r4, pc}
     7a0:	00001709 	.word	0x00001709

000007a4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     7a4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     7a6:	4b01      	ldr	r3, [pc, #4]	; (7ac <usb_d_attach+0x8>)
     7a8:	4798      	blx	r3
}
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00001759 	.word	0x00001759

000007b0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     7b0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     7b2:	4b01      	ldr	r3, [pc, #4]	; (7b8 <usb_d_set_address+0x8>)
     7b4:	4798      	blx	r3
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	00001769 	.word	0x00001769

000007bc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7be:	0005      	movs	r5, r0
     7c0:	000e      	movs	r6, r1
     7c2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     7c4:	4b0f      	ldr	r3, [pc, #60]	; (804 <usb_d_ep_init+0x48>)
     7c6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     7c8:	2800      	cmp	r0, #0
     7ca:	da14      	bge.n	7f6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     7cc:	20ff      	movs	r0, #255	; 0xff
     7ce:	4b0d      	ldr	r3, [pc, #52]	; (804 <usb_d_ep_init+0x48>)
     7d0:	4798      	blx	r3
     7d2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     7d4:	db12      	blt.n	7fc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     7d6:	003a      	movs	r2, r7
     7d8:	0031      	movs	r1, r6
     7da:	0028      	movs	r0, r5
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <usb_d_ep_init+0x4c>)
     7de:	4798      	blx	r3
	if (rc < 0) {
     7e0:	2800      	cmp	r0, #0
     7e2:	db07      	blt.n	7f4 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     7e4:	4a09      	ldr	r2, [pc, #36]	; (80c <usb_d_ep_init+0x50>)
     7e6:	0164      	lsls	r4, r4, #5
     7e8:	1913      	adds	r3, r2, r4
     7ea:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     7ec:	2303      	movs	r3, #3
     7ee:	401e      	ands	r6, r3
     7f0:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     7f2:	2000      	movs	r0, #0
}
     7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     7f6:	2014      	movs	r0, #20
     7f8:	4240      	negs	r0, r0
     7fa:	e7fb      	b.n	7f4 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     7fc:	2015      	movs	r0, #21
     7fe:	4240      	negs	r0, r0
     800:	e7f8      	b.n	7f4 <usb_d_ep_init+0x38>
     802:	46c0      	nop			; (mov r8, r8)
     804:	000004d5 	.word	0x000004d5
     808:	0000177d 	.word	0x0000177d
     80c:	200000a8 	.word	0x200000a8

00000810 <usb_d_ep0_init>:
{
     810:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     812:	b282      	uxth	r2, r0
     814:	2100      	movs	r1, #0
     816:	2000      	movs	r0, #0
     818:	4b01      	ldr	r3, [pc, #4]	; (820 <usb_d_ep0_init+0x10>)
     81a:	4798      	blx	r3
}
     81c:	bd10      	pop	{r4, pc}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	000007bd 	.word	0x000007bd

00000824 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     824:	b570      	push	{r4, r5, r6, lr}
     826:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     828:	4b06      	ldr	r3, [pc, #24]	; (844 <usb_d_ep_deinit+0x20>)
     82a:	4798      	blx	r3
     82c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     82e:	db07      	blt.n	840 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     830:	0028      	movs	r0, r5
     832:	4b05      	ldr	r3, [pc, #20]	; (848 <usb_d_ep_deinit+0x24>)
     834:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     836:	0164      	lsls	r4, r4, #5
     838:	4b04      	ldr	r3, [pc, #16]	; (84c <usb_d_ep_deinit+0x28>)
     83a:	191c      	adds	r4, r3, r4
     83c:	23ff      	movs	r3, #255	; 0xff
     83e:	7063      	strb	r3, [r4, #1]
}
     840:	bd70      	pop	{r4, r5, r6, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	000004d5 	.word	0x000004d5
     848:	000018c9 	.word	0x000018c9
     84c:	200000a8 	.word	0x200000a8

00000850 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     850:	b570      	push	{r4, r5, r6, lr}
     852:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     854:	4b0f      	ldr	r3, [pc, #60]	; (894 <usb_d_ep_enable+0x44>)
     856:	4798      	blx	r3
     858:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     85a:	db17      	blt.n	88c <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     85c:	0143      	lsls	r3, r0, #5
     85e:	4a0e      	ldr	r2, [pc, #56]	; (898 <usb_d_ep_enable+0x48>)
     860:	5c9b      	ldrb	r3, [r3, r2]
     862:	2b00      	cmp	r3, #0
     864:	d10a      	bne.n	87c <usb_d_ep_enable+0x2c>
     866:	2102      	movs	r1, #2
     868:	0162      	lsls	r2, r4, #5
     86a:	4b0b      	ldr	r3, [pc, #44]	; (898 <usb_d_ep_enable+0x48>)
     86c:	189b      	adds	r3, r3, r2
     86e:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     870:	0028      	movs	r0, r5
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <usb_d_ep_enable+0x4c>)
     874:	4798      	blx	r3
	if (rc < 0) {
     876:	2800      	cmp	r0, #0
     878:	db02      	blt.n	880 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     87a:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     87c:	2101      	movs	r1, #1
     87e:	e7f3      	b.n	868 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     880:	0164      	lsls	r4, r4, #5
     882:	4b05      	ldr	r3, [pc, #20]	; (898 <usb_d_ep_enable+0x48>)
     884:	191c      	adds	r4, r3, r4
     886:	2300      	movs	r3, #0
     888:	70a3      	strb	r3, [r4, #2]
     88a:	e7f6      	b.n	87a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     88c:	2012      	movs	r0, #18
     88e:	4240      	negs	r0, r0
     890:	e7f3      	b.n	87a <usb_d_ep_enable+0x2a>
     892:	46c0      	nop			; (mov r8, r8)
     894:	000004d5 	.word	0x000004d5
     898:	200000a8 	.word	0x200000a8
     89c:	0000198d 	.word	0x0000198d

000008a0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8a2:	46d6      	mov	lr, sl
     8a4:	464f      	mov	r7, r9
     8a6:	4646      	mov	r6, r8
     8a8:	b5c0      	push	{r6, r7, lr}
     8aa:	b086      	sub	sp, #24
     8ac:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     8ae:	7a06      	ldrb	r6, [r0, #8]
     8b0:	0030      	movs	r0, r6
     8b2:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <usb_d_ep_transfer+0x110>)
     8b4:	4798      	blx	r3
     8b6:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     8b8:	09f6      	lsrs	r6, r6, #7
     8ba:	7a6b      	ldrb	r3, [r5, #9]
     8bc:	1e5a      	subs	r2, r3, #1
     8be:	4193      	sbcs	r3, r2
     8c0:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
     8c2:	686b      	ldr	r3, [r5, #4]
     8c4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     8c6:	2800      	cmp	r0, #0
     8c8:	db6b      	blt.n	9a2 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     8ca:	a804      	add	r0, sp, #16
     8cc:	4b39      	ldr	r3, [pc, #228]	; (9b4 <usb_d_ep_transfer+0x114>)
     8ce:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     8d0:	017a      	lsls	r2, r7, #5
     8d2:	4b39      	ldr	r3, [pc, #228]	; (9b8 <usb_d_ep_transfer+0x118>)
     8d4:	189b      	adds	r3, r3, r2
     8d6:	789a      	ldrb	r2, [r3, #2]
     8d8:	2317      	movs	r3, #23
     8da:	446b      	add	r3, sp
     8dc:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     8de:	781b      	ldrb	r3, [r3, #0]
     8e0:	2b01      	cmp	r3, #1
     8e2:	d00e      	beq.n	902 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     8e4:	a804      	add	r0, sp, #16
     8e6:	4b35      	ldr	r3, [pc, #212]	; (9bc <usb_d_ep_transfer+0x11c>)
     8e8:	4798      	blx	r3
		switch (state) {
     8ea:	2317      	movs	r3, #23
     8ec:	446b      	add	r3, sp
     8ee:	781b      	ldrb	r3, [r3, #0]
     8f0:	b2db      	uxtb	r3, r3
     8f2:	2b05      	cmp	r3, #5
     8f4:	d02b      	beq.n	94e <usb_d_ep_transfer+0xae>
     8f6:	2b06      	cmp	r3, #6
     8f8:	d056      	beq.n	9a8 <usb_d_ep_transfer+0x108>
     8fa:	2b00      	cmp	r3, #0
     8fc:	d029      	beq.n	952 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     8fe:	2001      	movs	r0, #1
     900:	e01f      	b.n	942 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     902:	4b2d      	ldr	r3, [pc, #180]	; (9b8 <usb_d_ep_transfer+0x118>)
     904:	4699      	mov	r9, r3
     906:	017b      	lsls	r3, r7, #5
     908:	469a      	mov	sl, r3
     90a:	464b      	mov	r3, r9
     90c:	4453      	add	r3, sl
     90e:	2203      	movs	r2, #3
     910:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     912:	a804      	add	r0, sp, #16
     914:	4b29      	ldr	r3, [pc, #164]	; (9bc <usb_d_ep_transfer+0x11c>)
     916:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     918:	464b      	mov	r3, r9
     91a:	4652      	mov	r2, sl
     91c:	5cd3      	ldrb	r3, [r2, r3]
     91e:	2b00      	cmp	r3, #0
     920:	d01a      	beq.n	958 <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     922:	7a29      	ldrb	r1, [r5, #8]
     924:	682b      	ldr	r3, [r5, #0]
     926:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
     928:	4643      	mov	r3, r8
     92a:	9302      	str	r3, [sp, #8]
     92c:	2e00      	cmp	r6, #0
     92e:	d035      	beq.n	99c <usb_d_ep_transfer+0xfc>
     930:	2280      	movs	r2, #128	; 0x80
     932:	4252      	negs	r2, r2
     934:	430a      	orrs	r2, r1
     936:	b2d2      	uxtb	r2, r2
     938:	a801      	add	r0, sp, #4
     93a:	7202      	strb	r2, [r0, #8]
     93c:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     93e:	4b20      	ldr	r3, [pc, #128]	; (9c0 <usb_d_ep_transfer+0x120>)
     940:	4798      	blx	r3
	return rc;
}
     942:	b006      	add	sp, #24
     944:	bc1c      	pop	{r2, r3, r4}
     946:	4690      	mov	r8, r2
     948:	4699      	mov	r9, r3
     94a:	46a2      	mov	sl, r4
     94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
     94e:	2002      	movs	r0, #2
     950:	e7f7      	b.n	942 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
     952:	2013      	movs	r0, #19
     954:	4240      	negs	r0, r0
     956:	e7f4      	b.n	942 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     958:	017b      	lsls	r3, r7, #5
     95a:	4a17      	ldr	r2, [pc, #92]	; (9b8 <usb_d_ep_transfer+0x118>)
     95c:	18d2      	adds	r2, r2, r3
     95e:	7c93      	ldrb	r3, [r2, #18]
     960:	7cd4      	ldrb	r4, [r2, #19]
     962:	0224      	lsls	r4, r4, #8
     964:	191b      	adds	r3, r3, r4
     966:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     968:	2b00      	cmp	r3, #0
     96a:	d106      	bne.n	97a <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     96c:	2304      	movs	r3, #4
     96e:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     970:	2300      	movs	r3, #0
     972:	4698      	mov	r8, r3
			zlp                 = true;
     974:	2401      	movs	r4, #1
			dir                 = true;
     976:	2601      	movs	r6, #1
     978:	e7d3      	b.n	922 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     97a:	017f      	lsls	r7, r7, #5
     97c:	4a0e      	ldr	r2, [pc, #56]	; (9b8 <usb_d_ep_transfer+0x118>)
     97e:	19d7      	adds	r7, r2, r7
     980:	220c      	movs	r2, #12
     982:	56ba      	ldrsb	r2, [r7, r2]
     984:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
     986:	4598      	cmp	r8, r3
     988:	d900      	bls.n	98c <usb_d_ep_transfer+0xec>
				len = req_len;
     98a:	4698      	mov	r8, r3
			if (dir) {
     98c:	2a00      	cmp	r2, #0
     98e:	db01      	blt.n	994 <usb_d_ep_transfer+0xf4>
				zlp = false;
     990:	2400      	movs	r4, #0
     992:	e7c6      	b.n	922 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
     994:	4598      	cmp	r8, r3
     996:	419b      	sbcs	r3, r3
     998:	425c      	negs	r4, r3
     99a:	e7c2      	b.n	922 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
     99c:	220f      	movs	r2, #15
     99e:	400a      	ands	r2, r1
     9a0:	e7ca      	b.n	938 <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
     9a2:	2012      	movs	r0, #18
     9a4:	4240      	negs	r0, r0
     9a6:	e7cc      	b.n	942 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
     9a8:	2010      	movs	r0, #16
     9aa:	4240      	negs	r0, r0
     9ac:	e7c9      	b.n	942 <usb_d_ep_transfer+0xa2>
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	000004d5 	.word	0x000004d5
     9b4:	00000421 	.word	0x00000421
     9b8:	200000a8 	.word	0x200000a8
     9bc:	0000042f 	.word	0x0000042f
     9c0:	00001e5d 	.word	0x00001e5d

000009c4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     9c8:	2900      	cmp	r1, #0
     9ca:	d005      	beq.n	9d8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     9cc:	2901      	cmp	r1, #1
     9ce:	d024      	beq.n	a1a <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     9d0:	2102      	movs	r1, #2
     9d2:	4b13      	ldr	r3, [pc, #76]	; (a20 <usb_d_ep_halt+0x5c>)
     9d4:	4798      	blx	r3
	}
}
     9d6:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     9d8:	4b12      	ldr	r3, [pc, #72]	; (a24 <usb_d_ep_halt+0x60>)
     9da:	4798      	blx	r3
     9dc:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     9de:	db19      	blt.n	a14 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     9e0:	2102      	movs	r1, #2
     9e2:	0020      	movs	r0, r4
     9e4:	4b0e      	ldr	r3, [pc, #56]	; (a20 <usb_d_ep_halt+0x5c>)
     9e6:	4798      	blx	r3
     9e8:	2800      	cmp	r0, #0
     9ea:	d0f4      	beq.n	9d6 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     9ec:	2100      	movs	r1, #0
     9ee:	0020      	movs	r0, r4
     9f0:	4b0b      	ldr	r3, [pc, #44]	; (a20 <usb_d_ep_halt+0x5c>)
     9f2:	4798      	blx	r3
		if (rc < 0) {
     9f4:	2800      	cmp	r0, #0
     9f6:	dbee      	blt.n	9d6 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     9f8:	016d      	lsls	r5, r5, #5
     9fa:	4b0b      	ldr	r3, [pc, #44]	; (a28 <usb_d_ep_halt+0x64>)
     9fc:	195d      	adds	r5, r3, r5
     9fe:	2301      	movs	r3, #1
     a00:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     a02:	3302      	adds	r3, #2
     a04:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     a06:	69eb      	ldr	r3, [r5, #28]
     a08:	2200      	movs	r2, #0
     a0a:	2103      	movs	r1, #3
     a0c:	0020      	movs	r0, r4
     a0e:	4798      	blx	r3
	return ERR_NONE;
     a10:	2000      	movs	r0, #0
     a12:	e7e0      	b.n	9d6 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     a14:	2012      	movs	r0, #18
     a16:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
     a18:	e7dd      	b.n	9d6 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     a1a:	4b01      	ldr	r3, [pc, #4]	; (a20 <usb_d_ep_halt+0x5c>)
     a1c:	4798      	blx	r3
     a1e:	e7da      	b.n	9d6 <usb_d_ep_halt+0x12>
     a20:	00001c8d 	.word	0x00001c8d
     a24:	000004d5 	.word	0x000004d5
     a28:	200000a8 	.word	0x200000a8

00000a2c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     a2c:	b570      	push	{r4, r5, r6, lr}
     a2e:	000d      	movs	r5, r1
     a30:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     a32:	4b0f      	ldr	r3, [pc, #60]	; (a70 <usb_d_ep_register_callback+0x44>)
     a34:	4798      	blx	r3
     a36:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     a38:	2c00      	cmp	r4, #0
     a3a:	d008      	beq.n	a4e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     a3c:	2b00      	cmp	r3, #0
     a3e:	db05      	blt.n	a4c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     a40:	2d01      	cmp	r5, #1
     a42:	d00b      	beq.n	a5c <usb_d_ep_register_callback+0x30>
     a44:	2d00      	cmp	r5, #0
     a46:	d004      	beq.n	a52 <usb_d_ep_register_callback+0x26>
     a48:	2d02      	cmp	r5, #2
     a4a:	d00c      	beq.n	a66 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     a4c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     a4e:	4c09      	ldr	r4, [pc, #36]	; (a74 <usb_d_ep_register_callback+0x48>)
     a50:	e7f4      	b.n	a3c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     a52:	0140      	lsls	r0, r0, #5
     a54:	4b08      	ldr	r3, [pc, #32]	; (a78 <usb_d_ep_register_callback+0x4c>)
     a56:	1818      	adds	r0, r3, r0
     a58:	6144      	str	r4, [r0, #20]
		break;
     a5a:	e7f7      	b.n	a4c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     a5c:	0140      	lsls	r0, r0, #5
     a5e:	4b06      	ldr	r3, [pc, #24]	; (a78 <usb_d_ep_register_callback+0x4c>)
     a60:	1818      	adds	r0, r3, r0
     a62:	6184      	str	r4, [r0, #24]
		break;
     a64:	e7f2      	b.n	a4c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     a66:	0140      	lsls	r0, r0, #5
     a68:	4b03      	ldr	r3, [pc, #12]	; (a78 <usb_d_ep_register_callback+0x4c>)
     a6a:	1818      	adds	r0, r3, r0
     a6c:	61c4      	str	r4, [r0, #28]
		break;
     a6e:	e7ed      	b.n	a4c <usb_d_ep_register_callback+0x20>
     a70:	000004d5 	.word	0x000004d5
     a74:	00000511 	.word	0x00000511
     a78:	200000a8 	.word	0x200000a8

00000a7c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a7c:	2800      	cmp	r0, #0
     a7e:	d100      	bne.n	a82 <assert+0x6>
		__asm("BKPT #0");
     a80:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a82:	4770      	bx	lr

00000a84 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a84:	6803      	ldr	r3, [r0, #0]
     a86:	2b00      	cmp	r3, #0
     a88:	d003      	beq.n	a92 <is_list_element+0xe>
		if (it == element) {
     a8a:	428b      	cmp	r3, r1
     a8c:	d003      	beq.n	a96 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     a8e:	681b      	ldr	r3, [r3, #0]
     a90:	e7f9      	b.n	a86 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     a92:	2000      	movs	r0, #0
}
     a94:	4770      	bx	lr
			return true;
     a96:	2001      	movs	r0, #1
     a98:	e7fc      	b.n	a94 <is_list_element+0x10>
	...

00000a9c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     a9c:	b570      	push	{r4, r5, r6, lr}
     a9e:	0005      	movs	r5, r0
     aa0:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     aa2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     aa4:	4b0a      	ldr	r3, [pc, #40]	; (ad0 <list_insert_at_end+0x34>)
     aa6:	4798      	blx	r3
     aa8:	2301      	movs	r3, #1
     aaa:	4058      	eors	r0, r3
     aac:	b2c0      	uxtb	r0, r0
     aae:	224f      	movs	r2, #79	; 0x4f
     ab0:	4908      	ldr	r1, [pc, #32]	; (ad4 <list_insert_at_end+0x38>)
     ab2:	4b09      	ldr	r3, [pc, #36]	; (ad8 <list_insert_at_end+0x3c>)
     ab4:	4798      	blx	r3

	if (!list->head) {
     ab6:	682b      	ldr	r3, [r5, #0]
     ab8:	2b00      	cmp	r3, #0
     aba:	d103      	bne.n	ac4 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     abc:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     abe:	6033      	str	r3, [r6, #0]
		return;
     ac0:	e005      	b.n	ace <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     ac2:	001c      	movs	r4, r3
	while (it->next) {
     ac4:	6823      	ldr	r3, [r4, #0]
     ac6:	2b00      	cmp	r3, #0
     ac8:	d1fb      	bne.n	ac2 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     aca:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     acc:	6033      	str	r3, [r6, #0]
}
     ace:	bd70      	pop	{r4, r5, r6, pc}
     ad0:	00000a85 	.word	0x00000a85
     ad4:	00003144 	.word	0x00003144
     ad8:	00000a7d 	.word	0x00000a7d

00000adc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     adc:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     ade:	0103      	lsls	r3, r0, #4
     ae0:	1a1b      	subs	r3, r3, r0
     ae2:	0158      	lsls	r0, r3, #5
     ae4:	3002      	adds	r0, #2
     ae6:	2103      	movs	r1, #3
     ae8:	4b02      	ldr	r3, [pc, #8]	; (af4 <_get_cycles_for_ms+0x18>)
     aea:	4798      	blx	r3
     aec:	2364      	movs	r3, #100	; 0x64
     aee:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     af0:	bd10      	pop	{r4, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	00002f61 	.word	0x00002f61

00000af8 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     af8:	3901      	subs	r1, #1
     afa:	d8fd      	bhi.n	af8 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     afc:	4770      	bx	lr
	...

00000b00 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     b00:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     b02:	4a07      	ldr	r2, [pc, #28]	; (b20 <_init_chip+0x20>)
     b04:	6853      	ldr	r3, [r2, #4]
     b06:	2102      	movs	r1, #2
     b08:	430b      	orrs	r3, r1
     b0a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <_init_chip+0x24>)
     b0e:	4798      	blx	r3
	_sysctrl_init_sources();
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <_init_chip+0x28>)
     b12:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     b14:	4b05      	ldr	r3, [pc, #20]	; (b2c <_init_chip+0x2c>)
     b16:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b18:	20ff      	movs	r0, #255	; 0xff
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <_init_chip+0x30>)
     b1c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     b1e:	bd10      	pop	{r4, pc}
     b20:	41004000 	.word	0x41004000
     b24:	00000ccd 	.word	0x00000ccd
     b28:	00000ced 	.word	0x00000ced
     b2c:	00000d19 	.word	0x00000d19
     b30:	00000c8d 	.word	0x00000c8d

00000b34 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b34:	4b22      	ldr	r3, [pc, #136]	; (bc0 <_ext_irq_init+0x8c>)
     b36:	785b      	ldrb	r3, [r3, #1]
     b38:	09db      	lsrs	r3, r3, #7
     b3a:	d1fb      	bne.n	b34 <_ext_irq_init>
     b3c:	4b20      	ldr	r3, [pc, #128]	; (bc0 <_ext_irq_init+0x8c>)
     b3e:	785b      	ldrb	r3, [r3, #1]
     b40:	09db      	lsrs	r3, r3, #7
     b42:	d1fb      	bne.n	b3c <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     b44:	4b1e      	ldr	r3, [pc, #120]	; (bc0 <_ext_irq_init+0x8c>)
     b46:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     b48:	079b      	lsls	r3, r3, #30
     b4a:	d50a      	bpl.n	b62 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     b4c:	2200      	movs	r2, #0
     b4e:	4b1c      	ldr	r3, [pc, #112]	; (bc0 <_ext_irq_init+0x8c>)
     b50:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b52:	4b1b      	ldr	r3, [pc, #108]	; (bc0 <_ext_irq_init+0x8c>)
     b54:	785b      	ldrb	r3, [r3, #1]
     b56:	09db      	lsrs	r3, r3, #7
     b58:	d1fb      	bne.n	b52 <_ext_irq_init+0x1e>
     b5a:	4b19      	ldr	r3, [pc, #100]	; (bc0 <_ext_irq_init+0x8c>)
     b5c:	785b      	ldrb	r3, [r3, #1]
     b5e:	09db      	lsrs	r3, r3, #7
     b60:	d1fb      	bne.n	b5a <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     b62:	2201      	movs	r2, #1
     b64:	4b16      	ldr	r3, [pc, #88]	; (bc0 <_ext_irq_init+0x8c>)
     b66:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b68:	4b15      	ldr	r3, [pc, #84]	; (bc0 <_ext_irq_init+0x8c>)
     b6a:	785b      	ldrb	r3, [r3, #1]
     b6c:	09db      	lsrs	r3, r3, #7
     b6e:	d1fb      	bne.n	b68 <_ext_irq_init+0x34>
     b70:	4b13      	ldr	r3, [pc, #76]	; (bc0 <_ext_irq_init+0x8c>)
     b72:	785b      	ldrb	r3, [r3, #1]
     b74:	09db      	lsrs	r3, r3, #7
     b76:	d1fb      	bne.n	b70 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     b78:	4b11      	ldr	r3, [pc, #68]	; (bc0 <_ext_irq_init+0x8c>)
     b7a:	2200      	movs	r2, #0
     b7c:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     b7e:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     b80:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     b82:	4a10      	ldr	r2, [pc, #64]	; (bc4 <_ext_irq_init+0x90>)
     b84:	619a      	str	r2, [r3, #24]
     b86:	2288      	movs	r2, #136	; 0x88
     b88:	0092      	lsls	r2, r2, #2
     b8a:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     b8c:	781a      	ldrb	r2, [r3, #0]
     b8e:	2102      	movs	r1, #2
     b90:	430a      	orrs	r2, r1
     b92:	b2d2      	uxtb	r2, r2
     b94:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b96:	4b0a      	ldr	r3, [pc, #40]	; (bc0 <_ext_irq_init+0x8c>)
     b98:	785b      	ldrb	r3, [r3, #1]
     b9a:	09db      	lsrs	r3, r3, #7
     b9c:	d1fb      	bne.n	b96 <_ext_irq_init+0x62>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b9e:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <_ext_irq_init+0x94>)
     ba0:	2210      	movs	r2, #16
     ba2:	2180      	movs	r1, #128	; 0x80
     ba4:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     baa:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bae:	3101      	adds	r1, #1
     bb0:	31ff      	adds	r1, #255	; 0xff
     bb2:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bb4:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     bb6:	4b05      	ldr	r3, [pc, #20]	; (bcc <_ext_irq_init+0x98>)
     bb8:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     bba:	2000      	movs	r0, #0
     bbc:	4770      	bx	lr
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	40001800 	.word	0x40001800
     bc4:	02002000 	.word	0x02002000
     bc8:	e000e100 	.word	0xe000e100
     bcc:	20000128 	.word	0x20000128

00000bd0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd2:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     bd4:	4b27      	ldr	r3, [pc, #156]	; (c74 <EIC_Handler+0xa4>)
     bd6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     bd8:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     bda:	400a      	ands	r2, r1
     bdc:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     bde:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     be0:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     be2:	4b25      	ldr	r3, [pc, #148]	; (c78 <EIC_Handler+0xa8>)
     be4:	6818      	ldr	r0, [r3, #0]
     be6:	1e43      	subs	r3, r0, #1
     be8:	4198      	sbcs	r0, r3
     bea:	b2c0      	uxtb	r0, r0
     bec:	22d2      	movs	r2, #210	; 0xd2
     bee:	4923      	ldr	r1, [pc, #140]	; (c7c <EIC_Handler+0xac>)
     bf0:	4b23      	ldr	r3, [pc, #140]	; (c80 <EIC_Handler+0xb0>)
     bf2:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     bf4:	2501      	movs	r5, #1
     bf6:	426d      	negs	r5, r5

	while (flags) {
     bf8:	e031      	b.n	c5e <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
     bfa:	00db      	lsls	r3, r3, #3
     bfc:	4a21      	ldr	r2, [pc, #132]	; (c84 <EIC_Handler+0xb4>)
     bfe:	18d3      	adds	r3, r2, r3
     c00:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     c02:	1c6b      	adds	r3, r5, #1
     c04:	d003      	beq.n	c0e <EIC_Handler+0x3e>
				callback(pin);
     c06:	4b1c      	ldr	r3, [pc, #112]	; (c78 <EIC_Handler+0xa8>)
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	0028      	movs	r0, r5
     c0c:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     c0e:	2201      	movs	r2, #1
     c10:	40a2      	lsls	r2, r4
     c12:	9b01      	ldr	r3, [sp, #4]
     c14:	4393      	bics	r3, r2
     c16:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     c18:	9801      	ldr	r0, [sp, #4]
     c1a:	4b1b      	ldr	r3, [pc, #108]	; (c88 <EIC_Handler+0xb8>)
     c1c:	4798      	blx	r3
     c1e:	3801      	subs	r0, #1
     c20:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     c22:	1c63      	adds	r3, r4, #1
     c24:	d014      	beq.n	c50 <EIC_Handler+0x80>
     c26:	2604      	movs	r6, #4
     c28:	2000      	movs	r0, #0
     c2a:	e001      	b.n	c30 <EIC_Handler+0x60>
					upper = middle - 1;
     c2c:	3901      	subs	r1, #1
     c2e:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     c30:	42b0      	cmp	r0, r6
     c32:	d8e6      	bhi.n	c02 <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
     c34:	1833      	adds	r3, r6, r0
     c36:	105b      	asrs	r3, r3, #1
     c38:	b2d9      	uxtb	r1, r3
     c3a:	22ff      	movs	r2, #255	; 0xff
     c3c:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
     c3e:	00df      	lsls	r7, r3, #3
     c40:	4a10      	ldr	r2, [pc, #64]	; (c84 <EIC_Handler+0xb4>)
     c42:	5cba      	ldrb	r2, [r7, r2]
     c44:	42a2      	cmp	r2, r4
     c46:	d0d8      	beq.n	bfa <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
     c48:	daf0      	bge.n	c2c <EIC_Handler+0x5c>
					lower = middle + 1;
     c4a:	3101      	adds	r1, #1
     c4c:	b2c8      	uxtb	r0, r1
     c4e:	e7ef      	b.n	c30 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
     c50:	4b08      	ldr	r3, [pc, #32]	; (c74 <EIC_Handler+0xa4>)
     c52:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     c54:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     c56:	400a      	ands	r2, r1
     c58:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     c5a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     c5c:	611a      	str	r2, [r3, #16]
	while (flags) {
     c5e:	9b01      	ldr	r3, [sp, #4]
     c60:	2b00      	cmp	r3, #0
     c62:	d005      	beq.n	c70 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
     c64:	9801      	ldr	r0, [sp, #4]
     c66:	4b08      	ldr	r3, [pc, #32]	; (c88 <EIC_Handler+0xb8>)
     c68:	4798      	blx	r3
     c6a:	3801      	subs	r0, #1
     c6c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     c6e:	e7d8      	b.n	c22 <EIC_Handler+0x52>
	}
}
     c70:	b003      	add	sp, #12
     c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c74:	40001800 	.word	0x40001800
     c78:	20000128 	.word	0x20000128
     c7c:	00003184 	.word	0x00003184
     c80:	00000a7d 	.word	0x00000a7d
     c84:	00003164 	.word	0x00003164
     c88:	00003079 	.word	0x00003079

00000c8c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     c8c:	07c3      	lsls	r3, r0, #31
     c8e:	d509      	bpl.n	ca4 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     c90:	4b0b      	ldr	r3, [pc, #44]	; (cc0 <_gclk_init_generators_by_fref+0x34>)
     c92:	2280      	movs	r2, #128	; 0x80
     c94:	0052      	lsls	r2, r2, #1
     c96:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c98:	4a0a      	ldr	r2, [pc, #40]	; (cc4 <_gclk_init_generators_by_fref+0x38>)
     c9a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c9c:	4b08      	ldr	r3, [pc, #32]	; (cc0 <_gclk_init_generators_by_fref+0x34>)
     c9e:	785b      	ldrb	r3, [r3, #1]
     ca0:	09db      	lsrs	r3, r3, #7
     ca2:	d1fb      	bne.n	c9c <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     ca4:	0703      	lsls	r3, r0, #28
     ca6:	d509      	bpl.n	cbc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     ca8:	4b05      	ldr	r3, [pc, #20]	; (cc0 <_gclk_init_generators_by_fref+0x34>)
     caa:	2204      	movs	r2, #4
     cac:	32ff      	adds	r2, #255	; 0xff
     cae:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     cb0:	4a05      	ldr	r2, [pc, #20]	; (cc8 <_gclk_init_generators_by_fref+0x3c>)
     cb2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     cb4:	4b02      	ldr	r3, [pc, #8]	; (cc0 <_gclk_init_generators_by_fref+0x34>)
     cb6:	785b      	ldrb	r3, [r3, #1]
     cb8:	09db      	lsrs	r3, r3, #7
     cba:	d1fb      	bne.n	cb4 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     cbc:	4770      	bx	lr
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	40000c00 	.word	0x40000c00
     cc4:	00210700 	.word	0x00210700
     cc8:	00210403 	.word	0x00210403

00000ccc <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     ccc:	4b06      	ldr	r3, [pc, #24]	; (ce8 <_pm_init+0x1c>)
     cce:	7a1a      	ldrb	r2, [r3, #8]
     cd0:	b2d2      	uxtb	r2, r2
     cd2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     cd4:	7a5a      	ldrb	r2, [r3, #9]
     cd6:	b2d2      	uxtb	r2, r2
     cd8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     cda:	7a9a      	ldrb	r2, [r3, #10]
     cdc:	b2d2      	uxtb	r2, r2
     cde:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     ce0:	7ada      	ldrb	r2, [r3, #11]
     ce2:	b2d2      	uxtb	r2, r2
     ce4:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     ce6:	4770      	bx	lr
     ce8:	40000400 	.word	0x40000400

00000cec <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     cec:	4a09      	ldr	r2, [pc, #36]	; (d14 <_sysctrl_init_sources+0x28>)
     cee:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
     cf0:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     cf2:	041b      	lsls	r3, r3, #16
     cf4:	21fe      	movs	r1, #254	; 0xfe
     cf6:	03c9      	lsls	r1, r1, #15
     cf8:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     cfa:	2146      	movs	r1, #70	; 0x46
     cfc:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     cfe:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     d00:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     d02:	3927      	subs	r1, #39	; 0x27
     d04:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     d06:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <_sysctrl_init_sources+0x28>)
     d0a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     d0c:	075b      	lsls	r3, r3, #29
     d0e:	d5fb      	bpl.n	d08 <_sysctrl_init_sources+0x1c>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     d10:	4770      	bx	lr
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	40000800 	.word	0x40000800

00000d18 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     d18:	2202      	movs	r2, #2
     d1a:	4b15      	ldr	r3, [pc, #84]	; (d70 <_sysctrl_init_referenced_generators+0x58>)
     d1c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     d1e:	4b14      	ldr	r3, [pc, #80]	; (d70 <_sysctrl_init_referenced_generators+0x58>)
     d20:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     d22:	06db      	lsls	r3, r3, #27
     d24:	d5fb      	bpl.n	d1e <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     d26:	4a13      	ldr	r2, [pc, #76]	; (d74 <_sysctrl_init_referenced_generators+0x5c>)
     d28:	4b11      	ldr	r3, [pc, #68]	; (d70 <_sysctrl_init_referenced_generators+0x58>)
     d2a:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     d2c:	4b12      	ldr	r3, [pc, #72]	; (d78 <_sysctrl_init_referenced_generators+0x60>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	0e9b      	lsrs	r3, r3, #26
     d32:	2b3f      	cmp	r3, #63	; 0x3f
     d34:	d014      	beq.n	d60 <_sysctrl_init_referenced_generators+0x48>
     d36:	029b      	lsls	r3, r3, #10
     d38:	2280      	movs	r2, #128	; 0x80
     d3a:	0092      	lsls	r2, r2, #2
     d3c:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     d3e:	4a0c      	ldr	r2, [pc, #48]	; (d70 <_sysctrl_init_referenced_generators+0x58>)
     d40:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     d42:	23b1      	movs	r3, #177	; 0xb1
     d44:	005b      	lsls	r3, r3, #1
     d46:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     d48:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     d4a:	075b      	lsls	r3, r3, #29
     d4c:	d50b      	bpl.n	d66 <_sysctrl_init_referenced_generators+0x4e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     d4e:	4b08      	ldr	r3, [pc, #32]	; (d70 <_sysctrl_init_referenced_generators+0x58>)
     d50:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     d52:	06db      	lsls	r3, r3, #27
     d54:	d5fb      	bpl.n	d4e <_sysctrl_init_referenced_generators+0x36>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     d56:	4b09      	ldr	r3, [pc, #36]	; (d7c <_sysctrl_init_referenced_generators+0x64>)
     d58:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     d5a:	09db      	lsrs	r3, r3, #7
     d5c:	d1fb      	bne.n	d56 <_sysctrl_init_referenced_generators+0x3e>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     d5e:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     d60:	23fc      	movs	r3, #252	; 0xfc
     d62:	01db      	lsls	r3, r3, #7
     d64:	e7eb      	b.n	d3e <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <_sysctrl_init_referenced_generators+0x58>)
     d68:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     d6a:	06db      	lsls	r3, r3, #27
     d6c:	d5fb      	bpl.n	d66 <_sysctrl_init_referenced_generators+0x4e>
     d6e:	e7f2      	b.n	d56 <_sysctrl_init_referenced_generators+0x3e>
     d70:	40000800 	.word	0x40000800
     d74:	04010000 	.word	0x04010000
     d78:	00806024 	.word	0x00806024
     d7c:	40000c00 	.word	0x40000c00

00000d80 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     d80:	2000      	movs	r0, #0
     d82:	4770      	bx	lr

00000d84 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
     d84:	4b12      	ldr	r3, [pc, #72]	; (dd0 <_usb_load_calib+0x4c>)
     d86:	681a      	ldr	r2, [r3, #0]
     d88:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
     d8a:	211f      	movs	r1, #31
     d8c:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
     d8e:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
     d90:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
     d92:	0dd0      	lsrs	r0, r2, #23
     d94:	2207      	movs	r2, #7
     d96:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
     d98:	2b1f      	cmp	r3, #31
     d9a:	d012      	beq.n	dc2 <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
     d9c:	291f      	cmp	r1, #31
     d9e:	d012      	beq.n	dc6 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
     da0:	2a07      	cmp	r2, #7
     da2:	d012      	beq.n	dca <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
     da4:	019b      	lsls	r3, r3, #6
     da6:	430b      	orrs	r3, r1
     da8:	0312      	lsls	r2, r2, #12
     daa:	4313      	orrs	r3, r2
     dac:	4a09      	ldr	r2, [pc, #36]	; (dd4 <_usb_load_calib+0x50>)
     dae:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
     db0:	78d3      	ldrb	r3, [r2, #3]
     db2:	2103      	movs	r1, #3
     db4:	430b      	orrs	r3, r1
     db6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
     db8:	78d3      	ldrb	r3, [r2, #3]
     dba:	210c      	movs	r1, #12
     dbc:	430b      	orrs	r3, r1
     dbe:	70d3      	strb	r3, [r2, #3]
}
     dc0:	4770      	bx	lr
		pad_transn = 5;
     dc2:	3b1a      	subs	r3, #26
     dc4:	e7ea      	b.n	d9c <_usb_load_calib+0x18>
		pad_transp = 29;
     dc6:	3902      	subs	r1, #2
     dc8:	e7ea      	b.n	da0 <_usb_load_calib+0x1c>
		pad_trim = 5;
     dca:	3a02      	subs	r2, #2
     dcc:	e7ea      	b.n	da4 <_usb_load_calib+0x20>
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00806024 	.word	0x00806024
     dd4:	41005000 	.word	0x41005000

00000dd8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     dd8:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     dda:	7c83      	ldrb	r3, [r0, #18]
     ddc:	220f      	movs	r2, #15
     dde:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     de0:	7cc1      	ldrb	r1, [r0, #19]
     de2:	3a08      	subs	r2, #8
     de4:	400a      	ands	r2, r1

	if (!is_ctrl) {
     de6:	2a01      	cmp	r2, #1
     de8:	d00d      	beq.n	e06 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     dea:	001a      	movs	r2, r3
     dec:	3208      	adds	r2, #8
     dee:	0152      	lsls	r2, r2, #5
     df0:	4919      	ldr	r1, [pc, #100]	; (e58 <_usb_d_dev_handle_setup+0x80>)
     df2:	468c      	mov	ip, r1
     df4:	4462      	add	r2, ip
     df6:	2110      	movs	r1, #16
     df8:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     dfa:	015b      	lsls	r3, r3, #5
     dfc:	4a17      	ldr	r2, [pc, #92]	; (e5c <_usb_d_dev_handle_setup+0x84>)
     dfe:	4694      	mov	ip, r2
     e00:	4463      	add	r3, ip
     e02:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     e04:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     e06:	064a      	lsls	r2, r1, #25
     e08:	d50c      	bpl.n	e24 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     e0a:	7cc2      	ldrb	r2, [r0, #19]
     e0c:	2140      	movs	r1, #64	; 0x40
     e0e:	438a      	bics	r2, r1
     e10:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     e12:	001a      	movs	r2, r3
     e14:	3208      	adds	r2, #8
     e16:	0152      	lsls	r2, r2, #5
     e18:	4c0f      	ldr	r4, [pc, #60]	; (e58 <_usb_d_dev_handle_setup+0x80>)
     e1a:	46a4      	mov	ip, r4
     e1c:	4462      	add	r2, ip
     e1e:	2480      	movs	r4, #128	; 0x80
     e20:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e22:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
     e24:	7cc2      	ldrb	r2, [r0, #19]
     e26:	2108      	movs	r1, #8
     e28:	438a      	bics	r2, r1
     e2a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     e2c:	490c      	ldr	r1, [pc, #48]	; (e60 <_usb_d_dev_handle_setup+0x88>)
     e2e:	015a      	lsls	r2, r3, #5
     e30:	188c      	adds	r4, r1, r2
     e32:	2500      	movs	r5, #0
     e34:	72a5      	strb	r5, [r4, #10]
     e36:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e38:	3308      	adds	r3, #8
     e3a:	015b      	lsls	r3, r3, #5
     e3c:	4c06      	ldr	r4, [pc, #24]	; (e58 <_usb_d_dev_handle_setup+0x80>)
     e3e:	46a4      	mov	ip, r4
     e40:	4463      	add	r3, ip
     e42:	246f      	movs	r4, #111	; 0x6f
     e44:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e46:	4b05      	ldr	r3, [pc, #20]	; (e5c <_usb_d_dev_handle_setup+0x84>)
     e48:	469c      	mov	ip, r3
     e4a:	4462      	add	r2, ip
     e4c:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     e4e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     e50:	7c80      	ldrb	r0, [r0, #18]
     e52:	4798      	blx	r3
     e54:	e7d6      	b.n	e04 <_usb_d_dev_handle_setup+0x2c>
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	41005000 	.word	0x41005000
     e5c:	41005108 	.word	0x41005108
     e60:	2000012c 	.word	0x2000012c

00000e64 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     e64:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e66:	7c82      	ldrb	r2, [r0, #18]
     e68:	230f      	movs	r3, #15
     e6a:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     e6c:	2220      	movs	r2, #32
     e6e:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     e70:	b2d2      	uxtb	r2, r2
     e72:	015b      	lsls	r3, r3, #5
     e74:	4905      	ldr	r1, [pc, #20]	; (e8c <_usb_d_dev_handle_stall+0x28>)
     e76:	468c      	mov	ip, r1
     e78:	4463      	add	r3, ip
     e7a:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     e7c:	4b04      	ldr	r3, [pc, #16]	; (e90 <_usb_d_dev_handle_stall+0x2c>)
     e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e80:	6882      	ldr	r2, [r0, #8]
     e82:	7c80      	ldrb	r0, [r0, #18]
     e84:	2101      	movs	r1, #1
     e86:	4798      	blx	r3
}
     e88:	bd10      	pop	{r4, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	41005108 	.word	0x41005108
     e90:	2000012c 	.word	0x2000012c

00000e94 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     e94:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     e96:	7c83      	ldrb	r3, [r0, #18]
     e98:	2bff      	cmp	r3, #255	; 0xff
     e9a:	d002      	beq.n	ea2 <_usb_d_dev_trans_done+0xe>
     e9c:	7cc2      	ldrb	r2, [r0, #19]
     e9e:	0652      	lsls	r2, r2, #25
     ea0:	d400      	bmi.n	ea4 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     ea2:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     ea4:	7cc2      	ldrb	r2, [r0, #19]
     ea6:	2440      	movs	r4, #64	; 0x40
     ea8:	43a2      	bics	r2, r4
     eaa:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     eac:	4a02      	ldr	r2, [pc, #8]	; (eb8 <_usb_d_dev_trans_done+0x24>)
     eae:	6f14      	ldr	r4, [r2, #112]	; 0x70
     eb0:	6882      	ldr	r2, [r0, #8]
     eb2:	0018      	movs	r0, r3
     eb4:	47a0      	blx	r4
     eb6:	e7f4      	b.n	ea2 <_usb_d_dev_trans_done+0xe>
     eb8:	2000012c 	.word	0x2000012c

00000ebc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ebe:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ec0:	7c84      	ldrb	r4, [r0, #18]
     ec2:	230f      	movs	r3, #15
     ec4:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     ec6:	4d18      	ldr	r5, [pc, #96]	; (f28 <_usb_d_dev_trans_stop+0x6c>)
     ec8:	882e      	ldrh	r6, [r5, #0]
     eca:	ad01      	add	r5, sp, #4
     ecc:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     ece:	2cff      	cmp	r4, #255	; 0xff
     ed0:	d01e      	beq.n	f10 <_usb_d_dev_trans_stop+0x54>
     ed2:	7cc4      	ldrb	r4, [r0, #19]
     ed4:	0664      	lsls	r4, r4, #25
     ed6:	d51b      	bpl.n	f10 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
     ed8:	2900      	cmp	r1, #0
     eda:	d01b      	beq.n	f14 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     edc:	001c      	movs	r4, r3
     ede:	3408      	adds	r4, #8
     ee0:	0164      	lsls	r4, r4, #5
     ee2:	4d12      	ldr	r5, [pc, #72]	; (f2c <_usb_d_dev_trans_stop+0x70>)
     ee4:	46ac      	mov	ip, r5
     ee6:	4464      	add	r4, ip
     ee8:	2580      	movs	r5, #128	; 0x80
     eea:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     eec:	ad01      	add	r5, sp, #4
     eee:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ef0:	001c      	movs	r4, r3
     ef2:	3408      	adds	r4, #8
     ef4:	0164      	lsls	r4, r4, #5
     ef6:	4f0d      	ldr	r7, [pc, #52]	; (f2c <_usb_d_dev_trans_stop+0x70>)
     ef8:	46bc      	mov	ip, r7
     efa:	4464      	add	r4, ip
     efc:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
     efe:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f00:	015b      	lsls	r3, r3, #5
     f02:	4c0b      	ldr	r4, [pc, #44]	; (f30 <_usb_d_dev_trans_stop+0x74>)
     f04:	46a4      	mov	ip, r4
     f06:	4463      	add	r3, ip
     f08:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
     f0a:	0011      	movs	r1, r2
     f0c:	4b09      	ldr	r3, [pc, #36]	; (f34 <_usb_d_dev_trans_stop+0x78>)
     f0e:	4798      	blx	r3
}
     f10:	b003      	add	sp, #12
     f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     f14:	001c      	movs	r4, r3
     f16:	3408      	adds	r4, #8
     f18:	0164      	lsls	r4, r4, #5
     f1a:	4d04      	ldr	r5, [pc, #16]	; (f2c <_usb_d_dev_trans_stop+0x70>)
     f1c:	46ac      	mov	ip, r5
     f1e:	4464      	add	r4, ip
     f20:	2540      	movs	r5, #64	; 0x40
     f22:	7165      	strb	r5, [r4, #5]
     f24:	e7e2      	b.n	eec <_usb_d_dev_trans_stop+0x30>
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	0000319c 	.word	0x0000319c
     f2c:	41005000 	.word	0x41005000
     f30:	41005108 	.word	0x41005108
     f34:	00000e95 	.word	0x00000e95

00000f38 <_usb_d_dev_handle_trfail>:
{
     f38:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     f3c:	7c83      	ldrb	r3, [r0, #18]
     f3e:	220f      	movs	r2, #15
     f40:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     f42:	4a3c      	ldr	r2, [pc, #240]	; (1034 <_usb_d_dev_handle_trfail+0xfc>)
     f44:	8894      	ldrh	r4, [r2, #4]
     f46:	aa01      	add	r2, sp, #4
     f48:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
     f4a:	015a      	lsls	r2, r3, #5
     f4c:	4c3a      	ldr	r4, [pc, #232]	; (1038 <_usb_d_dev_handle_trfail+0x100>)
     f4e:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
     f50:	2900      	cmp	r1, #0
     f52:	d033      	beq.n	fbc <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     f54:	001a      	movs	r2, r3
     f56:	3208      	adds	r2, #8
     f58:	0152      	lsls	r2, r2, #5
     f5a:	4d38      	ldr	r5, [pc, #224]	; (103c <_usb_d_dev_handle_trfail+0x104>)
     f5c:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     f5e:	0912      	lsrs	r2, r2, #4
     f60:	2507      	movs	r5, #7
     f62:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f64:	7cc2      	ldrb	r2, [r0, #19]
     f66:	2607      	movs	r6, #7
     f68:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
     f6a:	010a      	lsls	r2, r1, #4
     f6c:	18a2      	adds	r2, r4, r2
     f6e:	7a94      	ldrb	r4, [r2, #10]
     f70:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     f72:	2d02      	cmp	r5, #2
     f74:	d02a      	beq.n	fcc <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
     f76:	07a4      	lsls	r4, r4, #30
     f78:	d544      	bpl.n	1004 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     f7a:	7a94      	ldrb	r4, [r2, #10]
     f7c:	2502      	movs	r5, #2
     f7e:	43ac      	bics	r4, r5
     f80:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     f82:	ac01      	add	r4, sp, #4
     f84:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f86:	001a      	movs	r2, r3
     f88:	3208      	adds	r2, #8
     f8a:	0152      	lsls	r2, r2, #5
     f8c:	4f2b      	ldr	r7, [pc, #172]	; (103c <_usb_d_dev_handle_trfail+0x104>)
     f8e:	46bc      	mov	ip, r7
     f90:	4462      	add	r2, ip
     f92:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
     f94:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f96:	015b      	lsls	r3, r3, #5
     f98:	4c29      	ldr	r4, [pc, #164]	; (1040 <_usb_d_dev_handle_trfail+0x108>)
     f9a:	46a4      	mov	ip, r4
     f9c:	4463      	add	r3, ip
     f9e:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     fa0:	2e01      	cmp	r6, #1
     fa2:	d145      	bne.n	1030 <_usb_d_dev_handle_trfail+0xf8>
     fa4:	7cc3      	ldrb	r3, [r0, #19]
     fa6:	065b      	lsls	r3, r3, #25
     fa8:	d542      	bpl.n	1030 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     faa:	7cc3      	ldrb	r3, [r0, #19]
     fac:	09db      	lsrs	r3, r3, #7
     fae:	4299      	cmp	r1, r3
     fb0:	d03e      	beq.n	1030 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     fb2:	2200      	movs	r2, #0
     fb4:	0019      	movs	r1, r3
     fb6:	4b23      	ldr	r3, [pc, #140]	; (1044 <_usb_d_dev_handle_trfail+0x10c>)
     fb8:	4798      	blx	r3
     fba:	e039      	b.n	1030 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     fbc:	001a      	movs	r2, r3
     fbe:	3208      	adds	r2, #8
     fc0:	0152      	lsls	r2, r2, #5
     fc2:	4d1e      	ldr	r5, [pc, #120]	; (103c <_usb_d_dev_handle_trfail+0x104>)
     fc4:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     fc6:	2207      	movs	r2, #7
     fc8:	4015      	ands	r5, r2
     fca:	e7cb      	b.n	f64 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     fcc:	07e5      	lsls	r5, r4, #31
     fce:	d5d2      	bpl.n	f76 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     fd0:	7a94      	ldrb	r4, [r2, #10]
     fd2:	2501      	movs	r5, #1
     fd4:	43ac      	bics	r4, r5
     fd6:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     fd8:	ac01      	add	r4, sp, #4
     fda:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     fdc:	001a      	movs	r2, r3
     fde:	3208      	adds	r2, #8
     fe0:	0152      	lsls	r2, r2, #5
     fe2:	4e16      	ldr	r6, [pc, #88]	; (103c <_usb_d_dev_handle_trfail+0x104>)
     fe4:	46b4      	mov	ip, r6
     fe6:	4462      	add	r2, ip
     fe8:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
     fea:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fec:	015b      	lsls	r3, r3, #5
     fee:	4c14      	ldr	r4, [pc, #80]	; (1040 <_usb_d_dev_handle_trfail+0x108>)
     ff0:	46a4      	mov	ip, r4
     ff2:	4463      	add	r3, ip
     ff4:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     ff6:	1e4b      	subs	r3, r1, #1
     ff8:	4199      	sbcs	r1, r3
     ffa:	b2c9      	uxtb	r1, r1
     ffc:	2204      	movs	r2, #4
     ffe:	4b11      	ldr	r3, [pc, #68]	; (1044 <_usb_d_dev_handle_trfail+0x10c>)
    1000:	4798      	blx	r3
    1002:	e015      	b.n	1030 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    1004:	005a      	lsls	r2, r3, #1
    1006:	1852      	adds	r2, r2, r1
    1008:	0112      	lsls	r2, r2, #4
    100a:	480b      	ldr	r0, [pc, #44]	; (1038 <_usb_d_dev_handle_trfail+0x100>)
    100c:	1882      	adds	r2, r0, r2
    100e:	2000      	movs	r0, #0
    1010:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1012:	a801      	add	r0, sp, #4
    1014:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1016:	001a      	movs	r2, r3
    1018:	3208      	adds	r2, #8
    101a:	0152      	lsls	r2, r2, #5
    101c:	4d07      	ldr	r5, [pc, #28]	; (103c <_usb_d_dev_handle_trfail+0x104>)
    101e:	46ac      	mov	ip, r5
    1020:	4462      	add	r2, ip
    1022:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    1024:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1026:	015b      	lsls	r3, r3, #5
    1028:	4905      	ldr	r1, [pc, #20]	; (1040 <_usb_d_dev_handle_trfail+0x108>)
    102a:	468c      	mov	ip, r1
    102c:	4463      	add	r3, ip
    102e:	701a      	strb	r2, [r3, #0]
}
    1030:	b003      	add	sp, #12
    1032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1034:	0000319c 	.word	0x0000319c
    1038:	2000012c 	.word	0x2000012c
    103c:	41005000 	.word	0x41005000
    1040:	41005108 	.word	0x41005108
    1044:	00000ebd 	.word	0x00000ebd

00001048 <_usb_d_dev_reset_epts>:
{
    1048:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    104a:	2500      	movs	r5, #0
    104c:	e018      	b.n	1080 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    104e:	4c10      	ldr	r4, [pc, #64]	; (1090 <_usb_d_dev_reset_epts+0x48>)
    1050:	3460      	adds	r4, #96	; 0x60
    1052:	00ae      	lsls	r6, r5, #2
    1054:	1973      	adds	r3, r6, r5
    1056:	0098      	lsls	r0, r3, #2
    1058:	3010      	adds	r0, #16
    105a:	1820      	adds	r0, r4, r0
    105c:	3004      	adds	r0, #4
    105e:	2103      	movs	r1, #3
    1060:	4b0c      	ldr	r3, [pc, #48]	; (1094 <_usb_d_dev_reset_epts+0x4c>)
    1062:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    1064:	1972      	adds	r2, r6, r5
    1066:	0093      	lsls	r3, r2, #2
    1068:	18e3      	adds	r3, r4, r3
    106a:	3326      	adds	r3, #38	; 0x26
    106c:	22ff      	movs	r2, #255	; 0xff
    106e:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    1070:	1976      	adds	r6, r6, r5
    1072:	00b3      	lsls	r3, r6, #2
    1074:	18e4      	adds	r4, r4, r3
    1076:	3427      	adds	r4, #39	; 0x27
    1078:	2300      	movs	r3, #0
    107a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    107c:	3501      	adds	r5, #1
    107e:	b2ed      	uxtb	r5, r5
    1080:	2d08      	cmp	r5, #8
    1082:	d9e4      	bls.n	104e <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1084:	2260      	movs	r2, #96	; 0x60
    1086:	2100      	movs	r1, #0
    1088:	4801      	ldr	r0, [pc, #4]	; (1090 <_usb_d_dev_reset_epts+0x48>)
    108a:	4b03      	ldr	r3, [pc, #12]	; (1098 <_usb_d_dev_reset_epts+0x50>)
    108c:	4798      	blx	r3
}
    108e:	bd70      	pop	{r4, r5, r6, pc}
    1090:	2000012c 	.word	0x2000012c
    1094:	00000e95 	.word	0x00000e95
    1098:	00003127 	.word	0x00003127

0000109c <_usb_d_dev_in_next>:
{
    109c:	b5f0      	push	{r4, r5, r6, r7, lr}
    109e:	46c6      	mov	lr, r8
    10a0:	b500      	push	{lr}
    10a2:	0005      	movs	r5, r0
    10a4:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    10a6:	7c83      	ldrb	r3, [r0, #18]
    10a8:	240f      	movs	r4, #15
    10aa:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    10ac:	0162      	lsls	r2, r4, #5
    10ae:	4b56      	ldr	r3, [pc, #344]	; (1208 <_usb_d_dev_in_next+0x16c>)
    10b0:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    10b2:	2900      	cmp	r1, #0
    10b4:	d058      	beq.n	1168 <_usb_d_dev_in_next+0xcc>
    10b6:	6959      	ldr	r1, [r3, #20]
    10b8:	0489      	lsls	r1, r1, #18
    10ba:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    10bc:	8a2b      	ldrh	r3, [r5, #16]
    10be:	4a53      	ldr	r2, [pc, #332]	; (120c <_usb_d_dev_in_next+0x170>)
    10c0:	4293      	cmp	r3, r2
    10c2:	d053      	beq.n	116c <_usb_d_dev_in_next+0xd0>
    10c4:	3b01      	subs	r3, #1
    10c6:	b21b      	sxth	r3, r3
    10c8:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    10ca:	7cea      	ldrb	r2, [r5, #19]
    10cc:	2707      	movs	r7, #7
    10ce:	4017      	ands	r7, r2
	if (isr) {
    10d0:	2e00      	cmp	r6, #0
    10d2:	d007      	beq.n	10e4 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10d4:	0022      	movs	r2, r4
    10d6:	3208      	adds	r2, #8
    10d8:	0152      	lsls	r2, r2, #5
    10da:	484d      	ldr	r0, [pc, #308]	; (1210 <_usb_d_dev_in_next+0x174>)
    10dc:	4684      	mov	ip, r0
    10de:	4462      	add	r2, ip
    10e0:	2002      	movs	r0, #2
    10e2:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    10e4:	68aa      	ldr	r2, [r5, #8]
    10e6:	4694      	mov	ip, r2
    10e8:	4461      	add	r1, ip
    10ea:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    10ec:	686a      	ldr	r2, [r5, #4]
    10ee:	4291      	cmp	r1, r2
    10f0:	d24e      	bcs.n	1190 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    10f2:	b292      	uxth	r2, r2
    10f4:	b28b      	uxth	r3, r1
    10f6:	1ad2      	subs	r2, r2, r3
    10f8:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    10fa:	7ceb      	ldrb	r3, [r5, #19]
    10fc:	069b      	lsls	r3, r3, #26
    10fe:	d537      	bpl.n	1170 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    1100:	8a2b      	ldrh	r3, [r5, #16]
    1102:	4698      	mov	r8, r3
    1104:	429a      	cmp	r2, r3
    1106:	d800      	bhi.n	110a <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    1108:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    110a:	682b      	ldr	r3, [r5, #0]
    110c:	469c      	mov	ip, r3
    110e:	4461      	add	r1, ip
    1110:	4642      	mov	r2, r8
    1112:	68e8      	ldr	r0, [r5, #12]
    1114:	4b3f      	ldr	r3, [pc, #252]	; (1214 <_usb_d_dev_in_next+0x178>)
    1116:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1118:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    111a:	0162      	lsls	r2, r4, #5
    111c:	4b3a      	ldr	r3, [pc, #232]	; (1208 <_usb_d_dev_in_next+0x16c>)
    111e:	189b      	adds	r3, r3, r2
    1120:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1122:	0163      	lsls	r3, r4, #5
    1124:	4a38      	ldr	r2, [pc, #224]	; (1208 <_usb_d_dev_in_next+0x16c>)
    1126:	18d2      	adds	r2, r2, r3
    1128:	6951      	ldr	r1, [r2, #20]
    112a:	4643      	mov	r3, r8
    112c:	049b      	lsls	r3, r3, #18
    112e:	0c9b      	lsrs	r3, r3, #18
    1130:	0b89      	lsrs	r1, r1, #14
    1132:	0389      	lsls	r1, r1, #14
    1134:	430b      	orrs	r3, r1
    1136:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1138:	6951      	ldr	r1, [r2, #20]
    113a:	4b37      	ldr	r3, [pc, #220]	; (1218 <_usb_d_dev_in_next+0x17c>)
    113c:	400b      	ands	r3, r1
    113e:	6153      	str	r3, [r2, #20]
	if (!isr) {
    1140:	2e00      	cmp	r6, #0
    1142:	d107      	bne.n	1154 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    1144:	2f01      	cmp	r7, #1
    1146:	d05d      	beq.n	1204 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    1148:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    114a:	0163      	lsls	r3, r4, #5
    114c:	4933      	ldr	r1, [pc, #204]	; (121c <_usb_d_dev_in_next+0x180>)
    114e:	468c      	mov	ip, r1
    1150:	4463      	add	r3, ip
    1152:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1154:	3408      	adds	r4, #8
    1156:	0164      	lsls	r4, r4, #5
    1158:	4b2d      	ldr	r3, [pc, #180]	; (1210 <_usb_d_dev_in_next+0x174>)
    115a:	469c      	mov	ip, r3
    115c:	4464      	add	r4, ip
    115e:	2380      	movs	r3, #128	; 0x80
    1160:	7163      	strb	r3, [r4, #5]
}
    1162:	bc04      	pop	{r2}
    1164:	4690      	mov	r8, r2
    1166:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1168:	2100      	movs	r1, #0
    116a:	e7a7      	b.n	10bc <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    116c:	b21b      	sxth	r3, r3
    116e:	e7ab      	b.n	10c8 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    1170:	2380      	movs	r3, #128	; 0x80
    1172:	019b      	lsls	r3, r3, #6
    1174:	429a      	cmp	r2, r3
    1176:	d807      	bhi.n	1188 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    1178:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    117a:	682b      	ldr	r3, [r5, #0]
    117c:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    117e:	0162      	lsls	r2, r4, #5
    1180:	4b21      	ldr	r3, [pc, #132]	; (1208 <_usb_d_dev_in_next+0x16c>)
    1182:	189b      	adds	r3, r3, r2
    1184:	6119      	str	r1, [r3, #16]
    1186:	e7cc      	b.n	1122 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    1188:	2380      	movs	r3, #128	; 0x80
    118a:	019b      	lsls	r3, r3, #6
    118c:	4698      	mov	r8, r3
    118e:	e7f4      	b.n	117a <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    1190:	7cea      	ldrb	r2, [r5, #19]
    1192:	06d2      	lsls	r2, r2, #27
    1194:	d50f      	bpl.n	11b6 <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    1196:	7ceb      	ldrb	r3, [r5, #19]
    1198:	2210      	movs	r2, #16
    119a:	4393      	bics	r3, r2
    119c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    119e:	0162      	lsls	r2, r4, #5
    11a0:	4b19      	ldr	r3, [pc, #100]	; (1208 <_usb_d_dev_in_next+0x16c>)
    11a2:	189b      	adds	r3, r3, r2
    11a4:	695a      	ldr	r2, [r3, #20]
    11a6:	0b92      	lsrs	r2, r2, #14
    11a8:	0391      	lsls	r1, r2, #14
    11aa:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    11ac:	6959      	ldr	r1, [r3, #20]
    11ae:	4a1a      	ldr	r2, [pc, #104]	; (1218 <_usb_d_dev_in_next+0x17c>)
    11b0:	400a      	ands	r2, r1
    11b2:	615a      	str	r2, [r3, #20]
    11b4:	e7c4      	b.n	1140 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    11b6:	2f01      	cmp	r7, #1
    11b8:	d00d      	beq.n	11d6 <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    11ba:	0164      	lsls	r4, r4, #5
    11bc:	4a18      	ldr	r2, [pc, #96]	; (1220 <_usb_d_dev_in_next+0x184>)
    11be:	4694      	mov	ip, r2
    11c0:	4464      	add	r4, ip
    11c2:	224a      	movs	r2, #74	; 0x4a
    11c4:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    11c6:	8a2a      	ldrh	r2, [r5, #16]
    11c8:	4293      	cmp	r3, r2
    11ca:	d00b      	beq.n	11e4 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    11cc:	2100      	movs	r1, #0
    11ce:	0028      	movs	r0, r5
    11d0:	4b14      	ldr	r3, [pc, #80]	; (1224 <_usb_d_dev_in_next+0x188>)
    11d2:	4798      	blx	r3
	return;
    11d4:	e7c5      	b.n	1162 <_usb_d_dev_in_next+0xc6>
    11d6:	0164      	lsls	r4, r4, #5
    11d8:	4a11      	ldr	r2, [pc, #68]	; (1220 <_usb_d_dev_in_next+0x184>)
    11da:	4694      	mov	ip, r2
    11dc:	4464      	add	r4, ip
    11de:	224b      	movs	r2, #75	; 0x4b
    11e0:	7022      	strb	r2, [r4, #0]
    11e2:	e7f0      	b.n	11c6 <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    11e4:	7ceb      	ldrb	r3, [r5, #19]
    11e6:	2240      	movs	r2, #64	; 0x40
    11e8:	4393      	bics	r3, r2
    11ea:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    11ec:	4b06      	ldr	r3, [pc, #24]	; (1208 <_usb_d_dev_in_next+0x16c>)
    11ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    11f0:	7ca8      	ldrb	r0, [r5, #18]
    11f2:	68a9      	ldr	r1, [r5, #8]
    11f4:	4798      	blx	r3
    11f6:	2800      	cmp	r0, #0
    11f8:	d1b3      	bne.n	1162 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    11fa:	7ceb      	ldrb	r3, [r5, #19]
    11fc:	2240      	movs	r2, #64	; 0x40
    11fe:	4313      	orrs	r3, r2
    1200:	74eb      	strb	r3, [r5, #19]
    1202:	e7e3      	b.n	11cc <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1204:	224e      	movs	r2, #78	; 0x4e
    1206:	e7a0      	b.n	114a <_usb_d_dev_in_next+0xae>
    1208:	2000012c 	.word	0x2000012c
    120c:	000003ff 	.word	0x000003ff
    1210:	41005000 	.word	0x41005000
    1214:	00003115 	.word	0x00003115
    1218:	f0003fff 	.word	0xf0003fff
    121c:	41005109 	.word	0x41005109
    1220:	41005108 	.word	0x41005108
    1224:	00000e95 	.word	0x00000e95

00001228 <_usb_d_dev_out_next>:
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	46de      	mov	lr, fp
    122c:	4657      	mov	r7, sl
    122e:	464e      	mov	r6, r9
    1230:	4645      	mov	r5, r8
    1232:	b5e0      	push	{r5, r6, r7, lr}
    1234:	0004      	movs	r4, r0
    1236:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1238:	7c83      	ldrb	r3, [r0, #18]
    123a:	250f      	movs	r5, #15
    123c:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    123e:	2900      	cmp	r1, #0
    1240:	d059      	beq.n	12f6 <_usb_d_dev_out_next+0xce>
    1242:	016a      	lsls	r2, r5, #5
    1244:	4b71      	ldr	r3, [pc, #452]	; (140c <_usb_d_dev_out_next+0x1e4>)
    1246:	189b      	adds	r3, r3, r2
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	011b      	lsls	r3, r3, #4
    124c:	0c9b      	lsrs	r3, r3, #18
    124e:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1250:	2f00      	cmp	r7, #0
    1252:	d053      	beq.n	12fc <_usb_d_dev_out_next+0xd4>
    1254:	016a      	lsls	r2, r5, #5
    1256:	4b6d      	ldr	r3, [pc, #436]	; (140c <_usb_d_dev_out_next+0x1e4>)
    1258:	189b      	adds	r3, r3, r2
    125a:	685b      	ldr	r3, [r3, #4]
    125c:	049b      	lsls	r3, r3, #18
    125e:	0c9b      	lsrs	r3, r3, #18
    1260:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1262:	8a26      	ldrh	r6, [r4, #16]
    1264:	4b6a      	ldr	r3, [pc, #424]	; (1410 <_usb_d_dev_out_next+0x1e8>)
    1266:	429e      	cmp	r6, r3
    1268:	d001      	beq.n	126e <_usb_d_dev_out_next+0x46>
    126a:	3e01      	subs	r6, #1
    126c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    126e:	4643      	mov	r3, r8
    1270:	4033      	ands	r3, r6
    1272:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1274:	7ce3      	ldrb	r3, [r4, #19]
    1276:	2207      	movs	r2, #7
    1278:	401a      	ands	r2, r3
    127a:	4691      	mov	r9, r2
	if (isr) {
    127c:	2f00      	cmp	r7, #0
    127e:	d007      	beq.n	1290 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1280:	002b      	movs	r3, r5
    1282:	3308      	adds	r3, #8
    1284:	015b      	lsls	r3, r3, #5
    1286:	4a63      	ldr	r2, [pc, #396]	; (1414 <_usb_d_dev_out_next+0x1ec>)
    1288:	4694      	mov	ip, r2
    128a:	4463      	add	r3, ip
    128c:	2201      	movs	r2, #1
    128e:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1290:	7ce3      	ldrb	r3, [r4, #19]
    1292:	069b      	lsls	r3, r3, #26
    1294:	d511      	bpl.n	12ba <_usb_d_dev_out_next+0x92>
    1296:	6862      	ldr	r2, [r4, #4]
    1298:	2a00      	cmp	r2, #0
    129a:	d00e      	beq.n	12ba <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    129c:	b292      	uxth	r2, r2
    129e:	8923      	ldrh	r3, [r4, #8]
    12a0:	1ad2      	subs	r2, r2, r3
    12a2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    12a4:	6823      	ldr	r3, [r4, #0]
    12a6:	68a1      	ldr	r1, [r4, #8]
    12a8:	468c      	mov	ip, r1
    12aa:	4463      	add	r3, ip
    12ac:	0018      	movs	r0, r3
    12ae:	68e1      	ldr	r1, [r4, #12]
    12b0:	4593      	cmp	fp, r2
    12b2:	d200      	bcs.n	12b6 <_usb_d_dev_out_next+0x8e>
    12b4:	465a      	mov	r2, fp
    12b6:	4b58      	ldr	r3, [pc, #352]	; (1418 <_usb_d_dev_out_next+0x1f0>)
    12b8:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    12ba:	6863      	ldr	r3, [r4, #4]
    12bc:	2b00      	cmp	r3, #0
    12be:	d120      	bne.n	1302 <_usb_d_dev_out_next+0xda>
    12c0:	7ce2      	ldrb	r2, [r4, #19]
    12c2:	06d2      	lsls	r2, r2, #27
    12c4:	d51d      	bpl.n	1302 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    12c6:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    12c8:	2210      	movs	r2, #16
    12ca:	4393      	bics	r3, r2
    12cc:	2220      	movs	r2, #32
    12ce:	4313      	orrs	r3, r2
    12d0:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    12d2:	494e      	ldr	r1, [pc, #312]	; (140c <_usb_d_dev_out_next+0x1e4>)
    12d4:	016a      	lsls	r2, r5, #5
    12d6:	68e3      	ldr	r3, [r4, #12]
    12d8:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    12da:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    12dc:	188a      	adds	r2, r1, r2
    12de:	6851      	ldr	r1, [r2, #4]
    12e0:	049b      	lsls	r3, r3, #18
    12e2:	091b      	lsrs	r3, r3, #4
    12e4:	484d      	ldr	r0, [pc, #308]	; (141c <_usb_d_dev_out_next+0x1f4>)
    12e6:	4001      	ands	r1, r0
    12e8:	430b      	orrs	r3, r1
    12ea:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    12ec:	6853      	ldr	r3, [r2, #4]
    12ee:	0b9b      	lsrs	r3, r3, #14
    12f0:	0399      	lsls	r1, r3, #14
    12f2:	6051      	str	r1, [r2, #4]
    12f4:	e047      	b.n	1386 <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    12f6:	2300      	movs	r3, #0
    12f8:	469a      	mov	sl, r3
    12fa:	e7a9      	b.n	1250 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    12fc:	2300      	movs	r3, #0
    12fe:	4698      	mov	r8, r3
    1300:	e7af      	b.n	1262 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    1302:	2f00      	cmp	r7, #0
    1304:	d01d      	beq.n	1342 <_usb_d_dev_out_next+0x11a>
    1306:	8a22      	ldrh	r2, [r4, #16]
    1308:	4593      	cmp	fp, r2
    130a:	d21a      	bcs.n	1342 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    130c:	7ce3      	ldrb	r3, [r4, #19]
    130e:	2210      	movs	r2, #16
    1310:	4393      	bics	r3, r2
    1312:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1314:	68a3      	ldr	r3, [r4, #8]
    1316:	4443      	add	r3, r8
    1318:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    131a:	464b      	mov	r3, r9
    131c:	2b01      	cmp	r3, #1
    131e:	d066      	beq.n	13ee <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1320:	016b      	lsls	r3, r5, #5
    1322:	4a3f      	ldr	r2, [pc, #252]	; (1420 <_usb_d_dev_out_next+0x1f8>)
    1324:	4694      	mov	ip, r2
    1326:	4463      	add	r3, ip
    1328:	2225      	movs	r2, #37	; 0x25
    132a:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    132c:	2d00      	cmp	r5, #0
    132e:	d103      	bne.n	1338 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    1330:	016d      	lsls	r5, r5, #5
    1332:	4b36      	ldr	r3, [pc, #216]	; (140c <_usb_d_dev_out_next+0x1e4>)
    1334:	68e2      	ldr	r2, [r4, #12]
    1336:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1338:	2100      	movs	r1, #0
    133a:	0020      	movs	r0, r4
    133c:	4b39      	ldr	r3, [pc, #228]	; (1424 <_usb_d_dev_out_next+0x1fc>)
    133e:	4798      	blx	r3
	return;
    1340:	e033      	b.n	13aa <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    1342:	68a2      	ldr	r2, [r4, #8]
    1344:	4452      	add	r2, sl
    1346:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1348:	4293      	cmp	r3, r2
    134a:	d9e6      	bls.n	131a <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    134c:	b29b      	uxth	r3, r3
    134e:	b291      	uxth	r1, r2
    1350:	1a5b      	subs	r3, r3, r1
    1352:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1354:	7ce1      	ldrb	r1, [r4, #19]
    1356:	0689      	lsls	r1, r1, #26
    1358:	d52d      	bpl.n	13b6 <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    135a:	8a21      	ldrh	r1, [r4, #16]
    135c:	428b      	cmp	r3, r1
    135e:	d800      	bhi.n	1362 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    1360:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1362:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1364:	016b      	lsls	r3, r5, #5
    1366:	4a29      	ldr	r2, [pc, #164]	; (140c <_usb_d_dev_out_next+0x1e4>)
    1368:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    136a:	016b      	lsls	r3, r5, #5
    136c:	4827      	ldr	r0, [pc, #156]	; (140c <_usb_d_dev_out_next+0x1e4>)
    136e:	18c0      	adds	r0, r0, r3
    1370:	6842      	ldr	r2, [r0, #4]
    1372:	048b      	lsls	r3, r1, #18
    1374:	091b      	lsrs	r3, r3, #4
    1376:	4929      	ldr	r1, [pc, #164]	; (141c <_usb_d_dev_out_next+0x1f4>)
    1378:	400a      	ands	r2, r1
    137a:	4313      	orrs	r3, r2
    137c:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    137e:	6843      	ldr	r3, [r0, #4]
    1380:	0b9b      	lsrs	r3, r3, #14
    1382:	039a      	lsls	r2, r3, #14
    1384:	6042      	str	r2, [r0, #4]
	if (!isr) {
    1386:	2f00      	cmp	r7, #0
    1388:	d108      	bne.n	139c <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    138a:	464b      	mov	r3, r9
    138c:	2b01      	cmp	r3, #1
    138e:	d035      	beq.n	13fc <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    1390:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1392:	016b      	lsls	r3, r5, #5
    1394:	4924      	ldr	r1, [pc, #144]	; (1428 <_usb_d_dev_out_next+0x200>)
    1396:	468c      	mov	ip, r1
    1398:	4463      	add	r3, ip
    139a:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    139c:	3508      	adds	r5, #8
    139e:	016d      	lsls	r5, r5, #5
    13a0:	4b1c      	ldr	r3, [pc, #112]	; (1414 <_usb_d_dev_out_next+0x1ec>)
    13a2:	469c      	mov	ip, r3
    13a4:	4465      	add	r5, ip
    13a6:	2340      	movs	r3, #64	; 0x40
    13a8:	712b      	strb	r3, [r5, #4]
}
    13aa:	bc3c      	pop	{r2, r3, r4, r5}
    13ac:	4690      	mov	r8, r2
    13ae:	4699      	mov	r9, r3
    13b0:	46a2      	mov	sl, r4
    13b2:	46ab      	mov	fp, r5
    13b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    13b6:	8a21      	ldrh	r1, [r4, #16]
    13b8:	428b      	cmp	r3, r1
    13ba:	d90b      	bls.n	13d4 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    13bc:	2180      	movs	r1, #128	; 0x80
    13be:	0189      	lsls	r1, r1, #6
    13c0:	428b      	cmp	r3, r1
    13c2:	d80f      	bhi.n	13e4 <_usb_d_dev_out_next+0x1bc>
    13c4:	43b3      	bics	r3, r6
    13c6:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    13c8:	6823      	ldr	r3, [r4, #0]
    13ca:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    13cc:	016b      	lsls	r3, r5, #5
    13ce:	480f      	ldr	r0, [pc, #60]	; (140c <_usb_d_dev_out_next+0x1e4>)
    13d0:	501a      	str	r2, [r3, r0]
    13d2:	e7ca      	b.n	136a <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    13d4:	428b      	cmp	r3, r1
    13d6:	d208      	bcs.n	13ea <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    13d8:	7ce1      	ldrb	r1, [r4, #19]
    13da:	2020      	movs	r0, #32
    13dc:	4301      	orrs	r1, r0
    13de:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    13e0:	0019      	movs	r1, r3
    13e2:	e7f1      	b.n	13c8 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    13e4:	2180      	movs	r1, #128	; 0x80
    13e6:	0189      	lsls	r1, r1, #6
    13e8:	e7ee      	b.n	13c8 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    13ea:	0019      	movs	r1, r3
    13ec:	e7ec      	b.n	13c8 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13ee:	016b      	lsls	r3, r5, #5
    13f0:	4a0b      	ldr	r2, [pc, #44]	; (1420 <_usb_d_dev_out_next+0x1f8>)
    13f2:	4694      	mov	ip, r2
    13f4:	4463      	add	r3, ip
    13f6:	222d      	movs	r2, #45	; 0x2d
    13f8:	701a      	strb	r2, [r3, #0]
    13fa:	e797      	b.n	132c <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    13fc:	016a      	lsls	r2, r5, #5
    13fe:	4b03      	ldr	r3, [pc, #12]	; (140c <_usb_d_dev_out_next+0x1e4>)
    1400:	189b      	adds	r3, r3, r2
    1402:	2200      	movs	r2, #0
    1404:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1406:	322d      	adds	r2, #45	; 0x2d
    1408:	e7c3      	b.n	1392 <_usb_d_dev_out_next+0x16a>
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	2000012c 	.word	0x2000012c
    1410:	000003ff 	.word	0x000003ff
    1414:	41005000 	.word	0x41005000
    1418:	00003115 	.word	0x00003115
    141c:	f0003fff 	.word	0xf0003fff
    1420:	41005108 	.word	0x41005108
    1424:	00000e95 	.word	0x00000e95
    1428:	41005109 	.word	0x41005109

0000142c <_usb_d_dev_handler>:
{
    142c:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    142e:	4b82      	ldr	r3, [pc, #520]	; (1638 <_usb_d_dev_handler+0x20c>)
    1430:	8c1d      	ldrh	r5, [r3, #32]
    1432:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    1434:	2d00      	cmp	r5, #0
    1436:	d001      	beq.n	143c <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    1438:	2400      	movs	r4, #0
    143a:	e0b1      	b.n	15a0 <_usb_d_dev_handler+0x174>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    143c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    143e:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1440:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1442:	075a      	lsls	r2, r3, #29
    1444:	d40c      	bmi.n	1460 <_usb_d_dev_handler+0x34>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1446:	059a      	lsls	r2, r3, #22
    1448:	d414      	bmi.n	1474 <_usb_d_dev_handler+0x48>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    144a:	061a      	lsls	r2, r3, #24
    144c:	d436      	bmi.n	14bc <_usb_d_dev_handler+0x90>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    144e:	2270      	movs	r2, #112	; 0x70
    1450:	421a      	tst	r2, r3
    1452:	d13d      	bne.n	14d0 <_usb_d_dev_handler+0xa4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1454:	071a      	lsls	r2, r3, #28
    1456:	d449      	bmi.n	14ec <_usb_d_dev_handler+0xc0>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1458:	07db      	lsls	r3, r3, #31
    145a:	d45b      	bmi.n	1514 <_usb_d_dev_handler+0xe8>
		rc = false;
    145c:	2300      	movs	r3, #0
    145e:	e006      	b.n	146e <_usb_d_dev_handler+0x42>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1460:	2204      	movs	r2, #4
    1462:	4b75      	ldr	r3, [pc, #468]	; (1638 <_usb_d_dev_handler+0x20c>)
    1464:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1466:	4b75      	ldr	r3, [pc, #468]	; (163c <_usb_d_dev_handler+0x210>)
    1468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    146a:	4798      	blx	r3
		return true;
    146c:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    146e:	2b00      	cmp	r3, #0
    1470:	d0e2      	beq.n	1438 <_usb_d_dev_handler+0xc>
}
    1472:	bd70      	pop	{r4, r5, r6, pc}
    1474:	4b70      	ldr	r3, [pc, #448]	; (1638 <_usb_d_dev_handler+0x20c>)
    1476:	4a72      	ldr	r2, [pc, #456]	; (1640 <_usb_d_dev_handler+0x214>)
    1478:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    147a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    147c:	3a92      	subs	r2, #146	; 0x92
    147e:	3aff      	subs	r2, #255	; 0xff
    1480:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    1482:	2300      	movs	r3, #0
    1484:	2b01      	cmp	r3, #1
    1486:	d812      	bhi.n	14ae <_usb_d_dev_handler+0x82>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1488:	0158      	lsls	r0, r3, #5
    148a:	4a6c      	ldr	r2, [pc, #432]	; (163c <_usb_d_dev_handler+0x210>)
    148c:	1812      	adds	r2, r2, r0
    148e:	8912      	ldrh	r2, [r2, #8]
    1490:	0712      	lsls	r2, r2, #28
    1492:	0f12      	lsrs	r2, r2, #28
    1494:	2a03      	cmp	r2, #3
    1496:	d002      	beq.n	149e <_usb_d_dev_handler+0x72>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    1498:	3301      	adds	r3, #1
    149a:	b2db      	uxtb	r3, r3
    149c:	e7f2      	b.n	1484 <_usb_d_dev_handler+0x58>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    149e:	4b67      	ldr	r3, [pc, #412]	; (163c <_usb_d_dev_handler+0x210>)
    14a0:	181b      	adds	r3, r3, r0
    14a2:	8919      	ldrh	r1, [r3, #8]
    14a4:	0449      	lsls	r1, r1, #17
    14a6:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    14a8:	2200      	movs	r2, #0
    14aa:	811a      	strh	r2, [r3, #8]
    14ac:	e000      	b.n	14b0 <_usb_d_dev_handler+0x84>
	uint32_t lpm_variable = 0;
    14ae:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    14b0:	4b62      	ldr	r3, [pc, #392]	; (163c <_usb_d_dev_handler+0x210>)
    14b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    14b4:	2003      	movs	r0, #3
    14b6:	4798      	blx	r3
	bool     rc    = true;
    14b8:	2301      	movs	r3, #1
    14ba:	e7d8      	b.n	146e <_usb_d_dev_handler+0x42>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    14bc:	2280      	movs	r2, #128	; 0x80
    14be:	4b5e      	ldr	r3, [pc, #376]	; (1638 <_usb_d_dev_handler+0x20c>)
    14c0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    14c2:	4b5e      	ldr	r3, [pc, #376]	; (163c <_usb_d_dev_handler+0x210>)
    14c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    14c6:	2100      	movs	r1, #0
    14c8:	2005      	movs	r0, #5
    14ca:	4798      	blx	r3
	bool     rc    = true;
    14cc:	2301      	movs	r3, #1
    14ce:	e7ce      	b.n	146e <_usb_d_dev_handler+0x42>
    14d0:	4b59      	ldr	r3, [pc, #356]	; (1638 <_usb_d_dev_handler+0x20c>)
    14d2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    14d4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    14d6:	4a5a      	ldr	r2, [pc, #360]	; (1640 <_usb_d_dev_handler+0x214>)
    14d8:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    14da:	4b5a      	ldr	r3, [pc, #360]	; (1644 <_usb_d_dev_handler+0x218>)
    14dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    14de:	4b57      	ldr	r3, [pc, #348]	; (163c <_usb_d_dev_handler+0x210>)
    14e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    14e2:	2100      	movs	r1, #0
    14e4:	2002      	movs	r0, #2
    14e6:	4798      	blx	r3
	bool     rc    = true;
    14e8:	2301      	movs	r3, #1
    14ea:	e7c0      	b.n	146e <_usb_d_dev_handler+0x42>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    14ec:	4b52      	ldr	r3, [pc, #328]	; (1638 <_usb_d_dev_handler+0x20c>)
    14ee:	2100      	movs	r1, #0
    14f0:	2280      	movs	r2, #128	; 0x80
    14f2:	0052      	lsls	r2, r2, #1
    14f4:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    14f6:	3af8      	subs	r2, #248	; 0xf8
    14f8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    14fa:	3268      	adds	r2, #104	; 0x68
    14fc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    14fe:	4a50      	ldr	r2, [pc, #320]	; (1640 <_usb_d_dev_handler+0x214>)
    1500:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1502:	4b51      	ldr	r3, [pc, #324]	; (1648 <_usb_d_dev_handler+0x21c>)
    1504:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1506:	4b4d      	ldr	r3, [pc, #308]	; (163c <_usb_d_dev_handler+0x210>)
    1508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    150a:	2100      	movs	r1, #0
    150c:	2001      	movs	r0, #1
    150e:	4798      	blx	r3
	bool     rc    = true;
    1510:	2301      	movs	r3, #1
    1512:	e7ac      	b.n	146e <_usb_d_dev_handler+0x42>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1514:	4b48      	ldr	r3, [pc, #288]	; (1638 <_usb_d_dev_handler+0x20c>)
    1516:	4a4a      	ldr	r2, [pc, #296]	; (1640 <_usb_d_dev_handler+0x214>)
    1518:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    151a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    151c:	3a92      	subs	r2, #146	; 0x92
    151e:	3aff      	subs	r2, #255	; 0xff
    1520:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1522:	4b46      	ldr	r3, [pc, #280]	; (163c <_usb_d_dev_handler+0x210>)
    1524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1526:	2100      	movs	r1, #0
    1528:	2004      	movs	r0, #4
    152a:	4798      	blx	r3
	bool     rc    = true;
    152c:	2301      	movs	r3, #1
    152e:	e79e      	b.n	146e <_usb_d_dev_handler+0x42>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1530:	06da      	lsls	r2, r3, #27
    1532:	d407      	bmi.n	1544 <_usb_d_dev_handler+0x118>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1534:	065a      	lsls	r2, r3, #25
    1536:	d408      	bmi.n	154a <_usb_d_dev_handler+0x11e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1538:	069b      	lsls	r3, r3, #26
    153a:	d52f      	bpl.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_stall(ept, 0);
    153c:	2100      	movs	r1, #0
    153e:	4b43      	ldr	r3, [pc, #268]	; (164c <_usb_d_dev_handler+0x220>)
    1540:	4798      	blx	r3
    1542:	e02b      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_setup(ept);
    1544:	4b42      	ldr	r3, [pc, #264]	; (1650 <_usb_d_dev_handler+0x224>)
    1546:	4798      	blx	r3
    1548:	e028      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_stall(ept, 1);
    154a:	2101      	movs	r1, #1
    154c:	4b3f      	ldr	r3, [pc, #252]	; (164c <_usb_d_dev_handler+0x220>)
    154e:	4798      	blx	r3
    1550:	e024      	b.n	159c <_usb_d_dev_handler+0x170>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1552:	065a      	lsls	r2, r3, #25
    1554:	d40f      	bmi.n	1576 <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1556:	071a      	lsls	r2, r3, #28
    1558:	d411      	bmi.n	157e <_usb_d_dev_handler+0x152>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    155a:	079a      	lsls	r2, r3, #30
    155c:	d413      	bmi.n	1586 <_usb_d_dev_handler+0x15a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    155e:	7cc1      	ldrb	r1, [r0, #19]
    1560:	2207      	movs	r2, #7
    1562:	400a      	ands	r2, r1
    1564:	2a01      	cmp	r2, #1
    1566:	d119      	bne.n	159c <_usb_d_dev_handler+0x170>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1568:	075a      	lsls	r2, r3, #29
    156a:	d410      	bmi.n	158e <_usb_d_dev_handler+0x162>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    156c:	06db      	lsls	r3, r3, #27
    156e:	d515      	bpl.n	159c <_usb_d_dev_handler+0x170>
			_usb_d_dev_handle_setup(ept);
    1570:	4b37      	ldr	r3, [pc, #220]	; (1650 <_usb_d_dev_handler+0x224>)
    1572:	4798      	blx	r3
    1574:	e012      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_stall(ept, 1);
    1576:	2101      	movs	r1, #1
    1578:	4b34      	ldr	r3, [pc, #208]	; (164c <_usb_d_dev_handler+0x220>)
    157a:	4798      	blx	r3
    157c:	e00e      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_trfail(ept, 1);
    157e:	2101      	movs	r1, #1
    1580:	4b34      	ldr	r3, [pc, #208]	; (1654 <_usb_d_dev_handler+0x228>)
    1582:	4798      	blx	r3
    1584:	e00a      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_in_next(ept, true);
    1586:	2101      	movs	r1, #1
    1588:	4b33      	ldr	r3, [pc, #204]	; (1658 <_usb_d_dev_handler+0x22c>)
    158a:	4798      	blx	r3
    158c:	e006      	b.n	159c <_usb_d_dev_handler+0x170>
			_usb_d_dev_handle_trfail(ept, 0);
    158e:	2100      	movs	r1, #0
    1590:	4b30      	ldr	r3, [pc, #192]	; (1654 <_usb_d_dev_handler+0x228>)
    1592:	4798      	blx	r3
    1594:	e002      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_stall(ept, 0);
    1596:	2100      	movs	r1, #0
    1598:	4b2c      	ldr	r3, [pc, #176]	; (164c <_usb_d_dev_handler+0x220>)
    159a:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    159c:	3401      	adds	r4, #1
    159e:	b2e4      	uxtb	r4, r4
    15a0:	2c08      	cmp	r4, #8
    15a2:	d900      	bls.n	15a6 <_usb_d_dev_handler+0x17a>
    15a4:	e765      	b.n	1472 <_usb_d_dev_handler+0x46>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    15a6:	4b25      	ldr	r3, [pc, #148]	; (163c <_usb_d_dev_handler+0x210>)
    15a8:	3360      	adds	r3, #96	; 0x60
    15aa:	00a2      	lsls	r2, r4, #2
    15ac:	1911      	adds	r1, r2, r4
    15ae:	0088      	lsls	r0, r1, #2
    15b0:	0001      	movs	r1, r0
    15b2:	3010      	adds	r0, #16
    15b4:	1818      	adds	r0, r3, r0
    15b6:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    15b8:	185b      	adds	r3, r3, r1
    15ba:	3326      	adds	r3, #38	; 0x26
    15bc:	781b      	ldrb	r3, [r3, #0]
    15be:	2bff      	cmp	r3, #255	; 0xff
    15c0:	d0ec      	beq.n	159c <_usb_d_dev_handler+0x170>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    15c2:	7c82      	ldrb	r2, [r0, #18]
    15c4:	230f      	movs	r3, #15
    15c6:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    15c8:	2201      	movs	r2, #1
    15ca:	409a      	lsls	r2, r3
    15cc:	422a      	tst	r2, r5
    15ce:	d0e5      	beq.n	159c <_usb_d_dev_handler+0x170>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    15d0:	001a      	movs	r2, r3
    15d2:	3208      	adds	r2, #8
    15d4:	0152      	lsls	r2, r2, #5
    15d6:	4918      	ldr	r1, [pc, #96]	; (1638 <_usb_d_dev_handler+0x20c>)
    15d8:	468c      	mov	ip, r1
    15da:	4462      	add	r2, ip
    15dc:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    15de:	015b      	lsls	r3, r3, #5
    15e0:	491e      	ldr	r1, [pc, #120]	; (165c <_usb_d_dev_handler+0x230>)
    15e2:	468c      	mov	ip, r1
    15e4:	4463      	add	r3, ip
    15e6:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    15e8:	4013      	ands	r3, r2
	if (flags) {
    15ea:	d0d7      	beq.n	159c <_usb_d_dev_handler+0x170>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    15ec:	7cc2      	ldrb	r2, [r0, #19]
    15ee:	2147      	movs	r1, #71	; 0x47
    15f0:	4011      	ands	r1, r2
    15f2:	2901      	cmp	r1, #1
    15f4:	d09c      	beq.n	1530 <_usb_d_dev_handler+0x104>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    15f6:	b252      	sxtb	r2, r2
    15f8:	2a00      	cmp	r2, #0
    15fa:	dbaa      	blt.n	1552 <_usb_d_dev_handler+0x126>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    15fc:	069a      	lsls	r2, r3, #26
    15fe:	d4ca      	bmi.n	1596 <_usb_d_dev_handler+0x16a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1600:	075a      	lsls	r2, r3, #29
    1602:	d40d      	bmi.n	1620 <_usb_d_dev_handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1604:	07da      	lsls	r2, r3, #31
    1606:	d40f      	bmi.n	1628 <_usb_d_dev_handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1608:	7cc1      	ldrb	r1, [r0, #19]
    160a:	2207      	movs	r2, #7
    160c:	400a      	ands	r2, r1
    160e:	2a01      	cmp	r2, #1
    1610:	d1c4      	bne.n	159c <_usb_d_dev_handler+0x170>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1612:	071a      	lsls	r2, r3, #28
    1614:	d40c      	bmi.n	1630 <_usb_d_dev_handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1616:	06db      	lsls	r3, r3, #27
    1618:	d5c0      	bpl.n	159c <_usb_d_dev_handler+0x170>
			_usb_d_dev_handle_setup(ept);
    161a:	4b0d      	ldr	r3, [pc, #52]	; (1650 <_usb_d_dev_handler+0x224>)
    161c:	4798      	blx	r3
    161e:	e7bd      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_handle_trfail(ept, 0);
    1620:	2100      	movs	r1, #0
    1622:	4b0c      	ldr	r3, [pc, #48]	; (1654 <_usb_d_dev_handler+0x228>)
    1624:	4798      	blx	r3
    1626:	e7b9      	b.n	159c <_usb_d_dev_handler+0x170>
		_usb_d_dev_out_next(ept, true);
    1628:	2101      	movs	r1, #1
    162a:	4b0d      	ldr	r3, [pc, #52]	; (1660 <_usb_d_dev_handler+0x234>)
    162c:	4798      	blx	r3
    162e:	e7b5      	b.n	159c <_usb_d_dev_handler+0x170>
			_usb_d_dev_handle_trfail(ept, 1);
    1630:	2101      	movs	r1, #1
    1632:	4b08      	ldr	r3, [pc, #32]	; (1654 <_usb_d_dev_handler+0x228>)
    1634:	4798      	blx	r3
    1636:	e7b1      	b.n	159c <_usb_d_dev_handler+0x170>
    1638:	41005000 	.word	0x41005000
    163c:	2000012c 	.word	0x2000012c
    1640:	00000201 	.word	0x00000201
    1644:	40000800 	.word	0x40000800
    1648:	00001049 	.word	0x00001049
    164c:	00000e65 	.word	0x00000e65
    1650:	00000dd9 	.word	0x00000dd9
    1654:	00000f39 	.word	0x00000f39
    1658:	0000109d 	.word	0x0000109d
    165c:	41005109 	.word	0x41005109
    1660:	00001229 	.word	0x00001229

00001664 <_usb_d_dev_init>:
{
    1664:	b500      	push	{lr}
    1666:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    1668:	2200      	movs	r2, #0
    166a:	ab01      	add	r3, sp, #4
    166c:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    166e:	4b21      	ldr	r3, [pc, #132]	; (16f4 <_usb_d_dev_init+0x90>)
    1670:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1672:	07db      	lsls	r3, r3, #31
    1674:	d41b      	bmi.n	16ae <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1676:	4b1f      	ldr	r3, [pc, #124]	; (16f4 <_usb_d_dev_init+0x90>)
    1678:	789b      	ldrb	r3, [r3, #2]
    167a:	079b      	lsls	r3, r3, #30
    167c:	d1fb      	bne.n	1676 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    167e:	4b1d      	ldr	r3, [pc, #116]	; (16f4 <_usb_d_dev_init+0x90>)
    1680:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1682:	079b      	lsls	r3, r3, #30
    1684:	d50c      	bpl.n	16a0 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1686:	4a1b      	ldr	r2, [pc, #108]	; (16f4 <_usb_d_dev_init+0x90>)
    1688:	7813      	ldrb	r3, [r2, #0]
    168a:	2102      	movs	r1, #2
    168c:	438b      	bics	r3, r1
    168e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1690:	4b18      	ldr	r3, [pc, #96]	; (16f4 <_usb_d_dev_init+0x90>)
    1692:	789b      	ldrb	r3, [r3, #2]
    1694:	079b      	lsls	r3, r3, #30
    1696:	d1fb      	bne.n	1690 <_usb_d_dev_init+0x2c>
    1698:	4b16      	ldr	r3, [pc, #88]	; (16f4 <_usb_d_dev_init+0x90>)
    169a:	789b      	ldrb	r3, [r3, #2]
    169c:	079b      	lsls	r3, r3, #30
    169e:	d4fb      	bmi.n	1698 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    16a0:	2201      	movs	r2, #1
    16a2:	4b14      	ldr	r3, [pc, #80]	; (16f4 <_usb_d_dev_init+0x90>)
    16a4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16a6:	4b13      	ldr	r3, [pc, #76]	; (16f4 <_usb_d_dev_init+0x90>)
    16a8:	789b      	ldrb	r3, [r3, #2]
    16aa:	079b      	lsls	r3, r3, #30
    16ac:	d1fb      	bne.n	16a6 <_usb_d_dev_init+0x42>
    16ae:	4b11      	ldr	r3, [pc, #68]	; (16f4 <_usb_d_dev_init+0x90>)
    16b0:	789b      	ldrb	r3, [r3, #2]
    16b2:	07db      	lsls	r3, r3, #31
    16b4:	d4fb      	bmi.n	16ae <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    16b6:	4b10      	ldr	r3, [pc, #64]	; (16f8 <_usb_d_dev_init+0x94>)
    16b8:	4a10      	ldr	r2, [pc, #64]	; (16fc <_usb_d_dev_init+0x98>)
    16ba:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    16bc:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    16be:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    16c0:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    16c2:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    16c4:	4b0e      	ldr	r3, [pc, #56]	; (1700 <_usb_d_dev_init+0x9c>)
    16c6:	4798      	blx	r3
	_usb_load_calib();
    16c8:	4b0e      	ldr	r3, [pc, #56]	; (1704 <_usb_d_dev_init+0xa0>)
    16ca:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    16cc:	2204      	movs	r2, #4
    16ce:	4b09      	ldr	r3, [pc, #36]	; (16f4 <_usb_d_dev_init+0x90>)
    16d0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16d2:	4b08      	ldr	r3, [pc, #32]	; (16f4 <_usb_d_dev_init+0x90>)
    16d4:	789b      	ldrb	r3, [r3, #2]
    16d6:	079b      	lsls	r3, r3, #30
    16d8:	d1fb      	bne.n	16d2 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    16da:	4a06      	ldr	r2, [pc, #24]	; (16f4 <_usb_d_dev_init+0x90>)
    16dc:	4b06      	ldr	r3, [pc, #24]	; (16f8 <_usb_d_dev_init+0x94>)
    16de:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    16e0:	ab01      	add	r3, sp, #4
    16e2:	785b      	ldrb	r3, [r3, #1]
    16e4:	2101      	movs	r1, #1
    16e6:	430b      	orrs	r3, r1
    16e8:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    16ea:	8113      	strh	r3, [r2, #8]
}
    16ec:	2000      	movs	r0, #0
    16ee:	b003      	add	sp, #12
    16f0:	bd00      	pop	{pc}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	41005000 	.word	0x41005000
    16f8:	2000012c 	.word	0x2000012c
    16fc:	00000d81 	.word	0x00000d81
    1700:	00001049 	.word	0x00001049
    1704:	00000d85 	.word	0x00000d85

00001708 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1708:	4b10      	ldr	r3, [pc, #64]	; (174c <_usb_d_dev_enable+0x44>)
    170a:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    170c:	079b      	lsls	r3, r3, #30
    170e:	d119      	bne.n	1744 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1710:	4b0e      	ldr	r3, [pc, #56]	; (174c <_usb_d_dev_enable+0x44>)
    1712:	789b      	ldrb	r3, [r3, #2]
    1714:	079b      	lsls	r3, r3, #30
    1716:	d1fb      	bne.n	1710 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1718:	4b0c      	ldr	r3, [pc, #48]	; (174c <_usb_d_dev_enable+0x44>)
    171a:	781b      	ldrb	r3, [r3, #0]
    171c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    171e:	079a      	lsls	r2, r3, #30
    1720:	d408      	bmi.n	1734 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1722:	2202      	movs	r2, #2
    1724:	4313      	orrs	r3, r2
    1726:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1728:	4a08      	ldr	r2, [pc, #32]	; (174c <_usb_d_dev_enable+0x44>)
    172a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    172c:	4b07      	ldr	r3, [pc, #28]	; (174c <_usb_d_dev_enable+0x44>)
    172e:	789b      	ldrb	r3, [r3, #2]
    1730:	079b      	lsls	r3, r3, #30
    1732:	d1fb      	bne.n	172c <_usb_d_dev_enable+0x24>
    1734:	2280      	movs	r2, #128	; 0x80
    1736:	4b06      	ldr	r3, [pc, #24]	; (1750 <_usb_d_dev_enable+0x48>)
    1738:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    173a:	4a06      	ldr	r2, [pc, #24]	; (1754 <_usb_d_dev_enable+0x4c>)
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <_usb_d_dev_enable+0x44>)
    173e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1740:	2000      	movs	r0, #0
}
    1742:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1744:	2011      	movs	r0, #17
    1746:	4240      	negs	r0, r0
    1748:	e7fb      	b.n	1742 <_usb_d_dev_enable+0x3a>
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	41005000 	.word	0x41005000
    1750:	e000e100 	.word	0xe000e100
    1754:	0000028d 	.word	0x0000028d

00001758 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1758:	4a02      	ldr	r2, [pc, #8]	; (1764 <_usb_d_dev_attach+0xc>)
    175a:	8913      	ldrh	r3, [r2, #8]
    175c:	2101      	movs	r1, #1
    175e:	438b      	bics	r3, r1
    1760:	8113      	strh	r3, [r2, #8]
}
    1762:	4770      	bx	lr
    1764:	41005000 	.word	0x41005000

00001768 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1768:	2380      	movs	r3, #128	; 0x80
    176a:	425b      	negs	r3, r3
    176c:	4318      	orrs	r0, r3
    176e:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1770:	4b01      	ldr	r3, [pc, #4]	; (1778 <_usb_d_dev_set_address+0x10>)
    1772:	7298      	strb	r0, [r3, #10]
}
    1774:	4770      	bx	lr
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	41005000 	.word	0x41005000

0000177c <_usb_d_dev_ep_init>:
{
    177c:	b5f0      	push	{r4, r5, r6, r7, lr}
    177e:	46c6      	mov	lr, r8
    1780:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1782:	230f      	movs	r3, #15
    1784:	4003      	ands	r3, r0
    1786:	b244      	sxtb	r4, r0
    1788:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    178a:	2b00      	cmp	r3, #0
    178c:	d005      	beq.n	179a <_usb_d_dev_ep_init+0x1e>
    178e:	2c00      	cmp	r4, #0
    1790:	db01      	blt.n	1796 <_usb_d_dev_ep_init+0x1a>
    1792:	001c      	movs	r4, r3
    1794:	e002      	b.n	179c <_usb_d_dev_ep_init+0x20>
    1796:	1c9c      	adds	r4, r3, #2
    1798:	e000      	b.n	179c <_usb_d_dev_ep_init+0x20>
    179a:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    179c:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    179e:	2503      	movs	r5, #3
    17a0:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    17a2:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    17a4:	2b02      	cmp	r3, #2
    17a6:	d900      	bls.n	17aa <_usb_d_dev_ep_init+0x2e>
    17a8:	e07a      	b.n	18a0 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    17aa:	00a5      	lsls	r5, r4, #2
    17ac:	192d      	adds	r5, r5, r4
    17ae:	00ac      	lsls	r4, r5, #2
    17b0:	46a0      	mov	r8, r4
    17b2:	4c43      	ldr	r4, [pc, #268]	; (18c0 <_usb_d_dev_ep_init+0x144>)
    17b4:	3460      	adds	r4, #96	; 0x60
    17b6:	4444      	add	r4, r8
    17b8:	3426      	adds	r4, #38	; 0x26
    17ba:	7824      	ldrb	r4, [r4, #0]
    17bc:	2cff      	cmp	r4, #255	; 0xff
    17be:	d000      	beq.n	17c2 <_usb_d_dev_ep_init+0x46>
    17c0:	e071      	b.n	18a6 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    17c2:	2900      	cmp	r1, #0
    17c4:	d118      	bne.n	17f8 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17c6:	2b00      	cmp	r3, #0
    17c8:	d004      	beq.n	17d4 <_usb_d_dev_ep_init+0x58>
    17ca:	4664      	mov	r4, ip
    17cc:	2c00      	cmp	r4, #0
    17ce:	db01      	blt.n	17d4 <_usb_d_dev_ep_init+0x58>
    17d0:	3302      	adds	r3, #2
    17d2:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    17d4:	009c      	lsls	r4, r3, #2
    17d6:	18e3      	adds	r3, r4, r3
    17d8:	009d      	lsls	r5, r3, #2
    17da:	4b39      	ldr	r3, [pc, #228]	; (18c0 <_usb_d_dev_ep_init+0x144>)
    17dc:	3360      	adds	r3, #96	; 0x60
    17de:	195b      	adds	r3, r3, r5
    17e0:	3326      	adds	r3, #38	; 0x26
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	2bff      	cmp	r3, #255	; 0xff
    17e6:	d161      	bne.n	18ac <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    17e8:	007b      	lsls	r3, r7, #1
    17ea:	19db      	adds	r3, r3, r7
    17ec:	009c      	lsls	r4, r3, #2
    17ee:	4b35      	ldr	r3, [pc, #212]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    17f0:	191b      	adds	r3, r3, r4
    17f2:	689b      	ldr	r3, [r3, #8]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d05c      	beq.n	18b2 <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    17f8:	4663      	mov	r3, ip
    17fa:	2b00      	cmp	r3, #0
    17fc:	db37      	blt.n	186e <_usb_d_dev_ep_init+0xf2>
    17fe:	007b      	lsls	r3, r7, #1
    1800:	19db      	adds	r3, r3, r7
    1802:	009c      	lsls	r4, r3, #2
    1804:	4b2f      	ldr	r3, [pc, #188]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    1806:	191b      	adds	r3, r3, r4
    1808:	689b      	ldr	r3, [r3, #8]
    180a:	1e5c      	subs	r4, r3, #1
    180c:	41a3      	sbcs	r3, r4
    180e:	b2db      	uxtb	r3, r3
    1810:	2b00      	cmp	r3, #0
    1812:	d00a      	beq.n	182a <_usb_d_dev_ep_init+0xae>
    1814:	4663      	mov	r3, ip
    1816:	2b00      	cmp	r3, #0
    1818:	db33      	blt.n	1882 <_usb_d_dev_ep_init+0x106>
    181a:	007b      	lsls	r3, r7, #1
    181c:	19db      	adds	r3, r3, r7
    181e:	009c      	lsls	r4, r3, #2
    1820:	4b28      	ldr	r3, [pc, #160]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    1822:	191b      	adds	r3, r3, r4
    1824:	8a1b      	ldrh	r3, [r3, #16]
    1826:	4293      	cmp	r3, r2
    1828:	db46      	blt.n	18b8 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    182a:	4663      	mov	r3, ip
    182c:	2b00      	cmp	r3, #0
    182e:	db2f      	blt.n	1890 <_usb_d_dev_ep_init+0x114>
    1830:	007b      	lsls	r3, r7, #1
    1832:	19df      	adds	r7, r3, r7
    1834:	00bc      	lsls	r4, r7, #2
    1836:	4b23      	ldr	r3, [pc, #140]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    1838:	191b      	adds	r3, r3, r4
    183a:	689b      	ldr	r3, [r3, #8]
    183c:	469c      	mov	ip, r3
    183e:	4b20      	ldr	r3, [pc, #128]	; (18c0 <_usb_d_dev_ep_init+0x144>)
    1840:	00b5      	lsls	r5, r6, #2
    1842:	19af      	adds	r7, r5, r6
    1844:	00bc      	lsls	r4, r7, #2
    1846:	191c      	adds	r4, r3, r4
    1848:	3480      	adds	r4, #128	; 0x80
    184a:	4667      	mov	r7, ip
    184c:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    184e:	3360      	adds	r3, #96	; 0x60
    1850:	19af      	adds	r7, r5, r6
    1852:	00bc      	lsls	r4, r7, #2
    1854:	0027      	movs	r7, r4
    1856:	191c      	adds	r4, r3, r4
    1858:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    185a:	3101      	adds	r1, #1
    185c:	3427      	adds	r4, #39	; 0x27
    185e:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1860:	19db      	adds	r3, r3, r7
    1862:	3326      	adds	r3, #38	; 0x26
    1864:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1866:	2000      	movs	r0, #0
}
    1868:	bc04      	pop	{r2}
    186a:	4690      	mov	r8, r2
    186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    186e:	007b      	lsls	r3, r7, #1
    1870:	19db      	adds	r3, r3, r7
    1872:	009c      	lsls	r4, r3, #2
    1874:	4b13      	ldr	r3, [pc, #76]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    1876:	191b      	adds	r3, r3, r4
    1878:	68db      	ldr	r3, [r3, #12]
    187a:	1e5c      	subs	r4, r3, #1
    187c:	41a3      	sbcs	r3, r4
    187e:	b2db      	uxtb	r3, r3
    1880:	e7c6      	b.n	1810 <_usb_d_dev_ep_init+0x94>
    1882:	007b      	lsls	r3, r7, #1
    1884:	19db      	adds	r3, r3, r7
    1886:	009c      	lsls	r4, r3, #2
    1888:	4b0e      	ldr	r3, [pc, #56]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    188a:	191b      	adds	r3, r3, r4
    188c:	8a5b      	ldrh	r3, [r3, #18]
    188e:	e7ca      	b.n	1826 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1890:	007b      	lsls	r3, r7, #1
    1892:	19df      	adds	r7, r3, r7
    1894:	00bc      	lsls	r4, r7, #2
    1896:	4b0b      	ldr	r3, [pc, #44]	; (18c4 <_usb_d_dev_ep_init+0x148>)
    1898:	191b      	adds	r3, r3, r4
    189a:	68db      	ldr	r3, [r3, #12]
    189c:	469c      	mov	ip, r3
    189e:	e7ce      	b.n	183e <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    18a0:	2012      	movs	r0, #18
    18a2:	4240      	negs	r0, r0
    18a4:	e7e0      	b.n	1868 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    18a6:	2014      	movs	r0, #20
    18a8:	4240      	negs	r0, r0
    18aa:	e7dd      	b.n	1868 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    18ac:	2014      	movs	r0, #20
    18ae:	4240      	negs	r0, r0
    18b0:	e7da      	b.n	1868 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    18b2:	2013      	movs	r0, #19
    18b4:	4240      	negs	r0, r0
    18b6:	e7d7      	b.n	1868 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    18b8:	2013      	movs	r0, #19
    18ba:	4240      	negs	r0, r0
    18bc:	e7d4      	b.n	1868 <_usb_d_dev_ep_init+0xec>
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	2000012c 	.word	0x2000012c
    18c4:	0000319c 	.word	0x0000319c

000018c8 <_usb_d_dev_ep_deinit>:
{
    18c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ca:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    18cc:	250f      	movs	r5, #15
    18ce:	4005      	ands	r5, r0
    18d0:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    18d2:	0ffb      	lsrs	r3, r7, #31
    18d4:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    18d6:	2d00      	cmp	r5, #0
    18d8:	d005      	beq.n	18e6 <_usb_d_dev_ep_deinit+0x1e>
    18da:	2f00      	cmp	r7, #0
    18dc:	db01      	blt.n	18e2 <_usb_d_dev_ep_deinit+0x1a>
    18de:	002a      	movs	r2, r5
    18e0:	e002      	b.n	18e8 <_usb_d_dev_ep_deinit+0x20>
    18e2:	1caa      	adds	r2, r5, #2
    18e4:	e000      	b.n	18e8 <_usb_d_dev_ep_deinit+0x20>
    18e6:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    18e8:	0016      	movs	r6, r2
    18ea:	0093      	lsls	r3, r2, #2
    18ec:	189b      	adds	r3, r3, r2
    18ee:	0099      	lsls	r1, r3, #2
    18f0:	3110      	adds	r1, #16
    18f2:	4823      	ldr	r0, [pc, #140]	; (1980 <_usb_d_dev_ep_deinit+0xb8>)
    18f4:	3060      	adds	r0, #96	; 0x60
    18f6:	1840      	adds	r0, r0, r1
    18f8:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    18fa:	2d02      	cmp	r5, #2
    18fc:	d830      	bhi.n	1960 <_usb_d_dev_ep_deinit+0x98>
    18fe:	0093      	lsls	r3, r2, #2
    1900:	189a      	adds	r2, r3, r2
    1902:	0091      	lsls	r1, r2, #2
    1904:	4b1e      	ldr	r3, [pc, #120]	; (1980 <_usb_d_dev_ep_deinit+0xb8>)
    1906:	3360      	adds	r3, #96	; 0x60
    1908:	185b      	adds	r3, r3, r1
    190a:	3326      	adds	r3, #38	; 0x26
    190c:	781b      	ldrb	r3, [r3, #0]
    190e:	2bff      	cmp	r3, #255	; 0xff
    1910:	d026      	beq.n	1960 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1912:	2203      	movs	r2, #3
    1914:	4661      	mov	r1, ip
    1916:	4b1b      	ldr	r3, [pc, #108]	; (1984 <_usb_d_dev_ep_deinit+0xbc>)
    1918:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    191a:	00b2      	lsls	r2, r6, #2
    191c:	1992      	adds	r2, r2, r6
    191e:	0091      	lsls	r1, r2, #2
    1920:	4b17      	ldr	r3, [pc, #92]	; (1980 <_usb_d_dev_ep_deinit+0xb8>)
    1922:	185b      	adds	r3, r3, r1
    1924:	3380      	adds	r3, #128	; 0x80
    1926:	79da      	ldrb	r2, [r3, #7]
    1928:	2307      	movs	r3, #7
    192a:	4013      	ands	r3, r2
    192c:	2b01      	cmp	r3, #1
    192e:	d018      	beq.n	1962 <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    1930:	2f00      	cmp	r7, #0
    1932:	db1c      	blt.n	196e <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1934:	4a14      	ldr	r2, [pc, #80]	; (1988 <_usb_d_dev_ep_deinit+0xc0>)
    1936:	3408      	adds	r4, #8
    1938:	0164      	lsls	r4, r4, #5
    193a:	5ca3      	ldrb	r3, [r4, r2]
    193c:	2107      	movs	r1, #7
    193e:	438b      	bics	r3, r1
    1940:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    1942:	4b0f      	ldr	r3, [pc, #60]	; (1980 <_usb_d_dev_ep_deinit+0xb8>)
    1944:	3360      	adds	r3, #96	; 0x60
    1946:	00b1      	lsls	r1, r6, #2
    1948:	1988      	adds	r0, r1, r6
    194a:	0082      	lsls	r2, r0, #2
    194c:	189a      	adds	r2, r3, r2
    194e:	3227      	adds	r2, #39	; 0x27
    1950:	2000      	movs	r0, #0
    1952:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    1954:	198e      	adds	r6, r1, r6
    1956:	00b2      	lsls	r2, r6, #2
    1958:	189b      	adds	r3, r3, r2
    195a:	3326      	adds	r3, #38	; 0x26
    195c:	22ff      	movs	r2, #255	; 0xff
    195e:	701a      	strb	r2, [r3, #0]
}
    1960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1962:	3408      	adds	r4, #8
    1964:	0164      	lsls	r4, r4, #5
    1966:	2200      	movs	r2, #0
    1968:	4b07      	ldr	r3, [pc, #28]	; (1988 <_usb_d_dev_ep_deinit+0xc0>)
    196a:	54e2      	strb	r2, [r4, r3]
    196c:	e7e9      	b.n	1942 <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    196e:	4a06      	ldr	r2, [pc, #24]	; (1988 <_usb_d_dev_ep_deinit+0xc0>)
    1970:	3508      	adds	r5, #8
    1972:	016d      	lsls	r5, r5, #5
    1974:	5cab      	ldrb	r3, [r5, r2]
    1976:	2170      	movs	r1, #112	; 0x70
    1978:	438b      	bics	r3, r1
    197a:	54ab      	strb	r3, [r5, r2]
    197c:	e7e1      	b.n	1942 <_usb_d_dev_ep_deinit+0x7a>
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	2000012c 	.word	0x2000012c
    1984:	00000ebd 	.word	0x00000ebd
    1988:	41005000 	.word	0x41005000

0000198c <_usb_d_dev_ep_enable>:
{
    198c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    198e:	230f      	movs	r3, #15
    1990:	4003      	ands	r3, r0
    1992:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1994:	2b00      	cmp	r3, #0
    1996:	d005      	beq.n	19a4 <_usb_d_dev_ep_enable+0x18>
    1998:	2800      	cmp	r0, #0
    199a:	db01      	blt.n	19a0 <_usb_d_dev_ep_enable+0x14>
    199c:	001e      	movs	r6, r3
    199e:	e002      	b.n	19a6 <_usb_d_dev_ep_enable+0x1a>
    19a0:	1c9e      	adds	r6, r3, #2
    19a2:	e000      	b.n	19a6 <_usb_d_dev_ep_enable+0x1a>
    19a4:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    19a6:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    19a8:	001a      	movs	r2, r3
    19aa:	3208      	adds	r2, #8
    19ac:	0152      	lsls	r2, r2, #5
    19ae:	49b2      	ldr	r1, [pc, #712]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    19b0:	5c55      	ldrb	r5, [r2, r1]
    19b2:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    19b4:	2b02      	cmp	r3, #2
    19b6:	d900      	bls.n	19ba <_usb_d_dev_ep_enable+0x2e>
    19b8:	e14f      	b.n	1c5a <_usb_d_dev_ep_enable+0x2ce>
    19ba:	00b1      	lsls	r1, r6, #2
    19bc:	1989      	adds	r1, r1, r6
    19be:	008e      	lsls	r6, r1, #2
    19c0:	4aae      	ldr	r2, [pc, #696]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    19c2:	3260      	adds	r2, #96	; 0x60
    19c4:	1992      	adds	r2, r2, r6
    19c6:	3226      	adds	r2, #38	; 0x26
    19c8:	7812      	ldrb	r2, [r2, #0]
    19ca:	2aff      	cmp	r2, #255	; 0xff
    19cc:	d100      	bne.n	19d0 <_usb_d_dev_ep_enable+0x44>
    19ce:	e147      	b.n	1c60 <_usb_d_dev_ep_enable+0x2d4>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    19d0:	4aaa      	ldr	r2, [pc, #680]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    19d2:	015e      	lsls	r6, r3, #5
    19d4:	1996      	adds	r6, r2, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    19d6:	00a1      	lsls	r1, r4, #2
    19d8:	1909      	adds	r1, r1, r4
    19da:	008f      	lsls	r7, r1, #2
    19dc:	19d2      	adds	r2, r2, r7
    19de:	3280      	adds	r2, #128	; 0x80
    19e0:	79d1      	ldrb	r1, [r2, #7]
    19e2:	2207      	movs	r2, #7
    19e4:	400a      	ands	r2, r1
    19e6:	2a01      	cmp	r2, #1
    19e8:	d037      	beq.n	1a5a <_usb_d_dev_ep_enable+0xce>
	} else if (dir) {
    19ea:	2800      	cmp	r0, #0
    19ec:	da00      	bge.n	19f0 <_usb_d_dev_ep_enable+0x64>
    19ee:	e0cb      	b.n	1b88 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    19f0:	076a      	lsls	r2, r5, #29
    19f2:	d000      	beq.n	19f6 <_usb_d_dev_ep_enable+0x6a>
    19f4:	e13d      	b.n	1c72 <_usb_d_dev_ep_enable+0x2e6>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    19f6:	4aa1      	ldr	r2, [pc, #644]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    19f8:	00a0      	lsls	r0, r4, #2
    19fa:	1907      	adds	r7, r0, r4
    19fc:	00b9      	lsls	r1, r7, #2
    19fe:	1851      	adds	r1, r2, r1
    1a00:	3180      	adds	r1, #128	; 0x80
    1a02:	79c9      	ldrb	r1, [r1, #7]
    1a04:	0749      	lsls	r1, r1, #29
    1a06:	0f49      	lsrs	r1, r1, #29
    1a08:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a0a:	0019      	movs	r1, r3
    1a0c:	3108      	adds	r1, #8
    1a0e:	0149      	lsls	r1, r1, #5
    1a10:	4f99      	ldr	r7, [pc, #612]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    1a12:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a14:	3260      	adds	r2, #96	; 0x60
    1a16:	1904      	adds	r4, r0, r4
    1a18:	00a1      	lsls	r1, r4, #2
    1a1a:	1852      	adds	r2, r2, r1
    1a1c:	8c90      	ldrh	r0, [r2, #36]	; 0x24
    1a1e:	0382      	lsls	r2, r0, #14
    1a20:	4997      	ldr	r1, [pc, #604]	; (1c80 <_usb_d_dev_ep_enable+0x2f4>)
    1a22:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a24:	2180      	movs	r1, #128	; 0x80
    1a26:	0089      	lsls	r1, r1, #2
    1a28:	4288      	cmp	r0, r1
    1a2a:	d900      	bls.n	1a2e <_usb_d_dev_ep_enable+0xa2>
    1a2c:	e0f8      	b.n	1c20 <_usb_d_dev_ep_enable+0x294>
    1a2e:	3901      	subs	r1, #1
    1a30:	39ff      	subs	r1, #255	; 0xff
    1a32:	4288      	cmp	r0, r1
    1a34:	d900      	bls.n	1a38 <_usb_d_dev_ep_enable+0xac>
    1a36:	e106      	b.n	1c46 <_usb_d_dev_ep_enable+0x2ba>
    1a38:	2880      	cmp	r0, #128	; 0x80
    1a3a:	d900      	bls.n	1a3e <_usb_d_dev_ep_enable+0xb2>
    1a3c:	e105      	b.n	1c4a <_usb_d_dev_ep_enable+0x2be>
    1a3e:	2840      	cmp	r0, #64	; 0x40
    1a40:	d900      	bls.n	1a44 <_usb_d_dev_ep_enable+0xb8>
    1a42:	e104      	b.n	1c4e <_usb_d_dev_ep_enable+0x2c2>
    1a44:	2820      	cmp	r0, #32
    1a46:	d900      	bls.n	1a4a <_usb_d_dev_ep_enable+0xbe>
    1a48:	e103      	b.n	1c52 <_usb_d_dev_ep_enable+0x2c6>
    1a4a:	2810      	cmp	r0, #16
    1a4c:	d900      	bls.n	1a50 <_usb_d_dev_ep_enable+0xc4>
    1a4e:	e102      	b.n	1c56 <_usb_d_dev_ep_enable+0x2ca>
    1a50:	39f8      	subs	r1, #248	; 0xf8
    1a52:	4281      	cmp	r1, r0
    1a54:	4189      	sbcs	r1, r1
    1a56:	4249      	negs	r1, r1
    1a58:	e0e3      	b.n	1c22 <_usb_d_dev_ep_enable+0x296>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1a5a:	3276      	adds	r2, #118	; 0x76
    1a5c:	422a      	tst	r2, r5
    1a5e:	d000      	beq.n	1a62 <_usb_d_dev_ep_enable+0xd6>
    1a60:	e101      	b.n	1c66 <_usb_d_dev_ep_enable+0x2da>
    1a62:	001a      	movs	r2, r3
    1a64:	3208      	adds	r2, #8
    1a66:	0152      	lsls	r2, r2, #5
    1a68:	2011      	movs	r0, #17
    1a6a:	4983      	ldr	r1, [pc, #524]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    1a6c:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a6e:	4a83      	ldr	r2, [pc, #524]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    1a70:	3260      	adds	r2, #96	; 0x60
    1a72:	19d2      	adds	r2, r2, r7
    1a74:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    1a76:	0391      	lsls	r1, r2, #14
    1a78:	4881      	ldr	r0, [pc, #516]	; (1c80 <_usb_d_dev_ep_enable+0x2f4>)
    1a7a:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a7c:	2080      	movs	r0, #128	; 0x80
    1a7e:	0080      	lsls	r0, r0, #2
    1a80:	4282      	cmp	r2, r0
    1a82:	d810      	bhi.n	1aa6 <_usb_d_dev_ep_enable+0x11a>
    1a84:	3801      	subs	r0, #1
    1a86:	38ff      	subs	r0, #255	; 0xff
    1a88:	4282      	cmp	r2, r0
    1a8a:	d827      	bhi.n	1adc <_usb_d_dev_ep_enable+0x150>
    1a8c:	2a80      	cmp	r2, #128	; 0x80
    1a8e:	d827      	bhi.n	1ae0 <_usb_d_dev_ep_enable+0x154>
    1a90:	2a40      	cmp	r2, #64	; 0x40
    1a92:	d827      	bhi.n	1ae4 <_usb_d_dev_ep_enable+0x158>
    1a94:	2a20      	cmp	r2, #32
    1a96:	d827      	bhi.n	1ae8 <_usb_d_dev_ep_enable+0x15c>
    1a98:	2a10      	cmp	r2, #16
    1a9a:	d827      	bhi.n	1aec <_usb_d_dev_ep_enable+0x160>
    1a9c:	38f8      	subs	r0, #248	; 0xf8
    1a9e:	4290      	cmp	r0, r2
    1aa0:	4180      	sbcs	r0, r0
    1aa2:	4240      	negs	r0, r0
    1aa4:	e000      	b.n	1aa8 <_usb_d_dev_ep_enable+0x11c>
    1aa6:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1aa8:	0700      	lsls	r0, r0, #28
    1aaa:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1aac:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1aae:	0491      	lsls	r1, r2, #18
    1ab0:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ab2:	2080      	movs	r0, #128	; 0x80
    1ab4:	0080      	lsls	r0, r0, #2
    1ab6:	4282      	cmp	r2, r0
    1ab8:	d81a      	bhi.n	1af0 <_usb_d_dev_ep_enable+0x164>
    1aba:	3801      	subs	r0, #1
    1abc:	38ff      	subs	r0, #255	; 0xff
    1abe:	4282      	cmp	r2, r0
    1ac0:	d858      	bhi.n	1b74 <_usb_d_dev_ep_enable+0x1e8>
    1ac2:	2a80      	cmp	r2, #128	; 0x80
    1ac4:	d858      	bhi.n	1b78 <_usb_d_dev_ep_enable+0x1ec>
    1ac6:	2a40      	cmp	r2, #64	; 0x40
    1ac8:	d858      	bhi.n	1b7c <_usb_d_dev_ep_enable+0x1f0>
    1aca:	2a20      	cmp	r2, #32
    1acc:	d858      	bhi.n	1b80 <_usb_d_dev_ep_enable+0x1f4>
    1ace:	2a10      	cmp	r2, #16
    1ad0:	d858      	bhi.n	1b84 <_usb_d_dev_ep_enable+0x1f8>
    1ad2:	38f8      	subs	r0, #248	; 0xf8
    1ad4:	4290      	cmp	r0, r2
    1ad6:	4192      	sbcs	r2, r2
    1ad8:	4252      	negs	r2, r2
    1ada:	e00a      	b.n	1af2 <_usb_d_dev_ep_enable+0x166>
    1adc:	2006      	movs	r0, #6
    1ade:	e7e3      	b.n	1aa8 <_usb_d_dev_ep_enable+0x11c>
    1ae0:	2005      	movs	r0, #5
    1ae2:	e7e1      	b.n	1aa8 <_usb_d_dev_ep_enable+0x11c>
    1ae4:	2004      	movs	r0, #4
    1ae6:	e7df      	b.n	1aa8 <_usb_d_dev_ep_enable+0x11c>
    1ae8:	2003      	movs	r0, #3
    1aea:	e7dd      	b.n	1aa8 <_usb_d_dev_ep_enable+0x11c>
    1aec:	2002      	movs	r0, #2
    1aee:	e7db      	b.n	1aa8 <_usb_d_dev_ep_enable+0x11c>
    1af0:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1af2:	0712      	lsls	r2, r2, #28
    1af4:	430a      	orrs	r2, r1
    1af6:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1af8:	001a      	movs	r2, r3
    1afa:	3208      	adds	r2, #8
    1afc:	0152      	lsls	r2, r2, #5
    1afe:	495e      	ldr	r1, [pc, #376]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    1b00:	468c      	mov	ip, r1
    1b02:	4462      	add	r2, ip
    1b04:	2040      	movs	r0, #64	; 0x40
    1b06:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b08:	2180      	movs	r1, #128	; 0x80
    1b0a:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    1b0c:	4a5b      	ldr	r2, [pc, #364]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    1b0e:	015b      	lsls	r3, r3, #5
    1b10:	18d3      	adds	r3, r2, r3
    1b12:	2100      	movs	r1, #0
    1b14:	7299      	strb	r1, [r3, #10]
    1b16:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b18:	0016      	movs	r6, r2
    1b1a:	3660      	adds	r6, #96	; 0x60
    1b1c:	00a1      	lsls	r1, r4, #2
    1b1e:	190d      	adds	r5, r1, r4
    1b20:	00ab      	lsls	r3, r5, #2
    1b22:	18f3      	adds	r3, r6, r3
    1b24:	3326      	adds	r3, #38	; 0x26
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	250f      	movs	r5, #15
    1b2a:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b2c:	190f      	adds	r7, r1, r4
    1b2e:	00bd      	lsls	r5, r7, #2
    1b30:	1955      	adds	r5, r2, r5
    1b32:	3580      	adds	r5, #128	; 0x80
    1b34:	682f      	ldr	r7, [r5, #0]
	bank->ADDR.reg          = addr;
    1b36:	015d      	lsls	r5, r3, #5
    1b38:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    1b3a:	190c      	adds	r4, r1, r4
    1b3c:	00a1      	lsls	r1, r4, #2
    1b3e:	1876      	adds	r6, r6, r1
    1b40:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b42:	1952      	adds	r2, r2, r5
    1b44:	6854      	ldr	r4, [r2, #4]
    1b46:	0489      	lsls	r1, r1, #18
    1b48:	0909      	lsrs	r1, r1, #4
    1b4a:	4e4e      	ldr	r6, [pc, #312]	; (1c84 <_usb_d_dev_ep_enable+0x2f8>)
    1b4c:	4034      	ands	r4, r6
    1b4e:	4321      	orrs	r1, r4
    1b50:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b52:	6851      	ldr	r1, [r2, #4]
    1b54:	0b89      	lsrs	r1, r1, #14
    1b56:	038c      	lsls	r4, r1, #14
    1b58:	6054      	str	r4, [r2, #4]
    1b5a:	3308      	adds	r3, #8
    1b5c:	015b      	lsls	r3, r3, #5
    1b5e:	4463      	add	r3, ip
    1b60:	22b0      	movs	r2, #176	; 0xb0
    1b62:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b64:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b66:	4b48      	ldr	r3, [pc, #288]	; (1c88 <_usb_d_dev_ep_enable+0x2fc>)
    1b68:	469c      	mov	ip, r3
    1b6a:	4465      	add	r5, ip
    1b6c:	2310      	movs	r3, #16
    1b6e:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    1b70:	2000      	movs	r0, #0
    1b72:	e067      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b74:	2206      	movs	r2, #6
    1b76:	e7bc      	b.n	1af2 <_usb_d_dev_ep_enable+0x166>
    1b78:	2205      	movs	r2, #5
    1b7a:	e7ba      	b.n	1af2 <_usb_d_dev_ep_enable+0x166>
    1b7c:	2204      	movs	r2, #4
    1b7e:	e7b8      	b.n	1af2 <_usb_d_dev_ep_enable+0x166>
    1b80:	2203      	movs	r2, #3
    1b82:	e7b6      	b.n	1af2 <_usb_d_dev_ep_enable+0x166>
    1b84:	2202      	movs	r2, #2
    1b86:	e7b4      	b.n	1af2 <_usb_d_dev_ep_enable+0x166>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1b88:	2270      	movs	r2, #112	; 0x70
    1b8a:	422a      	tst	r2, r5
    1b8c:	d000      	beq.n	1b90 <_usb_d_dev_ep_enable+0x204>
    1b8e:	e06d      	b.n	1c6c <_usb_d_dev_ep_enable+0x2e0>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1b90:	493a      	ldr	r1, [pc, #232]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    1b92:	00a0      	lsls	r0, r4, #2
    1b94:	1907      	adds	r7, r0, r4
    1b96:	00ba      	lsls	r2, r7, #2
    1b98:	188a      	adds	r2, r1, r2
    1b9a:	3280      	adds	r2, #128	; 0x80
    1b9c:	79d2      	ldrb	r2, [r2, #7]
    1b9e:	0752      	lsls	r2, r2, #29
    1ba0:	0e52      	lsrs	r2, r2, #25
    1ba2:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1ba4:	001a      	movs	r2, r3
    1ba6:	3208      	adds	r2, #8
    1ba8:	0152      	lsls	r2, r2, #5
    1baa:	4f33      	ldr	r7, [pc, #204]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    1bac:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bae:	3160      	adds	r1, #96	; 0x60
    1bb0:	1904      	adds	r4, r0, r4
    1bb2:	00a2      	lsls	r2, r4, #2
    1bb4:	1889      	adds	r1, r1, r2
    1bb6:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    1bb8:	048a      	lsls	r2, r1, #18
    1bba:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bbc:	2080      	movs	r0, #128	; 0x80
    1bbe:	0080      	lsls	r0, r0, #2
    1bc0:	4281      	cmp	r1, r0
    1bc2:	d810      	bhi.n	1be6 <_usb_d_dev_ep_enable+0x25a>
    1bc4:	3801      	subs	r0, #1
    1bc6:	38ff      	subs	r0, #255	; 0xff
    1bc8:	4281      	cmp	r1, r0
    1bca:	d81f      	bhi.n	1c0c <_usb_d_dev_ep_enable+0x280>
    1bcc:	2980      	cmp	r1, #128	; 0x80
    1bce:	d81f      	bhi.n	1c10 <_usb_d_dev_ep_enable+0x284>
    1bd0:	2940      	cmp	r1, #64	; 0x40
    1bd2:	d81f      	bhi.n	1c14 <_usb_d_dev_ep_enable+0x288>
    1bd4:	2920      	cmp	r1, #32
    1bd6:	d81f      	bhi.n	1c18 <_usb_d_dev_ep_enable+0x28c>
    1bd8:	2910      	cmp	r1, #16
    1bda:	d81f      	bhi.n	1c1c <_usb_d_dev_ep_enable+0x290>
    1bdc:	38f8      	subs	r0, #248	; 0xf8
    1bde:	4288      	cmp	r0, r1
    1be0:	4189      	sbcs	r1, r1
    1be2:	4249      	negs	r1, r1
    1be4:	e000      	b.n	1be8 <_usb_d_dev_ep_enable+0x25c>
    1be6:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1be8:	0709      	lsls	r1, r1, #28
    1bea:	430a      	orrs	r2, r1
    1bec:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1bee:	001a      	movs	r2, r3
    1bf0:	3208      	adds	r2, #8
    1bf2:	0152      	lsls	r2, r2, #5
    1bf4:	4920      	ldr	r1, [pc, #128]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    1bf6:	468c      	mov	ip, r1
    1bf8:	4462      	add	r2, ip
    1bfa:	2180      	movs	r1, #128	; 0x80
    1bfc:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    1bfe:	015a      	lsls	r2, r3, #5
    1c00:	4b1e      	ldr	r3, [pc, #120]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    1c02:	189b      	adds	r3, r3, r2
    1c04:	2200      	movs	r2, #0
    1c06:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    1c08:	2000      	movs	r0, #0
    1c0a:	e01b      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1c0c:	2106      	movs	r1, #6
    1c0e:	e7eb      	b.n	1be8 <_usb_d_dev_ep_enable+0x25c>
    1c10:	2105      	movs	r1, #5
    1c12:	e7e9      	b.n	1be8 <_usb_d_dev_ep_enable+0x25c>
    1c14:	2104      	movs	r1, #4
    1c16:	e7e7      	b.n	1be8 <_usb_d_dev_ep_enable+0x25c>
    1c18:	2103      	movs	r1, #3
    1c1a:	e7e5      	b.n	1be8 <_usb_d_dev_ep_enable+0x25c>
    1c1c:	2102      	movs	r1, #2
    1c1e:	e7e3      	b.n	1be8 <_usb_d_dev_ep_enable+0x25c>
    1c20:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1c22:	0709      	lsls	r1, r1, #28
    1c24:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1c26:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c28:	001a      	movs	r2, r3
    1c2a:	3208      	adds	r2, #8
    1c2c:	0152      	lsls	r2, r2, #5
    1c2e:	4912      	ldr	r1, [pc, #72]	; (1c78 <_usb_d_dev_ep_enable+0x2ec>)
    1c30:	468c      	mov	ip, r1
    1c32:	4462      	add	r2, ip
    1c34:	2140      	movs	r1, #64	; 0x40
    1c36:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    1c38:	015b      	lsls	r3, r3, #5
    1c3a:	4a10      	ldr	r2, [pc, #64]	; (1c7c <_usb_d_dev_ep_enable+0x2f0>)
    1c3c:	18d3      	adds	r3, r2, r3
    1c3e:	2200      	movs	r2, #0
    1c40:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    1c42:	2000      	movs	r0, #0
}
    1c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1c46:	2106      	movs	r1, #6
    1c48:	e7eb      	b.n	1c22 <_usb_d_dev_ep_enable+0x296>
    1c4a:	2105      	movs	r1, #5
    1c4c:	e7e9      	b.n	1c22 <_usb_d_dev_ep_enable+0x296>
    1c4e:	2104      	movs	r1, #4
    1c50:	e7e7      	b.n	1c22 <_usb_d_dev_ep_enable+0x296>
    1c52:	2103      	movs	r1, #3
    1c54:	e7e5      	b.n	1c22 <_usb_d_dev_ep_enable+0x296>
    1c56:	2102      	movs	r1, #2
    1c58:	e7e3      	b.n	1c22 <_usb_d_dev_ep_enable+0x296>
		return -USB_ERR_PARAM;
    1c5a:	2012      	movs	r0, #18
    1c5c:	4240      	negs	r0, r0
    1c5e:	e7f1      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
    1c60:	2012      	movs	r0, #18
    1c62:	4240      	negs	r0, r0
    1c64:	e7ee      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
			return -USB_ERR_REDO;
    1c66:	2014      	movs	r0, #20
    1c68:	4240      	negs	r0, r0
    1c6a:	e7eb      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
			return -USB_ERR_REDO;
    1c6c:	2014      	movs	r0, #20
    1c6e:	4240      	negs	r0, r0
    1c70:	e7e8      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
			return -USB_ERR_REDO;
    1c72:	2014      	movs	r0, #20
    1c74:	4240      	negs	r0, r0
    1c76:	e7e5      	b.n	1c44 <_usb_d_dev_ep_enable+0x2b8>
    1c78:	41005000 	.word	0x41005000
    1c7c:	2000012c 	.word	0x2000012c
    1c80:	0fffc000 	.word	0x0fffc000
    1c84:	f0003fff 	.word	0xf0003fff
    1c88:	41005109 	.word	0x41005109

00001c8c <_usb_d_dev_ep_stall>:
{
    1c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1c8e:	220f      	movs	r2, #15
    1c90:	4002      	ands	r2, r0
    1c92:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1c94:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1c96:	2a00      	cmp	r2, #0
    1c98:	d005      	beq.n	1ca6 <_usb_d_dev_ep_stall+0x1a>
    1c9a:	2800      	cmp	r0, #0
    1c9c:	db01      	blt.n	1ca2 <_usb_d_dev_ep_stall+0x16>
    1c9e:	0013      	movs	r3, r2
    1ca0:	e002      	b.n	1ca8 <_usb_d_dev_ep_stall+0x1c>
    1ca2:	1c93      	adds	r3, r2, #2
    1ca4:	e000      	b.n	1ca8 <_usb_d_dev_ep_stall+0x1c>
    1ca6:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    1ca8:	001d      	movs	r5, r3
    1caa:	0098      	lsls	r0, r3, #2
    1cac:	18c0      	adds	r0, r0, r3
    1cae:	0083      	lsls	r3, r0, #2
    1cb0:	3310      	adds	r3, #16
    1cb2:	0018      	movs	r0, r3
    1cb4:	4b47      	ldr	r3, [pc, #284]	; (1dd4 <_usb_d_dev_ep_stall+0x148>)
    1cb6:	3360      	adds	r3, #96	; 0x60
    1cb8:	181b      	adds	r3, r3, r0
    1cba:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1cbc:	2a02      	cmp	r2, #2
    1cbe:	d900      	bls.n	1cc2 <_usb_d_dev_ep_stall+0x36>
    1cc0:	e084      	b.n	1dcc <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    1cc2:	2901      	cmp	r1, #1
    1cc4:	d018      	beq.n	1cf8 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1cc6:	2900      	cmp	r1, #0
    1cc8:	d03d      	beq.n	1d46 <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cca:	00aa      	lsls	r2, r5, #2
    1ccc:	1952      	adds	r2, r2, r5
    1cce:	0091      	lsls	r1, r2, #2
    1cd0:	4b40      	ldr	r3, [pc, #256]	; (1dd4 <_usb_d_dev_ep_stall+0x148>)
    1cd2:	3360      	adds	r3, #96	; 0x60
    1cd4:	185b      	adds	r3, r3, r1
    1cd6:	3326      	adds	r3, #38	; 0x26
    1cd8:	781a      	ldrb	r2, [r3, #0]
    1cda:	230f      	movs	r3, #15
    1cdc:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1cde:	3308      	adds	r3, #8
    1ce0:	015b      	lsls	r3, r3, #5
    1ce2:	4a3d      	ldr	r2, [pc, #244]	; (1dd8 <_usb_d_dev_ep_stall+0x14c>)
    1ce4:	4694      	mov	ip, r2
    1ce6:	4463      	add	r3, ip
    1ce8:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1cea:	2310      	movs	r3, #16
    1cec:	40a3      	lsls	r3, r4
    1cee:	4018      	ands	r0, r3
    1cf0:	1e43      	subs	r3, r0, #1
    1cf2:	4198      	sbcs	r0, r3
    1cf4:	b2c0      	uxtb	r0, r0
}
    1cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cf8:	4836      	ldr	r0, [pc, #216]	; (1dd4 <_usb_d_dev_ep_stall+0x148>)
    1cfa:	0003      	movs	r3, r0
    1cfc:	3360      	adds	r3, #96	; 0x60
    1cfe:	00aa      	lsls	r2, r5, #2
    1d00:	1956      	adds	r6, r2, r5
    1d02:	00b1      	lsls	r1, r6, #2
    1d04:	185b      	adds	r3, r3, r1
    1d06:	3326      	adds	r3, #38	; 0x26
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	210f      	movs	r1, #15
    1d0c:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1d0e:	2610      	movs	r6, #16
    1d10:	40a6      	lsls	r6, r4
    1d12:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1d14:	0019      	movs	r1, r3
    1d16:	3108      	adds	r1, #8
    1d18:	0149      	lsls	r1, r1, #5
    1d1a:	4f2f      	ldr	r7, [pc, #188]	; (1dd8 <_usb_d_dev_ep_stall+0x14c>)
    1d1c:	46bc      	mov	ip, r7
    1d1e:	4461      	add	r1, ip
    1d20:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1d22:	2120      	movs	r1, #32
    1d24:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1d26:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1d28:	0159      	lsls	r1, r3, #5
    1d2a:	4b2c      	ldr	r3, [pc, #176]	; (1ddc <_usb_d_dev_ep_stall+0x150>)
    1d2c:	469c      	mov	ip, r3
    1d2e:	4461      	add	r1, ip
    1d30:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    1d32:	1952      	adds	r2, r2, r5
    1d34:	0093      	lsls	r3, r2, #2
    1d36:	18c3      	adds	r3, r0, r3
    1d38:	3380      	adds	r3, #128	; 0x80
    1d3a:	79da      	ldrb	r2, [r3, #7]
    1d3c:	2108      	movs	r1, #8
    1d3e:	430a      	orrs	r2, r1
    1d40:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1d42:	2000      	movs	r0, #0
    1d44:	e7d7      	b.n	1cf6 <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1d46:	7c9a      	ldrb	r2, [r3, #18]
    1d48:	310f      	adds	r1, #15
    1d4a:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1d4c:	0011      	movs	r1, r2
    1d4e:	3108      	adds	r1, #8
    1d50:	0149      	lsls	r1, r1, #5
    1d52:	4821      	ldr	r0, [pc, #132]	; (1dd8 <_usb_d_dev_ep_stall+0x14c>)
    1d54:	4684      	mov	ip, r0
    1d56:	4461      	add	r1, ip
    1d58:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1d5a:	2110      	movs	r1, #16
    1d5c:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    1d5e:	4208      	tst	r0, r1
    1d60:	d024      	beq.n	1dac <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1d62:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1d64:	0010      	movs	r0, r2
    1d66:	3008      	adds	r0, #8
    1d68:	0140      	lsls	r0, r0, #5
    1d6a:	4460      	add	r0, ip
    1d6c:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1d6e:	2120      	movs	r1, #32
    1d70:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1d72:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d74:	0155      	lsls	r5, r2, #5
    1d76:	4f1a      	ldr	r7, [pc, #104]	; (1de0 <_usb_d_dev_ep_stall+0x154>)
    1d78:	46bc      	mov	ip, r7
    1d7a:	4465      	add	r5, ip
    1d7c:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1d7e:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1d80:	4208      	tst	r0, r1
    1d82:	d00a      	beq.n	1d9a <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d84:	0011      	movs	r1, r2
    1d86:	3108      	adds	r1, #8
    1d88:	0149      	lsls	r1, r1, #5
    1d8a:	4813      	ldr	r0, [pc, #76]	; (1dd8 <_usb_d_dev_ep_stall+0x14c>)
    1d8c:	4684      	mov	ip, r0
    1d8e:	4461      	add	r1, ip
    1d90:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1d92:	2001      	movs	r0, #1
    1d94:	40a0      	lsls	r0, r4
    1d96:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1d98:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1d9a:	7cd8      	ldrb	r0, [r3, #19]
    1d9c:	2107      	movs	r1, #7
    1d9e:	4001      	ands	r1, r0
    1da0:	2901      	cmp	r1, #1
    1da2:	d005      	beq.n	1db0 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    1da4:	7cda      	ldrb	r2, [r3, #19]
    1da6:	2108      	movs	r1, #8
    1da8:	438a      	bics	r2, r1
    1daa:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1dac:	2000      	movs	r0, #0
    1dae:	e7a2      	b.n	1cf6 <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1db0:	3208      	adds	r2, #8
    1db2:	0152      	lsls	r2, r2, #5
    1db4:	4908      	ldr	r1, [pc, #32]	; (1dd8 <_usb_d_dev_ep_stall+0x14c>)
    1db6:	468c      	mov	ip, r1
    1db8:	4462      	add	r2, ip
    1dba:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1dbc:	2230      	movs	r2, #48	; 0x30
    1dbe:	4211      	tst	r1, r2
    1dc0:	d1f4      	bne.n	1dac <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    1dc2:	0002      	movs	r2, r0
    1dc4:	2108      	movs	r1, #8
    1dc6:	438a      	bics	r2, r1
    1dc8:	74da      	strb	r2, [r3, #19]
    1dca:	e7ef      	b.n	1dac <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    1dcc:	2012      	movs	r0, #18
    1dce:	4240      	negs	r0, r0
    1dd0:	e791      	b.n	1cf6 <_usb_d_dev_ep_stall+0x6a>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	2000012c 	.word	0x2000012c
    1dd8:	41005000 	.word	0x41005000
    1ddc:	41005109 	.word	0x41005109
    1de0:	41005108 	.word	0x41005108

00001de4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1de4:	b570      	push	{r4, r5, r6, lr}
    1de6:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1de8:	240f      	movs	r4, #15
    1dea:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1dec:	0162      	lsls	r2, r4, #5
    1dee:	4b18      	ldr	r3, [pc, #96]	; (1e50 <_usb_d_dev_ep_read_req+0x6c>)
    1df0:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    1df2:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1df4:	685d      	ldr	r5, [r3, #4]
    1df6:	04ad      	lsls	r5, r5, #18
    1df8:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1dfa:	2c02      	cmp	r4, #2
    1dfc:	d81f      	bhi.n	1e3e <_usb_d_dev_ep_read_req+0x5a>
    1dfe:	2e00      	cmp	r6, #0
    1e00:	d020      	beq.n	1e44 <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1e02:	0023      	movs	r3, r4
    1e04:	3308      	adds	r3, #8
    1e06:	015b      	lsls	r3, r3, #5
    1e08:	4a12      	ldr	r2, [pc, #72]	; (1e54 <_usb_d_dev_ep_read_req+0x70>)
    1e0a:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1e0c:	2b11      	cmp	r3, #17
    1e0e:	d11c      	bne.n	1e4a <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1e10:	0023      	movs	r3, r4
    1e12:	3308      	adds	r3, #8
    1e14:	015b      	lsls	r3, r3, #5
    1e16:	4694      	mov	ip, r2
    1e18:	4463      	add	r3, ip
    1e1a:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    1e1c:	06db      	lsls	r3, r3, #27
    1e1e:	d401      	bmi.n	1e24 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    1e20:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1e22:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    1e24:	2208      	movs	r2, #8
    1e26:	0030      	movs	r0, r6
    1e28:	4b0b      	ldr	r3, [pc, #44]	; (1e58 <_usb_d_dev_ep_read_req+0x74>)
    1e2a:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e2c:	3408      	adds	r4, #8
    1e2e:	0164      	lsls	r4, r4, #5
    1e30:	4b08      	ldr	r3, [pc, #32]	; (1e54 <_usb_d_dev_ep_read_req+0x70>)
    1e32:	469c      	mov	ip, r3
    1e34:	4464      	add	r4, ip
    1e36:	2310      	movs	r3, #16
    1e38:	71e3      	strb	r3, [r4, #7]
	return bytes;
    1e3a:	0028      	movs	r0, r5
    1e3c:	e7f1      	b.n	1e22 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    1e3e:	2012      	movs	r0, #18
    1e40:	4240      	negs	r0, r0
    1e42:	e7ee      	b.n	1e22 <_usb_d_dev_ep_read_req+0x3e>
    1e44:	2012      	movs	r0, #18
    1e46:	4240      	negs	r0, r0
    1e48:	e7eb      	b.n	1e22 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    1e4a:	2013      	movs	r0, #19
    1e4c:	4240      	negs	r0, r0
    1e4e:	e7e8      	b.n	1e22 <_usb_d_dev_ep_read_req+0x3e>
    1e50:	2000012c 	.word	0x2000012c
    1e54:	41005000 	.word	0x41005000
    1e58:	00003115 	.word	0x00003115

00001e5c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5e:	46de      	mov	lr, fp
    1e60:	4657      	mov	r7, sl
    1e62:	464e      	mov	r6, r9
    1e64:	4645      	mov	r5, r8
    1e66:	b5e0      	push	{r5, r6, r7, lr}
    1e68:	b085      	sub	sp, #20
    1e6a:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1e6c:	7a05      	ldrb	r5, [r0, #8]
    1e6e:	220f      	movs	r2, #15
    1e70:	402a      	ands	r2, r5
    1e72:	b26d      	sxtb	r5, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1e74:	0feb      	lsrs	r3, r5, #31
    1e76:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e78:	2a00      	cmp	r2, #0
    1e7a:	d005      	beq.n	1e88 <_usb_d_dev_ep_trans+0x2c>
    1e7c:	2d00      	cmp	r5, #0
    1e7e:	db01      	blt.n	1e84 <_usb_d_dev_ep_trans+0x28>
    1e80:	0010      	movs	r0, r2
    1e82:	e002      	b.n	1e8a <_usb_d_dev_ep_trans+0x2e>
    1e84:	1c90      	adds	r0, r2, #2
    1e86:	e000      	b.n	1e8a <_usb_d_dev_ep_trans+0x2e>
    1e88:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    1e8a:	0006      	movs	r6, r0
    1e8c:	4b61      	ldr	r3, [pc, #388]	; (2014 <STACK_SIZE+0x14>)
    1e8e:	3360      	adds	r3, #96	; 0x60
    1e90:	0081      	lsls	r1, r0, #2
    1e92:	180f      	adds	r7, r1, r0
    1e94:	00bc      	lsls	r4, r7, #2
    1e96:	3410      	adds	r4, #16
    1e98:	191c      	adds	r4, r3, r4
    1e9a:	3404      	adds	r4, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e9c:	00b8      	lsls	r0, r7, #2
    1e9e:	181b      	adds	r3, r3, r0
    1ea0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1ea2:	495d      	ldr	r1, [pc, #372]	; (2018 <STACK_SIZE+0x18>)
    1ea4:	428b      	cmp	r3, r1
    1ea6:	d044      	beq.n	1f32 <_usb_d_dev_ep_trans+0xd6>
    1ea8:	1e5f      	subs	r7, r3, #1
    1eaa:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    1eac:	4641      	mov	r1, r8
    1eae:	6849      	ldr	r1, [r1, #4]
    1eb0:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1eb2:	2a02      	cmp	r2, #2
    1eb4:	d900      	bls.n	1eb8 <_usb_d_dev_ep_trans+0x5c>
    1eb6:	e0a3      	b.n	2000 <STACK_SIZE>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1eb8:	4642      	mov	r2, r8
    1eba:	6812      	ldr	r2, [r2, #0]
    1ebc:	4857      	ldr	r0, [pc, #348]	; (201c <STACK_SIZE+0x1c>)
    1ebe:	4282      	cmp	r2, r0
    1ec0:	d90c      	bls.n	1edc <_usb_d_dev_ep_trans+0x80>
    1ec2:	1888      	adds	r0, r1, r2
    1ec4:	9001      	str	r0, [sp, #4]
    1ec6:	4856      	ldr	r0, [pc, #344]	; (2020 <STACK_SIZE+0x20>)
    1ec8:	4684      	mov	ip, r0
    1eca:	9801      	ldr	r0, [sp, #4]
    1ecc:	4560      	cmp	r0, ip
    1ece:	d805      	bhi.n	1edc <_usb_d_dev_ep_trans+0x80>
    1ed0:	0792      	lsls	r2, r2, #30
    1ed2:	d103      	bne.n	1edc <_usb_d_dev_ep_trans+0x80>
	    || (!dir && (trans->size < ept->size))) {
    1ed4:	2d00      	cmp	r5, #0
    1ed6:	db2e      	blt.n	1f36 <_usb_d_dev_ep_trans+0xda>
    1ed8:	4299      	cmp	r1, r3
    1eda:	d22f      	bcs.n	1f3c <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    1edc:	00b2      	lsls	r2, r6, #2
    1ede:	1992      	adds	r2, r2, r6
    1ee0:	0091      	lsls	r1, r2, #2
    1ee2:	4b4c      	ldr	r3, [pc, #304]	; (2014 <STACK_SIZE+0x14>)
    1ee4:	185b      	adds	r3, r3, r1
    1ee6:	3380      	adds	r3, #128	; 0x80
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d100      	bne.n	1ef0 <_usb_d_dev_ep_trans+0x94>
    1eee:	e08a      	b.n	2006 <STACK_SIZE+0x6>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    1ef0:	2301      	movs	r3, #1
    1ef2:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    1ef4:	2d00      	cmp	r5, #0
    1ef6:	db0b      	blt.n	1f10 <_usb_d_dev_ep_trans+0xb4>
    1ef8:	2f00      	cmp	r7, #0
    1efa:	d009      	beq.n	1f10 <_usb_d_dev_ep_trans+0xb4>
		if (!ept->cache) {
    1efc:	00b2      	lsls	r2, r6, #2
    1efe:	1992      	adds	r2, r2, r6
    1f00:	0091      	lsls	r1, r2, #2
    1f02:	4b44      	ldr	r3, [pc, #272]	; (2014 <STACK_SIZE+0x14>)
    1f04:	185b      	adds	r3, r3, r1
    1f06:	3380      	adds	r3, #128	; 0x80
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d100      	bne.n	1f10 <_usb_d_dev_ep_trans+0xb4>
    1f0e:	e07d      	b.n	200c <STACK_SIZE+0xc>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1f10:	00b2      	lsls	r2, r6, #2
    1f12:	1992      	adds	r2, r2, r6
    1f14:	0091      	lsls	r1, r2, #2
    1f16:	4b3f      	ldr	r3, [pc, #252]	; (2014 <STACK_SIZE+0x14>)
    1f18:	185b      	adds	r3, r3, r1
    1f1a:	3380      	adds	r3, #128	; 0x80
    1f1c:	79db      	ldrb	r3, [r3, #7]
    1f1e:	071b      	lsls	r3, r3, #28
    1f20:	d50f      	bpl.n	1f42 <_usb_d_dev_ep_trans+0xe6>
		return USB_HALTED;
    1f22:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1f24:	b005      	add	sp, #20
    1f26:	bc3c      	pop	{r2, r3, r4, r5}
    1f28:	4690      	mov	r8, r2
    1f2a:	4699      	mov	r9, r3
    1f2c:	46a2      	mov	sl, r4
    1f2e:	46ab      	mov	fp, r5
    1f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f32:	001f      	movs	r7, r3
    1f34:	e7ba      	b.n	1eac <_usb_d_dev_ep_trans+0x50>
	bool use_cache = false;
    1f36:	2300      	movs	r3, #0
    1f38:	9301      	str	r3, [sp, #4]
    1f3a:	e7db      	b.n	1ef4 <_usb_d_dev_ep_trans+0x98>
    1f3c:	2300      	movs	r3, #0
    1f3e:	9301      	str	r3, [sp, #4]
    1f40:	e7d8      	b.n	1ef4 <_usb_d_dev_ep_trans+0x98>
	atomic_enter_critical(&flags);
    1f42:	a803      	add	r0, sp, #12
    1f44:	4b37      	ldr	r3, [pc, #220]	; (2024 <STACK_SIZE+0x24>)
    1f46:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1f48:	00b2      	lsls	r2, r6, #2
    1f4a:	1992      	adds	r2, r2, r6
    1f4c:	0091      	lsls	r1, r2, #2
    1f4e:	4b31      	ldr	r3, [pc, #196]	; (2014 <STACK_SIZE+0x14>)
    1f50:	185b      	adds	r3, r3, r1
    1f52:	3380      	adds	r3, #128	; 0x80
    1f54:	79db      	ldrb	r3, [r3, #7]
    1f56:	065b      	lsls	r3, r3, #25
    1f58:	d430      	bmi.n	1fbc <_usb_d_dev_ep_trans+0x160>
	ept->flags.bits.is_busy = 1;
    1f5a:	00b3      	lsls	r3, r6, #2
    1f5c:	199b      	adds	r3, r3, r6
    1f5e:	009a      	lsls	r2, r3, #2
    1f60:	4b2c      	ldr	r3, [pc, #176]	; (2014 <STACK_SIZE+0x14>)
    1f62:	469b      	mov	fp, r3
    1f64:	4493      	add	fp, r2
    1f66:	2380      	movs	r3, #128	; 0x80
    1f68:	445b      	add	r3, fp
    1f6a:	469a      	mov	sl, r3
    1f6c:	79db      	ldrb	r3, [r3, #7]
    1f6e:	2240      	movs	r2, #64	; 0x40
    1f70:	4313      	orrs	r3, r2
    1f72:	4652      	mov	r2, sl
    1f74:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1f76:	a803      	add	r0, sp, #12
    1f78:	4b2b      	ldr	r3, [pc, #172]	; (2028 <STACK_SIZE+0x28>)
    1f7a:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1f7c:	465b      	mov	r3, fp
    1f7e:	4642      	mov	r2, r8
    1f80:	6812      	ldr	r2, [r2, #0]
    1f82:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1f84:	4642      	mov	r2, r8
    1f86:	6852      	ldr	r2, [r2, #4]
    1f88:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1f8a:	2300      	movs	r3, #0
    1f8c:	465a      	mov	r2, fp
    1f8e:	67d3      	str	r3, [r2, #124]	; 0x7c
	ept->flags.bits.dir       = dir;
    1f90:	464b      	mov	r3, r9
    1f92:	01db      	lsls	r3, r3, #7
    1f94:	4652      	mov	r2, sl
    1f96:	79d2      	ldrb	r2, [r2, #7]
    1f98:	217f      	movs	r1, #127	; 0x7f
    1f9a:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    1f9c:	9a01      	ldr	r2, [sp, #4]
    1f9e:	0152      	lsls	r2, r2, #5
    1fa0:	430b      	orrs	r3, r1
    1fa2:	2120      	movs	r1, #32
    1fa4:	438b      	bics	r3, r1
    1fa6:	431a      	orrs	r2, r3
    1fa8:	4653      	mov	r3, sl
    1faa:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1fac:	4643      	mov	r3, r8
    1fae:	7a5b      	ldrb	r3, [r3, #9]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d008      	beq.n	1fc6 <_usb_d_dev_ep_trans+0x16a>
    1fb4:	2f00      	cmp	r7, #0
    1fb6:	d01b      	beq.n	1ff0 <_usb_d_dev_ep_trans+0x194>
    1fb8:	2200      	movs	r2, #0
    1fba:	e005      	b.n	1fc8 <_usb_d_dev_ep_trans+0x16c>
		atomic_leave_critical(&flags);
    1fbc:	a803      	add	r0, sp, #12
    1fbe:	4b1a      	ldr	r3, [pc, #104]	; (2028 <STACK_SIZE+0x28>)
    1fc0:	4798      	blx	r3
		return USB_BUSY;
    1fc2:	2001      	movs	r0, #1
    1fc4:	e7ae      	b.n	1f24 <_usb_d_dev_ep_trans+0xc8>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1fc6:	2200      	movs	r2, #0
    1fc8:	00b3      	lsls	r3, r6, #2
    1fca:	199e      	adds	r6, r3, r6
    1fcc:	00b1      	lsls	r1, r6, #2
    1fce:	4b11      	ldr	r3, [pc, #68]	; (2014 <STACK_SIZE+0x14>)
    1fd0:	185b      	adds	r3, r3, r1
    1fd2:	3380      	adds	r3, #128	; 0x80
    1fd4:	0111      	lsls	r1, r2, #4
    1fd6:	79da      	ldrb	r2, [r3, #7]
    1fd8:	2010      	movs	r0, #16
    1fda:	4382      	bics	r2, r0
    1fdc:	430a      	orrs	r2, r1
    1fde:	71da      	strb	r2, [r3, #7]
	if (dir) {
    1fe0:	2d00      	cmp	r5, #0
    1fe2:	db07      	blt.n	1ff4 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_out_next(ept, false);
    1fe4:	2100      	movs	r1, #0
    1fe6:	0020      	movs	r0, r4
    1fe8:	4b10      	ldr	r3, [pc, #64]	; (202c <STACK_SIZE+0x2c>)
    1fea:	4798      	blx	r3
	return ERR_NONE;
    1fec:	2000      	movs	r0, #0
    1fee:	e799      	b.n	1f24 <_usb_d_dev_ep_trans+0xc8>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1ff0:	2201      	movs	r2, #1
    1ff2:	e7e9      	b.n	1fc8 <_usb_d_dev_ep_trans+0x16c>
		_usb_d_dev_in_next(ept, false);
    1ff4:	2100      	movs	r1, #0
    1ff6:	0020      	movs	r0, r4
    1ff8:	4b0d      	ldr	r3, [pc, #52]	; (2030 <STACK_SIZE+0x30>)
    1ffa:	4798      	blx	r3
	return ERR_NONE;
    1ffc:	2000      	movs	r0, #0
    1ffe:	e791      	b.n	1f24 <_usb_d_dev_ep_trans+0xc8>
		return -USB_ERR_PARAM;
    2000:	2012      	movs	r0, #18
    2002:	4240      	negs	r0, r0
    2004:	e78e      	b.n	1f24 <_usb_d_dev_ep_trans+0xc8>
			return -USB_ERR_FUNC;
    2006:	2013      	movs	r0, #19
    2008:	4240      	negs	r0, r0
    200a:	e78b      	b.n	1f24 <_usb_d_dev_ep_trans+0xc8>
			return -USB_ERR_PARAM;
    200c:	2012      	movs	r0, #18
    200e:	4240      	negs	r0, r0
    2010:	e788      	b.n	1f24 <_usb_d_dev_ep_trans+0xc8>
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	2000012c 	.word	0x2000012c
    2018:	000003ff 	.word	0x000003ff
    201c:	1fffffff 	.word	0x1fffffff
    2020:	20007fff 	.word	0x20007fff
    2024:	00000421 	.word	0x00000421
    2028:	0000042f 	.word	0x0000042f
    202c:	00001229 	.word	0x00001229
    2030:	0000109d 	.word	0x0000109d

00002034 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2034:	2900      	cmp	r1, #0
    2036:	d006      	beq.n	2046 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2038:	2801      	cmp	r0, #1
    203a:	d006      	beq.n	204a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    203c:	2800      	cmp	r0, #0
    203e:	d101      	bne.n	2044 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2040:	4b03      	ldr	r3, [pc, #12]	; (2050 <_usb_d_dev_register_callback+0x1c>)
    2042:	6619      	str	r1, [r3, #96]	; 0x60
	}
}
    2044:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2046:	4903      	ldr	r1, [pc, #12]	; (2054 <_usb_d_dev_register_callback+0x20>)
    2048:	e7f6      	b.n	2038 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    204a:	4b01      	ldr	r3, [pc, #4]	; (2050 <_usb_d_dev_register_callback+0x1c>)
    204c:	6659      	str	r1, [r3, #100]	; 0x64
    204e:	e7f9      	b.n	2044 <_usb_d_dev_register_callback+0x10>
    2050:	2000012c 	.word	0x2000012c
    2054:	00000d81 	.word	0x00000d81

00002058 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2058:	2900      	cmp	r1, #0
    205a:	d008      	beq.n	206e <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    205c:	2800      	cmp	r0, #0
    205e:	d008      	beq.n	2072 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2060:	2801      	cmp	r0, #1
    2062:	d009      	beq.n	2078 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2064:	2802      	cmp	r0, #2
    2066:	d106      	bne.n	2076 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <_usb_d_dev_register_ep_callback+0x28>)
    206a:	6719      	str	r1, [r3, #112]	; 0x70
	}
}
    206c:	e003      	b.n	2076 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    206e:	4905      	ldr	r1, [pc, #20]	; (2084 <_usb_d_dev_register_ep_callback+0x2c>)
    2070:	e7f4      	b.n	205c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2072:	4b03      	ldr	r3, [pc, #12]	; (2080 <_usb_d_dev_register_ep_callback+0x28>)
    2074:	6699      	str	r1, [r3, #104]	; 0x68
}
    2076:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2078:	4b01      	ldr	r3, [pc, #4]	; (2080 <_usb_d_dev_register_ep_callback+0x28>)
    207a:	66d9      	str	r1, [r3, #108]	; 0x6c
    207c:	e7fb      	b.n	2076 <_usb_d_dev_register_ep_callback+0x1e>
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	2000012c 	.word	0x2000012c
    2084:	00000d81 	.word	0x00000d81

00002088 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2088:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    208a:	4b01      	ldr	r3, [pc, #4]	; (2090 <USB_Handler+0x8>)
    208c:	4798      	blx	r3
}
    208e:	bd10      	pop	{r4, pc}
    2090:	0000142d 	.word	0x0000142d

00002094 <main>:
#include <atmel_start.h>

int main(void)
{
    2094:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2096:	4b08      	ldr	r3, [pc, #32]	; (20b8 <main+0x24>)
    2098:	4798      	blx	r3
	//
	usb_serial_init();
    209a:	4b08      	ldr	r3, [pc, #32]	; (20bc <main+0x28>)
    209c:	4798      	blx	r3

	for ( ;; )
	{
		usb_serial_puts( "TEST\r\n" );
    209e:	4808      	ldr	r0, [pc, #32]	; (20c0 <main+0x2c>)
    20a0:	4b08      	ldr	r3, [pc, #32]	; (20c4 <main+0x30>)
    20a2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    20a4:	2280      	movs	r2, #128	; 0x80
    20a6:	0252      	lsls	r2, r2, #9
    20a8:	23c0      	movs	r3, #192	; 0xc0
    20aa:	05db      	lsls	r3, r3, #23
    20ac:	61da      	str	r2, [r3, #28]
		gpio_toggle_pin_level( PIN_LED );
		delay_ms( 500 );
    20ae:	20fa      	movs	r0, #250	; 0xfa
    20b0:	0040      	lsls	r0, r0, #1
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <main+0x34>)
    20b4:	4798      	blx	r3
    20b6:	e7f2      	b.n	209e <main+0xa>
    20b8:	00000115 	.word	0x00000115
    20bc:	00002ec1 	.word	0x00002ec1
    20c0:	000031c8 	.word	0x000031c8
    20c4:	00002f45 	.word	0x00002f45
    20c8:	0000043d 	.word	0x0000043d

000020cc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    20cc:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    20ce:	798b      	ldrb	r3, [r1, #6]
    20d0:	79cc      	ldrb	r4, [r1, #7]
    20d2:	0224      	lsls	r4, r4, #8
    20d4:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    20d6:	2a01      	cmp	r2, #1
    20d8:	d00a      	beq.n	20f0 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    20da:	784b      	ldrb	r3, [r1, #1]
    20dc:	2b21      	cmp	r3, #33	; 0x21
    20de:	d109      	bne.n	20f4 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    20e0:	2c07      	cmp	r4, #7
    20e2:	d10a      	bne.n	20fa <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    20e4:	2300      	movs	r3, #0
    20e6:	0022      	movs	r2, r4
    20e8:	4905      	ldr	r1, [pc, #20]	; (2100 <cdcdf_acm_get_req+0x34>)
    20ea:	4c06      	ldr	r4, [pc, #24]	; (2104 <cdcdf_acm_get_req+0x38>)
    20ec:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    20ee:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    20f0:	2000      	movs	r0, #0
    20f2:	e7fc      	b.n	20ee <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    20f4:	200d      	movs	r0, #13
    20f6:	4240      	negs	r0, r0
    20f8:	e7f9      	b.n	20ee <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    20fa:	2001      	movs	r0, #1
    20fc:	4240      	negs	r0, r0
    20fe:	e7f6      	b.n	20ee <cdcdf_acm_get_req+0x22>
    2100:	20000314 	.word	0x20000314
    2104:	00002701 	.word	0x00002701

00002108 <cdcdf_acm_set_req>:
{
    2108:	b5f0      	push	{r4, r5, r6, r7, lr}
    210a:	b083      	sub	sp, #12
    210c:	0005      	movs	r5, r0
    210e:	000f      	movs	r7, r1
    2110:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    2112:	798e      	ldrb	r6, [r1, #6]
    2114:	79cb      	ldrb	r3, [r1, #7]
    2116:	021b      	lsls	r3, r3, #8
    2118:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    211a:	4b23      	ldr	r3, [pc, #140]	; (21a8 <cdcdf_acm_set_req+0xa0>)
    211c:	4798      	blx	r3
	switch (req->bRequest) {
    211e:	787b      	ldrb	r3, [r7, #1]
    2120:	2b20      	cmp	r3, #32
    2122:	d005      	beq.n	2130 <cdcdf_acm_set_req+0x28>
    2124:	2b22      	cmp	r3, #34	; 0x22
    2126:	d026      	beq.n	2176 <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    2128:	200d      	movs	r0, #13
    212a:	4240      	negs	r0, r0
}
    212c:	b003      	add	sp, #12
    212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2130:	2e07      	cmp	r6, #7
    2132:	d131      	bne.n	2198 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    2134:	2c00      	cmp	r4, #0
    2136:	d017      	beq.n	2168 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2138:	2207      	movs	r2, #7
    213a:	0001      	movs	r1, r0
    213c:	4668      	mov	r0, sp
    213e:	4b1b      	ldr	r3, [pc, #108]	; (21ac <cdcdf_acm_set_req+0xa4>)
    2140:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2142:	4b1b      	ldr	r3, [pc, #108]	; (21b0 <cdcdf_acm_set_req+0xa8>)
    2144:	689b      	ldr	r3, [r3, #8]
    2146:	2b00      	cmp	r3, #0
    2148:	d003      	beq.n	2152 <cdcdf_acm_set_req+0x4a>
    214a:	4668      	mov	r0, sp
    214c:	4798      	blx	r3
    214e:	2800      	cmp	r0, #0
    2150:	d025      	beq.n	219e <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    2152:	4b17      	ldr	r3, [pc, #92]	; (21b0 <cdcdf_acm_set_req+0xa8>)
    2154:	9a00      	ldr	r2, [sp, #0]
    2156:	601a      	str	r2, [r3, #0]
    2158:	466a      	mov	r2, sp
    215a:	8892      	ldrh	r2, [r2, #4]
    215c:	809a      	strh	r2, [r3, #4]
    215e:	466a      	mov	r2, sp
    2160:	7992      	ldrb	r2, [r2, #6]
    2162:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    2164:	2000      	movs	r0, #0
    2166:	e7e1      	b.n	212c <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2168:	2300      	movs	r3, #0
    216a:	0032      	movs	r2, r6
    216c:	0001      	movs	r1, r0
    216e:	0028      	movs	r0, r5
    2170:	4c10      	ldr	r4, [pc, #64]	; (21b4 <cdcdf_acm_set_req+0xac>)
    2172:	47a0      	blx	r4
    2174:	e7da      	b.n	212c <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    2176:	2300      	movs	r3, #0
    2178:	2200      	movs	r2, #0
    217a:	2100      	movs	r1, #0
    217c:	2000      	movs	r0, #0
    217e:	4c0d      	ldr	r4, [pc, #52]	; (21b4 <cdcdf_acm_set_req+0xac>)
    2180:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <cdcdf_acm_set_req+0xa8>)
    2184:	68db      	ldr	r3, [r3, #12]
    2186:	2b00      	cmp	r3, #0
    2188:	d00b      	beq.n	21a2 <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    218a:	78ba      	ldrb	r2, [r7, #2]
    218c:	78f8      	ldrb	r0, [r7, #3]
    218e:	0200      	lsls	r0, r0, #8
    2190:	4310      	orrs	r0, r2
    2192:	4798      	blx	r3
		return ERR_NONE;
    2194:	2000      	movs	r0, #0
    2196:	e7c9      	b.n	212c <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    2198:	2001      	movs	r0, #1
    219a:	4240      	negs	r0, r0
    219c:	e7c6      	b.n	212c <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    219e:	2000      	movs	r0, #0
    21a0:	e7c4      	b.n	212c <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    21a2:	2000      	movs	r0, #0
    21a4:	e7c2      	b.n	212c <cdcdf_acm_set_req+0x24>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00002c8d 	.word	0x00002c8d
    21ac:	00003115 	.word	0x00003115
    21b0:	20000314 	.word	0x20000314
    21b4:	00002701 	.word	0x00002701

000021b8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    21b8:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    21ba:	780c      	ldrb	r4, [r1, #0]
    21bc:	0965      	lsrs	r5, r4, #5
    21be:	2303      	movs	r3, #3
    21c0:	402b      	ands	r3, r5
    21c2:	2b01      	cmp	r3, #1
    21c4:	d114      	bne.n	21f0 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    21c6:	790d      	ldrb	r5, [r1, #4]
    21c8:	794b      	ldrb	r3, [r1, #5]
    21ca:	021b      	lsls	r3, r3, #8
    21cc:	432b      	orrs	r3, r5
    21ce:	4d0b      	ldr	r5, [pc, #44]	; (21fc <cdcdf_acm_req+0x44>)
    21d0:	7c2d      	ldrb	r5, [r5, #16]
    21d2:	42ab      	cmp	r3, r5
    21d4:	d003      	beq.n	21de <cdcdf_acm_req+0x26>
    21d6:	4d09      	ldr	r5, [pc, #36]	; (21fc <cdcdf_acm_req+0x44>)
    21d8:	7c6d      	ldrb	r5, [r5, #17]
    21da:	42ab      	cmp	r3, r5
    21dc:	d10b      	bne.n	21f6 <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    21de:	b264      	sxtb	r4, r4
    21e0:	2c00      	cmp	r4, #0
    21e2:	db02      	blt.n	21ea <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    21e4:	4b06      	ldr	r3, [pc, #24]	; (2200 <cdcdf_acm_req+0x48>)
    21e6:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    21e8:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    21ea:	4b06      	ldr	r3, [pc, #24]	; (2204 <cdcdf_acm_req+0x4c>)
    21ec:	4798      	blx	r3
    21ee:	e7fb      	b.n	21e8 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    21f0:	200a      	movs	r0, #10
    21f2:	4240      	negs	r0, r0
    21f4:	e7f8      	b.n	21e8 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    21f6:	200a      	movs	r0, #10
    21f8:	4240      	negs	r0, r0
    21fa:	e7f5      	b.n	21e8 <cdcdf_acm_req+0x30>
    21fc:	20000314 	.word	0x20000314
    2200:	00002109 	.word	0x00002109
    2204:	000020cd 	.word	0x000020cd

00002208 <cdcdf_acm_enable>:
{
    2208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    220a:	46ce      	mov	lr, r9
    220c:	4647      	mov	r7, r8
    220e:	b580      	push	{r7, lr}
    2210:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2212:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    2214:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    2216:	2300      	movs	r3, #0
    2218:	4698      	mov	r8, r3
    221a:	4643      	mov	r3, r8
    221c:	2b01      	cmp	r3, #1
    221e:	d845      	bhi.n	22ac <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    2220:	2800      	cmp	r0, #0
    2222:	d04b      	beq.n	22bc <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    2224:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    2226:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2228:	2a02      	cmp	r2, #2
    222a:	d001      	beq.n	2230 <cdcdf_acm_enable+0x28>
    222c:	2a0a      	cmp	r2, #10
    222e:	d148      	bne.n	22c2 <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2230:	46c1      	mov	r9, r8
    2232:	4642      	mov	r2, r8
    2234:	5cba      	ldrb	r2, [r7, r2]
    2236:	4293      	cmp	r3, r2
    2238:	d046      	beq.n	22c8 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    223a:	2aff      	cmp	r2, #255	; 0xff
    223c:	d147      	bne.n	22ce <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    223e:	4642      	mov	r2, r8
    2240:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2242:	2205      	movs	r2, #5
    2244:	6871      	ldr	r1, [r6, #4]
    2246:	4b25      	ldr	r3, [pc, #148]	; (22dc <cdcdf_acm_enable+0xd4>)
    2248:	4798      	blx	r3
    224a:	0004      	movs	r4, r0
		while (NULL != ep) {
    224c:	e00c      	b.n	2268 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    224e:	464b      	mov	r3, r9
    2250:	18fb      	adds	r3, r7, r3
    2252:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2254:	0028      	movs	r0, r5
    2256:	4b22      	ldr	r3, [pc, #136]	; (22e0 <cdcdf_acm_enable+0xd8>)
    2258:	4798      	blx	r3
			desc->sod = ep;
    225a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    225c:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    225e:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2260:	6871      	ldr	r1, [r6, #4]
    2262:	4b20      	ldr	r3, [pc, #128]	; (22e4 <cdcdf_acm_enable+0xdc>)
    2264:	4798      	blx	r3
    2266:	0004      	movs	r4, r0
		while (NULL != ep) {
    2268:	2c00      	cmp	r4, #0
    226a:	d013      	beq.n	2294 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    226c:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    226e:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    2270:	7922      	ldrb	r2, [r4, #4]
    2272:	7963      	ldrb	r3, [r4, #5]
    2274:	021b      	lsls	r3, r3, #8
    2276:	18d2      	adds	r2, r2, r3
    2278:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    227a:	0028      	movs	r0, r5
    227c:	4b1a      	ldr	r3, [pc, #104]	; (22e8 <cdcdf_acm_enable+0xe0>)
    227e:	4798      	blx	r3
    2280:	2800      	cmp	r0, #0
    2282:	d127      	bne.n	22d4 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2284:	b26b      	sxtb	r3, r5
    2286:	2b00      	cmp	r3, #0
    2288:	dbe1      	blt.n	224e <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    228a:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    228c:	0028      	movs	r0, r5
    228e:	4b14      	ldr	r3, [pc, #80]	; (22e0 <cdcdf_acm_enable+0xd8>)
    2290:	4798      	blx	r3
    2292:	e7e2      	b.n	225a <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2294:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    2296:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    2298:	18c0      	adds	r0, r0, r3
    229a:	2204      	movs	r2, #4
    229c:	6871      	ldr	r1, [r6, #4]
    229e:	4b0f      	ldr	r3, [pc, #60]	; (22dc <cdcdf_acm_enable+0xd4>)
    22a0:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    22a2:	4643      	mov	r3, r8
    22a4:	3301      	adds	r3, #1
    22a6:	b2db      	uxtb	r3, r3
    22a8:	4698      	mov	r8, r3
    22aa:	e7b6      	b.n	221a <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    22ac:	2201      	movs	r2, #1
    22ae:	4b0f      	ldr	r3, [pc, #60]	; (22ec <cdcdf_acm_enable+0xe4>)
    22b0:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    22b2:	2000      	movs	r0, #0
}
    22b4:	bc0c      	pop	{r2, r3}
    22b6:	4690      	mov	r8, r2
    22b8:	4699      	mov	r9, r3
    22ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    22bc:	200a      	movs	r0, #10
    22be:	4240      	negs	r0, r0
    22c0:	e7f8      	b.n	22b4 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    22c2:	200a      	movs	r0, #10
    22c4:	4240      	negs	r0, r0
    22c6:	e7f5      	b.n	22b4 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    22c8:	2012      	movs	r0, #18
    22ca:	4240      	negs	r0, r0
    22cc:	e7f2      	b.n	22b4 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    22ce:	201c      	movs	r0, #28
    22d0:	4240      	negs	r0, r0
    22d2:	e7ef      	b.n	22b4 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    22d4:	2014      	movs	r0, #20
    22d6:	4240      	negs	r0, r0
    22d8:	e7ec      	b.n	22b4 <cdcdf_acm_enable+0xac>
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	00002ca9 	.word	0x00002ca9
    22e0:	00000851 	.word	0x00000851
    22e4:	00002cc7 	.word	0x00002cc7
    22e8:	000007bd 	.word	0x000007bd
    22ec:	20000314 	.word	0x20000314

000022f0 <cdcdf_acm_disable>:
{
    22f0:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    22f2:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    22f4:	2900      	cmp	r1, #0
    22f6:	d01a      	beq.n	232e <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    22f8:	680b      	ldr	r3, [r1, #0]
    22fa:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    22fc:	2b02      	cmp	r3, #2
    22fe:	d018      	beq.n	2332 <cdcdf_acm_disable+0x42>
    2300:	2b0a      	cmp	r3, #10
    2302:	d124      	bne.n	234e <cdcdf_acm_disable+0x5e>
    2304:	2400      	movs	r4, #0
    2306:	e001      	b.n	230c <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    2308:	3401      	adds	r4, #1
    230a:	b2e4      	uxtb	r4, r4
    230c:	2c01      	cmp	r4, #1
    230e:	d812      	bhi.n	2336 <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    2310:	5d2b      	ldrb	r3, [r5, r4]
    2312:	2bff      	cmp	r3, #255	; 0xff
    2314:	d0f8      	beq.n	2308 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    2316:	23ff      	movs	r3, #255	; 0xff
    2318:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    231a:	192b      	adds	r3, r5, r4
    231c:	7898      	ldrb	r0, [r3, #2]
    231e:	28ff      	cmp	r0, #255	; 0xff
    2320:	d0f2      	beq.n	2308 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2322:	4b0c      	ldr	r3, [pc, #48]	; (2354 <cdcdf_acm_disable+0x64>)
    2324:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2326:	192e      	adds	r6, r5, r4
    2328:	22ff      	movs	r2, #255	; 0xff
    232a:	70b2      	strb	r2, [r6, #2]
    232c:	e7ec      	b.n	2308 <cdcdf_acm_disable+0x18>
    232e:	2400      	movs	r4, #0
    2330:	e7ec      	b.n	230c <cdcdf_acm_disable+0x1c>
    2332:	2400      	movs	r4, #0
    2334:	e7ea      	b.n	230c <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    2336:	7928      	ldrb	r0, [r5, #4]
    2338:	28ff      	cmp	r0, #255	; 0xff
    233a:	d003      	beq.n	2344 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    233c:	4b05      	ldr	r3, [pc, #20]	; (2354 <cdcdf_acm_disable+0x64>)
    233e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2340:	23ff      	movs	r3, #255	; 0xff
    2342:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    2344:	2200      	movs	r2, #0
    2346:	4b04      	ldr	r3, [pc, #16]	; (2358 <cdcdf_acm_disable+0x68>)
    2348:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    234a:	2000      	movs	r0, #0
}
    234c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    234e:	200a      	movs	r0, #10
    2350:	4240      	negs	r0, r0
    2352:	e7fb      	b.n	234c <cdcdf_acm_disable+0x5c>
    2354:	00000825 	.word	0x00000825
    2358:	20000314 	.word	0x20000314

0000235c <cdcdf_acm_ctrl>:
{
    235c:	b510      	push	{r4, lr}
	switch (ctrl) {
    235e:	2901      	cmp	r1, #1
    2360:	d00a      	beq.n	2378 <cdcdf_acm_ctrl+0x1c>
    2362:	2900      	cmp	r1, #0
    2364:	d004      	beq.n	2370 <cdcdf_acm_ctrl+0x14>
    2366:	2902      	cmp	r1, #2
    2368:	d10a      	bne.n	2380 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    236a:	201b      	movs	r0, #27
    236c:	4240      	negs	r0, r0
}
    236e:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    2370:	0011      	movs	r1, r2
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <cdcdf_acm_ctrl+0x2c>)
    2374:	4798      	blx	r3
    2376:	e7fa      	b.n	236e <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    2378:	0011      	movs	r1, r2
    237a:	4b04      	ldr	r3, [pc, #16]	; (238c <cdcdf_acm_ctrl+0x30>)
    237c:	4798      	blx	r3
    237e:	e7f6      	b.n	236e <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    2380:	200d      	movs	r0, #13
    2382:	4240      	negs	r0, r0
    2384:	e7f3      	b.n	236e <cdcdf_acm_ctrl+0x12>
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	00002209 	.word	0x00002209
    238c:	000022f1 	.word	0x000022f1

00002390 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2390:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2392:	4b0b      	ldr	r3, [pc, #44]	; (23c0 <cdcdf_acm_init+0x30>)
    2394:	4798      	blx	r3
    2396:	2801      	cmp	r0, #1
    2398:	d80e      	bhi.n	23b8 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    239a:	480a      	ldr	r0, [pc, #40]	; (23c4 <cdcdf_acm_init+0x34>)
    239c:	4b0a      	ldr	r3, [pc, #40]	; (23c8 <cdcdf_acm_init+0x38>)
    239e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    23a0:	0003      	movs	r3, r0
    23a2:	3310      	adds	r3, #16
    23a4:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    23a6:	3018      	adds	r0, #24
    23a8:	4b08      	ldr	r3, [pc, #32]	; (23cc <cdcdf_acm_init+0x3c>)
    23aa:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    23ac:	4908      	ldr	r1, [pc, #32]	; (23d0 <cdcdf_acm_init+0x40>)
    23ae:	2001      	movs	r0, #1
    23b0:	4b08      	ldr	r3, [pc, #32]	; (23d4 <cdcdf_acm_init+0x44>)
    23b2:	4798      	blx	r3
	return ERR_NONE;
    23b4:	2000      	movs	r0, #0
}
    23b6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    23b8:	2011      	movs	r0, #17
    23ba:	4240      	negs	r0, r0
    23bc:	e7fb      	b.n	23b6 <cdcdf_acm_init+0x26>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	00002c99 	.word	0x00002c99
    23c4:	20000314 	.word	0x20000314
    23c8:	0000235d 	.word	0x0000235d
    23cc:	00002c31 	.word	0x00002c31
    23d0:	20000000 	.word	0x20000000
    23d4:	00002b99 	.word	0x00002b99

000023d8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    23d8:	b510      	push	{r4, lr}
	switch (cb_type) {
    23da:	2801      	cmp	r0, #1
    23dc:	d010      	beq.n	2400 <cdcdf_acm_register_callback+0x28>
    23de:	2800      	cmp	r0, #0
    23e0:	d006      	beq.n	23f0 <cdcdf_acm_register_callback+0x18>
    23e2:	2802      	cmp	r0, #2
    23e4:	d014      	beq.n	2410 <cdcdf_acm_register_callback+0x38>
    23e6:	2803      	cmp	r0, #3
    23e8:	d016      	beq.n	2418 <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    23ea:	200d      	movs	r0, #13
    23ec:	4240      	negs	r0, r0
    23ee:	e006      	b.n	23fe <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    23f0:	4b0b      	ldr	r3, [pc, #44]	; (2420 <cdcdf_acm_register_callback+0x48>)
    23f2:	7d18      	ldrb	r0, [r3, #20]
    23f4:	000a      	movs	r2, r1
    23f6:	2102      	movs	r1, #2
    23f8:	4b0a      	ldr	r3, [pc, #40]	; (2424 <cdcdf_acm_register_callback+0x4c>)
    23fa:	4798      	blx	r3
	}
	return ERR_NONE;
    23fc:	2000      	movs	r0, #0
}
    23fe:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2400:	4b07      	ldr	r3, [pc, #28]	; (2420 <cdcdf_acm_register_callback+0x48>)
    2402:	7cd8      	ldrb	r0, [r3, #19]
    2404:	000a      	movs	r2, r1
    2406:	2102      	movs	r1, #2
    2408:	4b06      	ldr	r3, [pc, #24]	; (2424 <cdcdf_acm_register_callback+0x4c>)
    240a:	4798      	blx	r3
	return ERR_NONE;
    240c:	2000      	movs	r0, #0
		break;
    240e:	e7f6      	b.n	23fe <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2410:	4b03      	ldr	r3, [pc, #12]	; (2420 <cdcdf_acm_register_callback+0x48>)
    2412:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    2414:	2000      	movs	r0, #0
		break;
    2416:	e7f2      	b.n	23fe <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    2418:	4b01      	ldr	r3, [pc, #4]	; (2420 <cdcdf_acm_register_callback+0x48>)
    241a:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    241c:	2000      	movs	r0, #0
		break;
    241e:	e7ee      	b.n	23fe <cdcdf_acm_register_callback+0x26>
    2420:	20000314 	.word	0x20000314
    2424:	00000a2d 	.word	0x00000a2d

00002428 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2428:	4b01      	ldr	r3, [pc, #4]	; (2430 <cdcdf_acm_is_enabled+0x8>)
    242a:	7d58      	ldrb	r0, [r3, #21]
}
    242c:	4770      	bx	lr
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	20000314 	.word	0x20000314

00002434 <cdcdf_acm_read>:
{
    2434:	b570      	push	{r4, r5, r6, lr}
    2436:	0004      	movs	r4, r0
    2438:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    243a:	4b07      	ldr	r3, [pc, #28]	; (2458 <cdcdf_acm_read+0x24>)
    243c:	4798      	blx	r3
    243e:	2800      	cmp	r0, #0
    2440:	d007      	beq.n	2452 <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    2442:	4b06      	ldr	r3, [pc, #24]	; (245c <cdcdf_acm_read+0x28>)
    2444:	7d18      	ldrb	r0, [r3, #20]
    2446:	2300      	movs	r3, #0
    2448:	002a      	movs	r2, r5
    244a:	0021      	movs	r1, r4
    244c:	4c04      	ldr	r4, [pc, #16]	; (2460 <cdcdf_acm_read+0x2c>)
    244e:	47a0      	blx	r4
}
    2450:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    2452:	2011      	movs	r0, #17
    2454:	4240      	negs	r0, r0
    2456:	e7fb      	b.n	2450 <cdcdf_acm_read+0x1c>
    2458:	00002429 	.word	0x00002429
    245c:	20000314 	.word	0x20000314
    2460:	00002701 	.word	0x00002701

00002464 <cdcdf_acm_write>:
{
    2464:	b570      	push	{r4, r5, r6, lr}
    2466:	0004      	movs	r4, r0
    2468:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    246a:	4b07      	ldr	r3, [pc, #28]	; (2488 <cdcdf_acm_write+0x24>)
    246c:	4798      	blx	r3
    246e:	2800      	cmp	r0, #0
    2470:	d007      	beq.n	2482 <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2472:	4b06      	ldr	r3, [pc, #24]	; (248c <cdcdf_acm_write+0x28>)
    2474:	7cd8      	ldrb	r0, [r3, #19]
    2476:	2301      	movs	r3, #1
    2478:	002a      	movs	r2, r5
    247a:	0021      	movs	r1, r4
    247c:	4c04      	ldr	r4, [pc, #16]	; (2490 <cdcdf_acm_write+0x2c>)
    247e:	47a0      	blx	r4
}
    2480:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    2482:	2011      	movs	r0, #17
    2484:	4240      	negs	r0, r0
    2486:	e7fb      	b.n	2480 <cdcdf_acm_write+0x1c>
    2488:	00002429 	.word	0x00002429
    248c:	20000314 	.word	0x20000314
    2490:	00002701 	.word	0x00002701

00002494 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2494:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2496:	4b06      	ldr	r3, [pc, #24]	; (24b0 <usbdc_unconfig+0x1c>)
    2498:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    249a:	e005      	b.n	24a8 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    249c:	2200      	movs	r2, #0
    249e:	2101      	movs	r1, #1
    24a0:	0020      	movs	r0, r4
    24a2:	6863      	ldr	r3, [r4, #4]
    24a4:	4798      	blx	r3
		func = func->next;
    24a6:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    24a8:	2c00      	cmp	r4, #0
    24aa:	d1f7      	bne.n	249c <usbdc_unconfig+0x8>
	}
}
    24ac:	bd10      	pop	{r4, pc}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	20000338 	.word	0x20000338

000024b4 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    24b4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    24b6:	4b06      	ldr	r3, [pc, #24]	; (24d0 <usbdc_sof_notify+0x1c>)
    24b8:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    24ba:	e000      	b.n	24be <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    24bc:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    24be:	2c00      	cmp	r4, #0
    24c0:	d004      	beq.n	24cc <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    24c2:	6863      	ldr	r3, [r4, #4]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d0f9      	beq.n	24bc <usbdc_sof_notify+0x8>
			sof->cb();
    24c8:	4798      	blx	r3
    24ca:	e7f7      	b.n	24bc <usbdc_sof_notify+0x8>
	}
}
    24cc:	bd10      	pop	{r4, pc}
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	20000338 	.word	0x20000338

000024d4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    24d4:	b570      	push	{r4, r5, r6, lr}
    24d6:	0006      	movs	r6, r0
    24d8:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    24da:	4b07      	ldr	r3, [pc, #28]	; (24f8 <usbdc_change_notify+0x24>)
    24dc:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    24de:	e000      	b.n	24e2 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    24e0:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    24e2:	2c00      	cmp	r4, #0
    24e4:	d006      	beq.n	24f4 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    24e6:	6863      	ldr	r3, [r4, #4]
    24e8:	2b00      	cmp	r3, #0
    24ea:	d0f9      	beq.n	24e0 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    24ec:	0029      	movs	r1, r5
    24ee:	0030      	movs	r0, r6
    24f0:	4798      	blx	r3
    24f2:	e7f5      	b.n	24e0 <usbdc_change_notify+0xc>
	}
}
    24f4:	bd70      	pop	{r4, r5, r6, pc}
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	20000338 	.word	0x20000338

000024fc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    24fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24fe:	0007      	movs	r7, r0
    2500:	000e      	movs	r6, r1
    2502:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2504:	4b0b      	ldr	r3, [pc, #44]	; (2534 <usbdc_request_handler+0x38>)
    2506:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2508:	e000      	b.n	250c <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    250a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    250c:	2c00      	cmp	r4, #0
    250e:	d00d      	beq.n	252c <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    2510:	6863      	ldr	r3, [r4, #4]
    2512:	2b00      	cmp	r3, #0
    2514:	d0f9      	beq.n	250a <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    2516:	002a      	movs	r2, r5
    2518:	0031      	movs	r1, r6
    251a:	0038      	movs	r0, r7
    251c:	4798      	blx	r3
			if (0 == rc) {
    251e:	2800      	cmp	r0, #0
    2520:	d006      	beq.n	2530 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    2522:	300a      	adds	r0, #10
    2524:	d0f1      	beq.n	250a <usbdc_request_handler+0xe>
				return -1;
    2526:	2001      	movs	r0, #1
    2528:	4240      	negs	r0, r0
    252a:	e000      	b.n	252e <usbdc_request_handler+0x32>
	}
	return false;
    252c:	2000      	movs	r0, #0
}
    252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2530:	2001      	movs	r0, #1
    2532:	e7fc      	b.n	252e <usbdc_request_handler+0x32>
    2534:	20000338 	.word	0x20000338

00002538 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2538:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    253a:	4b01      	ldr	r3, [pc, #4]	; (2540 <usbd_sof_cb+0x8>)
    253c:	4798      	blx	r3
}
    253e:	bd10      	pop	{r4, pc}
    2540:	000024b5 	.word	0x000024b5

00002544 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    2544:	b510      	push	{r4, lr}
    2546:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2548:	2201      	movs	r2, #1
    254a:	2000      	movs	r0, #0
    254c:	4b01      	ldr	r3, [pc, #4]	; (2554 <usbdc_ctrl_data_end+0x10>)
    254e:	4798      	blx	r3
	return false;
}
    2550:	2000      	movs	r0, #0
    2552:	bd10      	pop	{r4, pc}
    2554:	000024fd 	.word	0x000024fd

00002558 <usbdc_set_address>:
{
    2558:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    255a:	4b01      	ldr	r3, [pc, #4]	; (2560 <usbdc_set_address+0x8>)
    255c:	4798      	blx	r3
}
    255e:	bd10      	pop	{r4, pc}
    2560:	000007b1 	.word	0x000007b1

00002564 <usbdc_ctrl_status_end>:
{
    2564:	b510      	push	{r4, lr}
    2566:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2568:	7803      	ldrb	r3, [r0, #0]
    256a:	2b00      	cmp	r3, #0
    256c:	d112      	bne.n	2594 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    256e:	7843      	ldrb	r3, [r0, #1]
    2570:	2b05      	cmp	r3, #5
    2572:	d012      	beq.n	259a <usbdc_ctrl_status_end+0x36>
    2574:	2b09      	cmp	r3, #9
    2576:	d10d      	bne.n	2594 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    2578:	7882      	ldrb	r2, [r0, #2]
    257a:	4b10      	ldr	r3, [pc, #64]	; (25bc <usbdc_ctrl_status_end+0x58>)
    257c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    257e:	7882      	ldrb	r2, [r0, #2]
    2580:	78c3      	ldrb	r3, [r0, #3]
    2582:	021b      	lsls	r3, r3, #8
    2584:	4313      	orrs	r3, r2
    2586:	d106      	bne.n	2596 <usbdc_ctrl_status_end+0x32>
    2588:	2103      	movs	r1, #3
    258a:	4b0c      	ldr	r3, [pc, #48]	; (25bc <usbdc_ctrl_status_end+0x58>)
    258c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    258e:	2001      	movs	r0, #1
    2590:	4b0b      	ldr	r3, [pc, #44]	; (25c0 <usbdc_ctrl_status_end+0x5c>)
    2592:	4798      	blx	r3
}
    2594:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2596:	2104      	movs	r1, #4
    2598:	e7f7      	b.n	258a <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    259a:	7880      	ldrb	r0, [r0, #2]
    259c:	4b09      	ldr	r3, [pc, #36]	; (25c4 <usbdc_ctrl_status_end+0x60>)
    259e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    25a0:	78a2      	ldrb	r2, [r4, #2]
    25a2:	78e3      	ldrb	r3, [r4, #3]
    25a4:	021b      	lsls	r3, r3, #8
    25a6:	4313      	orrs	r3, r2
    25a8:	d006      	beq.n	25b8 <usbdc_ctrl_status_end+0x54>
    25aa:	2103      	movs	r1, #3
    25ac:	4b03      	ldr	r3, [pc, #12]	; (25bc <usbdc_ctrl_status_end+0x58>)
    25ae:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    25b0:	2001      	movs	r0, #1
    25b2:	4b03      	ldr	r3, [pc, #12]	; (25c0 <usbdc_ctrl_status_end+0x5c>)
    25b4:	4798      	blx	r3
		break;
    25b6:	e7ed      	b.n	2594 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    25b8:	2102      	movs	r1, #2
    25ba:	e7f7      	b.n	25ac <usbdc_ctrl_status_end+0x48>
    25bc:	20000338 	.word	0x20000338
    25c0:	000024d5 	.word	0x000024d5
    25c4:	00002559 	.word	0x00002559

000025c8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    25c8:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    25ca:	2900      	cmp	r1, #0
    25cc:	d003      	beq.n	25d6 <usbdc_cb_ctl_done+0xe>
    25ce:	2901      	cmp	r1, #1
    25d0:	d006      	beq.n	25e0 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    25d2:	2000      	movs	r0, #0
    25d4:	e003      	b.n	25de <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    25d6:	0010      	movs	r0, r2
    25d8:	4b03      	ldr	r3, [pc, #12]	; (25e8 <usbdc_cb_ctl_done+0x20>)
    25da:	4798      	blx	r3
	return false;
    25dc:	2000      	movs	r0, #0
}
    25de:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    25e0:	0010      	movs	r0, r2
    25e2:	4b02      	ldr	r3, [pc, #8]	; (25ec <usbdc_cb_ctl_done+0x24>)
    25e4:	4798      	blx	r3
    25e6:	e7fa      	b.n	25de <usbdc_cb_ctl_done+0x16>
    25e8:	00002565 	.word	0x00002565
    25ec:	00002545 	.word	0x00002545

000025f0 <usbdc_set_config>:
{
    25f0:	b530      	push	{r4, r5, lr}
    25f2:	b083      	sub	sp, #12
    25f4:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    25f6:	d014      	beq.n	2622 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    25f8:	4b1e      	ldr	r3, [pc, #120]	; (2674 <usbdc_set_config+0x84>)
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	6818      	ldr	r0, [r3, #0]
    25fe:	6859      	ldr	r1, [r3, #4]
    2600:	4b1d      	ldr	r3, [pc, #116]	; (2678 <usbdc_set_config+0x88>)
    2602:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2604:	2800      	cmp	r0, #0
    2606:	d032      	beq.n	266e <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    2608:	7881      	ldrb	r1, [r0, #2]
    260a:	78c3      	ldrb	r3, [r0, #3]
    260c:	021b      	lsls	r3, r3, #8
    260e:	18c9      	adds	r1, r1, r3
    2610:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    2612:	1841      	adds	r1, r0, r1
    2614:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2616:	2204      	movs	r2, #4
    2618:	4b18      	ldr	r3, [pc, #96]	; (267c <usbdc_set_config+0x8c>)
    261a:	4798      	blx	r3
    261c:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    261e:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    2620:	e00d      	b.n	263e <usbdc_set_config+0x4e>
		usbdc_unconfig();
    2622:	4b17      	ldr	r3, [pc, #92]	; (2680 <usbdc_set_config+0x90>)
    2624:	4798      	blx	r3
		return true;
    2626:	2001      	movs	r0, #1
    2628:	e01f      	b.n	266a <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    262a:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    262c:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    262e:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    2630:	18c0      	adds	r0, r0, r3
    2632:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2634:	2204      	movs	r2, #4
    2636:	9901      	ldr	r1, [sp, #4]
    2638:	4b10      	ldr	r3, [pc, #64]	; (267c <usbdc_set_config+0x8c>)
    263a:	4798      	blx	r3
    263c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    263e:	9b00      	ldr	r3, [sp, #0]
    2640:	2b00      	cmp	r3, #0
    2642:	d011      	beq.n	2668 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2644:	789d      	ldrb	r5, [r3, #2]
    2646:	42ac      	cmp	r4, r5
    2648:	d0f0      	beq.n	262c <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    264a:	4b0a      	ldr	r3, [pc, #40]	; (2674 <usbdc_set_config+0x84>)
    264c:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    264e:	2c00      	cmp	r4, #0
    2650:	d0eb      	beq.n	262a <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2652:	466a      	mov	r2, sp
    2654:	2100      	movs	r1, #0
    2656:	0020      	movs	r0, r4
    2658:	6863      	ldr	r3, [r4, #4]
    265a:	4798      	blx	r3
    265c:	2800      	cmp	r0, #0
    265e:	d001      	beq.n	2664 <usbdc_set_config+0x74>
					func = func->next;
    2660:	6824      	ldr	r4, [r4, #0]
    2662:	e7f4      	b.n	264e <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    2664:	002c      	movs	r4, r5
    2666:	e7e1      	b.n	262c <usbdc_set_config+0x3c>
	return true;
    2668:	2001      	movs	r0, #1
}
    266a:	b003      	add	sp, #12
    266c:	bd30      	pop	{r4, r5, pc}
		return false;
    266e:	2000      	movs	r0, #0
    2670:	e7fb      	b.n	266a <usbdc_set_config+0x7a>
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	20000338 	.word	0x20000338
    2678:	00002ced 	.word	0x00002ced
    267c:	00002ca9 	.word	0x00002ca9
    2680:	00002495 	.word	0x00002495

00002684 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2684:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2686:	4b0d      	ldr	r3, [pc, #52]	; (26bc <usbdc_reset+0x38>)
    2688:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    268a:	4c0d      	ldr	r4, [pc, #52]	; (26c0 <usbdc_reset+0x3c>)
    268c:	2302      	movs	r3, #2
    268e:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    2690:	2300      	movs	r3, #0
    2692:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2694:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2696:	2000      	movs	r0, #0
    2698:	4b0a      	ldr	r3, [pc, #40]	; (26c4 <usbdc_reset+0x40>)
    269a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    269c:	7f20      	ldrb	r0, [r4, #28]
    269e:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <usbdc_reset+0x44>)
    26a0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    26a2:	4a0a      	ldr	r2, [pc, #40]	; (26cc <usbdc_reset+0x48>)
    26a4:	2100      	movs	r1, #0
    26a6:	2000      	movs	r0, #0
    26a8:	4c09      	ldr	r4, [pc, #36]	; (26d0 <usbdc_reset+0x4c>)
    26aa:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    26ac:	4a09      	ldr	r2, [pc, #36]	; (26d4 <usbdc_reset+0x50>)
    26ae:	2102      	movs	r1, #2
    26b0:	2000      	movs	r0, #0
    26b2:	47a0      	blx	r4
	usb_d_ep_enable(0);
    26b4:	2000      	movs	r0, #0
    26b6:	4b08      	ldr	r3, [pc, #32]	; (26d8 <usbdc_reset+0x54>)
    26b8:	4798      	blx	r3
}
    26ba:	bd10      	pop	{r4, pc}
    26bc:	00002495 	.word	0x00002495
    26c0:	20000338 	.word	0x20000338
    26c4:	00000825 	.word	0x00000825
    26c8:	00000811 	.word	0x00000811
    26cc:	00002b4d 	.word	0x00002b4d
    26d0:	00000a2d 	.word	0x00000a2d
    26d4:	000025c9 	.word	0x000025c9
    26d8:	00000851 	.word	0x00000851

000026dc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    26dc:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    26de:	2800      	cmp	r0, #0
    26e0:	d002      	beq.n	26e8 <usbd_event_cb+0xc>
    26e2:	2801      	cmp	r0, #1
    26e4:	d004      	beq.n	26f0 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    26e6:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    26e8:	2000      	movs	r0, #0
    26ea:	4b03      	ldr	r3, [pc, #12]	; (26f8 <usbd_event_cb+0x1c>)
    26ec:	4798      	blx	r3
		break;
    26ee:	e7fa      	b.n	26e6 <usbd_event_cb+0xa>
		usbdc_reset();
    26f0:	4b02      	ldr	r3, [pc, #8]	; (26fc <usbd_event_cb+0x20>)
    26f2:	4798      	blx	r3
}
    26f4:	e7f7      	b.n	26e6 <usbd_event_cb+0xa>
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	000024d5 	.word	0x000024d5
    26fc:	00002685 	.word	0x00002685

00002700 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2700:	b510      	push	{r4, lr}
    2702:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2704:	ac01      	add	r4, sp, #4
    2706:	9101      	str	r1, [sp, #4]
    2708:	9202      	str	r2, [sp, #8]
    270a:	7220      	strb	r0, [r4, #8]
    270c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    270e:	0020      	movs	r0, r4
    2710:	4b01      	ldr	r3, [pc, #4]	; (2718 <usbdc_xfer+0x18>)
    2712:	4798      	blx	r3
}
    2714:	b004      	add	sp, #16
    2716:	bd10      	pop	{r4, pc}
    2718:	000008a1 	.word	0x000008a1

0000271c <usbdc_clear_ftr_req>:
{
    271c:	b510      	push	{r4, lr}
    271e:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2720:	780a      	ldrb	r2, [r1, #0]
    2722:	231f      	movs	r3, #31
    2724:	4013      	ands	r3, r2
    2726:	2b02      	cmp	r3, #2
    2728:	d112      	bne.n	2750 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    272a:	798a      	ldrb	r2, [r1, #6]
    272c:	79cb      	ldrb	r3, [r1, #7]
    272e:	021b      	lsls	r3, r3, #8
    2730:	4313      	orrs	r3, r2
    2732:	d001      	beq.n	2738 <usbdc_clear_ftr_req+0x1c>
			return false;
    2734:	2000      	movs	r0, #0
    2736:	e00c      	b.n	2752 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2738:	7908      	ldrb	r0, [r1, #4]
    273a:	2100      	movs	r1, #0
    273c:	4b05      	ldr	r3, [pc, #20]	; (2754 <usbdc_clear_ftr_req+0x38>)
    273e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2740:	2301      	movs	r3, #1
    2742:	2200      	movs	r2, #0
    2744:	2100      	movs	r1, #0
    2746:	0020      	movs	r0, r4
    2748:	4c03      	ldr	r4, [pc, #12]	; (2758 <usbdc_clear_ftr_req+0x3c>)
    274a:	47a0      	blx	r4
		return true;
    274c:	2001      	movs	r0, #1
    274e:	e000      	b.n	2752 <usbdc_clear_ftr_req+0x36>
		return false;
    2750:	2000      	movs	r0, #0
}
    2752:	bd10      	pop	{r4, pc}
    2754:	000009c5 	.word	0x000009c5
    2758:	00002701 	.word	0x00002701

0000275c <usbdc_set_ftr_req>:
{
    275c:	b510      	push	{r4, lr}
    275e:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2760:	780a      	ldrb	r2, [r1, #0]
    2762:	231f      	movs	r3, #31
    2764:	4013      	ands	r3, r2
    2766:	2b02      	cmp	r3, #2
    2768:	d112      	bne.n	2790 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    276a:	798a      	ldrb	r2, [r1, #6]
    276c:	79cb      	ldrb	r3, [r1, #7]
    276e:	021b      	lsls	r3, r3, #8
    2770:	4313      	orrs	r3, r2
    2772:	d001      	beq.n	2778 <usbdc_set_ftr_req+0x1c>
			return false;
    2774:	2000      	movs	r0, #0
    2776:	e00c      	b.n	2792 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2778:	7908      	ldrb	r0, [r1, #4]
    277a:	2101      	movs	r1, #1
    277c:	4b05      	ldr	r3, [pc, #20]	; (2794 <usbdc_set_ftr_req+0x38>)
    277e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2780:	2301      	movs	r3, #1
    2782:	2200      	movs	r2, #0
    2784:	2100      	movs	r1, #0
    2786:	0020      	movs	r0, r4
    2788:	4c03      	ldr	r4, [pc, #12]	; (2798 <usbdc_set_ftr_req+0x3c>)
    278a:	47a0      	blx	r4
		return true;
    278c:	2001      	movs	r0, #1
    278e:	e000      	b.n	2792 <usbdc_set_ftr_req+0x36>
		return false;
    2790:	2000      	movs	r0, #0
}
    2792:	bd10      	pop	{r4, pc}
    2794:	000009c5 	.word	0x000009c5
    2798:	00002701 	.word	0x00002701

0000279c <usbdc_set_interface>:
{
    279c:	b570      	push	{r4, r5, r6, lr}
    279e:	b082      	sub	sp, #8
    27a0:	0005      	movs	r5, r0
    27a2:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    27a4:	4b2a      	ldr	r3, [pc, #168]	; (2850 <usbdc_set_interface+0xb4>)
    27a6:	681a      	ldr	r2, [r3, #0]
    27a8:	6810      	ldr	r0, [r2, #0]
    27aa:	6851      	ldr	r1, [r2, #4]
    27ac:	7eda      	ldrb	r2, [r3, #27]
    27ae:	4b29      	ldr	r3, [pc, #164]	; (2854 <usbdc_set_interface+0xb8>)
    27b0:	4798      	blx	r3
	if (NULL == ifc) {
    27b2:	2800      	cmp	r0, #0
    27b4:	d045      	beq.n	2842 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    27b6:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    27b8:	7881      	ldrb	r1, [r0, #2]
    27ba:	78c3      	ldrb	r3, [r0, #3]
    27bc:	021b      	lsls	r3, r3, #8
    27be:	18c9      	adds	r1, r1, r3
    27c0:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    27c2:	1841      	adds	r1, r0, r1
    27c4:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    27c6:	2204      	movs	r2, #4
    27c8:	4b23      	ldr	r3, [pc, #140]	; (2858 <usbdc_set_interface+0xbc>)
    27ca:	4798      	blx	r3
    27cc:	2800      	cmp	r0, #0
    27ce:	d10b      	bne.n	27e8 <usbdc_set_interface+0x4c>
		return false;
    27d0:	2000      	movs	r0, #0
    27d2:	e039      	b.n	2848 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    27d4:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    27d6:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    27d8:	18c0      	adds	r0, r0, r3
    27da:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    27dc:	2204      	movs	r2, #4
    27de:	9901      	ldr	r1, [sp, #4]
    27e0:	4b1d      	ldr	r3, [pc, #116]	; (2858 <usbdc_set_interface+0xbc>)
    27e2:	4798      	blx	r3
		if (NULL == ifc) {
    27e4:	2800      	cmp	r0, #0
    27e6:	d02e      	beq.n	2846 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    27e8:	7883      	ldrb	r3, [r0, #2]
    27ea:	42a3      	cmp	r3, r4
    27ec:	d1f2      	bne.n	27d4 <usbdc_set_interface+0x38>
    27ee:	78c3      	ldrb	r3, [r0, #3]
    27f0:	42ab      	cmp	r3, r5
    27f2:	d1ef      	bne.n	27d4 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    27f4:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    27f6:	4b16      	ldr	r3, [pc, #88]	; (2850 <usbdc_set_interface+0xb4>)
    27f8:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    27fa:	2e00      	cmp	r6, #0
    27fc:	d01f      	beq.n	283e <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    27fe:	466a      	mov	r2, sp
    2800:	2101      	movs	r1, #1
    2802:	0030      	movs	r0, r6
    2804:	6873      	ldr	r3, [r6, #4]
    2806:	4798      	blx	r3
    2808:	2800      	cmp	r0, #0
    280a:	d001      	beq.n	2810 <usbdc_set_interface+0x74>
			func = func->next;
    280c:	6836      	ldr	r6, [r6, #0]
    280e:	e7f4      	b.n	27fa <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2810:	6873      	ldr	r3, [r6, #4]
    2812:	466a      	mov	r2, sp
    2814:	2100      	movs	r1, #0
    2816:	0030      	movs	r0, r6
    2818:	4798      	blx	r3
    281a:	2800      	cmp	r0, #0
    281c:	d116      	bne.n	284c <usbdc_set_interface+0xb0>
			if (alt_set) {
    281e:	2d00      	cmp	r5, #0
    2820:	d005      	beq.n	282e <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2822:	2201      	movs	r2, #1
    2824:	40a2      	lsls	r2, r4
    2826:	490a      	ldr	r1, [pc, #40]	; (2850 <usbdc_set_interface+0xb4>)
    2828:	7f4b      	ldrb	r3, [r1, #29]
    282a:	4313      	orrs	r3, r2
    282c:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    282e:	2300      	movs	r3, #0
    2830:	2200      	movs	r2, #0
    2832:	2100      	movs	r1, #0
    2834:	2000      	movs	r0, #0
    2836:	4c09      	ldr	r4, [pc, #36]	; (285c <usbdc_set_interface+0xc0>)
    2838:	47a0      	blx	r4
			return true;
    283a:	2001      	movs	r0, #1
    283c:	e004      	b.n	2848 <usbdc_set_interface+0xac>
	return false;
    283e:	2000      	movs	r0, #0
    2840:	e002      	b.n	2848 <usbdc_set_interface+0xac>
		return false;
    2842:	2000      	movs	r0, #0
    2844:	e000      	b.n	2848 <usbdc_set_interface+0xac>
			return false;
    2846:	2000      	movs	r0, #0
}
    2848:	b002      	add	sp, #8
    284a:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    284c:	2000      	movs	r0, #0
    284e:	e7fb      	b.n	2848 <usbdc_set_interface+0xac>
    2850:	20000338 	.word	0x20000338
    2854:	00002ced 	.word	0x00002ced
    2858:	00002ca9 	.word	0x00002ca9
    285c:	00002701 	.word	0x00002701

00002860 <usbdc_set_req>:
{
    2860:	b510      	push	{r4, lr}
    2862:	0004      	movs	r4, r0
	switch (req->bRequest) {
    2864:	784b      	ldrb	r3, [r1, #1]
    2866:	2b0b      	cmp	r3, #11
    2868:	d82d      	bhi.n	28c6 <usbdc_set_req+0x66>
    286a:	009b      	lsls	r3, r3, #2
    286c:	4a17      	ldr	r2, [pc, #92]	; (28cc <usbdc_set_req+0x6c>)
    286e:	58d3      	ldr	r3, [r2, r3]
    2870:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2872:	2301      	movs	r3, #1
    2874:	2200      	movs	r2, #0
    2876:	2100      	movs	r1, #0
    2878:	4c15      	ldr	r4, [pc, #84]	; (28d0 <usbdc_set_req+0x70>)
    287a:	47a0      	blx	r4
    287c:	4243      	negs	r3, r0
    287e:	4158      	adcs	r0, r3
    2880:	b2c0      	uxtb	r0, r0
}
    2882:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    2884:	7888      	ldrb	r0, [r1, #2]
    2886:	4b13      	ldr	r3, [pc, #76]	; (28d4 <usbdc_set_req+0x74>)
    2888:	4798      	blx	r3
    288a:	2800      	cmp	r0, #0
    288c:	d0f9      	beq.n	2882 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    288e:	2301      	movs	r3, #1
    2890:	2200      	movs	r2, #0
    2892:	2100      	movs	r1, #0
    2894:	0020      	movs	r0, r4
    2896:	4c0e      	ldr	r4, [pc, #56]	; (28d0 <usbdc_set_req+0x70>)
    2898:	47a0      	blx	r4
    289a:	4243      	negs	r3, r0
    289c:	4158      	adcs	r0, r3
    289e:	b2c0      	uxtb	r0, r0
    28a0:	e7ef      	b.n	2882 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    28a2:	4b0d      	ldr	r3, [pc, #52]	; (28d8 <usbdc_set_req+0x78>)
    28a4:	4798      	blx	r3
    28a6:	e7ec      	b.n	2882 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    28a8:	4b0c      	ldr	r3, [pc, #48]	; (28dc <usbdc_set_req+0x7c>)
    28aa:	4798      	blx	r3
    28ac:	e7e9      	b.n	2882 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    28ae:	790a      	ldrb	r2, [r1, #4]
    28b0:	794b      	ldrb	r3, [r1, #5]
    28b2:	021b      	lsls	r3, r3, #8
    28b4:	4313      	orrs	r3, r2
    28b6:	788a      	ldrb	r2, [r1, #2]
    28b8:	78c8      	ldrb	r0, [r1, #3]
    28ba:	0200      	lsls	r0, r0, #8
    28bc:	4310      	orrs	r0, r2
    28be:	0019      	movs	r1, r3
    28c0:	4b07      	ldr	r3, [pc, #28]	; (28e0 <usbdc_set_req+0x80>)
    28c2:	4798      	blx	r3
    28c4:	e7dd      	b.n	2882 <usbdc_set_req+0x22>
		return false;
    28c6:	2000      	movs	r0, #0
    28c8:	e7db      	b.n	2882 <usbdc_set_req+0x22>
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	000031d0 	.word	0x000031d0
    28d0:	00002701 	.word	0x00002701
    28d4:	000025f1 	.word	0x000025f1
    28d8:	0000271d 	.word	0x0000271d
    28dc:	0000275d 	.word	0x0000275d
    28e0:	0000279d 	.word	0x0000279d

000028e4 <usbdc_get_dev_desc>:
{
    28e4:	b570      	push	{r4, r5, r6, lr}
    28e6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    28e8:	798b      	ldrb	r3, [r1, #6]
    28ea:	79cc      	ldrb	r4, [r1, #7]
    28ec:	0224      	lsls	r4, r4, #8
    28ee:	431c      	orrs	r4, r3
	if (length > 0x12) {
    28f0:	2c12      	cmp	r4, #18
    28f2:	d900      	bls.n	28f6 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    28f4:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    28f6:	4b0b      	ldr	r3, [pc, #44]	; (2924 <usbdc_get_dev_desc+0x40>)
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	6818      	ldr	r0, [r3, #0]
    28fc:	6859      	ldr	r1, [r3, #4]
    28fe:	2201      	movs	r2, #1
    2900:	4b09      	ldr	r3, [pc, #36]	; (2928 <usbdc_get_dev_desc+0x44>)
    2902:	4798      	blx	r3
	if (!dev_desc) {
    2904:	2800      	cmp	r0, #0
    2906:	d00b      	beq.n	2920 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2908:	2300      	movs	r3, #0
    290a:	0022      	movs	r2, r4
    290c:	0001      	movs	r1, r0
    290e:	0028      	movs	r0, r5
    2910:	4c06      	ldr	r4, [pc, #24]	; (292c <usbdc_get_dev_desc+0x48>)
    2912:	47a0      	blx	r4
    2914:	2800      	cmp	r0, #0
    2916:	d101      	bne.n	291c <usbdc_get_dev_desc+0x38>
	return true;
    2918:	2001      	movs	r0, #1
}
    291a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    291c:	2000      	movs	r0, #0
    291e:	e7fc      	b.n	291a <usbdc_get_dev_desc+0x36>
		return false;
    2920:	2000      	movs	r0, #0
    2922:	e7fa      	b.n	291a <usbdc_get_dev_desc+0x36>
    2924:	20000338 	.word	0x20000338
    2928:	00002ca9 	.word	0x00002ca9
    292c:	00002701 	.word	0x00002701

00002930 <usbdc_get_cfg_desc>:
{
    2930:	b570      	push	{r4, r5, r6, lr}
    2932:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    2934:	798b      	ldrb	r3, [r1, #6]
    2936:	79ce      	ldrb	r6, [r1, #7]
    2938:	0236      	lsls	r6, r6, #8
    293a:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    293c:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    293e:	4b13      	ldr	r3, [pc, #76]	; (298c <usbdc_get_cfg_desc+0x5c>)
    2940:	7f1c      	ldrb	r4, [r3, #28]
    2942:	3c01      	subs	r4, #1
    2944:	4034      	ands	r4, r6
    2946:	4261      	negs	r1, r4
    2948:	414c      	adcs	r4, r1
    294a:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	6818      	ldr	r0, [r3, #0]
    2950:	6859      	ldr	r1, [r3, #4]
    2952:	3201      	adds	r2, #1
    2954:	b2d2      	uxtb	r2, r2
    2956:	4b0e      	ldr	r3, [pc, #56]	; (2990 <usbdc_get_cfg_desc+0x60>)
    2958:	4798      	blx	r3
	if (NULL == cfg_desc) {
    295a:	2800      	cmp	r0, #0
    295c:	d013      	beq.n	2986 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    295e:	7882      	ldrb	r2, [r0, #2]
    2960:	78c3      	ldrb	r3, [r0, #3]
    2962:	021b      	lsls	r3, r3, #8
    2964:	18d2      	adds	r2, r2, r3
    2966:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2968:	4296      	cmp	r6, r2
    296a:	d801      	bhi.n	2970 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    296c:	0032      	movs	r2, r6
		need_zlp = false;
    296e:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2970:	0023      	movs	r3, r4
    2972:	0001      	movs	r1, r0
    2974:	0028      	movs	r0, r5
    2976:	4c07      	ldr	r4, [pc, #28]	; (2994 <usbdc_get_cfg_desc+0x64>)
    2978:	47a0      	blx	r4
    297a:	2800      	cmp	r0, #0
    297c:	d101      	bne.n	2982 <usbdc_get_cfg_desc+0x52>
	return true;
    297e:	2001      	movs	r0, #1
}
    2980:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    2982:	2000      	movs	r0, #0
    2984:	e7fc      	b.n	2980 <usbdc_get_cfg_desc+0x50>
		return false;
    2986:	2000      	movs	r0, #0
    2988:	e7fa      	b.n	2980 <usbdc_get_cfg_desc+0x50>
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	20000338 	.word	0x20000338
    2990:	00002ced 	.word	0x00002ced
    2994:	00002701 	.word	0x00002701

00002998 <usbdc_get_str_desc>:
{
    2998:	b570      	push	{r4, r5, r6, lr}
    299a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    299c:	798b      	ldrb	r3, [r1, #6]
    299e:	79ce      	ldrb	r6, [r1, #7]
    29a0:	0236      	lsls	r6, r6, #8
    29a2:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    29a4:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    29a6:	4b10      	ldr	r3, [pc, #64]	; (29e8 <usbdc_get_str_desc+0x50>)
    29a8:	7f1c      	ldrb	r4, [r3, #28]
    29aa:	3c01      	subs	r4, #1
    29ac:	4034      	ands	r4, r6
    29ae:	4261      	negs	r1, r4
    29b0:	414c      	adcs	r4, r1
    29b2:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    29b4:	681b      	ldr	r3, [r3, #0]
    29b6:	6818      	ldr	r0, [r3, #0]
    29b8:	6859      	ldr	r1, [r3, #4]
    29ba:	4b0c      	ldr	r3, [pc, #48]	; (29ec <usbdc_get_str_desc+0x54>)
    29bc:	4798      	blx	r3
	if (NULL == str_desc) {
    29be:	2800      	cmp	r0, #0
    29c0:	d00f      	beq.n	29e2 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    29c2:	7802      	ldrb	r2, [r0, #0]
    29c4:	4296      	cmp	r6, r2
    29c6:	d801      	bhi.n	29cc <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    29c8:	0032      	movs	r2, r6
		need_zlp = false;
    29ca:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    29cc:	0023      	movs	r3, r4
    29ce:	0001      	movs	r1, r0
    29d0:	0028      	movs	r0, r5
    29d2:	4c07      	ldr	r4, [pc, #28]	; (29f0 <usbdc_get_str_desc+0x58>)
    29d4:	47a0      	blx	r4
    29d6:	2800      	cmp	r0, #0
    29d8:	d101      	bne.n	29de <usbdc_get_str_desc+0x46>
	return true;
    29da:	2001      	movs	r0, #1
}
    29dc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    29de:	2000      	movs	r0, #0
    29e0:	e7fc      	b.n	29dc <usbdc_get_str_desc+0x44>
		return false;
    29e2:	2000      	movs	r0, #0
    29e4:	e7fa      	b.n	29dc <usbdc_get_str_desc+0x44>
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	20000338 	.word	0x20000338
    29ec:	00002d31 	.word	0x00002d31
    29f0:	00002701 	.word	0x00002701

000029f4 <usbdc_get_desc_req>:
{
    29f4:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    29f6:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    29f8:	2b02      	cmp	r3, #2
    29fa:	d008      	beq.n	2a0e <usbdc_get_desc_req+0x1a>
    29fc:	2b03      	cmp	r3, #3
    29fe:	d009      	beq.n	2a14 <usbdc_get_desc_req+0x20>
    2a00:	2b01      	cmp	r3, #1
    2a02:	d001      	beq.n	2a08 <usbdc_get_desc_req+0x14>
	return false;
    2a04:	2000      	movs	r0, #0
    2a06:	e001      	b.n	2a0c <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    2a08:	4b04      	ldr	r3, [pc, #16]	; (2a1c <usbdc_get_desc_req+0x28>)
    2a0a:	4798      	blx	r3
}
    2a0c:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    2a0e:	4b04      	ldr	r3, [pc, #16]	; (2a20 <usbdc_get_desc_req+0x2c>)
    2a10:	4798      	blx	r3
    2a12:	e7fb      	b.n	2a0c <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    2a14:	4b03      	ldr	r3, [pc, #12]	; (2a24 <usbdc_get_desc_req+0x30>)
    2a16:	4798      	blx	r3
    2a18:	e7f8      	b.n	2a0c <usbdc_get_desc_req+0x18>
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	000028e5 	.word	0x000028e5
    2a20:	00002931 	.word	0x00002931
    2a24:	00002999 	.word	0x00002999

00002a28 <usbdc_get_status_req>:
{
    2a28:	b530      	push	{r4, r5, lr}
    2a2a:	b083      	sub	sp, #12
    2a2c:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2a2e:	780a      	ldrb	r2, [r1, #0]
    2a30:	231f      	movs	r3, #31
    2a32:	4013      	ands	r3, r2
    2a34:	b2da      	uxtb	r2, r3
    2a36:	2a01      	cmp	r2, #1
    2a38:	d903      	bls.n	2a42 <usbdc_get_status_req+0x1a>
    2a3a:	2b02      	cmp	r3, #2
    2a3c:	d012      	beq.n	2a64 <usbdc_get_status_req+0x3c>
		return false;
    2a3e:	2000      	movs	r0, #0
    2a40:	e00e      	b.n	2a60 <usbdc_get_status_req+0x38>
		st = 0;
    2a42:	2300      	movs	r3, #0
    2a44:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2a46:	4d0d      	ldr	r5, [pc, #52]	; (2a7c <usbdc_get_status_req+0x54>)
    2a48:	2202      	movs	r2, #2
    2a4a:	a901      	add	r1, sp, #4
    2a4c:	6968      	ldr	r0, [r5, #20]
    2a4e:	4b0c      	ldr	r3, [pc, #48]	; (2a80 <usbdc_get_status_req+0x58>)
    2a50:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2a52:	6969      	ldr	r1, [r5, #20]
    2a54:	2300      	movs	r3, #0
    2a56:	2202      	movs	r2, #2
    2a58:	0020      	movs	r0, r4
    2a5a:	4c0a      	ldr	r4, [pc, #40]	; (2a84 <usbdc_get_status_req+0x5c>)
    2a5c:	47a0      	blx	r4
	return true;
    2a5e:	2001      	movs	r0, #1
}
    2a60:	b003      	add	sp, #12
    2a62:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2a64:	7908      	ldrb	r0, [r1, #4]
    2a66:	2102      	movs	r1, #2
    2a68:	4b07      	ldr	r3, [pc, #28]	; (2a88 <usbdc_get_status_req+0x60>)
    2a6a:	4798      	blx	r3
		if (st < 0) {
    2a6c:	2800      	cmp	r0, #0
    2a6e:	db03      	blt.n	2a78 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    2a70:	2301      	movs	r3, #1
    2a72:	4018      	ands	r0, r3
    2a74:	9001      	str	r0, [sp, #4]
		break;
    2a76:	e7e6      	b.n	2a46 <usbdc_get_status_req+0x1e>
			return false;
    2a78:	2000      	movs	r0, #0
    2a7a:	e7f1      	b.n	2a60 <usbdc_get_status_req+0x38>
    2a7c:	20000338 	.word	0x20000338
    2a80:	00003115 	.word	0x00003115
    2a84:	00002701 	.word	0x00002701
    2a88:	000009c5 	.word	0x000009c5

00002a8c <usbdc_get_interface>:
{
    2a8c:	b570      	push	{r4, r5, r6, lr}
    2a8e:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2a90:	4b16      	ldr	r3, [pc, #88]	; (2aec <usbdc_get_interface+0x60>)
    2a92:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2a94:	7f5a      	ldrb	r2, [r3, #29]
    2a96:	7901      	ldrb	r1, [r0, #4]
    2a98:	7943      	ldrb	r3, [r0, #5]
    2a9a:	021b      	lsls	r3, r3, #8
    2a9c:	430b      	orrs	r3, r1
    2a9e:	411a      	asrs	r2, r3
    2aa0:	07d3      	lsls	r3, r2, #31
    2aa2:	d50a      	bpl.n	2aba <usbdc_get_interface+0x2e>
	while (NULL != func) {
    2aa4:	2c00      	cmp	r4, #0
    2aa6:	d01f      	beq.n	2ae8 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2aa8:	002a      	movs	r2, r5
    2aaa:	2102      	movs	r1, #2
    2aac:	0020      	movs	r0, r4
    2aae:	6863      	ldr	r3, [r4, #4]
    2ab0:	4798      	blx	r3
    2ab2:	2800      	cmp	r0, #0
    2ab4:	da0d      	bge.n	2ad2 <usbdc_get_interface+0x46>
			func = func->next;
    2ab6:	6824      	ldr	r4, [r4, #0]
    2ab8:	e7f4      	b.n	2aa4 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    2aba:	4b0c      	ldr	r3, [pc, #48]	; (2aec <usbdc_get_interface+0x60>)
    2abc:	2200      	movs	r2, #0
    2abe:	6959      	ldr	r1, [r3, #20]
    2ac0:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2ac2:	6959      	ldr	r1, [r3, #20]
    2ac4:	2300      	movs	r3, #0
    2ac6:	3201      	adds	r2, #1
    2ac8:	2000      	movs	r0, #0
    2aca:	4c09      	ldr	r4, [pc, #36]	; (2af0 <usbdc_get_interface+0x64>)
    2acc:	47a0      	blx	r4
		return true;
    2ace:	2001      	movs	r0, #1
    2ad0:	e00b      	b.n	2aea <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2ad2:	4b06      	ldr	r3, [pc, #24]	; (2aec <usbdc_get_interface+0x60>)
    2ad4:	695a      	ldr	r2, [r3, #20]
    2ad6:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2ad8:	6959      	ldr	r1, [r3, #20]
    2ada:	2300      	movs	r3, #0
    2adc:	2201      	movs	r2, #1
    2ade:	2000      	movs	r0, #0
    2ae0:	4c03      	ldr	r4, [pc, #12]	; (2af0 <usbdc_get_interface+0x64>)
    2ae2:	47a0      	blx	r4
			return true;
    2ae4:	2001      	movs	r0, #1
    2ae6:	e000      	b.n	2aea <usbdc_get_interface+0x5e>
	return false;
    2ae8:	2000      	movs	r0, #0
}
    2aea:	bd70      	pop	{r4, r5, r6, pc}
    2aec:	20000338 	.word	0x20000338
    2af0:	00002701 	.word	0x00002701

00002af4 <usbdc_get_req>:
{
    2af4:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    2af6:	784b      	ldrb	r3, [r1, #1]
    2af8:	2b06      	cmp	r3, #6
    2afa:	d00d      	beq.n	2b18 <usbdc_get_req+0x24>
    2afc:	d907      	bls.n	2b0e <usbdc_get_req+0x1a>
    2afe:	2b08      	cmp	r3, #8
    2b00:	d00d      	beq.n	2b1e <usbdc_get_req+0x2a>
    2b02:	2b0a      	cmp	r3, #10
    2b04:	d116      	bne.n	2b34 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    2b06:	0008      	movs	r0, r1
    2b08:	4b0b      	ldr	r3, [pc, #44]	; (2b38 <usbdc_get_req+0x44>)
    2b0a:	4798      	blx	r3
    2b0c:	e006      	b.n	2b1c <usbdc_get_req+0x28>
	switch (req->bRequest) {
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d110      	bne.n	2b34 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    2b12:	4b0a      	ldr	r3, [pc, #40]	; (2b3c <usbdc_get_req+0x48>)
    2b14:	4798      	blx	r3
    2b16:	e001      	b.n	2b1c <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    2b18:	4b09      	ldr	r3, [pc, #36]	; (2b40 <usbdc_get_req+0x4c>)
    2b1a:	4798      	blx	r3
}
    2b1c:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2b1e:	4b09      	ldr	r3, [pc, #36]	; (2b44 <usbdc_get_req+0x50>)
    2b20:	7eda      	ldrb	r2, [r3, #27]
    2b22:	6959      	ldr	r1, [r3, #20]
    2b24:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2b26:	6959      	ldr	r1, [r3, #20]
    2b28:	2300      	movs	r3, #0
    2b2a:	2201      	movs	r2, #1
    2b2c:	4c06      	ldr	r4, [pc, #24]	; (2b48 <usbdc_get_req+0x54>)
    2b2e:	47a0      	blx	r4
		return true;
    2b30:	2001      	movs	r0, #1
    2b32:	e7f3      	b.n	2b1c <usbdc_get_req+0x28>
		return false;
    2b34:	2000      	movs	r0, #0
    2b36:	e7f1      	b.n	2b1c <usbdc_get_req+0x28>
    2b38:	00002a8d 	.word	0x00002a8d
    2b3c:	00002a29 	.word	0x00002a29
    2b40:	000029f5 	.word	0x000029f5
    2b44:	20000338 	.word	0x20000338
    2b48:	00002701 	.word	0x00002701

00002b4c <usbdc_cb_ctl_req>:
{
    2b4c:	b570      	push	{r4, r5, r6, lr}
    2b4e:	0005      	movs	r5, r0
    2b50:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2b52:	2200      	movs	r2, #0
    2b54:	4b0d      	ldr	r3, [pc, #52]	; (2b8c <usbdc_cb_ctl_req+0x40>)
    2b56:	4798      	blx	r3
    2b58:	1c43      	adds	r3, r0, #1
    2b5a:	d014      	beq.n	2b86 <usbdc_cb_ctl_req+0x3a>
    2b5c:	2801      	cmp	r0, #1
    2b5e:	d013      	beq.n	2b88 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2b60:	7823      	ldrb	r3, [r4, #0]
    2b62:	221f      	movs	r2, #31
    2b64:	4393      	bics	r3, r2
    2b66:	d004      	beq.n	2b72 <usbdc_cb_ctl_req+0x26>
    2b68:	b2db      	uxtb	r3, r3
    2b6a:	2b80      	cmp	r3, #128	; 0x80
    2b6c:	d006      	beq.n	2b7c <usbdc_cb_ctl_req+0x30>
		return false;
    2b6e:	2000      	movs	r0, #0
    2b70:	e00a      	b.n	2b88 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    2b72:	0021      	movs	r1, r4
    2b74:	0028      	movs	r0, r5
    2b76:	4b06      	ldr	r3, [pc, #24]	; (2b90 <usbdc_cb_ctl_req+0x44>)
    2b78:	4798      	blx	r3
    2b7a:	e005      	b.n	2b88 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    2b7c:	0021      	movs	r1, r4
    2b7e:	0028      	movs	r0, r5
    2b80:	4b04      	ldr	r3, [pc, #16]	; (2b94 <usbdc_cb_ctl_req+0x48>)
    2b82:	4798      	blx	r3
    2b84:	e000      	b.n	2b88 <usbdc_cb_ctl_req+0x3c>
		return false;
    2b86:	2000      	movs	r0, #0
}
    2b88:	bd70      	pop	{r4, r5, r6, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	000024fd 	.word	0x000024fd
    2b90:	00002861 	.word	0x00002861
    2b94:	00002af5 	.word	0x00002af5

00002b98 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2b98:	b510      	push	{r4, lr}
	switch (type) {
    2b9a:	2801      	cmp	r0, #1
    2b9c:	d009      	beq.n	2bb2 <usbdc_register_handler+0x1a>
    2b9e:	2800      	cmp	r0, #0
    2ba0:	d002      	beq.n	2ba8 <usbdc_register_handler+0x10>
    2ba2:	2802      	cmp	r0, #2
    2ba4:	d00a      	beq.n	2bbc <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    2ba6:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2ba8:	4807      	ldr	r0, [pc, #28]	; (2bc8 <usbdc_register_handler+0x30>)
    2baa:	3004      	adds	r0, #4
    2bac:	4b07      	ldr	r3, [pc, #28]	; (2bcc <usbdc_register_handler+0x34>)
    2bae:	4798      	blx	r3
		break;
    2bb0:	e7f9      	b.n	2ba6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2bb2:	4805      	ldr	r0, [pc, #20]	; (2bc8 <usbdc_register_handler+0x30>)
    2bb4:	3008      	adds	r0, #8
    2bb6:	4b05      	ldr	r3, [pc, #20]	; (2bcc <usbdc_register_handler+0x34>)
    2bb8:	4798      	blx	r3
		break;
    2bba:	e7f4      	b.n	2ba6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2bbc:	4802      	ldr	r0, [pc, #8]	; (2bc8 <usbdc_register_handler+0x30>)
    2bbe:	300c      	adds	r0, #12
    2bc0:	4b02      	ldr	r3, [pc, #8]	; (2bcc <usbdc_register_handler+0x34>)
    2bc2:	4798      	blx	r3
}
    2bc4:	e7ef      	b.n	2ba6 <usbdc_register_handler+0xe>
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	20000338 	.word	0x20000338
    2bcc:	00000a9d 	.word	0x00000a9d

00002bd0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2bd0:	b570      	push	{r4, r5, r6, lr}
    2bd2:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2bd4:	1e43      	subs	r3, r0, #1
    2bd6:	4198      	sbcs	r0, r3
    2bd8:	b2c0      	uxtb	r0, r0
    2bda:	4a0c      	ldr	r2, [pc, #48]	; (2c0c <usbdc_init+0x3c>)
    2bdc:	490c      	ldr	r1, [pc, #48]	; (2c10 <usbdc_init+0x40>)
    2bde:	4b0d      	ldr	r3, [pc, #52]	; (2c14 <usbdc_init+0x44>)
    2be0:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2be2:	4b0d      	ldr	r3, [pc, #52]	; (2c18 <usbdc_init+0x48>)
    2be4:	4798      	blx	r3
	if (rc < 0) {
    2be6:	2800      	cmp	r0, #0
    2be8:	db0e      	blt.n	2c08 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2bea:	4d0c      	ldr	r5, [pc, #48]	; (2c1c <usbdc_init+0x4c>)
    2bec:	2220      	movs	r2, #32
    2bee:	2100      	movs	r1, #0
    2bf0:	0028      	movs	r0, r5
    2bf2:	4b0b      	ldr	r3, [pc, #44]	; (2c20 <usbdc_init+0x50>)
    2bf4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2bf6:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2bf8:	490a      	ldr	r1, [pc, #40]	; (2c24 <usbdc_init+0x54>)
    2bfa:	2000      	movs	r0, #0
    2bfc:	4c0a      	ldr	r4, [pc, #40]	; (2c28 <usbdc_init+0x58>)
    2bfe:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2c00:	490a      	ldr	r1, [pc, #40]	; (2c2c <usbdc_init+0x5c>)
    2c02:	2001      	movs	r0, #1
    2c04:	47a0      	blx	r4

	return 0;
    2c06:	2000      	movs	r0, #0
}
    2c08:	bd70      	pop	{r4, r5, r6, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	00000355 	.word	0x00000355
    2c10:	00003200 	.word	0x00003200
    2c14:	00000a7d 	.word	0x00000a7d
    2c18:	00000721 	.word	0x00000721
    2c1c:	20000338 	.word	0x20000338
    2c20:	00003127 	.word	0x00003127
    2c24:	00002539 	.word	0x00002539
    2c28:	0000078d 	.word	0x0000078d
    2c2c:	000026dd 	.word	0x000026dd

00002c30 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2c30:	b510      	push	{r4, lr}
    2c32:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2c34:	4802      	ldr	r0, [pc, #8]	; (2c40 <usbdc_register_function+0x10>)
    2c36:	3010      	adds	r0, #16
    2c38:	4b02      	ldr	r3, [pc, #8]	; (2c44 <usbdc_register_function+0x14>)
    2c3a:	4798      	blx	r3
}
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	20000338 	.word	0x20000338
    2c44:	00000a9d 	.word	0x00000a9d

00002c48 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2c48:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2c4a:	4b0b      	ldr	r3, [pc, #44]	; (2c78 <usbdc_start+0x30>)
    2c4c:	7e9b      	ldrb	r3, [r3, #26]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d10c      	bne.n	2c6c <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    2c52:	2800      	cmp	r0, #0
    2c54:	d00d      	beq.n	2c72 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    2c56:	4b08      	ldr	r3, [pc, #32]	; (2c78 <usbdc_start+0x30>)
    2c58:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2c5a:	6802      	ldr	r2, [r0, #0]
    2c5c:	79d2      	ldrb	r2, [r2, #7]
    2c5e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2c60:	2201      	movs	r2, #1
    2c62:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2c64:	4b05      	ldr	r3, [pc, #20]	; (2c7c <usbdc_start+0x34>)
    2c66:	4798      	blx	r3
	return ERR_NONE;
    2c68:	2000      	movs	r0, #0
}
    2c6a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2c6c:	2004      	movs	r0, #4
    2c6e:	4240      	negs	r0, r0
    2c70:	e7fb      	b.n	2c6a <usbdc_start+0x22>
		return ERR_BAD_DATA;
    2c72:	2009      	movs	r0, #9
    2c74:	4240      	negs	r0, r0
    2c76:	e7f8      	b.n	2c6a <usbdc_start+0x22>
    2c78:	20000338 	.word	0x20000338
    2c7c:	00000799 	.word	0x00000799

00002c80 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2c80:	b510      	push	{r4, lr}
	usb_d_attach();
    2c82:	4b01      	ldr	r3, [pc, #4]	; (2c88 <usbdc_attach+0x8>)
    2c84:	4798      	blx	r3
}
    2c86:	bd10      	pop	{r4, pc}
    2c88:	000007a5 	.word	0x000007a5

00002c8c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2c8c:	4b01      	ldr	r3, [pc, #4]	; (2c94 <usbdc_get_ctrl_buffer+0x8>)
    2c8e:	6958      	ldr	r0, [r3, #20]
}
    2c90:	4770      	bx	lr
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	20000338 	.word	0x20000338

00002c98 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2c98:	4b02      	ldr	r3, [pc, #8]	; (2ca4 <usbdc_get_state+0xc>)
    2c9a:	7e98      	ldrb	r0, [r3, #26]
    2c9c:	06c3      	lsls	r3, r0, #27
    2c9e:	d500      	bpl.n	2ca2 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    2ca0:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    2ca2:	4770      	bx	lr
    2ca4:	20000338 	.word	0x20000338

00002ca8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2ca8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2caa:	4288      	cmp	r0, r1
    2cac:	d207      	bcs.n	2cbe <usb_find_desc+0x16>
	return desc[0];
    2cae:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2cb0:	2b01      	cmp	r3, #1
    2cb2:	d906      	bls.n	2cc2 <usb_find_desc+0x1a>
	return desc[1];
    2cb4:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2cb6:	4294      	cmp	r4, r2
    2cb8:	d002      	beq.n	2cc0 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    2cba:	18c0      	adds	r0, r0, r3
    2cbc:	e7f5      	b.n	2caa <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2cbe:	2000      	movs	r0, #0
}
    2cc0:	bd10      	pop	{r4, pc}
		_desc_len_check();
    2cc2:	2000      	movs	r0, #0
    2cc4:	e7fc      	b.n	2cc0 <usb_find_desc+0x18>

00002cc6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2cc6:	4288      	cmp	r0, r1
    2cc8:	d209      	bcs.n	2cde <usb_find_ep_desc+0x18>
	return desc[0];
    2cca:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2ccc:	2b01      	cmp	r3, #1
    2cce:	d908      	bls.n	2ce2 <usb_find_ep_desc+0x1c>
	return desc[1];
    2cd0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2cd2:	2a04      	cmp	r2, #4
    2cd4:	d007      	beq.n	2ce6 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2cd6:	2a05      	cmp	r2, #5
    2cd8:	d002      	beq.n	2ce0 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    2cda:	18c0      	adds	r0, r0, r3
    2cdc:	e7f3      	b.n	2cc6 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2cde:	2000      	movs	r0, #0
}
    2ce0:	4770      	bx	lr
		_desc_len_check();
    2ce2:	2000      	movs	r0, #0
    2ce4:	e7fc      	b.n	2ce0 <usb_find_ep_desc+0x1a>
	return NULL;
    2ce6:	2000      	movs	r0, #0
    2ce8:	e7fa      	b.n	2ce0 <usb_find_ep_desc+0x1a>
	...

00002cec <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2cec:	b570      	push	{r4, r5, r6, lr}
    2cee:	000c      	movs	r4, r1
    2cf0:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2cf2:	2202      	movs	r2, #2
    2cf4:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <usb_find_cfg_desc+0x40>)
    2cf6:	4798      	blx	r3
	if (!desc) {
    2cf8:	2800      	cmp	r0, #0
    2cfa:	d012      	beq.n	2d22 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    2cfc:	42a0      	cmp	r0, r4
    2cfe:	d20f      	bcs.n	2d20 <usb_find_cfg_desc+0x34>
	return desc[0];
    2d00:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2d02:	2b01      	cmp	r3, #1
    2d04:	d90e      	bls.n	2d24 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    2d06:	7843      	ldrb	r3, [r0, #1]
    2d08:	2b02      	cmp	r3, #2
    2d0a:	d10d      	bne.n	2d28 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    2d0c:	7943      	ldrb	r3, [r0, #5]
    2d0e:	42ab      	cmp	r3, r5
    2d10:	d007      	beq.n	2d22 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    2d12:	7883      	ldrb	r3, [r0, #2]
    2d14:	78c2      	ldrb	r2, [r0, #3]
    2d16:	0212      	lsls	r2, r2, #8
    2d18:	189b      	adds	r3, r3, r2
    2d1a:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2d1c:	18c0      	adds	r0, r0, r3
    2d1e:	e7ed      	b.n	2cfc <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2d20:	2000      	movs	r0, #0
}
    2d22:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    2d24:	2000      	movs	r0, #0
    2d26:	e7fc      	b.n	2d22 <usb_find_cfg_desc+0x36>
	return NULL;
    2d28:	2000      	movs	r0, #0
    2d2a:	e7fa      	b.n	2d22 <usb_find_cfg_desc+0x36>
    2d2c:	00002ca9 	.word	0x00002ca9

00002d30 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2d30:	b570      	push	{r4, r5, r6, lr}
    2d32:	000d      	movs	r5, r1
    2d34:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2d36:	2400      	movs	r4, #0
    2d38:	42a8      	cmp	r0, r5
    2d3a:	d20e      	bcs.n	2d5a <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2d3c:	2203      	movs	r2, #3
    2d3e:	0029      	movs	r1, r5
    2d40:	4b08      	ldr	r3, [pc, #32]	; (2d64 <usb_find_str_desc+0x34>)
    2d42:	4798      	blx	r3
		if (desc) {
    2d44:	2800      	cmp	r0, #0
    2d46:	d009      	beq.n	2d5c <usb_find_str_desc+0x2c>
	return desc[0];
    2d48:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    2d4a:	2b01      	cmp	r3, #1
    2d4c:	d907      	bls.n	2d5e <usb_find_str_desc+0x2e>
			if (i == str_index) {
    2d4e:	42b4      	cmp	r4, r6
    2d50:	d004      	beq.n	2d5c <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    2d52:	3401      	adds	r4, #1
    2d54:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    2d56:	18c0      	adds	r0, r0, r3
    2d58:	e7ee      	b.n	2d38 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2d5a:	2000      	movs	r0, #0
}
    2d5c:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    2d5e:	2000      	movs	r0, #0
    2d60:	e7fc      	b.n	2d5c <usb_find_str_desc+0x2c>
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	00002ca9 	.word	0x00002ca9

00002d68 <usbd_cdc_write_finished>:
 * Callback function signaling that a write operation is completed, simply clears the respective flag.
 */ 
static bool usbd_cdc_write_finished(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	// set the respective flag
    pending_write = false;
    2d68:	2200      	movs	r2, #0
    2d6a:	4b02      	ldr	r3, [pc, #8]	; (2d74 <usbd_cdc_write_finished+0xc>)
    2d6c:	701a      	strb	r2, [r3, #0]
	
	// success
	return false;
}
    2d6e:	2000      	movs	r0, #0
    2d70:	4770      	bx	lr
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	20000358 	.word	0x20000358

00002d78 <usbd_cdc_read_start>:
{
    2d78:	b510      	push	{r4, lr}
    pending_read = true;
    2d7a:	4804      	ldr	r0, [pc, #16]	; (2d8c <usbd_cdc_read_start+0x14>)
    2d7c:	2301      	movs	r3, #1
    2d7e:	7043      	strb	r3, [r0, #1]
    return cdcdf_acm_read(usbd_cdc_buffer, USBD_CDC_BUFFER_SIZE);
    2d80:	3004      	adds	r0, #4
    2d82:	2140      	movs	r1, #64	; 0x40
    2d84:	4b02      	ldr	r3, [pc, #8]	; (2d90 <usbd_cdc_read_start+0x18>)
    2d86:	4798      	blx	r3
}
    2d88:	bd10      	pop	{r4, pc}
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	20000358 	.word	0x20000358
    2d90:	00002435 	.word	0x00002435

00002d94 <usbd_cdc_state_changed>:

/*
 * Callback in case of connection state change. 
 */
static bool usbd_cdc_state_changed( usb_cdc_control_signal_t state )
{
    2d94:	b510      	push	{r4, lr}
    2d96:	b082      	sub	sp, #8
    2d98:	1c03      	adds	r3, r0, #0
    2d9a:	aa01      	add	r2, sp, #4
    2d9c:	8010      	strh	r0, [r2, #0]
	if ( state.rs232.DTR ) // data terminal ready
    2d9e:	07db      	lsls	r3, r3, #31
    2da0:	d406      	bmi.n	2db0 <usbd_cdc_state_changed+0x1c>
		
		usbd_cdc_read_start();
	}
	else
	{
		usbd_cdc_connected = false;
    2da2:	2100      	movs	r1, #0
    2da4:	2344      	movs	r3, #68	; 0x44
    2da6:	4a09      	ldr	r2, [pc, #36]	; (2dcc <usbd_cdc_state_changed+0x38>)
    2da8:	54d1      	strb	r1, [r2, r3]
	}

	/* No error. */
	return false;
}
    2daa:	2000      	movs	r0, #0
    2dac:	b002      	add	sp, #8
    2dae:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback( CDCDF_ACM_CB_READ, (FUNC_PTR)usbd_cdc_read_finished );
    2db0:	4907      	ldr	r1, [pc, #28]	; (2dd0 <usbd_cdc_state_changed+0x3c>)
    2db2:	2000      	movs	r0, #0
    2db4:	4c07      	ldr	r4, [pc, #28]	; (2dd4 <usbd_cdc_state_changed+0x40>)
    2db6:	47a0      	blx	r4
		cdcdf_acm_register_callback( CDCDF_ACM_CB_WRITE, (FUNC_PTR)usbd_cdc_write_finished );
    2db8:	4907      	ldr	r1, [pc, #28]	; (2dd8 <usbd_cdc_state_changed+0x44>)
    2dba:	2001      	movs	r0, #1
    2dbc:	47a0      	blx	r4
		usbd_cdc_connected = true;
    2dbe:	2101      	movs	r1, #1
    2dc0:	2344      	movs	r3, #68	; 0x44
    2dc2:	4a02      	ldr	r2, [pc, #8]	; (2dcc <usbd_cdc_state_changed+0x38>)
    2dc4:	54d1      	strb	r1, [r2, r3]
		usbd_cdc_read_start();
    2dc6:	4b05      	ldr	r3, [pc, #20]	; (2ddc <usbd_cdc_state_changed+0x48>)
    2dc8:	4798      	blx	r3
    2dca:	e7ee      	b.n	2daa <usbd_cdc_state_changed+0x16>
    2dcc:	20000358 	.word	0x20000358
    2dd0:	00002de1 	.word	0x00002de1
    2dd4:	000023d9 	.word	0x000023d9
    2dd8:	00002d69 	.word	0x00002d69
    2ddc:	00002d79 	.word	0x00002d79

00002de0 <usbd_cdc_read_finished>:
{
    2de0:	b570      	push	{r4, r5, r6, lr}
    2de2:	0014      	movs	r4, r2
	if ( rc != USB_XFER_DONE )
    2de4:	2900      	cmp	r1, #0
    2de6:	d11f      	bne.n	2e28 <usbd_cdc_read_finished+0x48>
	else if ( count > 0 ) // count is the bytes available to be read.
    2de8:	2a00      	cmp	r2, #0
    2dea:	d022      	beq.n	2e32 <usbd_cdc_read_finished+0x52>
		unsigned int available_size = INPUT_BUFFER_SIZE - input_length;
    2dec:	4b12      	ldr	r3, [pc, #72]	; (2e38 <usbd_cdc_read_finished+0x58>)
    2dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2df0:	2340      	movs	r3, #64	; 0x40
    2df2:	1a9b      	subs	r3, r3, r2
		if ( count > available_size )
    2df4:	429c      	cmp	r4, r3
    2df6:	d901      	bls.n	2dfc <usbd_cdc_read_finished+0x1c>
			result = true;
    2df8:	2401      	movs	r4, #1
    2dfa:	e016      	b.n	2e2a <usbd_cdc_read_finished+0x4a>
			memcpy( &input_buffer[input_length], usbd_cdc_buffer, count );
    2dfc:	4d0e      	ldr	r5, [pc, #56]	; (2e38 <usbd_cdc_read_finished+0x58>)
    2dfe:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2e00:	0028      	movs	r0, r5
    2e02:	304c      	adds	r0, #76	; 0x4c
    2e04:	18c0      	adds	r0, r0, r3
    2e06:	1d2e      	adds	r6, r5, #4
    2e08:	0022      	movs	r2, r4
    2e0a:	0031      	movs	r1, r6
    2e0c:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <usbd_cdc_read_finished+0x5c>)
    2e0e:	4798      	blx	r3
			input_length += count;
    2e10:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2e12:	18e4      	adds	r4, r4, r3
    2e14:	64ac      	str	r4, [r5, #72]	; 0x48
			pending_read = false;
    2e16:	2300      	movs	r3, #0
    2e18:	706b      	strb	r3, [r5, #1]
			memset( usbd_cdc_buffer, 0, USBD_CDC_BUFFER_SIZE );
    2e1a:	2240      	movs	r2, #64	; 0x40
    2e1c:	2100      	movs	r1, #0
    2e1e:	0030      	movs	r0, r6
    2e20:	4b07      	ldr	r3, [pc, #28]	; (2e40 <usbd_cdc_read_finished+0x60>)
    2e22:	4798      	blx	r3
	bool result = false;
    2e24:	2400      	movs	r4, #0
    2e26:	e000      	b.n	2e2a <usbd_cdc_read_finished+0x4a>
		result = true;
    2e28:	2401      	movs	r4, #1
	usbd_cdc_read_start();
    2e2a:	4b06      	ldr	r3, [pc, #24]	; (2e44 <usbd_cdc_read_finished+0x64>)
    2e2c:	4798      	blx	r3
}
    2e2e:	0020      	movs	r0, r4
    2e30:	bd70      	pop	{r4, r5, r6, pc}
	bool result = false;
    2e32:	2400      	movs	r4, #0
    2e34:	e7f9      	b.n	2e2a <usbd_cdc_read_finished+0x4a>
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	20000358 	.word	0x20000358
    2e3c:	00003115 	.word	0x00003115
    2e40:	00003127 	.word	0x00003127
    2e44:	00002d79 	.word	0x00002d79

00002e48 <usbd_cdc_write_start>:
{
    2e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e4a:	0005      	movs	r5, r0
    2e4c:	000e      	movs	r6, r1
	unsigned int bytes_to_write = size;
    2e4e:	000c      	movs	r4, r1
	while ( bytes_to_write > 0 && usbd_cdc_connected )
    2e50:	e006      	b.n	2e60 <usbd_cdc_write_start+0x18>
		memset( output_buffer, 0, OUTPUT_BUFFER_SIZE );
    2e52:	2240      	movs	r2, #64	; 0x40
    2e54:	2100      	movs	r1, #0
    2e56:	4815      	ldr	r0, [pc, #84]	; (2eac <usbd_cdc_write_start+0x64>)
    2e58:	300c      	adds	r0, #12
    2e5a:	4b15      	ldr	r3, [pc, #84]	; (2eb0 <usbd_cdc_write_start+0x68>)
    2e5c:	4798      	blx	r3
		bytes_left -= bytes_to_write;		
    2e5e:	1b36      	subs	r6, r6, r4
	while ( bytes_to_write > 0 && usbd_cdc_connected )
    2e60:	2c00      	cmp	r4, #0
    2e62:	d020      	beq.n	2ea6 <usbd_cdc_write_start+0x5e>
    2e64:	2344      	movs	r3, #68	; 0x44
    2e66:	4a13      	ldr	r2, [pc, #76]	; (2eb4 <usbd_cdc_write_start+0x6c>)
    2e68:	5cd3      	ldrb	r3, [r2, r3]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d01b      	beq.n	2ea6 <usbd_cdc_write_start+0x5e>
		pending_write = true;
    2e6e:	2201      	movs	r2, #1
    2e70:	4b10      	ldr	r3, [pc, #64]	; (2eb4 <usbd_cdc_write_start+0x6c>)
    2e72:	701a      	strb	r2, [r3, #0]
		bytes_to_write = bytes_left > USBD_CDC_BUFFER_SIZE ? USBD_CDC_BUFFER_SIZE : bytes_left;
    2e74:	0034      	movs	r4, r6
    2e76:	2e40      	cmp	r6, #64	; 0x40
    2e78:	d900      	bls.n	2e7c <usbd_cdc_write_start+0x34>
    2e7a:	2440      	movs	r4, #64	; 0x40
		memcpy( output_buffer, buffer, bytes_to_write );
    2e7c:	4f0b      	ldr	r7, [pc, #44]	; (2eac <usbd_cdc_write_start+0x64>)
    2e7e:	370c      	adds	r7, #12
    2e80:	0022      	movs	r2, r4
    2e82:	0029      	movs	r1, r5
    2e84:	0038      	movs	r0, r7
    2e86:	4b0c      	ldr	r3, [pc, #48]	; (2eb8 <usbd_cdc_write_start+0x70>)
    2e88:	4798      	blx	r3
		cdcdf_acm_write( output_buffer, bytes_to_write );
    2e8a:	0021      	movs	r1, r4
    2e8c:	0038      	movs	r0, r7
    2e8e:	4b0b      	ldr	r3, [pc, #44]	; (2ebc <usbd_cdc_write_start+0x74>)
    2e90:	4798      	blx	r3
		while( pending_write && usbd_cdc_connected );
    2e92:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <usbd_cdc_write_start+0x6c>)
    2e94:	781b      	ldrb	r3, [r3, #0]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d0db      	beq.n	2e52 <usbd_cdc_write_start+0xa>
    2e9a:	2344      	movs	r3, #68	; 0x44
    2e9c:	4a05      	ldr	r2, [pc, #20]	; (2eb4 <usbd_cdc_write_start+0x6c>)
    2e9e:	5cd3      	ldrb	r3, [r2, r3]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d1f6      	bne.n	2e92 <usbd_cdc_write_start+0x4a>
    2ea4:	e7d5      	b.n	2e52 <usbd_cdc_write_start+0xa>
}
    2ea6:	2000      	movs	r0, #0
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	200003d8 	.word	0x200003d8
    2eb0:	00003127 	.word	0x00003127
    2eb4:	20000358 	.word	0x20000358
    2eb8:	00003115 	.word	0x00003115
    2ebc:	00002465 	.word	0x00002465

00002ec0 <usb_serial_init>:
// API frontend functions //



void usb_serial_init( void )
{
    2ec0:	b570      	push	{r4, r5, r6, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2ec2:	4c14      	ldr	r4, [pc, #80]	; (2f14 <usb_serial_init+0x54>)
    2ec4:	0020      	movs	r0, r4
    2ec6:	304c      	adds	r0, #76	; 0x4c
    2ec8:	4b13      	ldr	r3, [pc, #76]	; (2f18 <usb_serial_init+0x58>)
    2eca:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2ecc:	4b13      	ldr	r3, [pc, #76]	; (2f1c <usb_serial_init+0x5c>)
    2ece:	4798      	blx	r3

	usbdc_start(single_desc);
    2ed0:	4813      	ldr	r0, [pc, #76]	; (2f20 <usb_serial_init+0x60>)
    2ed2:	4b14      	ldr	r3, [pc, #80]	; (2f24 <usb_serial_init+0x64>)
    2ed4:	4798      	blx	r3
	usbdc_attach();
    2ed6:	4b14      	ldr	r3, [pc, #80]	; (2f28 <usb_serial_init+0x68>)
    2ed8:	4798      	blx	r3

	// Initialize buffers with 0
	memset( usbd_cdc_buffer, 0, USBD_CDC_BUFFER_SIZE );
    2eda:	4d14      	ldr	r5, [pc, #80]	; (2f2c <usb_serial_init+0x6c>)
    2edc:	1d28      	adds	r0, r5, #4
    2ede:	2240      	movs	r2, #64	; 0x40
    2ee0:	2100      	movs	r1, #0
    2ee2:	4e13      	ldr	r6, [pc, #76]	; (2f30 <usb_serial_init+0x70>)
    2ee4:	47b0      	blx	r6
	memset( input_buffer,	 0, INPUT_BUFFER_SIZE	 );
    2ee6:	0028      	movs	r0, r5
    2ee8:	304c      	adds	r0, #76	; 0x4c
    2eea:	2240      	movs	r2, #64	; 0x40
    2eec:	2100      	movs	r1, #0
    2eee:	47b0      	blx	r6
	memset( output_buffer,	 0, OUTPUT_BUFFER_SIZE	 );
    2ef0:	0020      	movs	r0, r4
    2ef2:	300c      	adds	r0, #12
    2ef4:	2240      	movs	r2, #64	; 0x40
    2ef6:	2100      	movs	r1, #0
    2ef8:	47b0      	blx	r6

	// Wait for "cdc acm to be installed"
	// Add a timeout here. 
	// BLOCKS INTERRUPTS AS WELL
	while ( !cdcdf_acm_is_enabled() )
    2efa:	4b0e      	ldr	r3, [pc, #56]	; (2f34 <usb_serial_init+0x74>)
    2efc:	4798      	blx	r3
    2efe:	2800      	cmp	r0, #0
    2f00:	d0fb      	beq.n	2efa <usb_serial_init+0x3a>
	{
		;
	}
	delay_ms(1000);
    2f02:	20fa      	movs	r0, #250	; 0xfa
    2f04:	0080      	lsls	r0, r0, #2
    2f06:	4b0c      	ldr	r3, [pc, #48]	; (2f38 <usb_serial_init+0x78>)
    2f08:	4798      	blx	r3

	cdcdf_acm_register_callback( CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usbd_cdc_state_changed );
    2f0a:	490c      	ldr	r1, [pc, #48]	; (2f3c <usb_serial_init+0x7c>)
    2f0c:	2003      	movs	r0, #3
    2f0e:	4b0c      	ldr	r3, [pc, #48]	; (2f40 <usb_serial_init+0x80>)
    2f10:	4798      	blx	r3
}
    2f12:	bd70      	pop	{r4, r5, r6, pc}
    2f14:	200003d8 	.word	0x200003d8
    2f18:	00002bd1 	.word	0x00002bd1
    2f1c:	00002391 	.word	0x00002391
    2f20:	20000008 	.word	0x20000008
    2f24:	00002c49 	.word	0x00002c49
    2f28:	00002c81 	.word	0x00002c81
    2f2c:	20000358 	.word	0x20000358
    2f30:	00003127 	.word	0x00003127
    2f34:	00002429 	.word	0x00002429
    2f38:	0000043d 	.word	0x0000043d
    2f3c:	00002d95 	.word	0x00002d95
    2f40:	000023d9 	.word	0x000023d9

00002f44 <usb_serial_puts>:
/*
 * Put String
 * Write a null-terminated C string.
 */
void usb_serial_puts( const uint8_t * const str )
{
    2f44:	b510      	push	{r4, lr}
    2f46:	0004      	movs	r4, r0
	usbd_cdc_write_start( str, strlen( str ) );
    2f48:	4b03      	ldr	r3, [pc, #12]	; (2f58 <usb_serial_puts+0x14>)
    2f4a:	4798      	blx	r3
    2f4c:	0001      	movs	r1, r0
    2f4e:	0020      	movs	r0, r4
    2f50:	4b02      	ldr	r3, [pc, #8]	; (2f5c <usb_serial_puts+0x18>)
    2f52:	4798      	blx	r3
}
    2f54:	bd10      	pop	{r4, pc}
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	00003137 	.word	0x00003137
    2f5c:	00002e49 	.word	0x00002e49

00002f60 <__udivsi3>:
    2f60:	2200      	movs	r2, #0
    2f62:	0843      	lsrs	r3, r0, #1
    2f64:	428b      	cmp	r3, r1
    2f66:	d374      	bcc.n	3052 <__udivsi3+0xf2>
    2f68:	0903      	lsrs	r3, r0, #4
    2f6a:	428b      	cmp	r3, r1
    2f6c:	d35f      	bcc.n	302e <__udivsi3+0xce>
    2f6e:	0a03      	lsrs	r3, r0, #8
    2f70:	428b      	cmp	r3, r1
    2f72:	d344      	bcc.n	2ffe <__udivsi3+0x9e>
    2f74:	0b03      	lsrs	r3, r0, #12
    2f76:	428b      	cmp	r3, r1
    2f78:	d328      	bcc.n	2fcc <__udivsi3+0x6c>
    2f7a:	0c03      	lsrs	r3, r0, #16
    2f7c:	428b      	cmp	r3, r1
    2f7e:	d30d      	bcc.n	2f9c <__udivsi3+0x3c>
    2f80:	22ff      	movs	r2, #255	; 0xff
    2f82:	0209      	lsls	r1, r1, #8
    2f84:	ba12      	rev	r2, r2
    2f86:	0c03      	lsrs	r3, r0, #16
    2f88:	428b      	cmp	r3, r1
    2f8a:	d302      	bcc.n	2f92 <__udivsi3+0x32>
    2f8c:	1212      	asrs	r2, r2, #8
    2f8e:	0209      	lsls	r1, r1, #8
    2f90:	d065      	beq.n	305e <__udivsi3+0xfe>
    2f92:	0b03      	lsrs	r3, r0, #12
    2f94:	428b      	cmp	r3, r1
    2f96:	d319      	bcc.n	2fcc <__udivsi3+0x6c>
    2f98:	e000      	b.n	2f9c <__udivsi3+0x3c>
    2f9a:	0a09      	lsrs	r1, r1, #8
    2f9c:	0bc3      	lsrs	r3, r0, #15
    2f9e:	428b      	cmp	r3, r1
    2fa0:	d301      	bcc.n	2fa6 <__udivsi3+0x46>
    2fa2:	03cb      	lsls	r3, r1, #15
    2fa4:	1ac0      	subs	r0, r0, r3
    2fa6:	4152      	adcs	r2, r2
    2fa8:	0b83      	lsrs	r3, r0, #14
    2faa:	428b      	cmp	r3, r1
    2fac:	d301      	bcc.n	2fb2 <__udivsi3+0x52>
    2fae:	038b      	lsls	r3, r1, #14
    2fb0:	1ac0      	subs	r0, r0, r3
    2fb2:	4152      	adcs	r2, r2
    2fb4:	0b43      	lsrs	r3, r0, #13
    2fb6:	428b      	cmp	r3, r1
    2fb8:	d301      	bcc.n	2fbe <__udivsi3+0x5e>
    2fba:	034b      	lsls	r3, r1, #13
    2fbc:	1ac0      	subs	r0, r0, r3
    2fbe:	4152      	adcs	r2, r2
    2fc0:	0b03      	lsrs	r3, r0, #12
    2fc2:	428b      	cmp	r3, r1
    2fc4:	d301      	bcc.n	2fca <__udivsi3+0x6a>
    2fc6:	030b      	lsls	r3, r1, #12
    2fc8:	1ac0      	subs	r0, r0, r3
    2fca:	4152      	adcs	r2, r2
    2fcc:	0ac3      	lsrs	r3, r0, #11
    2fce:	428b      	cmp	r3, r1
    2fd0:	d301      	bcc.n	2fd6 <__udivsi3+0x76>
    2fd2:	02cb      	lsls	r3, r1, #11
    2fd4:	1ac0      	subs	r0, r0, r3
    2fd6:	4152      	adcs	r2, r2
    2fd8:	0a83      	lsrs	r3, r0, #10
    2fda:	428b      	cmp	r3, r1
    2fdc:	d301      	bcc.n	2fe2 <__udivsi3+0x82>
    2fde:	028b      	lsls	r3, r1, #10
    2fe0:	1ac0      	subs	r0, r0, r3
    2fe2:	4152      	adcs	r2, r2
    2fe4:	0a43      	lsrs	r3, r0, #9
    2fe6:	428b      	cmp	r3, r1
    2fe8:	d301      	bcc.n	2fee <__udivsi3+0x8e>
    2fea:	024b      	lsls	r3, r1, #9
    2fec:	1ac0      	subs	r0, r0, r3
    2fee:	4152      	adcs	r2, r2
    2ff0:	0a03      	lsrs	r3, r0, #8
    2ff2:	428b      	cmp	r3, r1
    2ff4:	d301      	bcc.n	2ffa <__udivsi3+0x9a>
    2ff6:	020b      	lsls	r3, r1, #8
    2ff8:	1ac0      	subs	r0, r0, r3
    2ffa:	4152      	adcs	r2, r2
    2ffc:	d2cd      	bcs.n	2f9a <__udivsi3+0x3a>
    2ffe:	09c3      	lsrs	r3, r0, #7
    3000:	428b      	cmp	r3, r1
    3002:	d301      	bcc.n	3008 <__udivsi3+0xa8>
    3004:	01cb      	lsls	r3, r1, #7
    3006:	1ac0      	subs	r0, r0, r3
    3008:	4152      	adcs	r2, r2
    300a:	0983      	lsrs	r3, r0, #6
    300c:	428b      	cmp	r3, r1
    300e:	d301      	bcc.n	3014 <__udivsi3+0xb4>
    3010:	018b      	lsls	r3, r1, #6
    3012:	1ac0      	subs	r0, r0, r3
    3014:	4152      	adcs	r2, r2
    3016:	0943      	lsrs	r3, r0, #5
    3018:	428b      	cmp	r3, r1
    301a:	d301      	bcc.n	3020 <__udivsi3+0xc0>
    301c:	014b      	lsls	r3, r1, #5
    301e:	1ac0      	subs	r0, r0, r3
    3020:	4152      	adcs	r2, r2
    3022:	0903      	lsrs	r3, r0, #4
    3024:	428b      	cmp	r3, r1
    3026:	d301      	bcc.n	302c <__udivsi3+0xcc>
    3028:	010b      	lsls	r3, r1, #4
    302a:	1ac0      	subs	r0, r0, r3
    302c:	4152      	adcs	r2, r2
    302e:	08c3      	lsrs	r3, r0, #3
    3030:	428b      	cmp	r3, r1
    3032:	d301      	bcc.n	3038 <__udivsi3+0xd8>
    3034:	00cb      	lsls	r3, r1, #3
    3036:	1ac0      	subs	r0, r0, r3
    3038:	4152      	adcs	r2, r2
    303a:	0883      	lsrs	r3, r0, #2
    303c:	428b      	cmp	r3, r1
    303e:	d301      	bcc.n	3044 <__udivsi3+0xe4>
    3040:	008b      	lsls	r3, r1, #2
    3042:	1ac0      	subs	r0, r0, r3
    3044:	4152      	adcs	r2, r2
    3046:	0843      	lsrs	r3, r0, #1
    3048:	428b      	cmp	r3, r1
    304a:	d301      	bcc.n	3050 <__udivsi3+0xf0>
    304c:	004b      	lsls	r3, r1, #1
    304e:	1ac0      	subs	r0, r0, r3
    3050:	4152      	adcs	r2, r2
    3052:	1a41      	subs	r1, r0, r1
    3054:	d200      	bcs.n	3058 <__udivsi3+0xf8>
    3056:	4601      	mov	r1, r0
    3058:	4152      	adcs	r2, r2
    305a:	4610      	mov	r0, r2
    305c:	4770      	bx	lr
    305e:	e7ff      	b.n	3060 <__udivsi3+0x100>
    3060:	b501      	push	{r0, lr}
    3062:	2000      	movs	r0, #0
    3064:	f000 f806 	bl	3074 <__aeabi_idiv0>
    3068:	bd02      	pop	{r1, pc}
    306a:	46c0      	nop			; (mov r8, r8)

0000306c <__aeabi_uidivmod>:
    306c:	2900      	cmp	r1, #0
    306e:	d0f7      	beq.n	3060 <__udivsi3+0x100>
    3070:	e776      	b.n	2f60 <__udivsi3>
    3072:	4770      	bx	lr

00003074 <__aeabi_idiv0>:
    3074:	4770      	bx	lr
    3076:	46c0      	nop			; (mov r8, r8)

00003078 <__ffssi2>:
    3078:	b510      	push	{r4, lr}
    307a:	2300      	movs	r3, #0
    307c:	2800      	cmp	r0, #0
    307e:	d002      	beq.n	3086 <__ffssi2+0xe>
    3080:	f000 f804 	bl	308c <__ctzsi2>
    3084:	1c43      	adds	r3, r0, #1
    3086:	0018      	movs	r0, r3
    3088:	bd10      	pop	{r4, pc}
    308a:	46c0      	nop			; (mov r8, r8)

0000308c <__ctzsi2>:
    308c:	4241      	negs	r1, r0
    308e:	4008      	ands	r0, r1
    3090:	211c      	movs	r1, #28
    3092:	2301      	movs	r3, #1
    3094:	041b      	lsls	r3, r3, #16
    3096:	4298      	cmp	r0, r3
    3098:	d301      	bcc.n	309e <__ctzsi2+0x12>
    309a:	0c00      	lsrs	r0, r0, #16
    309c:	3910      	subs	r1, #16
    309e:	0a1b      	lsrs	r3, r3, #8
    30a0:	4298      	cmp	r0, r3
    30a2:	d301      	bcc.n	30a8 <__ctzsi2+0x1c>
    30a4:	0a00      	lsrs	r0, r0, #8
    30a6:	3908      	subs	r1, #8
    30a8:	091b      	lsrs	r3, r3, #4
    30aa:	4298      	cmp	r0, r3
    30ac:	d301      	bcc.n	30b2 <__ctzsi2+0x26>
    30ae:	0900      	lsrs	r0, r0, #4
    30b0:	3904      	subs	r1, #4
    30b2:	a202      	add	r2, pc, #8	; (adr r2, 30bc <__ctzsi2+0x30>)
    30b4:	5c10      	ldrb	r0, [r2, r0]
    30b6:	1a40      	subs	r0, r0, r1
    30b8:	4770      	bx	lr
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	1d1d1c1b 	.word	0x1d1d1c1b
    30c0:	1e1e1e1e 	.word	0x1e1e1e1e
    30c4:	1f1f1f1f 	.word	0x1f1f1f1f
    30c8:	1f1f1f1f 	.word	0x1f1f1f1f

000030cc <__libc_init_array>:
    30cc:	b570      	push	{r4, r5, r6, lr}
    30ce:	2600      	movs	r6, #0
    30d0:	4d0c      	ldr	r5, [pc, #48]	; (3104 <__libc_init_array+0x38>)
    30d2:	4c0d      	ldr	r4, [pc, #52]	; (3108 <__libc_init_array+0x3c>)
    30d4:	1b64      	subs	r4, r4, r5
    30d6:	10a4      	asrs	r4, r4, #2
    30d8:	42a6      	cmp	r6, r4
    30da:	d109      	bne.n	30f0 <__libc_init_array+0x24>
    30dc:	2600      	movs	r6, #0
    30de:	f000 f89b 	bl	3218 <_init>
    30e2:	4d0a      	ldr	r5, [pc, #40]	; (310c <__libc_init_array+0x40>)
    30e4:	4c0a      	ldr	r4, [pc, #40]	; (3110 <__libc_init_array+0x44>)
    30e6:	1b64      	subs	r4, r4, r5
    30e8:	10a4      	asrs	r4, r4, #2
    30ea:	42a6      	cmp	r6, r4
    30ec:	d105      	bne.n	30fa <__libc_init_array+0x2e>
    30ee:	bd70      	pop	{r4, r5, r6, pc}
    30f0:	00b3      	lsls	r3, r6, #2
    30f2:	58eb      	ldr	r3, [r5, r3]
    30f4:	4798      	blx	r3
    30f6:	3601      	adds	r6, #1
    30f8:	e7ee      	b.n	30d8 <__libc_init_array+0xc>
    30fa:	00b3      	lsls	r3, r6, #2
    30fc:	58eb      	ldr	r3, [r5, r3]
    30fe:	4798      	blx	r3
    3100:	3601      	adds	r6, #1
    3102:	e7f2      	b.n	30ea <__libc_init_array+0x1e>
    3104:	00003224 	.word	0x00003224
    3108:	00003224 	.word	0x00003224
    310c:	00003224 	.word	0x00003224
    3110:	00003228 	.word	0x00003228

00003114 <memcpy>:
    3114:	2300      	movs	r3, #0
    3116:	b510      	push	{r4, lr}
    3118:	429a      	cmp	r2, r3
    311a:	d100      	bne.n	311e <memcpy+0xa>
    311c:	bd10      	pop	{r4, pc}
    311e:	5ccc      	ldrb	r4, [r1, r3]
    3120:	54c4      	strb	r4, [r0, r3]
    3122:	3301      	adds	r3, #1
    3124:	e7f8      	b.n	3118 <memcpy+0x4>

00003126 <memset>:
    3126:	0003      	movs	r3, r0
    3128:	1882      	adds	r2, r0, r2
    312a:	4293      	cmp	r3, r2
    312c:	d100      	bne.n	3130 <memset+0xa>
    312e:	4770      	bx	lr
    3130:	7019      	strb	r1, [r3, #0]
    3132:	3301      	adds	r3, #1
    3134:	e7f9      	b.n	312a <memset+0x4>

00003136 <strlen>:
    3136:	2300      	movs	r3, #0
    3138:	5cc2      	ldrb	r2, [r0, r3]
    313a:	3301      	adds	r3, #1
    313c:	2a00      	cmp	r2, #0
    313e:	d1fb      	bne.n	3138 <strlen+0x2>
    3140:	1e58      	subs	r0, r3, #1
    3142:	4770      	bx	lr
    3144:	682f2e2e 	.word	0x682f2e2e
    3148:	752f6c61 	.word	0x752f6c61
    314c:	736c6974 	.word	0x736c6974
    3150:	6372732f 	.word	0x6372732f
    3154:	6974752f 	.word	0x6974752f
    3158:	6c5f736c 	.word	0x6c5f736c
    315c:	2e747369 	.word	0x2e747369
    3160:	00000063 	.word	0x00000063

00003164 <_map>:
    3164:	00000003 00000023 00000006 00000006     ....#...........
    3174:	00000009 00000029 0000000a 0000000a     ....)...........
    3184:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    3194:	632e6369 00000000 00004a25 00000804     ic.c....%J......

000031a4 <_usb_ep_cfgs>:
    31a4:	200002d4 00000000 00000040 20000294     ... ....@...... 
    31b4:	00000000 00000040 20000254 00000000     ....@...T.. ....
    31c4:	00000040 54534554 00000a0d 000028c6     @...TEST.....(..
    31d4:	000028a2 000028c6 000028a8 000028c6     .(...(...(...(..
    31e4:	00002872 000028c6 000028c6 000028c6     r(...(...(...(..
    31f4:	00002884 000028c6 000028ae 752f2e2e     .(...(...(..../u
    3204:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    3214:	00000063                                c...

00003218 <_init>:
    3218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    321e:	bc08      	pop	{r3}
    3220:	469e      	mov	lr, r3
    3222:	4770      	bx	lr

00003224 <__init_array_start>:
    3224:	000000dd 	.word	0x000000dd

00003228 <_fini>:
    3228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    322e:	bc08      	pop	{r3}
    3230:	469e      	mov	lr, r3
    3232:	4770      	bx	lr

00003234 <__fini_array_start>:
    3234:	000000b5 	.word	0x000000b5
