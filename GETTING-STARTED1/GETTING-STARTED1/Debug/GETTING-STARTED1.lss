
GETTING-STARTED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000029fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000138  20000070  00002a6c  00020070  2**2
                  ALLOC
  3 .stack        00002000  200001a8  00002ba4  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c770  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004361  00000000  00000000  0004c861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000583e  00000000  00000000  00050bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005a8  00000000  00000000  00056400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006b8  00000000  00000000  000569a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c838  00000000  00000000  00057060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd8c  00000000  00000000  00073898  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ffa6  00000000  00000000  00081624  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000132c  00000000  00000000  001115cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 21 00 20 d9 16 00 00 d7 16 00 00 d7 16 00 00     .!. ............
	...
      2c:	d7 16 00 00 00 00 00 00 00 00 00 00 d7 16 00 00     ................
      3c:	d7 16 00 00 d7 16 00 00 d7 16 00 00 d7 16 00 00     ................
      4c:	d7 16 00 00 75 02 00 00 d7 16 00 00 d7 16 00 00     ....u...........
      5c:	d7 16 00 00 d7 16 00 00 e1 07 00 00 f1 07 00 00     ................
      6c:	01 08 00 00 11 08 00 00 21 08 00 00 31 08 00 00     ........!...1...
      7c:	d7 16 00 00 d7 16 00 00 d7 16 00 00 d9 13 00 00     ................
      8c:	e9 13 00 00 f9 13 00 00 09 14 00 00 19 14 00 00     ................
      9c:	d7 16 00 00 d7 16 00 00 d7 16 00 00 d7 16 00 00     ................
      ac:	d7 16 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000029fc 	.word	0x000029fc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	000029fc 	.word	0x000029fc
     10c:	000029fc 	.word	0x000029fc
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000010d1 	.word	0x000010d1
     140:	00001b8d 	.word	0x00001b8d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	2000008c 	.word	0x2000008c
     1b8:	20000090 	.word	0x20000090
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	2000008c 	.word	0x2000008c
     1e8:	20000090 	.word	0x20000090
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	000003d9 	.word	0x000003d9
     224:	41004480 	.word	0x41004480

00000228 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     228:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     22a:	2a00      	cmp	r2, #0
     22c:	d001      	beq.n	232 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     22e:	0018      	movs	r0, r3
     230:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     232:	008b      	lsls	r3, r1, #2
     234:	4a06      	ldr	r2, [pc, #24]	; (250 <extint_register_callback+0x28>)
     236:	589b      	ldr	r3, [r3, r2]
     238:	2b00      	cmp	r3, #0
     23a:	d003      	beq.n	244 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     23c:	4283      	cmp	r3, r0
     23e:	d005      	beq.n	24c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     240:	231d      	movs	r3, #29
     242:	e7f4      	b.n	22e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     244:	0089      	lsls	r1, r1, #2
     246:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     248:	2300      	movs	r3, #0
     24a:	e7f0      	b.n	22e <extint_register_callback+0x6>
		return STATUS_OK;
     24c:	2300      	movs	r3, #0
     24e:	e7ee      	b.n	22e <extint_register_callback+0x6>
     250:	2000012c 	.word	0x2000012c

00000254 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     254:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     256:	2900      	cmp	r1, #0
     258:	d001      	beq.n	25e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     25a:	0018      	movs	r0, r3
     25c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     25e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     260:	281f      	cmp	r0, #31
     262:	d800      	bhi.n	266 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     264:	4a02      	ldr	r2, [pc, #8]	; (270 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     266:	2301      	movs	r3, #1
     268:	4083      	lsls	r3, r0
     26a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     26c:	2300      	movs	r3, #0
     26e:	e7f4      	b.n	25a <extint_chan_enable_callback+0x6>
     270:	40001800 	.word	0x40001800

00000274 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     274:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     276:	2200      	movs	r2, #0
     278:	4b10      	ldr	r3, [pc, #64]	; (2bc <EIC_Handler+0x48>)
     27a:	701a      	strb	r2, [r3, #0]
     27c:	2300      	movs	r3, #0
     27e:	4910      	ldr	r1, [pc, #64]	; (2c0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     280:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     282:	4e10      	ldr	r6, [pc, #64]	; (2c4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     284:	4c0d      	ldr	r4, [pc, #52]	; (2bc <EIC_Handler+0x48>)
     286:	e00a      	b.n	29e <EIC_Handler+0x2a>
		return eics[eic_index];
     288:	490d      	ldr	r1, [pc, #52]	; (2c0 <EIC_Handler+0x4c>)
     28a:	e008      	b.n	29e <EIC_Handler+0x2a>
     28c:	7823      	ldrb	r3, [r4, #0]
     28e:	3301      	adds	r3, #1
     290:	b2db      	uxtb	r3, r3
     292:	7023      	strb	r3, [r4, #0]
     294:	2b0f      	cmp	r3, #15
     296:	d810      	bhi.n	2ba <EIC_Handler+0x46>
		return NULL;
     298:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     29a:	2b1f      	cmp	r3, #31
     29c:	d9f4      	bls.n	288 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     29e:	0028      	movs	r0, r5
     2a0:	4018      	ands	r0, r3
     2a2:	2201      	movs	r2, #1
     2a4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     2a6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2a8:	4210      	tst	r0, r2
     2aa:	d0ef      	beq.n	28c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2ac:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2ae:	009b      	lsls	r3, r3, #2
     2b0:	599b      	ldr	r3, [r3, r6]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d0ea      	beq.n	28c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2b6:	4798      	blx	r3
     2b8:	e7e8      	b.n	28c <EIC_Handler+0x18>
			}
		}
	}
}
     2ba:	bd70      	pop	{r4, r5, r6, pc}
     2bc:	20000128 	.word	0x20000128
     2c0:	40001800 	.word	0x40001800
     2c4:	2000012c 	.word	0x2000012c

000002c8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     2c8:	4a04      	ldr	r2, [pc, #16]	; (2dc <_extint_enable+0x14>)
     2ca:	7813      	ldrb	r3, [r2, #0]
     2cc:	2102      	movs	r1, #2
     2ce:	430b      	orrs	r3, r1
     2d0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2d2:	7853      	ldrb	r3, [r2, #1]
     2d4:	b25b      	sxtb	r3, r3
     2d6:	2b00      	cmp	r3, #0
     2d8:	dbfb      	blt.n	2d2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2da:	4770      	bx	lr
     2dc:	40001800 	.word	0x40001800

000002e0 <_system_extint_init>:
{
     2e0:	b500      	push	{lr}
     2e2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     2e4:	4a12      	ldr	r2, [pc, #72]	; (330 <_system_extint_init+0x50>)
     2e6:	6993      	ldr	r3, [r2, #24]
     2e8:	2140      	movs	r1, #64	; 0x40
     2ea:	430b      	orrs	r3, r1
     2ec:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2ee:	a901      	add	r1, sp, #4
     2f0:	2300      	movs	r3, #0
     2f2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     2f4:	2005      	movs	r0, #5
     2f6:	4b0f      	ldr	r3, [pc, #60]	; (334 <_system_extint_init+0x54>)
     2f8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     2fa:	2005      	movs	r0, #5
     2fc:	4b0e      	ldr	r3, [pc, #56]	; (338 <_system_extint_init+0x58>)
     2fe:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     300:	4a0e      	ldr	r2, [pc, #56]	; (33c <_system_extint_init+0x5c>)
     302:	7813      	ldrb	r3, [r2, #0]
     304:	2101      	movs	r1, #1
     306:	430b      	orrs	r3, r1
     308:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     30a:	7853      	ldrb	r3, [r2, #1]
     30c:	b25b      	sxtb	r3, r3
     30e:	2b00      	cmp	r3, #0
     310:	dbfb      	blt.n	30a <_system_extint_init+0x2a>
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <_system_extint_init+0x60>)
     314:	0019      	movs	r1, r3
     316:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     318:	2200      	movs	r2, #0
     31a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     31c:	4299      	cmp	r1, r3
     31e:	d1fc      	bne.n	31a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     320:	2210      	movs	r2, #16
     322:	4b08      	ldr	r3, [pc, #32]	; (344 <_system_extint_init+0x64>)
     324:	601a      	str	r2, [r3, #0]
	_extint_enable();
     326:	4b08      	ldr	r3, [pc, #32]	; (348 <_system_extint_init+0x68>)
     328:	4798      	blx	r3
}
     32a:	b003      	add	sp, #12
     32c:	bd00      	pop	{pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	40000400 	.word	0x40000400
     334:	000011e9 	.word	0x000011e9
     338:	0000115d 	.word	0x0000115d
     33c:	40001800 	.word	0x40001800
     340:	2000012c 	.word	0x2000012c
     344:	e000e100 	.word	0xe000e100
     348:	000002c9 	.word	0x000002c9

0000034c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     34c:	2300      	movs	r3, #0
     34e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     350:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     352:	2201      	movs	r2, #1
     354:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     356:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     358:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     35a:	3302      	adds	r3, #2
     35c:	72c3      	strb	r3, [r0, #11]
}
     35e:	4770      	bx	lr

00000360 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     360:	b5f0      	push	{r4, r5, r6, r7, lr}
     362:	b083      	sub	sp, #12
     364:	0005      	movs	r5, r0
     366:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     368:	a901      	add	r1, sp, #4
     36a:	2300      	movs	r3, #0
     36c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     36e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     370:	7923      	ldrb	r3, [r4, #4]
     372:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     374:	7a23      	ldrb	r3, [r4, #8]
     376:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     378:	7820      	ldrb	r0, [r4, #0]
     37a:	4b15      	ldr	r3, [pc, #84]	; (3d0 <extint_chan_set_config+0x70>)
     37c:	4798      	blx	r3
		return NULL;
     37e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     380:	2d1f      	cmp	r5, #31
     382:	d800      	bhi.n	386 <extint_chan_set_config+0x26>
		return eics[eic_index];
     384:	4813      	ldr	r0, [pc, #76]	; (3d4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     386:	2207      	movs	r2, #7
     388:	402a      	ands	r2, r5
     38a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     38c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     38e:	7aa3      	ldrb	r3, [r4, #10]
     390:	2b00      	cmp	r3, #0
     392:	d001      	beq.n	398 <extint_chan_set_config+0x38>
     394:	2308      	movs	r3, #8
     396:	431f      	orrs	r7, r3
     398:	08eb      	lsrs	r3, r5, #3
     39a:	009b      	lsls	r3, r3, #2
     39c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     39e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3a0:	260f      	movs	r6, #15
     3a2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     3a4:	43b1      	bics	r1, r6
			(new_config << config_pos);
     3a6:	4097      	lsls	r7, r2
     3a8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3aa:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     3ac:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     3ae:	7a63      	ldrb	r3, [r4, #9]
     3b0:	2b00      	cmp	r3, #0
     3b2:	d106      	bne.n	3c2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     3b4:	6943      	ldr	r3, [r0, #20]
     3b6:	2201      	movs	r2, #1
     3b8:	40aa      	lsls	r2, r5
     3ba:	4393      	bics	r3, r2
     3bc:	6143      	str	r3, [r0, #20]
	}
}
     3be:	b003      	add	sp, #12
     3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     3c2:	6942      	ldr	r2, [r0, #20]
     3c4:	2301      	movs	r3, #1
     3c6:	40ab      	lsls	r3, r5
     3c8:	4313      	orrs	r3, r2
     3ca:	6143      	str	r3, [r0, #20]
     3cc:	e7f7      	b.n	3be <extint_chan_set_config+0x5e>
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	000012e1 	.word	0x000012e1
     3d4:	40001800 	.word	0x40001800

000003d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3d8:	b500      	push	{lr}
     3da:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3dc:	ab01      	add	r3, sp, #4
     3de:	2280      	movs	r2, #128	; 0x80
     3e0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3e2:	780a      	ldrb	r2, [r1, #0]
     3e4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3e6:	784a      	ldrb	r2, [r1, #1]
     3e8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3ea:	788a      	ldrb	r2, [r1, #2]
     3ec:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3ee:	0019      	movs	r1, r3
     3f0:	4b01      	ldr	r3, [pc, #4]	; (3f8 <port_pin_set_config+0x20>)
     3f2:	4798      	blx	r3
}
     3f4:	b003      	add	sp, #12
     3f6:	bd00      	pop	{pc}
     3f8:	000012e1 	.word	0x000012e1

000003fc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3fe:	46de      	mov	lr, fp
     400:	4657      	mov	r7, sl
     402:	464e      	mov	r6, r9
     404:	4645      	mov	r5, r8
     406:	b5e0      	push	{r5, r6, r7, lr}
     408:	b087      	sub	sp, #28
     40a:	4680      	mov	r8, r0
     40c:	9104      	str	r1, [sp, #16]
     40e:	0016      	movs	r6, r2
     410:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     412:	2200      	movs	r2, #0
     414:	2300      	movs	r3, #0
     416:	2100      	movs	r1, #0
     418:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     41a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     41c:	2001      	movs	r0, #1
     41e:	0021      	movs	r1, r4
     420:	9600      	str	r6, [sp, #0]
     422:	9701      	str	r7, [sp, #4]
     424:	465c      	mov	r4, fp
     426:	9403      	str	r4, [sp, #12]
     428:	4644      	mov	r4, r8
     42a:	9405      	str	r4, [sp, #20]
     42c:	e013      	b.n	456 <long_division+0x5a>
     42e:	2420      	movs	r4, #32
     430:	1a64      	subs	r4, r4, r1
     432:	0005      	movs	r5, r0
     434:	40e5      	lsrs	r5, r4
     436:	46a8      	mov	r8, r5
     438:	e014      	b.n	464 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     43a:	9c00      	ldr	r4, [sp, #0]
     43c:	9d01      	ldr	r5, [sp, #4]
     43e:	1b12      	subs	r2, r2, r4
     440:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     442:	465c      	mov	r4, fp
     444:	464d      	mov	r5, r9
     446:	432c      	orrs	r4, r5
     448:	46a3      	mov	fp, r4
     44a:	9c03      	ldr	r4, [sp, #12]
     44c:	4645      	mov	r5, r8
     44e:	432c      	orrs	r4, r5
     450:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     452:	3901      	subs	r1, #1
     454:	d325      	bcc.n	4a2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     456:	2420      	movs	r4, #32
     458:	4264      	negs	r4, r4
     45a:	190c      	adds	r4, r1, r4
     45c:	d4e7      	bmi.n	42e <long_division+0x32>
     45e:	0005      	movs	r5, r0
     460:	40a5      	lsls	r5, r4
     462:	46a8      	mov	r8, r5
     464:	0004      	movs	r4, r0
     466:	408c      	lsls	r4, r1
     468:	46a1      	mov	r9, r4
		r = r << 1;
     46a:	1892      	adds	r2, r2, r2
     46c:	415b      	adcs	r3, r3
     46e:	0014      	movs	r4, r2
     470:	001d      	movs	r5, r3
		if (n & bit_shift) {
     472:	9e05      	ldr	r6, [sp, #20]
     474:	464f      	mov	r7, r9
     476:	403e      	ands	r6, r7
     478:	46b4      	mov	ip, r6
     47a:	9e04      	ldr	r6, [sp, #16]
     47c:	4647      	mov	r7, r8
     47e:	403e      	ands	r6, r7
     480:	46b2      	mov	sl, r6
     482:	4666      	mov	r6, ip
     484:	4657      	mov	r7, sl
     486:	433e      	orrs	r6, r7
     488:	d003      	beq.n	492 <long_division+0x96>
			r |= 0x01;
     48a:	0006      	movs	r6, r0
     48c:	4326      	orrs	r6, r4
     48e:	0032      	movs	r2, r6
     490:	002b      	movs	r3, r5
		if (r >= d) {
     492:	9c00      	ldr	r4, [sp, #0]
     494:	9d01      	ldr	r5, [sp, #4]
     496:	429d      	cmp	r5, r3
     498:	d8db      	bhi.n	452 <long_division+0x56>
     49a:	d1ce      	bne.n	43a <long_division+0x3e>
     49c:	4294      	cmp	r4, r2
     49e:	d8d8      	bhi.n	452 <long_division+0x56>
     4a0:	e7cb      	b.n	43a <long_division+0x3e>
     4a2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     4a4:	4658      	mov	r0, fp
     4a6:	0019      	movs	r1, r3
     4a8:	b007      	add	sp, #28
     4aa:	bc3c      	pop	{r2, r3, r4, r5}
     4ac:	4690      	mov	r8, r2
     4ae:	4699      	mov	r9, r3
     4b0:	46a2      	mov	sl, r4
     4b2:	46ab      	mov	fp, r5
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000004b6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4b6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4b8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ba:	2340      	movs	r3, #64	; 0x40
     4bc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     4be:	4281      	cmp	r1, r0
     4c0:	d202      	bcs.n	4c8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     4c2:	0018      	movs	r0, r3
     4c4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     4c6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     4c8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     4ca:	1c63      	adds	r3, r4, #1
     4cc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     4ce:	4288      	cmp	r0, r1
     4d0:	d9f9      	bls.n	4c6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4d2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     4d4:	2cff      	cmp	r4, #255	; 0xff
     4d6:	d8f4      	bhi.n	4c2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     4d8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4da:	2300      	movs	r3, #0
     4dc:	e7f1      	b.n	4c2 <_sercom_get_sync_baud_val+0xc>
	...

000004e0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e2:	b083      	sub	sp, #12
     4e4:	000f      	movs	r7, r1
     4e6:	0016      	movs	r6, r2
     4e8:	aa08      	add	r2, sp, #32
     4ea:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4ec:	0004      	movs	r4, r0
     4ee:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4f0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     4f2:	42bc      	cmp	r4, r7
     4f4:	d902      	bls.n	4fc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     4f6:	0010      	movs	r0, r2
     4f8:	b003      	add	sp, #12
     4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     4fc:	2b00      	cmp	r3, #0
     4fe:	d114      	bne.n	52a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     500:	0002      	movs	r2, r0
     502:	0008      	movs	r0, r1
     504:	2100      	movs	r1, #0
     506:	4c19      	ldr	r4, [pc, #100]	; (56c <_sercom_get_async_baud_val+0x8c>)
     508:	47a0      	blx	r4
     50a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     50c:	003a      	movs	r2, r7
     50e:	2300      	movs	r3, #0
     510:	2000      	movs	r0, #0
     512:	4c17      	ldr	r4, [pc, #92]	; (570 <_sercom_get_async_baud_val+0x90>)
     514:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     516:	2200      	movs	r2, #0
     518:	2301      	movs	r3, #1
     51a:	1a12      	subs	r2, r2, r0
     51c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     51e:	0c12      	lsrs	r2, r2, #16
     520:	041b      	lsls	r3, r3, #16
     522:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     524:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     526:	2200      	movs	r2, #0
     528:	e7e5      	b.n	4f6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     52a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     52c:	2b01      	cmp	r3, #1
     52e:	d1f9      	bne.n	524 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     530:	000a      	movs	r2, r1
     532:	2300      	movs	r3, #0
     534:	2100      	movs	r1, #0
     536:	4c0d      	ldr	r4, [pc, #52]	; (56c <_sercom_get_async_baud_val+0x8c>)
     538:	47a0      	blx	r4
     53a:	0002      	movs	r2, r0
     53c:	000b      	movs	r3, r1
     53e:	9200      	str	r2, [sp, #0]
     540:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     542:	0038      	movs	r0, r7
     544:	2100      	movs	r1, #0
     546:	4c0a      	ldr	r4, [pc, #40]	; (570 <_sercom_get_async_baud_val+0x90>)
     548:	47a0      	blx	r4
     54a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     54c:	2380      	movs	r3, #128	; 0x80
     54e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     550:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     552:	4298      	cmp	r0, r3
     554:	d8cf      	bhi.n	4f6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     556:	0f79      	lsrs	r1, r7, #29
     558:	00f8      	lsls	r0, r7, #3
     55a:	9a00      	ldr	r2, [sp, #0]
     55c:	9b01      	ldr	r3, [sp, #4]
     55e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     560:	00ea      	lsls	r2, r5, #3
     562:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     564:	b2d2      	uxtb	r2, r2
     566:	0352      	lsls	r2, r2, #13
     568:	432a      	orrs	r2, r5
     56a:	e7db      	b.n	524 <_sercom_get_async_baud_val+0x44>
     56c:	00001ca5 	.word	0x00001ca5
     570:	000003fd 	.word	0x000003fd

00000574 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     574:	b510      	push	{r4, lr}
     576:	b082      	sub	sp, #8
     578:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     57a:	4b0e      	ldr	r3, [pc, #56]	; (5b4 <sercom_set_gclk_generator+0x40>)
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	2b00      	cmp	r3, #0
     580:	d007      	beq.n	592 <sercom_set_gclk_generator+0x1e>
     582:	2900      	cmp	r1, #0
     584:	d105      	bne.n	592 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     586:	4b0b      	ldr	r3, [pc, #44]	; (5b4 <sercom_set_gclk_generator+0x40>)
     588:	785b      	ldrb	r3, [r3, #1]
     58a:	4283      	cmp	r3, r0
     58c:	d010      	beq.n	5b0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     58e:	201d      	movs	r0, #29
     590:	e00c      	b.n	5ac <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     592:	a901      	add	r1, sp, #4
     594:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     596:	2013      	movs	r0, #19
     598:	4b07      	ldr	r3, [pc, #28]	; (5b8 <sercom_set_gclk_generator+0x44>)
     59a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     59c:	2013      	movs	r0, #19
     59e:	4b07      	ldr	r3, [pc, #28]	; (5bc <sercom_set_gclk_generator+0x48>)
     5a0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     5a2:	4b04      	ldr	r3, [pc, #16]	; (5b4 <sercom_set_gclk_generator+0x40>)
     5a4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     5a6:	2201      	movs	r2, #1
     5a8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     5aa:	2000      	movs	r0, #0
}
     5ac:	b002      	add	sp, #8
     5ae:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     5b0:	2000      	movs	r0, #0
     5b2:	e7fb      	b.n	5ac <sercom_set_gclk_generator+0x38>
     5b4:	20000094 	.word	0x20000094
     5b8:	000011e9 	.word	0x000011e9
     5bc:	0000115d 	.word	0x0000115d

000005c0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     5c0:	4b40      	ldr	r3, [pc, #256]	; (6c4 <_sercom_get_default_pad+0x104>)
     5c2:	4298      	cmp	r0, r3
     5c4:	d031      	beq.n	62a <_sercom_get_default_pad+0x6a>
     5c6:	d90a      	bls.n	5de <_sercom_get_default_pad+0x1e>
     5c8:	4b3f      	ldr	r3, [pc, #252]	; (6c8 <_sercom_get_default_pad+0x108>)
     5ca:	4298      	cmp	r0, r3
     5cc:	d04d      	beq.n	66a <_sercom_get_default_pad+0xaa>
     5ce:	4b3f      	ldr	r3, [pc, #252]	; (6cc <_sercom_get_default_pad+0x10c>)
     5d0:	4298      	cmp	r0, r3
     5d2:	d05a      	beq.n	68a <_sercom_get_default_pad+0xca>
     5d4:	4b3e      	ldr	r3, [pc, #248]	; (6d0 <_sercom_get_default_pad+0x110>)
     5d6:	4298      	cmp	r0, r3
     5d8:	d037      	beq.n	64a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     5da:	2000      	movs	r0, #0
}
     5dc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     5de:	4b3d      	ldr	r3, [pc, #244]	; (6d4 <_sercom_get_default_pad+0x114>)
     5e0:	4298      	cmp	r0, r3
     5e2:	d00c      	beq.n	5fe <_sercom_get_default_pad+0x3e>
     5e4:	4b3c      	ldr	r3, [pc, #240]	; (6d8 <_sercom_get_default_pad+0x118>)
     5e6:	4298      	cmp	r0, r3
     5e8:	d1f7      	bne.n	5da <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ea:	2901      	cmp	r1, #1
     5ec:	d017      	beq.n	61e <_sercom_get_default_pad+0x5e>
     5ee:	2900      	cmp	r1, #0
     5f0:	d05d      	beq.n	6ae <_sercom_get_default_pad+0xee>
     5f2:	2902      	cmp	r1, #2
     5f4:	d015      	beq.n	622 <_sercom_get_default_pad+0x62>
     5f6:	2903      	cmp	r1, #3
     5f8:	d015      	beq.n	626 <_sercom_get_default_pad+0x66>
	return 0;
     5fa:	2000      	movs	r0, #0
     5fc:	e7ee      	b.n	5dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5fe:	2901      	cmp	r1, #1
     600:	d007      	beq.n	612 <_sercom_get_default_pad+0x52>
     602:	2900      	cmp	r1, #0
     604:	d051      	beq.n	6aa <_sercom_get_default_pad+0xea>
     606:	2902      	cmp	r1, #2
     608:	d005      	beq.n	616 <_sercom_get_default_pad+0x56>
     60a:	2903      	cmp	r1, #3
     60c:	d005      	beq.n	61a <_sercom_get_default_pad+0x5a>
	return 0;
     60e:	2000      	movs	r0, #0
     610:	e7e4      	b.n	5dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     612:	4832      	ldr	r0, [pc, #200]	; (6dc <_sercom_get_default_pad+0x11c>)
     614:	e7e2      	b.n	5dc <_sercom_get_default_pad+0x1c>
     616:	4832      	ldr	r0, [pc, #200]	; (6e0 <_sercom_get_default_pad+0x120>)
     618:	e7e0      	b.n	5dc <_sercom_get_default_pad+0x1c>
     61a:	4832      	ldr	r0, [pc, #200]	; (6e4 <_sercom_get_default_pad+0x124>)
     61c:	e7de      	b.n	5dc <_sercom_get_default_pad+0x1c>
     61e:	4832      	ldr	r0, [pc, #200]	; (6e8 <_sercom_get_default_pad+0x128>)
     620:	e7dc      	b.n	5dc <_sercom_get_default_pad+0x1c>
     622:	4832      	ldr	r0, [pc, #200]	; (6ec <_sercom_get_default_pad+0x12c>)
     624:	e7da      	b.n	5dc <_sercom_get_default_pad+0x1c>
     626:	4832      	ldr	r0, [pc, #200]	; (6f0 <_sercom_get_default_pad+0x130>)
     628:	e7d8      	b.n	5dc <_sercom_get_default_pad+0x1c>
     62a:	2901      	cmp	r1, #1
     62c:	d007      	beq.n	63e <_sercom_get_default_pad+0x7e>
     62e:	2900      	cmp	r1, #0
     630:	d03f      	beq.n	6b2 <_sercom_get_default_pad+0xf2>
     632:	2902      	cmp	r1, #2
     634:	d005      	beq.n	642 <_sercom_get_default_pad+0x82>
     636:	2903      	cmp	r1, #3
     638:	d005      	beq.n	646 <_sercom_get_default_pad+0x86>
	return 0;
     63a:	2000      	movs	r0, #0
     63c:	e7ce      	b.n	5dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     63e:	482d      	ldr	r0, [pc, #180]	; (6f4 <_sercom_get_default_pad+0x134>)
     640:	e7cc      	b.n	5dc <_sercom_get_default_pad+0x1c>
     642:	482d      	ldr	r0, [pc, #180]	; (6f8 <_sercom_get_default_pad+0x138>)
     644:	e7ca      	b.n	5dc <_sercom_get_default_pad+0x1c>
     646:	482d      	ldr	r0, [pc, #180]	; (6fc <_sercom_get_default_pad+0x13c>)
     648:	e7c8      	b.n	5dc <_sercom_get_default_pad+0x1c>
     64a:	2901      	cmp	r1, #1
     64c:	d007      	beq.n	65e <_sercom_get_default_pad+0x9e>
     64e:	2900      	cmp	r1, #0
     650:	d031      	beq.n	6b6 <_sercom_get_default_pad+0xf6>
     652:	2902      	cmp	r1, #2
     654:	d005      	beq.n	662 <_sercom_get_default_pad+0xa2>
     656:	2903      	cmp	r1, #3
     658:	d005      	beq.n	666 <_sercom_get_default_pad+0xa6>
	return 0;
     65a:	2000      	movs	r0, #0
     65c:	e7be      	b.n	5dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     65e:	4828      	ldr	r0, [pc, #160]	; (700 <_sercom_get_default_pad+0x140>)
     660:	e7bc      	b.n	5dc <_sercom_get_default_pad+0x1c>
     662:	4828      	ldr	r0, [pc, #160]	; (704 <_sercom_get_default_pad+0x144>)
     664:	e7ba      	b.n	5dc <_sercom_get_default_pad+0x1c>
     666:	4828      	ldr	r0, [pc, #160]	; (708 <_sercom_get_default_pad+0x148>)
     668:	e7b8      	b.n	5dc <_sercom_get_default_pad+0x1c>
     66a:	2901      	cmp	r1, #1
     66c:	d007      	beq.n	67e <_sercom_get_default_pad+0xbe>
     66e:	2900      	cmp	r1, #0
     670:	d023      	beq.n	6ba <_sercom_get_default_pad+0xfa>
     672:	2902      	cmp	r1, #2
     674:	d005      	beq.n	682 <_sercom_get_default_pad+0xc2>
     676:	2903      	cmp	r1, #3
     678:	d005      	beq.n	686 <_sercom_get_default_pad+0xc6>
	return 0;
     67a:	2000      	movs	r0, #0
     67c:	e7ae      	b.n	5dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     67e:	4823      	ldr	r0, [pc, #140]	; (70c <_sercom_get_default_pad+0x14c>)
     680:	e7ac      	b.n	5dc <_sercom_get_default_pad+0x1c>
     682:	4823      	ldr	r0, [pc, #140]	; (710 <_sercom_get_default_pad+0x150>)
     684:	e7aa      	b.n	5dc <_sercom_get_default_pad+0x1c>
     686:	4823      	ldr	r0, [pc, #140]	; (714 <_sercom_get_default_pad+0x154>)
     688:	e7a8      	b.n	5dc <_sercom_get_default_pad+0x1c>
     68a:	2901      	cmp	r1, #1
     68c:	d007      	beq.n	69e <_sercom_get_default_pad+0xde>
     68e:	2900      	cmp	r1, #0
     690:	d015      	beq.n	6be <_sercom_get_default_pad+0xfe>
     692:	2902      	cmp	r1, #2
     694:	d005      	beq.n	6a2 <_sercom_get_default_pad+0xe2>
     696:	2903      	cmp	r1, #3
     698:	d005      	beq.n	6a6 <_sercom_get_default_pad+0xe6>
	return 0;
     69a:	2000      	movs	r0, #0
     69c:	e79e      	b.n	5dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     69e:	481e      	ldr	r0, [pc, #120]	; (718 <_sercom_get_default_pad+0x158>)
     6a0:	e79c      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6a2:	481e      	ldr	r0, [pc, #120]	; (71c <_sercom_get_default_pad+0x15c>)
     6a4:	e79a      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6a6:	481e      	ldr	r0, [pc, #120]	; (720 <_sercom_get_default_pad+0x160>)
     6a8:	e798      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6aa:	481e      	ldr	r0, [pc, #120]	; (724 <_sercom_get_default_pad+0x164>)
     6ac:	e796      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6ae:	2003      	movs	r0, #3
     6b0:	e794      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6b2:	481d      	ldr	r0, [pc, #116]	; (728 <_sercom_get_default_pad+0x168>)
     6b4:	e792      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6b6:	481d      	ldr	r0, [pc, #116]	; (72c <_sercom_get_default_pad+0x16c>)
     6b8:	e790      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6ba:	481d      	ldr	r0, [pc, #116]	; (730 <_sercom_get_default_pad+0x170>)
     6bc:	e78e      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6be:	481d      	ldr	r0, [pc, #116]	; (734 <_sercom_get_default_pad+0x174>)
     6c0:	e78c      	b.n	5dc <_sercom_get_default_pad+0x1c>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	42001000 	.word	0x42001000
     6c8:	42001800 	.word	0x42001800
     6cc:	42001c00 	.word	0x42001c00
     6d0:	42001400 	.word	0x42001400
     6d4:	42000800 	.word	0x42000800
     6d8:	42000c00 	.word	0x42000c00
     6dc:	00050003 	.word	0x00050003
     6e0:	00060003 	.word	0x00060003
     6e4:	00070003 	.word	0x00070003
     6e8:	00010003 	.word	0x00010003
     6ec:	001e0003 	.word	0x001e0003
     6f0:	001f0003 	.word	0x001f0003
     6f4:	00090003 	.word	0x00090003
     6f8:	000a0003 	.word	0x000a0003
     6fc:	000b0003 	.word	0x000b0003
     700:	00110003 	.word	0x00110003
     704:	00120003 	.word	0x00120003
     708:	00130003 	.word	0x00130003
     70c:	000d0003 	.word	0x000d0003
     710:	000e0003 	.word	0x000e0003
     714:	000f0003 	.word	0x000f0003
     718:	00170003 	.word	0x00170003
     71c:	00180003 	.word	0x00180003
     720:	00190003 	.word	0x00190003
     724:	00040003 	.word	0x00040003
     728:	00080003 	.word	0x00080003
     72c:	00100003 	.word	0x00100003
     730:	000c0003 	.word	0x000c0003
     734:	00160003 	.word	0x00160003

00000738 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     738:	b530      	push	{r4, r5, lr}
     73a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     73c:	4b0b      	ldr	r3, [pc, #44]	; (76c <_sercom_get_sercom_inst_index+0x34>)
     73e:	466a      	mov	r2, sp
     740:	cb32      	ldmia	r3!, {r1, r4, r5}
     742:	c232      	stmia	r2!, {r1, r4, r5}
     744:	cb32      	ldmia	r3!, {r1, r4, r5}
     746:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     748:	9b00      	ldr	r3, [sp, #0]
     74a:	4283      	cmp	r3, r0
     74c:	d00b      	beq.n	766 <_sercom_get_sercom_inst_index+0x2e>
     74e:	2301      	movs	r3, #1
     750:	009a      	lsls	r2, r3, #2
     752:	4669      	mov	r1, sp
     754:	5852      	ldr	r2, [r2, r1]
     756:	4282      	cmp	r2, r0
     758:	d006      	beq.n	768 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     75a:	3301      	adds	r3, #1
     75c:	2b06      	cmp	r3, #6
     75e:	d1f7      	bne.n	750 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     760:	2000      	movs	r0, #0
}
     762:	b007      	add	sp, #28
     764:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     766:	2300      	movs	r3, #0
			return i;
     768:	b2d8      	uxtb	r0, r3
     76a:	e7fa      	b.n	762 <_sercom_get_sercom_inst_index+0x2a>
     76c:	00002824 	.word	0x00002824

00000770 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     770:	4770      	bx	lr
	...

00000774 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     774:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     776:	4b0a      	ldr	r3, [pc, #40]	; (7a0 <_sercom_set_handler+0x2c>)
     778:	781b      	ldrb	r3, [r3, #0]
     77a:	2b00      	cmp	r3, #0
     77c:	d10c      	bne.n	798 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     77e:	4f09      	ldr	r7, [pc, #36]	; (7a4 <_sercom_set_handler+0x30>)
     780:	4e09      	ldr	r6, [pc, #36]	; (7a8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     782:	4d0a      	ldr	r5, [pc, #40]	; (7ac <_sercom_set_handler+0x38>)
     784:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     786:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     788:	195a      	adds	r2, r3, r5
     78a:	6014      	str	r4, [r2, #0]
     78c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     78e:	2b18      	cmp	r3, #24
     790:	d1f9      	bne.n	786 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     792:	2201      	movs	r2, #1
     794:	4b02      	ldr	r3, [pc, #8]	; (7a0 <_sercom_set_handler+0x2c>)
     796:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     798:	0080      	lsls	r0, r0, #2
     79a:	4b02      	ldr	r3, [pc, #8]	; (7a4 <_sercom_set_handler+0x30>)
     79c:	50c1      	str	r1, [r0, r3]
}
     79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7a0:	20000096 	.word	0x20000096
     7a4:	20000098 	.word	0x20000098
     7a8:	00000771 	.word	0x00000771
     7ac:	2000016c 	.word	0x2000016c

000007b0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     7b0:	b500      	push	{lr}
     7b2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     7b4:	2309      	movs	r3, #9
     7b6:	466a      	mov	r2, sp
     7b8:	7013      	strb	r3, [r2, #0]
     7ba:	3301      	adds	r3, #1
     7bc:	7053      	strb	r3, [r2, #1]
     7be:	3301      	adds	r3, #1
     7c0:	7093      	strb	r3, [r2, #2]
     7c2:	3301      	adds	r3, #1
     7c4:	70d3      	strb	r3, [r2, #3]
     7c6:	3301      	adds	r3, #1
     7c8:	7113      	strb	r3, [r2, #4]
     7ca:	3301      	adds	r3, #1
     7cc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     7ce:	4b03      	ldr	r3, [pc, #12]	; (7dc <_sercom_get_interrupt_vector+0x2c>)
     7d0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     7d2:	466b      	mov	r3, sp
     7d4:	5618      	ldrsb	r0, [r3, r0]
}
     7d6:	b003      	add	sp, #12
     7d8:	bd00      	pop	{pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	00000739 	.word	0x00000739

000007e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     7e0:	b510      	push	{r4, lr}
     7e2:	4b02      	ldr	r3, [pc, #8]	; (7ec <SERCOM0_Handler+0xc>)
     7e4:	681b      	ldr	r3, [r3, #0]
     7e6:	2000      	movs	r0, #0
     7e8:	4798      	blx	r3
     7ea:	bd10      	pop	{r4, pc}
     7ec:	20000098 	.word	0x20000098

000007f0 <SERCOM1_Handler>:
     7f0:	b510      	push	{r4, lr}
     7f2:	4b02      	ldr	r3, [pc, #8]	; (7fc <SERCOM1_Handler+0xc>)
     7f4:	685b      	ldr	r3, [r3, #4]
     7f6:	2001      	movs	r0, #1
     7f8:	4798      	blx	r3
     7fa:	bd10      	pop	{r4, pc}
     7fc:	20000098 	.word	0x20000098

00000800 <SERCOM2_Handler>:
     800:	b510      	push	{r4, lr}
     802:	4b02      	ldr	r3, [pc, #8]	; (80c <SERCOM2_Handler+0xc>)
     804:	689b      	ldr	r3, [r3, #8]
     806:	2002      	movs	r0, #2
     808:	4798      	blx	r3
     80a:	bd10      	pop	{r4, pc}
     80c:	20000098 	.word	0x20000098

00000810 <SERCOM3_Handler>:
     810:	b510      	push	{r4, lr}
     812:	4b02      	ldr	r3, [pc, #8]	; (81c <SERCOM3_Handler+0xc>)
     814:	68db      	ldr	r3, [r3, #12]
     816:	2003      	movs	r0, #3
     818:	4798      	blx	r3
     81a:	bd10      	pop	{r4, pc}
     81c:	20000098 	.word	0x20000098

00000820 <SERCOM4_Handler>:
     820:	b510      	push	{r4, lr}
     822:	4b02      	ldr	r3, [pc, #8]	; (82c <SERCOM4_Handler+0xc>)
     824:	691b      	ldr	r3, [r3, #16]
     826:	2004      	movs	r0, #4
     828:	4798      	blx	r3
     82a:	bd10      	pop	{r4, pc}
     82c:	20000098 	.word	0x20000098

00000830 <SERCOM5_Handler>:
     830:	b510      	push	{r4, lr}
     832:	4b02      	ldr	r3, [pc, #8]	; (83c <SERCOM5_Handler+0xc>)
     834:	695b      	ldr	r3, [r3, #20]
     836:	2005      	movs	r0, #5
     838:	4798      	blx	r3
     83a:	bd10      	pop	{r4, pc}
     83c:	20000098 	.word	0x20000098

00000840 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
     842:	46de      	mov	lr, fp
     844:	4657      	mov	r7, sl
     846:	464e      	mov	r6, r9
     848:	4645      	mov	r5, r8
     84a:	b5e0      	push	{r5, r6, r7, lr}
     84c:	b091      	sub	sp, #68	; 0x44
     84e:	0005      	movs	r5, r0
     850:	000c      	movs	r4, r1
     852:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     854:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     856:	0008      	movs	r0, r1
     858:	4bba      	ldr	r3, [pc, #744]	; (b44 <usart_init+0x304>)
     85a:	4798      	blx	r3
     85c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     85e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     860:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     862:	07db      	lsls	r3, r3, #31
     864:	d506      	bpl.n	874 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     866:	b011      	add	sp, #68	; 0x44
     868:	bc3c      	pop	{r2, r3, r4, r5}
     86a:	4690      	mov	r8, r2
     86c:	4699      	mov	r9, r3
     86e:	46a2      	mov	sl, r4
     870:	46ab      	mov	fp, r5
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     874:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     876:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     878:	079b      	lsls	r3, r3, #30
     87a:	d4f4      	bmi.n	866 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     87c:	49b2      	ldr	r1, [pc, #712]	; (b48 <usart_init+0x308>)
     87e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     880:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     882:	2301      	movs	r3, #1
     884:	40bb      	lsls	r3, r7
     886:	4303      	orrs	r3, r0
     888:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     88a:	a90f      	add	r1, sp, #60	; 0x3c
     88c:	272d      	movs	r7, #45	; 0x2d
     88e:	5df3      	ldrb	r3, [r6, r7]
     890:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     892:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     894:	b2d3      	uxtb	r3, r2
     896:	9302      	str	r3, [sp, #8]
     898:	0018      	movs	r0, r3
     89a:	4bac      	ldr	r3, [pc, #688]	; (b4c <usart_init+0x30c>)
     89c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     89e:	9802      	ldr	r0, [sp, #8]
     8a0:	4bab      	ldr	r3, [pc, #684]	; (b50 <usart_init+0x310>)
     8a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8a4:	5df0      	ldrb	r0, [r6, r7]
     8a6:	2100      	movs	r1, #0
     8a8:	4baa      	ldr	r3, [pc, #680]	; (b54 <usart_init+0x314>)
     8aa:	4798      	blx	r3
	module->character_size = config->character_size;
     8ac:	7af3      	ldrb	r3, [r6, #11]
     8ae:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     8b0:	2324      	movs	r3, #36	; 0x24
     8b2:	5cf3      	ldrb	r3, [r6, r3]
     8b4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     8b6:	2325      	movs	r3, #37	; 0x25
     8b8:	5cf3      	ldrb	r3, [r6, r3]
     8ba:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     8bc:	7ef3      	ldrb	r3, [r6, #27]
     8be:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     8c0:	7f33      	ldrb	r3, [r6, #28]
     8c2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8c4:	682b      	ldr	r3, [r5, #0]
     8c6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8c8:	0018      	movs	r0, r3
     8ca:	4b9e      	ldr	r3, [pc, #632]	; (b44 <usart_init+0x304>)
     8cc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8ce:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     8d0:	2200      	movs	r2, #0
     8d2:	230e      	movs	r3, #14
     8d4:	a906      	add	r1, sp, #24
     8d6:	468c      	mov	ip, r1
     8d8:	4463      	add	r3, ip
     8da:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     8dc:	8a32      	ldrh	r2, [r6, #16]
     8de:	9202      	str	r2, [sp, #8]
     8e0:	2380      	movs	r3, #128	; 0x80
     8e2:	01db      	lsls	r3, r3, #7
     8e4:	429a      	cmp	r2, r3
     8e6:	d100      	bne.n	8ea <usart_init+0xaa>
     8e8:	e09a      	b.n	a20 <usart_init+0x1e0>
     8ea:	d90f      	bls.n	90c <usart_init+0xcc>
     8ec:	23c0      	movs	r3, #192	; 0xc0
     8ee:	01db      	lsls	r3, r3, #7
     8f0:	9a02      	ldr	r2, [sp, #8]
     8f2:	429a      	cmp	r2, r3
     8f4:	d100      	bne.n	8f8 <usart_init+0xb8>
     8f6:	e08e      	b.n	a16 <usart_init+0x1d6>
     8f8:	2380      	movs	r3, #128	; 0x80
     8fa:	021b      	lsls	r3, r3, #8
     8fc:	429a      	cmp	r2, r3
     8fe:	d000      	beq.n	902 <usart_init+0xc2>
     900:	e11b      	b.n	b3a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     902:	2303      	movs	r3, #3
     904:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     906:	2300      	movs	r3, #0
     908:	9307      	str	r3, [sp, #28]
     90a:	e008      	b.n	91e <usart_init+0xde>
	switch (config->sample_rate) {
     90c:	2380      	movs	r3, #128	; 0x80
     90e:	019b      	lsls	r3, r3, #6
     910:	429a      	cmp	r2, r3
     912:	d000      	beq.n	916 <usart_init+0xd6>
     914:	e111      	b.n	b3a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     916:	2310      	movs	r3, #16
     918:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     91a:	3b0f      	subs	r3, #15
     91c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     91e:	6833      	ldr	r3, [r6, #0]
     920:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     922:	68f3      	ldr	r3, [r6, #12]
     924:	469b      	mov	fp, r3
		config->sample_adjustment |
     926:	6973      	ldr	r3, [r6, #20]
     928:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     92a:	7e33      	ldrb	r3, [r6, #24]
     92c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     92e:	2326      	movs	r3, #38	; 0x26
     930:	5cf3      	ldrb	r3, [r6, r3]
     932:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     934:	6873      	ldr	r3, [r6, #4]
     936:	4699      	mov	r9, r3
	switch (transfer_mode)
     938:	2b00      	cmp	r3, #0
     93a:	d100      	bne.n	93e <usart_init+0xfe>
     93c:	e09c      	b.n	a78 <usart_init+0x238>
     93e:	2380      	movs	r3, #128	; 0x80
     940:	055b      	lsls	r3, r3, #21
     942:	4599      	cmp	r9, r3
     944:	d100      	bne.n	948 <usart_init+0x108>
     946:	e080      	b.n	a4a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     948:	7e73      	ldrb	r3, [r6, #25]
     94a:	2b00      	cmp	r3, #0
     94c:	d002      	beq.n	954 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     94e:	7eb3      	ldrb	r3, [r6, #26]
     950:	4642      	mov	r2, r8
     952:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     954:	230e      	movs	r3, #14
     956:	aa06      	add	r2, sp, #24
     958:	4694      	mov	ip, r2
     95a:	4463      	add	r3, ip
     95c:	881b      	ldrh	r3, [r3, #0]
     95e:	4642      	mov	r2, r8
     960:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     962:	9b05      	ldr	r3, [sp, #20]
     964:	465a      	mov	r2, fp
     966:	4313      	orrs	r3, r2
     968:	9a03      	ldr	r2, [sp, #12]
     96a:	4313      	orrs	r3, r2
     96c:	464a      	mov	r2, r9
     96e:	4313      	orrs	r3, r2
     970:	9f02      	ldr	r7, [sp, #8]
     972:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     974:	9b04      	ldr	r3, [sp, #16]
     976:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     978:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     97a:	4653      	mov	r3, sl
     97c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     97e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     980:	2327      	movs	r3, #39	; 0x27
     982:	5cf3      	ldrb	r3, [r6, r3]
     984:	2b00      	cmp	r3, #0
     986:	d101      	bne.n	98c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     988:	3304      	adds	r3, #4
     98a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     98c:	7e73      	ldrb	r3, [r6, #25]
     98e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     990:	7f32      	ldrb	r2, [r6, #28]
     992:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     994:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     996:	7f72      	ldrb	r2, [r6, #29]
     998:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     99a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     99c:	2224      	movs	r2, #36	; 0x24
     99e:	5cb2      	ldrb	r2, [r6, r2]
     9a0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9a2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9a4:	2225      	movs	r2, #37	; 0x25
     9a6:	5cb2      	ldrb	r2, [r6, r2]
     9a8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9aa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     9ac:	7ab1      	ldrb	r1, [r6, #10]
     9ae:	7af2      	ldrb	r2, [r6, #11]
     9b0:	4311      	orrs	r1, r2
     9b2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     9b4:	8933      	ldrh	r3, [r6, #8]
     9b6:	2bff      	cmp	r3, #255	; 0xff
     9b8:	d100      	bne.n	9bc <usart_init+0x17c>
     9ba:	e081      	b.n	ac0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9bc:	2280      	movs	r2, #128	; 0x80
     9be:	0452      	lsls	r2, r2, #17
     9c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     9c4:	232c      	movs	r3, #44	; 0x2c
     9c6:	5cf3      	ldrb	r3, [r6, r3]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d103      	bne.n	9d4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9cc:	4b62      	ldr	r3, [pc, #392]	; (b58 <usart_init+0x318>)
     9ce:	789b      	ldrb	r3, [r3, #2]
     9d0:	079b      	lsls	r3, r3, #30
     9d2:	d501      	bpl.n	9d8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9d4:	2380      	movs	r3, #128	; 0x80
     9d6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9d8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9da:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9dc:	2b00      	cmp	r3, #0
     9de:	d1fc      	bne.n	9da <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     9e0:	4643      	mov	r3, r8
     9e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9e8:	2b00      	cmp	r3, #0
     9ea:	d1fc      	bne.n	9e6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     9ec:	4643      	mov	r3, r8
     9ee:	601f      	str	r7, [r3, #0]
     9f0:	ab0e      	add	r3, sp, #56	; 0x38
     9f2:	2280      	movs	r2, #128	; 0x80
     9f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9f6:	2200      	movs	r2, #0
     9f8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     9fa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     9fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a00:	930a      	str	r3, [sp, #40]	; 0x28
     a02:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a04:	930b      	str	r3, [sp, #44]	; 0x2c
     a06:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a08:	930c      	str	r3, [sp, #48]	; 0x30
     a0a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a0c:	9302      	str	r3, [sp, #8]
     a0e:	930d      	str	r3, [sp, #52]	; 0x34
     a10:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a12:	ae0a      	add	r6, sp, #40	; 0x28
     a14:	e063      	b.n	ade <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a16:	2308      	movs	r3, #8
     a18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a1a:	3b07      	subs	r3, #7
     a1c:	9307      	str	r3, [sp, #28]
     a1e:	e77e      	b.n	91e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     a20:	6833      	ldr	r3, [r6, #0]
     a22:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     a24:	68f3      	ldr	r3, [r6, #12]
     a26:	469b      	mov	fp, r3
		config->sample_adjustment |
     a28:	6973      	ldr	r3, [r6, #20]
     a2a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a2c:	7e33      	ldrb	r3, [r6, #24]
     a2e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a30:	2326      	movs	r3, #38	; 0x26
     a32:	5cf3      	ldrb	r3, [r6, r3]
     a34:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a36:	6873      	ldr	r3, [r6, #4]
     a38:	4699      	mov	r9, r3
	switch (transfer_mode)
     a3a:	2b00      	cmp	r3, #0
     a3c:	d018      	beq.n	a70 <usart_init+0x230>
     a3e:	2380      	movs	r3, #128	; 0x80
     a40:	055b      	lsls	r3, r3, #21
     a42:	4599      	cmp	r9, r3
     a44:	d001      	beq.n	a4a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     a46:	2000      	movs	r0, #0
     a48:	e025      	b.n	a96 <usart_init+0x256>
			if (!config->use_external_clock) {
     a4a:	2327      	movs	r3, #39	; 0x27
     a4c:	5cf3      	ldrb	r3, [r6, r3]
     a4e:	2b00      	cmp	r3, #0
     a50:	d000      	beq.n	a54 <usart_init+0x214>
     a52:	e779      	b.n	948 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a54:	6a33      	ldr	r3, [r6, #32]
     a56:	001f      	movs	r7, r3
     a58:	b2c0      	uxtb	r0, r0
     a5a:	4b40      	ldr	r3, [pc, #256]	; (b5c <usart_init+0x31c>)
     a5c:	4798      	blx	r3
     a5e:	0001      	movs	r1, r0
     a60:	220e      	movs	r2, #14
     a62:	ab06      	add	r3, sp, #24
     a64:	469c      	mov	ip, r3
     a66:	4462      	add	r2, ip
     a68:	0038      	movs	r0, r7
     a6a:	4b3d      	ldr	r3, [pc, #244]	; (b60 <usart_init+0x320>)
     a6c:	4798      	blx	r3
     a6e:	e012      	b.n	a96 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a70:	2308      	movs	r3, #8
     a72:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a74:	2300      	movs	r3, #0
     a76:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     a78:	2327      	movs	r3, #39	; 0x27
     a7a:	5cf3      	ldrb	r3, [r6, r3]
     a7c:	2b00      	cmp	r3, #0
     a7e:	d00e      	beq.n	a9e <usart_init+0x25e>
				status_code =
     a80:	9b06      	ldr	r3, [sp, #24]
     a82:	9300      	str	r3, [sp, #0]
     a84:	9b07      	ldr	r3, [sp, #28]
     a86:	220e      	movs	r2, #14
     a88:	a906      	add	r1, sp, #24
     a8a:	468c      	mov	ip, r1
     a8c:	4462      	add	r2, ip
     a8e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     a90:	6a30      	ldr	r0, [r6, #32]
     a92:	4f34      	ldr	r7, [pc, #208]	; (b64 <usart_init+0x324>)
     a94:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     a96:	2800      	cmp	r0, #0
     a98:	d000      	beq.n	a9c <usart_init+0x25c>
     a9a:	e6e4      	b.n	866 <usart_init+0x26>
     a9c:	e754      	b.n	948 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     a9e:	6a33      	ldr	r3, [r6, #32]
     aa0:	001f      	movs	r7, r3
     aa2:	b2c0      	uxtb	r0, r0
     aa4:	4b2d      	ldr	r3, [pc, #180]	; (b5c <usart_init+0x31c>)
     aa6:	4798      	blx	r3
     aa8:	0001      	movs	r1, r0
				status_code =
     aaa:	9b06      	ldr	r3, [sp, #24]
     aac:	9300      	str	r3, [sp, #0]
     aae:	9b07      	ldr	r3, [sp, #28]
     ab0:	220e      	movs	r2, #14
     ab2:	a806      	add	r0, sp, #24
     ab4:	4684      	mov	ip, r0
     ab6:	4462      	add	r2, ip
     ab8:	0038      	movs	r0, r7
     aba:	4f2a      	ldr	r7, [pc, #168]	; (b64 <usart_init+0x324>)
     abc:	47b8      	blx	r7
     abe:	e7ea      	b.n	a96 <usart_init+0x256>
		if(config->lin_slave_enable) {
     ac0:	7ef3      	ldrb	r3, [r6, #27]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d100      	bne.n	ac8 <usart_init+0x288>
     ac6:	e77d      	b.n	9c4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     ac8:	2380      	movs	r3, #128	; 0x80
     aca:	04db      	lsls	r3, r3, #19
     acc:	431f      	orrs	r7, r3
     ace:	e779      	b.n	9c4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ad0:	0020      	movs	r0, r4
     ad2:	4b25      	ldr	r3, [pc, #148]	; (b68 <usart_init+0x328>)
     ad4:	4798      	blx	r3
     ad6:	e007      	b.n	ae8 <usart_init+0x2a8>
     ad8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ada:	2f04      	cmp	r7, #4
     adc:	d00d      	beq.n	afa <usart_init+0x2ba>
     ade:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ae0:	00bb      	lsls	r3, r7, #2
     ae2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     ae4:	2800      	cmp	r0, #0
     ae6:	d0f3      	beq.n	ad0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     ae8:	1c43      	adds	r3, r0, #1
     aea:	d0f5      	beq.n	ad8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     aec:	a90e      	add	r1, sp, #56	; 0x38
     aee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     af0:	0c00      	lsrs	r0, r0, #16
     af2:	b2c0      	uxtb	r0, r0
     af4:	4b1d      	ldr	r3, [pc, #116]	; (b6c <usart_init+0x32c>)
     af6:	4798      	blx	r3
     af8:	e7ee      	b.n	ad8 <usart_init+0x298>
		module->callback[i]            = NULL;
     afa:	2300      	movs	r3, #0
     afc:	60eb      	str	r3, [r5, #12]
     afe:	612b      	str	r3, [r5, #16]
     b00:	616b      	str	r3, [r5, #20]
     b02:	61ab      	str	r3, [r5, #24]
     b04:	61eb      	str	r3, [r5, #28]
     b06:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     b08:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     b0a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     b0c:	2200      	movs	r2, #0
     b0e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     b10:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     b12:	3330      	adds	r3, #48	; 0x30
     b14:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     b16:	3301      	adds	r3, #1
     b18:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     b1a:	3301      	adds	r3, #1
     b1c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     b1e:	3301      	adds	r3, #1
     b20:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b22:	6828      	ldr	r0, [r5, #0]
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <usart_init+0x304>)
     b26:	4798      	blx	r3
     b28:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b2a:	4911      	ldr	r1, [pc, #68]	; (b70 <usart_init+0x330>)
     b2c:	4b11      	ldr	r3, [pc, #68]	; (b74 <usart_init+0x334>)
     b2e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b30:	00a4      	lsls	r4, r4, #2
     b32:	4b11      	ldr	r3, [pc, #68]	; (b78 <usart_init+0x338>)
     b34:	50e5      	str	r5, [r4, r3]
	return status_code;
     b36:	2000      	movs	r0, #0
     b38:	e695      	b.n	866 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b3a:	2310      	movs	r3, #16
     b3c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b3e:	2300      	movs	r3, #0
     b40:	9307      	str	r3, [sp, #28]
     b42:	e6ec      	b.n	91e <usart_init+0xde>
     b44:	00000739 	.word	0x00000739
     b48:	40000400 	.word	0x40000400
     b4c:	000011e9 	.word	0x000011e9
     b50:	0000115d 	.word	0x0000115d
     b54:	00000575 	.word	0x00000575
     b58:	41002000 	.word	0x41002000
     b5c:	00001205 	.word	0x00001205
     b60:	000004b7 	.word	0x000004b7
     b64:	000004e1 	.word	0x000004e1
     b68:	000005c1 	.word	0x000005c1
     b6c:	000012e1 	.word	0x000012e1
     b70:	00000c0d 	.word	0x00000c0d
     b74:	00000775 	.word	0x00000775
     b78:	2000016c 	.word	0x2000016c

00000b7c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b7c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     b7e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     b80:	2a00      	cmp	r2, #0
     b82:	d101      	bne.n	b88 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b84:	0018      	movs	r0, r3
     b86:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     b88:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     b8a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b8c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     b8e:	2a00      	cmp	r2, #0
     b90:	d1f8      	bne.n	b84 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b92:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     b94:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b96:	2102      	movs	r1, #2
     b98:	7e13      	ldrb	r3, [r2, #24]
     b9a:	420b      	tst	r3, r1
     b9c:	d0fc      	beq.n	b98 <usart_write_wait+0x1c>
	return STATUS_OK;
     b9e:	2300      	movs	r3, #0
     ba0:	e7f0      	b.n	b84 <usart_write_wait+0x8>

00000ba2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ba2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     ba4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     ba6:	2a00      	cmp	r2, #0
     ba8:	d101      	bne.n	bae <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     baa:	0018      	movs	r0, r3
     bac:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     bae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     bb0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     bb2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     bb4:	2a00      	cmp	r2, #0
     bb6:	d1f8      	bne.n	baa <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     bb8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     bba:	7e10      	ldrb	r0, [r2, #24]
     bbc:	0740      	lsls	r0, r0, #29
     bbe:	d5f4      	bpl.n	baa <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     bc0:	8b53      	ldrh	r3, [r2, #26]
     bc2:	b2db      	uxtb	r3, r3
	if (error_code) {
     bc4:	0698      	lsls	r0, r3, #26
     bc6:	d01d      	beq.n	c04 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     bc8:	0798      	lsls	r0, r3, #30
     bca:	d503      	bpl.n	bd4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     bcc:	2302      	movs	r3, #2
     bce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     bd0:	3318      	adds	r3, #24
     bd2:	e7ea      	b.n	baa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bd4:	0758      	lsls	r0, r3, #29
     bd6:	d503      	bpl.n	be0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     bd8:	2304      	movs	r3, #4
     bda:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     bdc:	331a      	adds	r3, #26
     bde:	e7e4      	b.n	baa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     be0:	07d8      	lsls	r0, r3, #31
     be2:	d503      	bpl.n	bec <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     be4:	2301      	movs	r3, #1
     be6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     be8:	3312      	adds	r3, #18
     bea:	e7de      	b.n	baa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     bec:	06d8      	lsls	r0, r3, #27
     bee:	d503      	bpl.n	bf8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     bf0:	2310      	movs	r3, #16
     bf2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     bf4:	3332      	adds	r3, #50	; 0x32
     bf6:	e7d8      	b.n	baa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     bf8:	069b      	lsls	r3, r3, #26
     bfa:	d503      	bpl.n	c04 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bfc:	2320      	movs	r3, #32
     bfe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     c00:	3321      	adds	r3, #33	; 0x21
     c02:	e7d2      	b.n	baa <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     c04:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     c06:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     c08:	2300      	movs	r3, #0
     c0a:	e7ce      	b.n	baa <usart_read_wait+0x8>

00000c0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c0e:	0080      	lsls	r0, r0, #2
     c10:	4b62      	ldr	r3, [pc, #392]	; (d9c <_usart_interrupt_handler+0x190>)
     c12:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c14:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c16:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     c18:	2b00      	cmp	r3, #0
     c1a:	d1fc      	bne.n	c16 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c1c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c1e:	7da6      	ldrb	r6, [r4, #22]
     c20:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c22:	2330      	movs	r3, #48	; 0x30
     c24:	5ceb      	ldrb	r3, [r5, r3]
     c26:	2231      	movs	r2, #49	; 0x31
     c28:	5caf      	ldrb	r7, [r5, r2]
     c2a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c2c:	07f3      	lsls	r3, r6, #31
     c2e:	d522      	bpl.n	c76 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     c30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c32:	b29b      	uxth	r3, r3
     c34:	2b00      	cmp	r3, #0
     c36:	d01c      	beq.n	c72 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     c3a:	7813      	ldrb	r3, [r2, #0]
     c3c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c3e:	1c51      	adds	r1, r2, #1
     c40:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c42:	7969      	ldrb	r1, [r5, #5]
     c44:	2901      	cmp	r1, #1
     c46:	d00e      	beq.n	c66 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c48:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c4a:	05db      	lsls	r3, r3, #23
     c4c:	0ddb      	lsrs	r3, r3, #23
     c4e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c50:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c52:	3b01      	subs	r3, #1
     c54:	b29b      	uxth	r3, r3
     c56:	85eb      	strh	r3, [r5, #46]	; 0x2e
     c58:	2b00      	cmp	r3, #0
     c5a:	d10c      	bne.n	c76 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c5c:	3301      	adds	r3, #1
     c5e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c60:	3301      	adds	r3, #1
     c62:	75a3      	strb	r3, [r4, #22]
     c64:	e007      	b.n	c76 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c66:	7851      	ldrb	r1, [r2, #1]
     c68:	0209      	lsls	r1, r1, #8
     c6a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     c6c:	3202      	adds	r2, #2
     c6e:	62aa      	str	r2, [r5, #40]	; 0x28
     c70:	e7eb      	b.n	c4a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c72:	2301      	movs	r3, #1
     c74:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c76:	07b3      	lsls	r3, r6, #30
     c78:	d506      	bpl.n	c88 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c7a:	2302      	movs	r3, #2
     c7c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     c7e:	2200      	movs	r2, #0
     c80:	3331      	adds	r3, #49	; 0x31
     c82:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c84:	07fb      	lsls	r3, r7, #31
     c86:	d41a      	bmi.n	cbe <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c88:	0773      	lsls	r3, r6, #29
     c8a:	d565      	bpl.n	d58 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     c8c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c8e:	b29b      	uxth	r3, r3
     c90:	2b00      	cmp	r3, #0
     c92:	d05f      	beq.n	d54 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c94:	8b63      	ldrh	r3, [r4, #26]
     c96:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     c98:	071a      	lsls	r2, r3, #28
     c9a:	d414      	bmi.n	cc6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c9c:	223f      	movs	r2, #63	; 0x3f
     c9e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ca0:	2b00      	cmp	r3, #0
     ca2:	d034      	beq.n	d0e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     ca4:	079a      	lsls	r2, r3, #30
     ca6:	d511      	bpl.n	ccc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ca8:	221a      	movs	r2, #26
     caa:	2332      	movs	r3, #50	; 0x32
     cac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     cae:	3b30      	subs	r3, #48	; 0x30
     cb0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     cb2:	077b      	lsls	r3, r7, #29
     cb4:	d550      	bpl.n	d58 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     cb6:	0028      	movs	r0, r5
     cb8:	696b      	ldr	r3, [r5, #20]
     cba:	4798      	blx	r3
     cbc:	e04c      	b.n	d58 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     cbe:	0028      	movs	r0, r5
     cc0:	68eb      	ldr	r3, [r5, #12]
     cc2:	4798      	blx	r3
     cc4:	e7e0      	b.n	c88 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     cc6:	2237      	movs	r2, #55	; 0x37
     cc8:	4013      	ands	r3, r2
     cca:	e7e9      	b.n	ca0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ccc:	075a      	lsls	r2, r3, #29
     cce:	d505      	bpl.n	cdc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     cd0:	221e      	movs	r2, #30
     cd2:	2332      	movs	r3, #50	; 0x32
     cd4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cd6:	3b2e      	subs	r3, #46	; 0x2e
     cd8:	8363      	strh	r3, [r4, #26]
     cda:	e7ea      	b.n	cb2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     cdc:	07da      	lsls	r2, r3, #31
     cde:	d505      	bpl.n	cec <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     ce0:	2213      	movs	r2, #19
     ce2:	2332      	movs	r3, #50	; 0x32
     ce4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ce6:	3b31      	subs	r3, #49	; 0x31
     ce8:	8363      	strh	r3, [r4, #26]
     cea:	e7e2      	b.n	cb2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     cec:	06da      	lsls	r2, r3, #27
     cee:	d505      	bpl.n	cfc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     cf0:	2242      	movs	r2, #66	; 0x42
     cf2:	2332      	movs	r3, #50	; 0x32
     cf4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     cf6:	3b22      	subs	r3, #34	; 0x22
     cf8:	8363      	strh	r3, [r4, #26]
     cfa:	e7da      	b.n	cb2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     cfc:	2220      	movs	r2, #32
     cfe:	421a      	tst	r2, r3
     d00:	d0d7      	beq.n	cb2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d02:	3221      	adds	r2, #33	; 0x21
     d04:	2332      	movs	r3, #50	; 0x32
     d06:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d08:	3b12      	subs	r3, #18
     d0a:	8363      	strh	r3, [r4, #26]
     d0c:	e7d1      	b.n	cb2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d10:	05db      	lsls	r3, r3, #23
     d12:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d14:	b2da      	uxtb	r2, r3
     d16:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d18:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d1c:	1c51      	adds	r1, r2, #1
     d1e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d20:	7969      	ldrb	r1, [r5, #5]
     d22:	2901      	cmp	r1, #1
     d24:	d010      	beq.n	d48 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d26:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d28:	3b01      	subs	r3, #1
     d2a:	b29b      	uxth	r3, r3
     d2c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     d2e:	2b00      	cmp	r3, #0
     d30:	d112      	bne.n	d58 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d32:	3304      	adds	r3, #4
     d34:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     d36:	2200      	movs	r2, #0
     d38:	332e      	adds	r3, #46	; 0x2e
     d3a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     d3c:	07bb      	lsls	r3, r7, #30
     d3e:	d50b      	bpl.n	d58 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d40:	0028      	movs	r0, r5
     d42:	692b      	ldr	r3, [r5, #16]
     d44:	4798      	blx	r3
     d46:	e007      	b.n	d58 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d48:	0a1b      	lsrs	r3, r3, #8
     d4a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d4e:	3301      	adds	r3, #1
     d50:	626b      	str	r3, [r5, #36]	; 0x24
     d52:	e7e8      	b.n	d26 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d54:	2304      	movs	r3, #4
     d56:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     d58:	06f3      	lsls	r3, r6, #27
     d5a:	d504      	bpl.n	d66 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     d5c:	2310      	movs	r3, #16
     d5e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     d60:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     d62:	06fb      	lsls	r3, r7, #27
     d64:	d40e      	bmi.n	d84 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d66:	06b3      	lsls	r3, r6, #26
     d68:	d504      	bpl.n	d74 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d6a:	2320      	movs	r3, #32
     d6c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d6e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d70:	073b      	lsls	r3, r7, #28
     d72:	d40b      	bmi.n	d8c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d74:	0733      	lsls	r3, r6, #28
     d76:	d504      	bpl.n	d82 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     d78:	2308      	movs	r3, #8
     d7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     d7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     d7e:	06bb      	lsls	r3, r7, #26
     d80:	d408      	bmi.n	d94 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     d84:	0028      	movs	r0, r5
     d86:	69eb      	ldr	r3, [r5, #28]
     d88:	4798      	blx	r3
     d8a:	e7ec      	b.n	d66 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     d8c:	0028      	movs	r0, r5
     d8e:	69ab      	ldr	r3, [r5, #24]
     d90:	4798      	blx	r3
     d92:	e7ef      	b.n	d74 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     d94:	6a2b      	ldr	r3, [r5, #32]
     d96:	0028      	movs	r0, r5
     d98:	4798      	blx	r3
}
     d9a:	e7f2      	b.n	d82 <_usart_interrupt_handler+0x176>
     d9c:	2000016c 	.word	0x2000016c

00000da0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     da0:	b510      	push	{r4, lr}
	switch (clock_source) {
     da2:	2808      	cmp	r0, #8
     da4:	d803      	bhi.n	dae <system_clock_source_get_hz+0xe>
     da6:	0080      	lsls	r0, r0, #2
     da8:	4b1c      	ldr	r3, [pc, #112]	; (e1c <system_clock_source_get_hz+0x7c>)
     daa:	581b      	ldr	r3, [r3, r0]
     dac:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     dae:	2000      	movs	r0, #0
     db0:	e032      	b.n	e18 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     db2:	4b1b      	ldr	r3, [pc, #108]	; (e20 <system_clock_source_get_hz+0x80>)
     db4:	6918      	ldr	r0, [r3, #16]
     db6:	e02f      	b.n	e18 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     db8:	4b1a      	ldr	r3, [pc, #104]	; (e24 <system_clock_source_get_hz+0x84>)
     dba:	6a1b      	ldr	r3, [r3, #32]
     dbc:	059b      	lsls	r3, r3, #22
     dbe:	0f9b      	lsrs	r3, r3, #30
     dc0:	4819      	ldr	r0, [pc, #100]	; (e28 <system_clock_source_get_hz+0x88>)
     dc2:	40d8      	lsrs	r0, r3
     dc4:	e028      	b.n	e18 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     dc6:	4b16      	ldr	r3, [pc, #88]	; (e20 <system_clock_source_get_hz+0x80>)
     dc8:	6958      	ldr	r0, [r3, #20]
     dca:	e025      	b.n	e18 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     dcc:	4b14      	ldr	r3, [pc, #80]	; (e20 <system_clock_source_get_hz+0x80>)
     dce:	681b      	ldr	r3, [r3, #0]
			return 0;
     dd0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     dd2:	079b      	lsls	r3, r3, #30
     dd4:	d520      	bpl.n	e18 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dd6:	4913      	ldr	r1, [pc, #76]	; (e24 <system_clock_source_get_hz+0x84>)
     dd8:	2210      	movs	r2, #16
     dda:	68cb      	ldr	r3, [r1, #12]
     ddc:	421a      	tst	r2, r3
     dde:	d0fc      	beq.n	dda <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     de0:	4b0f      	ldr	r3, [pc, #60]	; (e20 <system_clock_source_get_hz+0x80>)
     de2:	681a      	ldr	r2, [r3, #0]
     de4:	2324      	movs	r3, #36	; 0x24
     de6:	4013      	ands	r3, r2
     de8:	2b04      	cmp	r3, #4
     dea:	d001      	beq.n	df0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     dec:	480f      	ldr	r0, [pc, #60]	; (e2c <system_clock_source_get_hz+0x8c>)
     dee:	e013      	b.n	e18 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     df0:	2000      	movs	r0, #0
     df2:	4b0f      	ldr	r3, [pc, #60]	; (e30 <system_clock_source_get_hz+0x90>)
     df4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     df6:	4b0a      	ldr	r3, [pc, #40]	; (e20 <system_clock_source_get_hz+0x80>)
     df8:	689b      	ldr	r3, [r3, #8]
     dfa:	041b      	lsls	r3, r3, #16
     dfc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     dfe:	4358      	muls	r0, r3
     e00:	e00a      	b.n	e18 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e02:	2350      	movs	r3, #80	; 0x50
     e04:	4a07      	ldr	r2, [pc, #28]	; (e24 <system_clock_source_get_hz+0x84>)
     e06:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     e08:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e0a:	075b      	lsls	r3, r3, #29
     e0c:	d504      	bpl.n	e18 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     e0e:	4b04      	ldr	r3, [pc, #16]	; (e20 <system_clock_source_get_hz+0x80>)
     e10:	68d8      	ldr	r0, [r3, #12]
     e12:	e001      	b.n	e18 <system_clock_source_get_hz+0x78>
		return 32768UL;
     e14:	2080      	movs	r0, #128	; 0x80
     e16:	0200      	lsls	r0, r0, #8
	}
}
     e18:	bd10      	pop	{r4, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	0000283c 	.word	0x0000283c
     e20:	200000b0 	.word	0x200000b0
     e24:	40000800 	.word	0x40000800
     e28:	007a1200 	.word	0x007a1200
     e2c:	02dc6c00 	.word	0x02dc6c00
     e30:	00001205 	.word	0x00001205

00000e34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e34:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e36:	490c      	ldr	r1, [pc, #48]	; (e68 <system_clock_source_osc8m_set_config+0x34>)
     e38:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e3a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e3c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e3e:	7840      	ldrb	r0, [r0, #1]
     e40:	2201      	movs	r2, #1
     e42:	4010      	ands	r0, r2
     e44:	0180      	lsls	r0, r0, #6
     e46:	2640      	movs	r6, #64	; 0x40
     e48:	43b3      	bics	r3, r6
     e4a:	4303      	orrs	r3, r0
     e4c:	402a      	ands	r2, r5
     e4e:	01d2      	lsls	r2, r2, #7
     e50:	2080      	movs	r0, #128	; 0x80
     e52:	4383      	bics	r3, r0
     e54:	4313      	orrs	r3, r2
     e56:	2203      	movs	r2, #3
     e58:	4022      	ands	r2, r4
     e5a:	0212      	lsls	r2, r2, #8
     e5c:	4803      	ldr	r0, [pc, #12]	; (e6c <system_clock_source_osc8m_set_config+0x38>)
     e5e:	4003      	ands	r3, r0
     e60:	4313      	orrs	r3, r2
     e62:	620b      	str	r3, [r1, #32]
}
     e64:	bd70      	pop	{r4, r5, r6, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	40000800 	.word	0x40000800
     e6c:	fffffcff 	.word	0xfffffcff

00000e70 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     e70:	2808      	cmp	r0, #8
     e72:	d803      	bhi.n	e7c <system_clock_source_enable+0xc>
     e74:	0080      	lsls	r0, r0, #2
     e76:	4b25      	ldr	r3, [pc, #148]	; (f0c <system_clock_source_enable+0x9c>)
     e78:	581b      	ldr	r3, [r3, r0]
     e7a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e7c:	2017      	movs	r0, #23
     e7e:	e044      	b.n	f0a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     e80:	4a23      	ldr	r2, [pc, #140]	; (f10 <system_clock_source_enable+0xa0>)
     e82:	6a13      	ldr	r3, [r2, #32]
     e84:	2102      	movs	r1, #2
     e86:	430b      	orrs	r3, r1
     e88:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     e8a:	2000      	movs	r0, #0
     e8c:	e03d      	b.n	f0a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e8e:	4a20      	ldr	r2, [pc, #128]	; (f10 <system_clock_source_enable+0xa0>)
     e90:	6993      	ldr	r3, [r2, #24]
     e92:	2102      	movs	r1, #2
     e94:	430b      	orrs	r3, r1
     e96:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     e98:	2000      	movs	r0, #0
		break;
     e9a:	e036      	b.n	f0a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     e9c:	4a1c      	ldr	r2, [pc, #112]	; (f10 <system_clock_source_enable+0xa0>)
     e9e:	8a13      	ldrh	r3, [r2, #16]
     ea0:	2102      	movs	r1, #2
     ea2:	430b      	orrs	r3, r1
     ea4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     ea6:	2000      	movs	r0, #0
		break;
     ea8:	e02f      	b.n	f0a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     eaa:	4a19      	ldr	r2, [pc, #100]	; (f10 <system_clock_source_enable+0xa0>)
     eac:	8a93      	ldrh	r3, [r2, #20]
     eae:	2102      	movs	r1, #2
     eb0:	430b      	orrs	r3, r1
     eb2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     eb4:	2000      	movs	r0, #0
		break;
     eb6:	e028      	b.n	f0a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     eb8:	4916      	ldr	r1, [pc, #88]	; (f14 <system_clock_source_enable+0xa4>)
     eba:	680b      	ldr	r3, [r1, #0]
     ebc:	2202      	movs	r2, #2
     ebe:	4313      	orrs	r3, r2
     ec0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     ec2:	4b13      	ldr	r3, [pc, #76]	; (f10 <system_clock_source_enable+0xa0>)
     ec4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ec6:	0019      	movs	r1, r3
     ec8:	320e      	adds	r2, #14
     eca:	68cb      	ldr	r3, [r1, #12]
     ecc:	421a      	tst	r2, r3
     ece:	d0fc      	beq.n	eca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     ed0:	4a10      	ldr	r2, [pc, #64]	; (f14 <system_clock_source_enable+0xa4>)
     ed2:	6891      	ldr	r1, [r2, #8]
     ed4:	4b0e      	ldr	r3, [pc, #56]	; (f10 <system_clock_source_enable+0xa0>)
     ed6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     ed8:	6852      	ldr	r2, [r2, #4]
     eda:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     edc:	2200      	movs	r2, #0
     ede:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ee0:	0019      	movs	r1, r3
     ee2:	3210      	adds	r2, #16
     ee4:	68cb      	ldr	r3, [r1, #12]
     ee6:	421a      	tst	r2, r3
     ee8:	d0fc      	beq.n	ee4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     eea:	4b0a      	ldr	r3, [pc, #40]	; (f14 <system_clock_source_enable+0xa4>)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	b29b      	uxth	r3, r3
     ef0:	4a07      	ldr	r2, [pc, #28]	; (f10 <system_clock_source_enable+0xa0>)
     ef2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     ef4:	2000      	movs	r0, #0
     ef6:	e008      	b.n	f0a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     ef8:	4905      	ldr	r1, [pc, #20]	; (f10 <system_clock_source_enable+0xa0>)
     efa:	2244      	movs	r2, #68	; 0x44
     efc:	5c8b      	ldrb	r3, [r1, r2]
     efe:	2002      	movs	r0, #2
     f00:	4303      	orrs	r3, r0
     f02:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f04:	2000      	movs	r0, #0
		break;
     f06:	e000      	b.n	f0a <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f08:	2000      	movs	r0, #0
}
     f0a:	4770      	bx	lr
     f0c:	00002860 	.word	0x00002860
     f10:	40000800 	.word	0x40000800
     f14:	200000b0 	.word	0x200000b0

00000f18 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f18:	b530      	push	{r4, r5, lr}
     f1a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f1c:	22c2      	movs	r2, #194	; 0xc2
     f1e:	00d2      	lsls	r2, r2, #3
     f20:	4b1a      	ldr	r3, [pc, #104]	; (f8c <system_clock_init+0x74>)
     f22:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f24:	4a1a      	ldr	r2, [pc, #104]	; (f90 <system_clock_init+0x78>)
     f26:	6853      	ldr	r3, [r2, #4]
     f28:	211e      	movs	r1, #30
     f2a:	438b      	bics	r3, r1
     f2c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     f2e:	2301      	movs	r3, #1
     f30:	466a      	mov	r2, sp
     f32:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f34:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     f36:	4d17      	ldr	r5, [pc, #92]	; (f94 <system_clock_init+0x7c>)
     f38:	b2e0      	uxtb	r0, r4
     f3a:	4669      	mov	r1, sp
     f3c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f3e:	3401      	adds	r4, #1
     f40:	2c25      	cmp	r4, #37	; 0x25
     f42:	d1f9      	bne.n	f38 <system_clock_init+0x20>
	config->run_in_standby  = false;
     f44:	a803      	add	r0, sp, #12
     f46:	2400      	movs	r4, #0
     f48:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     f4a:	2501      	movs	r5, #1
     f4c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     f4e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     f50:	4b11      	ldr	r3, [pc, #68]	; (f98 <system_clock_init+0x80>)
     f52:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     f54:	2006      	movs	r0, #6
     f56:	4b11      	ldr	r3, [pc, #68]	; (f9c <system_clock_init+0x84>)
     f58:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     f5a:	4b11      	ldr	r3, [pc, #68]	; (fa0 <system_clock_init+0x88>)
     f5c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     f5e:	4b11      	ldr	r3, [pc, #68]	; (fa4 <system_clock_init+0x8c>)
     f60:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     f62:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     f64:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     f66:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     f68:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     f6a:	466b      	mov	r3, sp
     f6c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     f6e:	2306      	movs	r3, #6
     f70:	466a      	mov	r2, sp
     f72:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     f74:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     f76:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f78:	4669      	mov	r1, sp
     f7a:	2000      	movs	r0, #0
     f7c:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <system_clock_init+0x90>)
     f7e:	4798      	blx	r3
     f80:	2000      	movs	r0, #0
     f82:	4b0a      	ldr	r3, [pc, #40]	; (fac <system_clock_init+0x94>)
     f84:	4798      	blx	r3
#endif
}
     f86:	b005      	add	sp, #20
     f88:	bd30      	pop	{r4, r5, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	40000800 	.word	0x40000800
     f90:	41004000 	.word	0x41004000
     f94:	000011e9 	.word	0x000011e9
     f98:	00000e35 	.word	0x00000e35
     f9c:	00000e71 	.word	0x00000e71
     fa0:	00000fb1 	.word	0x00000fb1
     fa4:	40000400 	.word	0x40000400
     fa8:	00000fd5 	.word	0x00000fd5
     fac:	0000108d 	.word	0x0000108d

00000fb0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     fb0:	4a06      	ldr	r2, [pc, #24]	; (fcc <system_gclk_init+0x1c>)
     fb2:	6993      	ldr	r3, [r2, #24]
     fb4:	2108      	movs	r1, #8
     fb6:	430b      	orrs	r3, r1
     fb8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     fba:	2201      	movs	r2, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <system_gclk_init+0x20>)
     fbe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     fc0:	0019      	movs	r1, r3
     fc2:	780b      	ldrb	r3, [r1, #0]
     fc4:	4213      	tst	r3, r2
     fc6:	d1fc      	bne.n	fc2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     fc8:	4770      	bx	lr
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	40000400 	.word	0x40000400
     fd0:	40000c00 	.word	0x40000c00

00000fd4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     fd8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     fda:	780d      	ldrb	r5, [r1, #0]
     fdc:	022d      	lsls	r5, r5, #8
     fde:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     fe0:	784b      	ldrb	r3, [r1, #1]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d002      	beq.n	fec <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     fe6:	2380      	movs	r3, #128	; 0x80
     fe8:	02db      	lsls	r3, r3, #11
     fea:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     fec:	7a4b      	ldrb	r3, [r1, #9]
     fee:	2b00      	cmp	r3, #0
     ff0:	d002      	beq.n	ff8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ff2:	2380      	movs	r3, #128	; 0x80
     ff4:	031b      	lsls	r3, r3, #12
     ff6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ff8:	6848      	ldr	r0, [r1, #4]
     ffa:	2801      	cmp	r0, #1
     ffc:	d910      	bls.n	1020 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ffe:	1e43      	subs	r3, r0, #1
    1000:	4218      	tst	r0, r3
    1002:	d134      	bne.n	106e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1004:	2802      	cmp	r0, #2
    1006:	d930      	bls.n	106a <system_gclk_gen_set_config+0x96>
    1008:	2302      	movs	r3, #2
    100a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    100c:	3201      	adds	r2, #1
						mask <<= 1) {
    100e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1010:	4298      	cmp	r0, r3
    1012:	d8fb      	bhi.n	100c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1014:	0212      	lsls	r2, r2, #8
    1016:	4332      	orrs	r2, r6
    1018:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    101a:	2380      	movs	r3, #128	; 0x80
    101c:	035b      	lsls	r3, r3, #13
    101e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1020:	7a0b      	ldrb	r3, [r1, #8]
    1022:	2b00      	cmp	r3, #0
    1024:	d002      	beq.n	102c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1026:	2380      	movs	r3, #128	; 0x80
    1028:	039b      	lsls	r3, r3, #14
    102a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    102c:	4a13      	ldr	r2, [pc, #76]	; (107c <system_gclk_gen_set_config+0xa8>)
    102e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1030:	b25b      	sxtb	r3, r3
    1032:	2b00      	cmp	r3, #0
    1034:	dbfb      	blt.n	102e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1036:	4b12      	ldr	r3, [pc, #72]	; (1080 <system_gclk_gen_set_config+0xac>)
    1038:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    103a:	4b12      	ldr	r3, [pc, #72]	; (1084 <system_gclk_gen_set_config+0xb0>)
    103c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    103e:	4a0f      	ldr	r2, [pc, #60]	; (107c <system_gclk_gen_set_config+0xa8>)
    1040:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1042:	b25b      	sxtb	r3, r3
    1044:	2b00      	cmp	r3, #0
    1046:	dbfb      	blt.n	1040 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1048:	4b0c      	ldr	r3, [pc, #48]	; (107c <system_gclk_gen_set_config+0xa8>)
    104a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    104c:	001a      	movs	r2, r3
    104e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1050:	b25b      	sxtb	r3, r3
    1052:	2b00      	cmp	r3, #0
    1054:	dbfb      	blt.n	104e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1056:	4a09      	ldr	r2, [pc, #36]	; (107c <system_gclk_gen_set_config+0xa8>)
    1058:	6853      	ldr	r3, [r2, #4]
    105a:	2180      	movs	r1, #128	; 0x80
    105c:	0249      	lsls	r1, r1, #9
    105e:	400b      	ands	r3, r1
    1060:	431d      	orrs	r5, r3
    1062:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1064:	4b08      	ldr	r3, [pc, #32]	; (1088 <system_gclk_gen_set_config+0xb4>)
    1066:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1068:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    106a:	2200      	movs	r2, #0
    106c:	e7d2      	b.n	1014 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    106e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1070:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1072:	2380      	movs	r3, #128	; 0x80
    1074:	029b      	lsls	r3, r3, #10
    1076:	431d      	orrs	r5, r3
    1078:	e7d2      	b.n	1020 <system_gclk_gen_set_config+0x4c>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	40000c00 	.word	0x40000c00
    1080:	00000181 	.word	0x00000181
    1084:	40000c08 	.word	0x40000c08
    1088:	000001c1 	.word	0x000001c1

0000108c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    108c:	b510      	push	{r4, lr}
    108e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1090:	4a0b      	ldr	r2, [pc, #44]	; (10c0 <system_gclk_gen_enable+0x34>)
    1092:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1094:	b25b      	sxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	dbfb      	blt.n	1092 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    109a:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <system_gclk_gen_enable+0x38>)
    109c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <system_gclk_gen_enable+0x3c>)
    10a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10a2:	4a07      	ldr	r2, [pc, #28]	; (10c0 <system_gclk_gen_enable+0x34>)
    10a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10a6:	b25b      	sxtb	r3, r3
    10a8:	2b00      	cmp	r3, #0
    10aa:	dbfb      	blt.n	10a4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    10ac:	4a04      	ldr	r2, [pc, #16]	; (10c0 <system_gclk_gen_enable+0x34>)
    10ae:	6851      	ldr	r1, [r2, #4]
    10b0:	2380      	movs	r3, #128	; 0x80
    10b2:	025b      	lsls	r3, r3, #9
    10b4:	430b      	orrs	r3, r1
    10b6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    10b8:	4b04      	ldr	r3, [pc, #16]	; (10cc <system_gclk_gen_enable+0x40>)
    10ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10bc:	bd10      	pop	{r4, pc}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	40000c00 	.word	0x40000c00
    10c4:	00000181 	.word	0x00000181
    10c8:	40000c04 	.word	0x40000c04
    10cc:	000001c1 	.word	0x000001c1

000010d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    10d0:	b570      	push	{r4, r5, r6, lr}
    10d2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10d4:	4a1a      	ldr	r2, [pc, #104]	; (1140 <system_gclk_gen_get_hz+0x70>)
    10d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10d8:	b25b      	sxtb	r3, r3
    10da:	2b00      	cmp	r3, #0
    10dc:	dbfb      	blt.n	10d6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    10de:	4b19      	ldr	r3, [pc, #100]	; (1144 <system_gclk_gen_get_hz+0x74>)
    10e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10e2:	4b19      	ldr	r3, [pc, #100]	; (1148 <system_gclk_gen_get_hz+0x78>)
    10e4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10e6:	4a16      	ldr	r2, [pc, #88]	; (1140 <system_gclk_gen_get_hz+0x70>)
    10e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10ea:	b25b      	sxtb	r3, r3
    10ec:	2b00      	cmp	r3, #0
    10ee:	dbfb      	blt.n	10e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    10f0:	4e13      	ldr	r6, [pc, #76]	; (1140 <system_gclk_gen_get_hz+0x70>)
    10f2:	6870      	ldr	r0, [r6, #4]
    10f4:	04c0      	lsls	r0, r0, #19
    10f6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    10f8:	4b14      	ldr	r3, [pc, #80]	; (114c <system_gclk_gen_get_hz+0x7c>)
    10fa:	4798      	blx	r3
    10fc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10fe:	4b12      	ldr	r3, [pc, #72]	; (1148 <system_gclk_gen_get_hz+0x78>)
    1100:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1102:	6876      	ldr	r6, [r6, #4]
    1104:	02f6      	lsls	r6, r6, #11
    1106:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1108:	4b11      	ldr	r3, [pc, #68]	; (1150 <system_gclk_gen_get_hz+0x80>)
    110a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    110c:	4a0c      	ldr	r2, [pc, #48]	; (1140 <system_gclk_gen_get_hz+0x70>)
    110e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1110:	b25b      	sxtb	r3, r3
    1112:	2b00      	cmp	r3, #0
    1114:	dbfb      	blt.n	110e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1116:	4b0a      	ldr	r3, [pc, #40]	; (1140 <system_gclk_gen_get_hz+0x70>)
    1118:	689c      	ldr	r4, [r3, #8]
    111a:	0224      	lsls	r4, r4, #8
    111c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    111e:	4b0d      	ldr	r3, [pc, #52]	; (1154 <system_gclk_gen_get_hz+0x84>)
    1120:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1122:	2e00      	cmp	r6, #0
    1124:	d107      	bne.n	1136 <system_gclk_gen_get_hz+0x66>
    1126:	2c01      	cmp	r4, #1
    1128:	d907      	bls.n	113a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    112a:	0021      	movs	r1, r4
    112c:	0028      	movs	r0, r5
    112e:	4b0a      	ldr	r3, [pc, #40]	; (1158 <system_gclk_gen_get_hz+0x88>)
    1130:	4798      	blx	r3
    1132:	0005      	movs	r5, r0
    1134:	e001      	b.n	113a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1136:	3401      	adds	r4, #1
    1138:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    113a:	0028      	movs	r0, r5
    113c:	bd70      	pop	{r4, r5, r6, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	40000c00 	.word	0x40000c00
    1144:	00000181 	.word	0x00000181
    1148:	40000c04 	.word	0x40000c04
    114c:	00000da1 	.word	0x00000da1
    1150:	40000c08 	.word	0x40000c08
    1154:	000001c1 	.word	0x000001c1
    1158:	00001b8d 	.word	0x00001b8d

0000115c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    115c:	b510      	push	{r4, lr}
    115e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1160:	4b06      	ldr	r3, [pc, #24]	; (117c <system_gclk_chan_enable+0x20>)
    1162:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1164:	4b06      	ldr	r3, [pc, #24]	; (1180 <system_gclk_chan_enable+0x24>)
    1166:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1168:	4a06      	ldr	r2, [pc, #24]	; (1184 <system_gclk_chan_enable+0x28>)
    116a:	8853      	ldrh	r3, [r2, #2]
    116c:	2180      	movs	r1, #128	; 0x80
    116e:	01c9      	lsls	r1, r1, #7
    1170:	430b      	orrs	r3, r1
    1172:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1174:	4b04      	ldr	r3, [pc, #16]	; (1188 <system_gclk_chan_enable+0x2c>)
    1176:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1178:	bd10      	pop	{r4, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	00000181 	.word	0x00000181
    1180:	40000c02 	.word	0x40000c02
    1184:	40000c00 	.word	0x40000c00
    1188:	000001c1 	.word	0x000001c1

0000118c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    118c:	b510      	push	{r4, lr}
    118e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1190:	4b0f      	ldr	r3, [pc, #60]	; (11d0 <system_gclk_chan_disable+0x44>)
    1192:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1194:	4b0f      	ldr	r3, [pc, #60]	; (11d4 <system_gclk_chan_disable+0x48>)
    1196:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1198:	4a0f      	ldr	r2, [pc, #60]	; (11d8 <system_gclk_chan_disable+0x4c>)
    119a:	8853      	ldrh	r3, [r2, #2]
    119c:	051b      	lsls	r3, r3, #20
    119e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    11a0:	8853      	ldrh	r3, [r2, #2]
    11a2:	490e      	ldr	r1, [pc, #56]	; (11dc <system_gclk_chan_disable+0x50>)
    11a4:	400b      	ands	r3, r1
    11a6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    11a8:	8853      	ldrh	r3, [r2, #2]
    11aa:	490d      	ldr	r1, [pc, #52]	; (11e0 <system_gclk_chan_disable+0x54>)
    11ac:	400b      	ands	r3, r1
    11ae:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    11b0:	0011      	movs	r1, r2
    11b2:	2280      	movs	r2, #128	; 0x80
    11b4:	01d2      	lsls	r2, r2, #7
    11b6:	884b      	ldrh	r3, [r1, #2]
    11b8:	4213      	tst	r3, r2
    11ba:	d1fc      	bne.n	11b6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    11bc:	4906      	ldr	r1, [pc, #24]	; (11d8 <system_gclk_chan_disable+0x4c>)
    11be:	884a      	ldrh	r2, [r1, #2]
    11c0:	0203      	lsls	r3, r0, #8
    11c2:	4806      	ldr	r0, [pc, #24]	; (11dc <system_gclk_chan_disable+0x50>)
    11c4:	4002      	ands	r2, r0
    11c6:	4313      	orrs	r3, r2
    11c8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    11ca:	4b06      	ldr	r3, [pc, #24]	; (11e4 <system_gclk_chan_disable+0x58>)
    11cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11ce:	bd10      	pop	{r4, pc}
    11d0:	00000181 	.word	0x00000181
    11d4:	40000c02 	.word	0x40000c02
    11d8:	40000c00 	.word	0x40000c00
    11dc:	fffff0ff 	.word	0xfffff0ff
    11e0:	ffffbfff 	.word	0xffffbfff
    11e4:	000001c1 	.word	0x000001c1

000011e8 <system_gclk_chan_set_config>:
{
    11e8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    11ea:	780c      	ldrb	r4, [r1, #0]
    11ec:	0224      	lsls	r4, r4, #8
    11ee:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    11f0:	4b02      	ldr	r3, [pc, #8]	; (11fc <system_gclk_chan_set_config+0x14>)
    11f2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    11f4:	b2a4      	uxth	r4, r4
    11f6:	4b02      	ldr	r3, [pc, #8]	; (1200 <system_gclk_chan_set_config+0x18>)
    11f8:	805c      	strh	r4, [r3, #2]
}
    11fa:	bd10      	pop	{r4, pc}
    11fc:	0000118d 	.word	0x0000118d
    1200:	40000c00 	.word	0x40000c00

00001204 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1204:	b510      	push	{r4, lr}
    1206:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1208:	4b06      	ldr	r3, [pc, #24]	; (1224 <system_gclk_chan_get_hz+0x20>)
    120a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    120c:	4b06      	ldr	r3, [pc, #24]	; (1228 <system_gclk_chan_get_hz+0x24>)
    120e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <system_gclk_chan_get_hz+0x28>)
    1212:	885c      	ldrh	r4, [r3, #2]
    1214:	0524      	lsls	r4, r4, #20
    1216:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1218:	4b05      	ldr	r3, [pc, #20]	; (1230 <system_gclk_chan_get_hz+0x2c>)
    121a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    121c:	0020      	movs	r0, r4
    121e:	4b05      	ldr	r3, [pc, #20]	; (1234 <system_gclk_chan_get_hz+0x30>)
    1220:	4798      	blx	r3
}
    1222:	bd10      	pop	{r4, pc}
    1224:	00000181 	.word	0x00000181
    1228:	40000c02 	.word	0x40000c02
    122c:	40000c00 	.word	0x40000c00
    1230:	000001c1 	.word	0x000001c1
    1234:	000010d1 	.word	0x000010d1

00001238 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1238:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    123a:	78d3      	ldrb	r3, [r2, #3]
    123c:	2b00      	cmp	r3, #0
    123e:	d135      	bne.n	12ac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1240:	7813      	ldrb	r3, [r2, #0]
    1242:	2b80      	cmp	r3, #128	; 0x80
    1244:	d029      	beq.n	129a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1246:	061b      	lsls	r3, r3, #24
    1248:	2480      	movs	r4, #128	; 0x80
    124a:	0264      	lsls	r4, r4, #9
    124c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    124e:	7854      	ldrb	r4, [r2, #1]
    1250:	2502      	movs	r5, #2
    1252:	43ac      	bics	r4, r5
    1254:	d106      	bne.n	1264 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1256:	7894      	ldrb	r4, [r2, #2]
    1258:	2c00      	cmp	r4, #0
    125a:	d120      	bne.n	129e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    125c:	2480      	movs	r4, #128	; 0x80
    125e:	02a4      	lsls	r4, r4, #10
    1260:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1262:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1264:	7854      	ldrb	r4, [r2, #1]
    1266:	3c01      	subs	r4, #1
    1268:	2c01      	cmp	r4, #1
    126a:	d91c      	bls.n	12a6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    126c:	040d      	lsls	r5, r1, #16
    126e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1270:	24a0      	movs	r4, #160	; 0xa0
    1272:	05e4      	lsls	r4, r4, #23
    1274:	432c      	orrs	r4, r5
    1276:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1278:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    127a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    127c:	24d0      	movs	r4, #208	; 0xd0
    127e:	0624      	lsls	r4, r4, #24
    1280:	432c      	orrs	r4, r5
    1282:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1284:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1286:	78d4      	ldrb	r4, [r2, #3]
    1288:	2c00      	cmp	r4, #0
    128a:	d122      	bne.n	12d2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    128c:	035b      	lsls	r3, r3, #13
    128e:	d51c      	bpl.n	12ca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1290:	7893      	ldrb	r3, [r2, #2]
    1292:	2b01      	cmp	r3, #1
    1294:	d01e      	beq.n	12d4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1296:	6141      	str	r1, [r0, #20]
    1298:	e017      	b.n	12ca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    129a:	2300      	movs	r3, #0
    129c:	e7d7      	b.n	124e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    129e:	24c0      	movs	r4, #192	; 0xc0
    12a0:	02e4      	lsls	r4, r4, #11
    12a2:	4323      	orrs	r3, r4
    12a4:	e7dd      	b.n	1262 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    12a6:	4c0d      	ldr	r4, [pc, #52]	; (12dc <_system_pinmux_config+0xa4>)
    12a8:	4023      	ands	r3, r4
    12aa:	e7df      	b.n	126c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    12ac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12ae:	040c      	lsls	r4, r1, #16
    12b0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12b2:	23a0      	movs	r3, #160	; 0xa0
    12b4:	05db      	lsls	r3, r3, #23
    12b6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12b8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12ba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12bc:	23d0      	movs	r3, #208	; 0xd0
    12be:	061b      	lsls	r3, r3, #24
    12c0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12c2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    12c4:	78d3      	ldrb	r3, [r2, #3]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d103      	bne.n	12d2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12ca:	7853      	ldrb	r3, [r2, #1]
    12cc:	3b01      	subs	r3, #1
    12ce:	2b01      	cmp	r3, #1
    12d0:	d902      	bls.n	12d8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    12d2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    12d4:	6181      	str	r1, [r0, #24]
    12d6:	e7f8      	b.n	12ca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    12d8:	6081      	str	r1, [r0, #8]
}
    12da:	e7fa      	b.n	12d2 <_system_pinmux_config+0x9a>
    12dc:	fffbffff 	.word	0xfffbffff

000012e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    12e0:	b510      	push	{r4, lr}
    12e2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12e4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12e8:	2900      	cmp	r1, #0
    12ea:	d104      	bne.n	12f6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12ec:	0943      	lsrs	r3, r0, #5
    12ee:	01db      	lsls	r3, r3, #7
    12f0:	4905      	ldr	r1, [pc, #20]	; (1308 <system_pinmux_pin_set_config+0x28>)
    12f2:	468c      	mov	ip, r1
    12f4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    12f6:	241f      	movs	r4, #31
    12f8:	4020      	ands	r0, r4
    12fa:	2101      	movs	r1, #1
    12fc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    12fe:	0018      	movs	r0, r3
    1300:	4b02      	ldr	r3, [pc, #8]	; (130c <system_pinmux_pin_set_config+0x2c>)
    1302:	4798      	blx	r3
}
    1304:	bd10      	pop	{r4, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	41004400 	.word	0x41004400
    130c:	00001239 	.word	0x00001239

00001310 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1310:	4770      	bx	lr
	...

00001314 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1314:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1316:	4b05      	ldr	r3, [pc, #20]	; (132c <system_init+0x18>)
    1318:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    131a:	4b05      	ldr	r3, [pc, #20]	; (1330 <system_init+0x1c>)
    131c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    131e:	4b05      	ldr	r3, [pc, #20]	; (1334 <system_init+0x20>)
    1320:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1322:	4b05      	ldr	r3, [pc, #20]	; (1338 <system_init+0x24>)
    1324:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <system_init+0x28>)
    1328:	4798      	blx	r3
}
    132a:	bd10      	pop	{r4, pc}
    132c:	00000f19 	.word	0x00000f19
    1330:	000001f1 	.word	0x000001f1
    1334:	00001311 	.word	0x00001311
    1338:	000002e1 	.word	0x000002e1
    133c:	00001311 	.word	0x00001311

00001340 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1340:	1c93      	adds	r3, r2, #2
    1342:	009b      	lsls	r3, r3, #2
    1344:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1346:	2a02      	cmp	r2, #2
    1348:	d009      	beq.n	135e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    134a:	2a03      	cmp	r2, #3
    134c:	d00c      	beq.n	1368 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    134e:	2301      	movs	r3, #1
    1350:	4093      	lsls	r3, r2
    1352:	001a      	movs	r2, r3
    1354:	7e03      	ldrb	r3, [r0, #24]
    1356:	4313      	orrs	r3, r2
    1358:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    135a:	2000      	movs	r0, #0
    135c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    135e:	7e03      	ldrb	r3, [r0, #24]
    1360:	2210      	movs	r2, #16
    1362:	4313      	orrs	r3, r2
    1364:	7603      	strb	r3, [r0, #24]
    1366:	e7f8      	b.n	135a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1368:	7e03      	ldrb	r3, [r0, #24]
    136a:	2220      	movs	r2, #32
    136c:	4313      	orrs	r3, r2
    136e:	7603      	strb	r3, [r0, #24]
    1370:	e7f3      	b.n	135a <tc_register_callback+0x1a>
	...

00001374 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1374:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1376:	0080      	lsls	r0, r0, #2
    1378:	4b16      	ldr	r3, [pc, #88]	; (13d4 <_tc_interrupt_handler+0x60>)
    137a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    137c:	6823      	ldr	r3, [r4, #0]
    137e:	7b9d      	ldrb	r5, [r3, #14]
    1380:	7e22      	ldrb	r2, [r4, #24]
    1382:	7e63      	ldrb	r3, [r4, #25]
    1384:	4013      	ands	r3, r2
    1386:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1388:	07eb      	lsls	r3, r5, #31
    138a:	d406      	bmi.n	139a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    138c:	07ab      	lsls	r3, r5, #30
    138e:	d40b      	bmi.n	13a8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1390:	06eb      	lsls	r3, r5, #27
    1392:	d410      	bmi.n	13b6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1394:	06ab      	lsls	r3, r5, #26
    1396:	d415      	bmi.n	13c4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1398:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    139a:	0020      	movs	r0, r4
    139c:	68a3      	ldr	r3, [r4, #8]
    139e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    13a0:	2301      	movs	r3, #1
    13a2:	6822      	ldr	r2, [r4, #0]
    13a4:	7393      	strb	r3, [r2, #14]
    13a6:	e7f1      	b.n	138c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    13a8:	0020      	movs	r0, r4
    13aa:	68e3      	ldr	r3, [r4, #12]
    13ac:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    13ae:	2302      	movs	r3, #2
    13b0:	6822      	ldr	r2, [r4, #0]
    13b2:	7393      	strb	r3, [r2, #14]
    13b4:	e7ec      	b.n	1390 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    13b6:	0020      	movs	r0, r4
    13b8:	6923      	ldr	r3, [r4, #16]
    13ba:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    13bc:	2310      	movs	r3, #16
    13be:	6822      	ldr	r2, [r4, #0]
    13c0:	7393      	strb	r3, [r2, #14]
    13c2:	e7e7      	b.n	1394 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    13c4:	0020      	movs	r0, r4
    13c6:	6963      	ldr	r3, [r4, #20]
    13c8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    13ca:	6823      	ldr	r3, [r4, #0]
    13cc:	2220      	movs	r2, #32
    13ce:	739a      	strb	r2, [r3, #14]
}
    13d0:	e7e2      	b.n	1398 <_tc_interrupt_handler+0x24>
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	20000184 	.word	0x20000184

000013d8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    13d8:	b510      	push	{r4, lr}
    13da:	2000      	movs	r0, #0
    13dc:	4b01      	ldr	r3, [pc, #4]	; (13e4 <TC3_Handler+0xc>)
    13de:	4798      	blx	r3
    13e0:	bd10      	pop	{r4, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	00001375 	.word	0x00001375

000013e8 <TC4_Handler>:
    13e8:	b510      	push	{r4, lr}
    13ea:	2001      	movs	r0, #1
    13ec:	4b01      	ldr	r3, [pc, #4]	; (13f4 <TC4_Handler+0xc>)
    13ee:	4798      	blx	r3
    13f0:	bd10      	pop	{r4, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	00001375 	.word	0x00001375

000013f8 <TC5_Handler>:
    13f8:	b510      	push	{r4, lr}
    13fa:	2002      	movs	r0, #2
    13fc:	4b01      	ldr	r3, [pc, #4]	; (1404 <TC5_Handler+0xc>)
    13fe:	4798      	blx	r3
    1400:	bd10      	pop	{r4, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	00001375 	.word	0x00001375

00001408 <TC6_Handler>:
    1408:	b510      	push	{r4, lr}
    140a:	2003      	movs	r0, #3
    140c:	4b01      	ldr	r3, [pc, #4]	; (1414 <TC6_Handler+0xc>)
    140e:	4798      	blx	r3
    1410:	bd10      	pop	{r4, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	00001375 	.word	0x00001375

00001418 <TC7_Handler>:
    1418:	b510      	push	{r4, lr}
    141a:	2004      	movs	r0, #4
    141c:	4b01      	ldr	r3, [pc, #4]	; (1424 <TC7_Handler+0xc>)
    141e:	4798      	blx	r3
    1420:	bd10      	pop	{r4, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	00001375 	.word	0x00001375

00001428 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1428:	b530      	push	{r4, r5, lr}
    142a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    142c:	a901      	add	r1, sp, #4
    142e:	4b0c      	ldr	r3, [pc, #48]	; (1460 <_tc_get_inst_index+0x38>)
    1430:	000a      	movs	r2, r1
    1432:	cb32      	ldmia	r3!, {r1, r4, r5}
    1434:	c232      	stmia	r2!, {r1, r4, r5}
    1436:	cb12      	ldmia	r3!, {r1, r4}
    1438:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    143a:	9b01      	ldr	r3, [sp, #4]
    143c:	4298      	cmp	r0, r3
    143e:	d00b      	beq.n	1458 <_tc_get_inst_index+0x30>
    1440:	2301      	movs	r3, #1
    1442:	a901      	add	r1, sp, #4
    1444:	009a      	lsls	r2, r3, #2
    1446:	5852      	ldr	r2, [r2, r1]
    1448:	4282      	cmp	r2, r0
    144a:	d006      	beq.n	145a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    144c:	3301      	adds	r3, #1
    144e:	2b05      	cmp	r3, #5
    1450:	d1f8      	bne.n	1444 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1452:	2000      	movs	r0, #0
}
    1454:	b007      	add	sp, #28
    1456:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1458:	2300      	movs	r3, #0
			return i;
    145a:	b2d8      	uxtb	r0, r3
    145c:	e7fa      	b.n	1454 <_tc_get_inst_index+0x2c>
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00002884 	.word	0x00002884

00001464 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
    1466:	b089      	sub	sp, #36	; 0x24
    1468:	0004      	movs	r4, r0
    146a:	000d      	movs	r5, r1
    146c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    146e:	0008      	movs	r0, r1
    1470:	4b85      	ldr	r3, [pc, #532]	; (1688 <tc_init+0x224>)
    1472:	4798      	blx	r3
    1474:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1476:	ab06      	add	r3, sp, #24
    1478:	221b      	movs	r2, #27
    147a:	701a      	strb	r2, [r3, #0]
    147c:	3201      	adds	r2, #1
    147e:	705a      	strb	r2, [r3, #1]
    1480:	709a      	strb	r2, [r3, #2]
    1482:	3201      	adds	r2, #1
    1484:	70da      	strb	r2, [r3, #3]
    1486:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1488:	aa03      	add	r2, sp, #12
    148a:	4b80      	ldr	r3, [pc, #512]	; (168c <tc_init+0x228>)
    148c:	3314      	adds	r3, #20
    148e:	cb03      	ldmia	r3!, {r0, r1}
    1490:	c203      	stmia	r2!, {r0, r1}
    1492:	881b      	ldrh	r3, [r3, #0]
    1494:	8013      	strh	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1496:	2300      	movs	r3, #0
    1498:	60a3      	str	r3, [r4, #8]
    149a:	60e3      	str	r3, [r4, #12]
    149c:	6123      	str	r3, [r4, #16]
    149e:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    14a0:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    14a2:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    14a4:	00ba      	lsls	r2, r7, #2
    14a6:	4b7a      	ldr	r3, [pc, #488]	; (1690 <tc_init+0x22c>)
    14a8:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    14aa:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    14ac:	78b3      	ldrb	r3, [r6, #2]
    14ae:	2b08      	cmp	r3, #8
    14b0:	d006      	beq.n	14c0 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    14b2:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    14b4:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    14b6:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    14b8:	07db      	lsls	r3, r3, #31
    14ba:	d505      	bpl.n	14c8 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    14bc:	b009      	add	sp, #36	; 0x24
    14be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    14c0:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    14c2:	07fa      	lsls	r2, r7, #31
    14c4:	d5fa      	bpl.n	14bc <tc_init+0x58>
    14c6:	e7f4      	b.n	14b2 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    14c8:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    14ca:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    14cc:	06db      	lsls	r3, r3, #27
    14ce:	d4f5      	bmi.n	14bc <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    14d0:	882b      	ldrh	r3, [r5, #0]
    14d2:	079b      	lsls	r3, r3, #30
    14d4:	d4f2      	bmi.n	14bc <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    14d6:	7c33      	ldrb	r3, [r6, #16]
    14d8:	2b00      	cmp	r3, #0
    14da:	d179      	bne.n	15d0 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    14dc:	7f33      	ldrb	r3, [r6, #28]
    14de:	2b00      	cmp	r3, #0
    14e0:	d000      	beq.n	14e4 <tc_init+0x80>
    14e2:	e081      	b.n	15e8 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    14e4:	496b      	ldr	r1, [pc, #428]	; (1694 <tc_init+0x230>)
    14e6:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    14e8:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    14ea:	ab03      	add	r3, sp, #12
    14ec:	5ad3      	ldrh	r3, [r2, r3]
    14ee:	4303      	orrs	r3, r0
    14f0:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    14f2:	78b3      	ldrb	r3, [r6, #2]
    14f4:	2b08      	cmp	r3, #8
    14f6:	d100      	bne.n	14fa <tc_init+0x96>
    14f8:	e086      	b.n	1608 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    14fa:	a901      	add	r1, sp, #4
    14fc:	7833      	ldrb	r3, [r6, #0]
    14fe:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1500:	ab06      	add	r3, sp, #24
    1502:	5ddf      	ldrb	r7, [r3, r7]
    1504:	0038      	movs	r0, r7
    1506:	4b64      	ldr	r3, [pc, #400]	; (1698 <tc_init+0x234>)
    1508:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    150a:	0038      	movs	r0, r7
    150c:	4b63      	ldr	r3, [pc, #396]	; (169c <tc_init+0x238>)
    150e:	4798      	blx	r3
	ctrla_tmp =
    1510:	8931      	ldrh	r1, [r6, #8]
    1512:	88b3      	ldrh	r3, [r6, #4]
    1514:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1516:	78b1      	ldrb	r1, [r6, #2]
    1518:	79b2      	ldrb	r2, [r6, #6]
    151a:	4311      	orrs	r1, r2
	ctrla_tmp =
    151c:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    151e:	7873      	ldrb	r3, [r6, #1]
    1520:	2b00      	cmp	r3, #0
    1522:	d002      	beq.n	152a <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1524:	2380      	movs	r3, #128	; 0x80
    1526:	011b      	lsls	r3, r3, #4
    1528:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    152a:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    152c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    152e:	b25b      	sxtb	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	dbfb      	blt.n	152c <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1534:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1536:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1538:	1e4b      	subs	r3, r1, #1
    153a:	4199      	sbcs	r1, r3
    153c:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    153e:	7bb3      	ldrb	r3, [r6, #14]
    1540:	2b00      	cmp	r3, #0
    1542:	d001      	beq.n	1548 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1544:	2301      	movs	r3, #1
    1546:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1548:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    154a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    154c:	b25b      	sxtb	r3, r3
    154e:	2b00      	cmp	r3, #0
    1550:	dbfb      	blt.n	154a <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1552:	23ff      	movs	r3, #255	; 0xff
    1554:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1556:	2900      	cmp	r1, #0
    1558:	d005      	beq.n	1566 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    155a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    155c:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    155e:	b25b      	sxtb	r3, r3
    1560:	2b00      	cmp	r3, #0
    1562:	dbfb      	blt.n	155c <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1564:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1566:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1568:	7af3      	ldrb	r3, [r6, #11]
    156a:	2b00      	cmp	r3, #0
    156c:	d001      	beq.n	1572 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    156e:	2310      	movs	r3, #16
    1570:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1572:	7b33      	ldrb	r3, [r6, #12]
    1574:	2b00      	cmp	r3, #0
    1576:	d001      	beq.n	157c <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1578:	2320      	movs	r3, #32
    157a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    157c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    157e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1580:	b25b      	sxtb	r3, r3
    1582:	2b00      	cmp	r3, #0
    1584:	dbfb      	blt.n	157e <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1586:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1588:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    158a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    158c:	b25b      	sxtb	r3, r3
    158e:	2b00      	cmp	r3, #0
    1590:	dbfb      	blt.n	158a <tc_init+0x126>
	switch (module_inst->counter_size) {
    1592:	7923      	ldrb	r3, [r4, #4]
    1594:	2b04      	cmp	r3, #4
    1596:	d03f      	beq.n	1618 <tc_init+0x1b4>
    1598:	2b08      	cmp	r3, #8
    159a:	d05e      	beq.n	165a <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    159c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    159e:	2b00      	cmp	r3, #0
    15a0:	d000      	beq.n	15a4 <tc_init+0x140>
    15a2:	e78b      	b.n	14bc <tc_init+0x58>
    15a4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    15a6:	b25b      	sxtb	r3, r3
    15a8:	2b00      	cmp	r3, #0
    15aa:	dbfb      	blt.n	15a4 <tc_init+0x140>
				= config->counter_16_bit.value;
    15ac:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    15ae:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15b0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15b2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    15b4:	b25b      	sxtb	r3, r3
    15b6:	2b00      	cmp	r3, #0
    15b8:	dbfb      	blt.n	15b2 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    15ba:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    15bc:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15c0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    15c2:	b25b      	sxtb	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	dbfb      	blt.n	15c0 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    15c8:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    15ca:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    15cc:	2000      	movs	r0, #0
    15ce:	e775      	b.n	14bc <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15d0:	a902      	add	r1, sp, #8
    15d2:	2301      	movs	r3, #1
    15d4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    15d6:	2200      	movs	r2, #0
    15d8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    15da:	7e32      	ldrb	r2, [r6, #24]
    15dc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    15de:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    15e0:	7d30      	ldrb	r0, [r6, #20]
    15e2:	4b2f      	ldr	r3, [pc, #188]	; (16a0 <tc_init+0x23c>)
    15e4:	4798      	blx	r3
    15e6:	e779      	b.n	14dc <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15e8:	a902      	add	r1, sp, #8
    15ea:	2301      	movs	r3, #1
    15ec:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    15ee:	2200      	movs	r2, #0
    15f0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    15f2:	3224      	adds	r2, #36	; 0x24
    15f4:	18b2      	adds	r2, r6, r2
    15f6:	7812      	ldrb	r2, [r2, #0]
    15f8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    15fa:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    15fc:	331f      	adds	r3, #31
    15fe:	18f3      	adds	r3, r6, r3
    1600:	7818      	ldrb	r0, [r3, #0]
    1602:	4b27      	ldr	r3, [pc, #156]	; (16a0 <tc_init+0x23c>)
    1604:	4798      	blx	r3
    1606:	e76d      	b.n	14e4 <tc_init+0x80>
    1608:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    160a:	1c7a      	adds	r2, r7, #1
    160c:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    160e:	ab03      	add	r3, sp, #12
    1610:	5ad3      	ldrh	r3, [r2, r3]
    1612:	4303      	orrs	r3, r0
    1614:	620b      	str	r3, [r1, #32]
    1616:	e770      	b.n	14fa <tc_init+0x96>
    1618:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    161a:	b25b      	sxtb	r3, r3
    161c:	2b00      	cmp	r3, #0
    161e:	dbfb      	blt.n	1618 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1620:	2328      	movs	r3, #40	; 0x28
    1622:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1624:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1626:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1628:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    162a:	b25b      	sxtb	r3, r3
    162c:	2b00      	cmp	r3, #0
    162e:	dbfb      	blt.n	1628 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1630:	2329      	movs	r3, #41	; 0x29
    1632:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1634:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1636:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1638:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    163a:	b25b      	sxtb	r3, r3
    163c:	2b00      	cmp	r3, #0
    163e:	dbfb      	blt.n	1638 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1640:	232a      	movs	r3, #42	; 0x2a
    1642:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1644:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1646:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1648:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    164a:	b25b      	sxtb	r3, r3
    164c:	2b00      	cmp	r3, #0
    164e:	dbfb      	blt.n	1648 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1650:	232b      	movs	r3, #43	; 0x2b
    1652:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1654:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1656:	2000      	movs	r0, #0
    1658:	e730      	b.n	14bc <tc_init+0x58>
    165a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    165c:	b25b      	sxtb	r3, r3
    165e:	2b00      	cmp	r3, #0
    1660:	dbfb      	blt.n	165a <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1662:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1664:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1666:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1668:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    166a:	b25b      	sxtb	r3, r3
    166c:	2b00      	cmp	r3, #0
    166e:	dbfb      	blt.n	1668 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1670:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1672:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1674:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1676:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1678:	b25b      	sxtb	r3, r3
    167a:	2b00      	cmp	r3, #0
    167c:	dbfb      	blt.n	1676 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    167e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1680:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1682:	2000      	movs	r0, #0
    1684:	e71a      	b.n	14bc <tc_init+0x58>
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	00001429 	.word	0x00001429
    168c:	00002884 	.word	0x00002884
    1690:	20000184 	.word	0x20000184
    1694:	40000400 	.word	0x40000400
    1698:	000011e9 	.word	0x000011e9
    169c:	0000115d 	.word	0x0000115d
    16a0:	000012e1 	.word	0x000012e1

000016a4 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    16a4:	6802      	ldr	r2, [r0, #0]
    16a6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    16a8:	b25b      	sxtb	r3, r3
    16aa:	2b00      	cmp	r3, #0
    16ac:	dbfb      	blt.n	16a6 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    16ae:	7903      	ldrb	r3, [r0, #4]
    16b0:	2b04      	cmp	r3, #4
    16b2:	d005      	beq.n	16c0 <tc_set_count_value+0x1c>
    16b4:	2b08      	cmp	r3, #8
    16b6:	d00b      	beq.n	16d0 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    16b8:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    16ba:	2b00      	cmp	r3, #0
    16bc:	d004      	beq.n	16c8 <tc_set_count_value+0x24>
	}
}
    16be:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    16c0:	b2c9      	uxtb	r1, r1
    16c2:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    16c4:	2000      	movs	r0, #0
    16c6:	e7fa      	b.n	16be <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    16c8:	b289      	uxth	r1, r1
    16ca:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    16cc:	2000      	movs	r0, #0
    16ce:	e7f6      	b.n	16be <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    16d0:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    16d2:	2000      	movs	r0, #0
    16d4:	e7f3      	b.n	16be <tc_set_count_value+0x1a>

000016d6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    16d6:	e7fe      	b.n	16d6 <Dummy_Handler>

000016d8 <Reset_Handler>:
{
    16d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    16da:	4a2a      	ldr	r2, [pc, #168]	; (1784 <Reset_Handler+0xac>)
    16dc:	4b2a      	ldr	r3, [pc, #168]	; (1788 <Reset_Handler+0xb0>)
    16de:	429a      	cmp	r2, r3
    16e0:	d011      	beq.n	1706 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    16e2:	001a      	movs	r2, r3
    16e4:	4b29      	ldr	r3, [pc, #164]	; (178c <Reset_Handler+0xb4>)
    16e6:	429a      	cmp	r2, r3
    16e8:	d20d      	bcs.n	1706 <Reset_Handler+0x2e>
    16ea:	4a29      	ldr	r2, [pc, #164]	; (1790 <Reset_Handler+0xb8>)
    16ec:	3303      	adds	r3, #3
    16ee:	1a9b      	subs	r3, r3, r2
    16f0:	089b      	lsrs	r3, r3, #2
    16f2:	3301      	adds	r3, #1
    16f4:	009b      	lsls	r3, r3, #2
    16f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    16f8:	4823      	ldr	r0, [pc, #140]	; (1788 <Reset_Handler+0xb0>)
    16fa:	4922      	ldr	r1, [pc, #136]	; (1784 <Reset_Handler+0xac>)
    16fc:	588c      	ldr	r4, [r1, r2]
    16fe:	5084      	str	r4, [r0, r2]
    1700:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1702:	429a      	cmp	r2, r3
    1704:	d1fa      	bne.n	16fc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1706:	4a23      	ldr	r2, [pc, #140]	; (1794 <Reset_Handler+0xbc>)
    1708:	4b23      	ldr	r3, [pc, #140]	; (1798 <Reset_Handler+0xc0>)
    170a:	429a      	cmp	r2, r3
    170c:	d20a      	bcs.n	1724 <Reset_Handler+0x4c>
    170e:	43d3      	mvns	r3, r2
    1710:	4921      	ldr	r1, [pc, #132]	; (1798 <Reset_Handler+0xc0>)
    1712:	185b      	adds	r3, r3, r1
    1714:	2103      	movs	r1, #3
    1716:	438b      	bics	r3, r1
    1718:	3304      	adds	r3, #4
    171a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    171c:	2100      	movs	r1, #0
    171e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1720:	4293      	cmp	r3, r2
    1722:	d1fc      	bne.n	171e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1724:	4a1d      	ldr	r2, [pc, #116]	; (179c <Reset_Handler+0xc4>)
    1726:	21ff      	movs	r1, #255	; 0xff
    1728:	4b1d      	ldr	r3, [pc, #116]	; (17a0 <Reset_Handler+0xc8>)
    172a:	438b      	bics	r3, r1
    172c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    172e:	39fd      	subs	r1, #253	; 0xfd
    1730:	2390      	movs	r3, #144	; 0x90
    1732:	005b      	lsls	r3, r3, #1
    1734:	4a1b      	ldr	r2, [pc, #108]	; (17a4 <Reset_Handler+0xcc>)
    1736:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1738:	4a1b      	ldr	r2, [pc, #108]	; (17a8 <Reset_Handler+0xd0>)
    173a:	78d3      	ldrb	r3, [r2, #3]
    173c:	2503      	movs	r5, #3
    173e:	43ab      	bics	r3, r5
    1740:	2402      	movs	r4, #2
    1742:	4323      	orrs	r3, r4
    1744:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1746:	78d3      	ldrb	r3, [r2, #3]
    1748:	270c      	movs	r7, #12
    174a:	43bb      	bics	r3, r7
    174c:	2608      	movs	r6, #8
    174e:	4333      	orrs	r3, r6
    1750:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1752:	4b16      	ldr	r3, [pc, #88]	; (17ac <Reset_Handler+0xd4>)
    1754:	7b98      	ldrb	r0, [r3, #14]
    1756:	2230      	movs	r2, #48	; 0x30
    1758:	4390      	bics	r0, r2
    175a:	2220      	movs	r2, #32
    175c:	4310      	orrs	r0, r2
    175e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1760:	7b99      	ldrb	r1, [r3, #14]
    1762:	43b9      	bics	r1, r7
    1764:	4331      	orrs	r1, r6
    1766:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1768:	7b9a      	ldrb	r2, [r3, #14]
    176a:	43aa      	bics	r2, r5
    176c:	4322      	orrs	r2, r4
    176e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1770:	4a0f      	ldr	r2, [pc, #60]	; (17b0 <Reset_Handler+0xd8>)
    1772:	6853      	ldr	r3, [r2, #4]
    1774:	2180      	movs	r1, #128	; 0x80
    1776:	430b      	orrs	r3, r1
    1778:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    177a:	4b0e      	ldr	r3, [pc, #56]	; (17b4 <Reset_Handler+0xdc>)
    177c:	4798      	blx	r3
        main();
    177e:	4b0e      	ldr	r3, [pc, #56]	; (17b8 <Reset_Handler+0xe0>)
    1780:	4798      	blx	r3
    1782:	e7fe      	b.n	1782 <Reset_Handler+0xaa>
    1784:	000029fc 	.word	0x000029fc
    1788:	20000000 	.word	0x20000000
    178c:	20000070 	.word	0x20000070
    1790:	20000004 	.word	0x20000004
    1794:	20000070 	.word	0x20000070
    1798:	200001a8 	.word	0x200001a8
    179c:	e000ed00 	.word	0xe000ed00
    17a0:	00000000 	.word	0x00000000
    17a4:	41007000 	.word	0x41007000
    17a8:	41005000 	.word	0x41005000
    17ac:	41004800 	.word	0x41004800
    17b0:	41004000 	.word	0x41004000
    17b4:	00001cf9 	.word	0x00001cf9
    17b8:	00001939 	.word	0x00001939

000017bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	46c6      	mov	lr, r8
    17c0:	b500      	push	{lr}
    17c2:	000c      	movs	r4, r1
    17c4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    17c6:	2800      	cmp	r0, #0
    17c8:	d10f      	bne.n	17ea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    17ca:	2a00      	cmp	r2, #0
    17cc:	dd11      	ble.n	17f2 <_read+0x36>
    17ce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    17d0:	4e09      	ldr	r6, [pc, #36]	; (17f8 <_read+0x3c>)
    17d2:	4d0a      	ldr	r5, [pc, #40]	; (17fc <_read+0x40>)
    17d4:	6830      	ldr	r0, [r6, #0]
    17d6:	0021      	movs	r1, r4
    17d8:	682b      	ldr	r3, [r5, #0]
    17da:	4798      	blx	r3
		ptr++;
    17dc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    17de:	42bc      	cmp	r4, r7
    17e0:	d1f8      	bne.n	17d4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    17e2:	4640      	mov	r0, r8
    17e4:	bc04      	pop	{r2}
    17e6:	4690      	mov	r8, r2
    17e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    17ea:	2301      	movs	r3, #1
    17ec:	425b      	negs	r3, r3
    17ee:	4698      	mov	r8, r3
    17f0:	e7f7      	b.n	17e2 <_read+0x26>
	for (; len > 0; --len) {
    17f2:	4680      	mov	r8, r0
    17f4:	e7f5      	b.n	17e2 <_read+0x26>
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	200001a0 	.word	0x200001a0
    17fc:	20000198 	.word	0x20000198

00001800 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
    1802:	46c6      	mov	lr, r8
    1804:	b500      	push	{lr}
    1806:	000e      	movs	r6, r1
    1808:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    180a:	3801      	subs	r0, #1
    180c:	2802      	cmp	r0, #2
    180e:	d810      	bhi.n	1832 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1810:	2a00      	cmp	r2, #0
    1812:	d011      	beq.n	1838 <_write+0x38>
    1814:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1816:	4b0c      	ldr	r3, [pc, #48]	; (1848 <_write+0x48>)
    1818:	4698      	mov	r8, r3
    181a:	4f0c      	ldr	r7, [pc, #48]	; (184c <_write+0x4c>)
    181c:	4643      	mov	r3, r8
    181e:	6818      	ldr	r0, [r3, #0]
    1820:	5d31      	ldrb	r1, [r6, r4]
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	4798      	blx	r3
    1826:	2800      	cmp	r0, #0
    1828:	db08      	blt.n	183c <_write+0x3c>
			return -1;
		}
		++nChars;
    182a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    182c:	42a5      	cmp	r5, r4
    182e:	d1f5      	bne.n	181c <_write+0x1c>
    1830:	e006      	b.n	1840 <_write+0x40>
		return -1;
    1832:	2401      	movs	r4, #1
    1834:	4264      	negs	r4, r4
    1836:	e003      	b.n	1840 <_write+0x40>
	for (; len != 0; --len) {
    1838:	0014      	movs	r4, r2
    183a:	e001      	b.n	1840 <_write+0x40>
			return -1;
    183c:	2401      	movs	r4, #1
    183e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1840:	0020      	movs	r0, r4
    1842:	bc04      	pop	{r2}
    1844:	4690      	mov	r8, r2
    1846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1848:	200001a0 	.word	0x200001a0
    184c:	2000019c 	.word	0x2000019c

00001850 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1850:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1852:	4a06      	ldr	r2, [pc, #24]	; (186c <_sbrk+0x1c>)
    1854:	6812      	ldr	r2, [r2, #0]
    1856:	2a00      	cmp	r2, #0
    1858:	d004      	beq.n	1864 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    185a:	4a04      	ldr	r2, [pc, #16]	; (186c <_sbrk+0x1c>)
    185c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    185e:	18c3      	adds	r3, r0, r3
    1860:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1862:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1864:	4902      	ldr	r1, [pc, #8]	; (1870 <_sbrk+0x20>)
    1866:	4a01      	ldr	r2, [pc, #4]	; (186c <_sbrk+0x1c>)
    1868:	6011      	str	r1, [r2, #0]
    186a:	e7f6      	b.n	185a <_sbrk+0xa>
    186c:	200000c8 	.word	0x200000c8
    1870:	200021a8 	.word	0x200021a8

00001874 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1874:	2001      	movs	r0, #1
    1876:	4240      	negs	r0, r0
    1878:	4770      	bx	lr

0000187a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    187a:	2380      	movs	r3, #128	; 0x80
    187c:	019b      	lsls	r3, r3, #6
    187e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1880:	2000      	movs	r0, #0
    1882:	4770      	bx	lr

00001884 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1884:	2001      	movs	r0, #1
    1886:	4770      	bx	lr

00001888 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1888:	2000      	movs	r0, #0
    188a:	4770      	bx	lr

0000188c <extint_callback>:
	return (port_base->IN.reg & pin_mask);
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <extint_callback+0x1c>)
    188e:	6a1b      	ldr	r3, [r3, #32]

/* Updates the board LED to the current button state. */
static void update_led_state(void)
{
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	if (pin_state) {
    1890:	041b      	lsls	r3, r3, #16
    1892:	d404      	bmi.n	189e <extint_callback+0x12>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1894:	2280      	movs	r2, #128	; 0x80
    1896:	05d2      	lsls	r2, r2, #23
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <extint_callback+0x20>)
    189a:	615a      	str	r2, [r3, #20]
 *  detection occurs.
 */
static void extint_callback(void)
{
	update_led_state();
}
    189c:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    189e:	2280      	movs	r2, #128	; 0x80
    18a0:	05d2      	lsls	r2, r2, #23
    18a2:	4b02      	ldr	r3, [pc, #8]	; (18ac <extint_callback+0x20>)
    18a4:	619a      	str	r2, [r3, #24]
    18a6:	e7f9      	b.n	189c <extint_callback+0x10>
    18a8:	41004400 	.word	0x41004400
    18ac:	41004480 	.word	0x41004480

000018b0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    18b0:	b570      	push	{r4, r5, r6, lr}
    18b2:	b082      	sub	sp, #8
    18b4:	0005      	movs	r5, r0
    18b6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    18b8:	2200      	movs	r2, #0
    18ba:	466b      	mov	r3, sp
    18bc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    18be:	4c06      	ldr	r4, [pc, #24]	; (18d8 <usart_serial_getchar+0x28>)
    18c0:	466b      	mov	r3, sp
    18c2:	1d99      	adds	r1, r3, #6
    18c4:	0028      	movs	r0, r5
    18c6:	47a0      	blx	r4
    18c8:	2800      	cmp	r0, #0
    18ca:	d1f9      	bne.n	18c0 <usart_serial_getchar+0x10>

	*c = temp;
    18cc:	466b      	mov	r3, sp
    18ce:	3306      	adds	r3, #6
    18d0:	881b      	ldrh	r3, [r3, #0]
    18d2:	7033      	strb	r3, [r6, #0]
}
    18d4:	b002      	add	sp, #8
    18d6:	bd70      	pop	{r4, r5, r6, pc}
    18d8:	00000ba3 	.word	0x00000ba3

000018dc <usart_serial_putchar>:
{
    18dc:	b570      	push	{r4, r5, r6, lr}
    18de:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    18e0:	b28c      	uxth	r4, r1
    18e2:	4e03      	ldr	r6, [pc, #12]	; (18f0 <usart_serial_putchar+0x14>)
    18e4:	0021      	movs	r1, r4
    18e6:	0028      	movs	r0, r5
    18e8:	47b0      	blx	r6
    18ea:	2800      	cmp	r0, #0
    18ec:	d1fa      	bne.n	18e4 <usart_serial_putchar+0x8>
}
    18ee:	bd70      	pop	{r4, r5, r6, pc}
    18f0:	00000b7d 	.word	0x00000b7d

000018f4 <tc_callback_to_counter>:

/** TC Callback function.
 */
static void tc_callback_to_counter(
		struct tc_module *const module_inst)
{
    18f4:	b510      	push	{r4, lr}
    18f6:	0004      	movs	r4, r0
	static uint32_t count = 0;
	count ++;
    18f8:	4b09      	ldr	r3, [pc, #36]	; (1920 <tc_callback_to_counter+0x2c>)
    18fa:	681a      	ldr	r2, [r3, #0]
    18fc:	1c50      	adds	r0, r2, #1
    18fe:	6018      	str	r0, [r3, #0]
	if(count%800 == 0){
    1900:	21c8      	movs	r1, #200	; 0xc8
    1902:	0089      	lsls	r1, r1, #2
    1904:	4b07      	ldr	r3, [pc, #28]	; (1924 <tc_callback_to_counter+0x30>)
    1906:	4798      	blx	r3
    1908:	2900      	cmp	r1, #0
    190a:	d004      	beq.n	1916 <tc_callback_to_counter+0x22>
		printf("The output is triggered by TC counter\r\n");
	}

	tc_set_count_value(module_inst,TC_COUNT_VALUE);
    190c:	4906      	ldr	r1, [pc, #24]	; (1928 <tc_callback_to_counter+0x34>)
    190e:	0020      	movs	r0, r4
    1910:	4b06      	ldr	r3, [pc, #24]	; (192c <tc_callback_to_counter+0x38>)
    1912:	4798      	blx	r3
}
    1914:	bd10      	pop	{r4, pc}
		printf("The output is triggered by TC counter\r\n");
    1916:	4806      	ldr	r0, [pc, #24]	; (1930 <tc_callback_to_counter+0x3c>)
    1918:	4b06      	ldr	r3, [pc, #24]	; (1934 <tc_callback_to_counter+0x40>)
    191a:	4798      	blx	r3
    191c:	e7f6      	b.n	190c <tc_callback_to_counter+0x18>
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	20000100 	.word	0x20000100
    1924:	00001c99 	.word	0x00001c99
    1928:	0000d8ef 	.word	0x0000d8ef
    192c:	000016a5 	.word	0x000016a5
    1930:	00002948 	.word	0x00002948
    1934:	00001e11 	.word	0x00001e11

00001938 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
    1938:	b5f0      	push	{r4, r5, r6, r7, lr}
    193a:	b093      	sub	sp, #76	; 0x4c
	struct port_config pin;

	system_init();
    193c:	4b70      	ldr	r3, [pc, #448]	; (1b00 <main+0x1c8>)
    193e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1940:	aa01      	add	r2, sp, #4
    1942:	2380      	movs	r3, #128	; 0x80
    1944:	05db      	lsls	r3, r3, #23
    1946:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1948:	2300      	movs	r3, #0
    194a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    194c:	21ff      	movs	r1, #255	; 0xff
    194e:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1950:	2100      	movs	r1, #0
    1952:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1954:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1956:	2401      	movs	r4, #1
    1958:	2024      	movs	r0, #36	; 0x24
    195a:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    195c:	3001      	adds	r0, #1
    195e:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    1960:	3001      	adds	r0, #1
    1962:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    1964:	3001      	adds	r0, #1
    1966:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    1968:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    196a:	3005      	adds	r0, #5
    196c:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    196e:	3001      	adds	r0, #1
    1970:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1972:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1974:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1976:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1978:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    197a:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    197c:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    197e:	2313      	movs	r3, #19
    1980:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1982:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    1984:	2380      	movs	r3, #128	; 0x80
    1986:	035b      	lsls	r3, r3, #13
    1988:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    198a:	4b5e      	ldr	r3, [pc, #376]	; (1b04 <main+0x1cc>)
    198c:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    198e:	4b5e      	ldr	r3, [pc, #376]	; (1b08 <main+0x1d0>)
    1990:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    1992:	2301      	movs	r3, #1
    1994:	425b      	negs	r3, r3
    1996:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    1998:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    199a:	2396      	movs	r3, #150	; 0x96
    199c:	021b      	lsls	r3, r3, #8
    199e:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    19a0:	4d5a      	ldr	r5, [pc, #360]	; (1b0c <main+0x1d4>)
    19a2:	4b5b      	ldr	r3, [pc, #364]	; (1b10 <main+0x1d8>)
    19a4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    19a6:	495b      	ldr	r1, [pc, #364]	; (1b14 <main+0x1dc>)
    19a8:	4b5b      	ldr	r3, [pc, #364]	; (1b18 <main+0x1e0>)
    19aa:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    19ac:	495b      	ldr	r1, [pc, #364]	; (1b1c <main+0x1e4>)
    19ae:	4b5c      	ldr	r3, [pc, #368]	; (1b20 <main+0x1e8>)
    19b0:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    19b2:	495c      	ldr	r1, [pc, #368]	; (1b24 <main+0x1ec>)
    19b4:	0028      	movs	r0, r5
    19b6:	4b5c      	ldr	r3, [pc, #368]	; (1b28 <main+0x1f0>)
    19b8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    19ba:	4f5c      	ldr	r7, [pc, #368]	; (1b2c <main+0x1f4>)
    19bc:	683b      	ldr	r3, [r7, #0]
    19be:	6898      	ldr	r0, [r3, #8]
    19c0:	2100      	movs	r1, #0
    19c2:	4e5b      	ldr	r6, [pc, #364]	; (1b30 <main+0x1f8>)
    19c4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    19c6:	683b      	ldr	r3, [r7, #0]
    19c8:	6858      	ldr	r0, [r3, #4]
    19ca:	2100      	movs	r1, #0
    19cc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19ce:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    19d0:	0030      	movs	r0, r6
    19d2:	4b58      	ldr	r3, [pc, #352]	; (1b34 <main+0x1fc>)
    19d4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19d6:	231f      	movs	r3, #31
    19d8:	4018      	ands	r0, r3
    19da:	4084      	lsls	r4, r0
    19dc:	4b56      	ldr	r3, [pc, #344]	; (1b38 <main+0x200>)
    19de:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    19e0:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    19e2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    19e4:	2a00      	cmp	r2, #0
    19e6:	d1fc      	bne.n	19e2 <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19e8:	6833      	ldr	r3, [r6, #0]
    19ea:	3202      	adds	r2, #2
    19ec:	4313      	orrs	r3, r2
    19ee:	6033      	str	r3, [r6, #0]
	extint_chan_get_config_defaults(&eint_chan_conf);
    19f0:	ac01      	add	r4, sp, #4
    19f2:	0020      	movs	r0, r4
    19f4:	4b51      	ldr	r3, [pc, #324]	; (1b3c <main+0x204>)
    19f6:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    19f8:	230f      	movs	r3, #15
    19fa:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    19fc:	2500      	movs	r5, #0
    19fe:	6065      	str	r5, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    1a00:	3b0c      	subs	r3, #12
    1a02:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    1a04:	3b02      	subs	r3, #2
    1a06:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    1a08:	0021      	movs	r1, r4
    1a0a:	200f      	movs	r0, #15
    1a0c:	4b4c      	ldr	r3, [pc, #304]	; (1b40 <main+0x208>)
    1a0e:	4798      	blx	r3
	extint_register_callback(extint_callback,
    1a10:	2200      	movs	r2, #0
    1a12:	210f      	movs	r1, #15
    1a14:	484b      	ldr	r0, [pc, #300]	; (1b44 <main+0x20c>)
    1a16:	4b4c      	ldr	r3, [pc, #304]	; (1b48 <main+0x210>)
    1a18:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    1a1a:	2100      	movs	r1, #0
    1a1c:	200f      	movs	r0, #15
    1a1e:	4b4b      	ldr	r3, [pc, #300]	; (1b4c <main+0x214>)
    1a20:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1a22:	7025      	strb	r5, [r4, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1a24:	70a5      	strb	r5, [r4, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1a26:	2300      	movs	r3, #0
    1a28:	80a5      	strh	r5, [r4, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1a2a:	71a3      	strb	r3, [r4, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1a2c:	8125      	strh	r5, [r4, #8]
	config->run_in_standby             = false;
    1a2e:	7063      	strb	r3, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1a30:	72a3      	strb	r3, [r4, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1a32:	72e3      	strb	r3, [r4, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a34:	7323      	strb	r3, [r4, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1a36:	73a3      	strb	r3, [r4, #14]
	config->oneshot                    = false;
    1a38:	7363      	strb	r3, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1a3a:	7423      	strb	r3, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1a3c:	6165      	str	r5, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1a3e:	61a5      	str	r5, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1a40:	7723      	strb	r3, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1a42:	6225      	str	r5, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1a44:	6265      	str	r5, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1a46:	8565      	strh	r5, [r4, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1a48:	85a5      	strh	r5, [r4, #44]	; 0x2c
	config_tc.counter_16_bit.value = TC_COUNT_VALUE;
    1a4a:	4b41      	ldr	r3, [pc, #260]	; (1b50 <main+0x218>)
    1a4c:	8523      	strh	r3, [r4, #40]	; 0x28
	tc_init(&tc_instance, CONF_TC_INSTANCE, &config_tc);
    1a4e:	4d41      	ldr	r5, [pc, #260]	; (1b54 <main+0x21c>)
    1a50:	0022      	movs	r2, r4
    1a52:	4941      	ldr	r1, [pc, #260]	; (1b58 <main+0x220>)
    1a54:	0028      	movs	r0, r5
    1a56:	4b41      	ldr	r3, [pc, #260]	; (1b5c <main+0x224>)
    1a58:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a5a:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a5c:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    1a5e:	b252      	sxtb	r2, r2
    1a60:	2a00      	cmp	r2, #0
    1a62:	dbfb      	blt.n	1a5c <main+0x124>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1a64:	881a      	ldrh	r2, [r3, #0]
    1a66:	2102      	movs	r1, #2
    1a68:	430a      	orrs	r2, r1
    1a6a:	801a      	strh	r2, [r3, #0]
	tc_register_callback(
    1a6c:	4d39      	ldr	r5, [pc, #228]	; (1b54 <main+0x21c>)
    1a6e:	2200      	movs	r2, #0
    1a70:	493b      	ldr	r1, [pc, #236]	; (1b60 <main+0x228>)
    1a72:	0028      	movs	r0, r5
    1a74:	4b3b      	ldr	r3, [pc, #236]	; (1b64 <main+0x22c>)
    1a76:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1a78:	6828      	ldr	r0, [r5, #0]
    1a7a:	4b3b      	ldr	r3, [pc, #236]	; (1b68 <main+0x230>)
    1a7c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1a7e:	4b3b      	ldr	r3, [pc, #236]	; (1b6c <main+0x234>)
    1a80:	5c1a      	ldrb	r2, [r3, r0]
    1a82:	231f      	movs	r3, #31
    1a84:	4013      	ands	r3, r2
    1a86:	2401      	movs	r4, #1
    1a88:	0022      	movs	r2, r4
    1a8a:	409a      	lsls	r2, r3
    1a8c:	4b2a      	ldr	r3, [pc, #168]	; (1b38 <main+0x200>)
    1a8e:	601a      	str	r2, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1a90:	7e6b      	ldrb	r3, [r5, #25]
    1a92:	2201      	movs	r2, #1
    1a94:	4313      	orrs	r3, r2
    1a96:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1a98:	682b      	ldr	r3, [r5, #0]
    1a9a:	735c      	strb	r4, [r3, #13]

	/*Configures TC callback*/
	configure_tc_callbacks();

	/*Initialize the delay driver*/
	delay_init();
    1a9c:	4b34      	ldr	r3, [pc, #208]	; (1b70 <main+0x238>)
    1a9e:	4798      	blx	r3


	/* Output example information */
	puts(STRING_HEADER);
    1aa0:	4834      	ldr	r0, [pc, #208]	; (1b74 <main+0x23c>)
    1aa2:	4b35      	ldr	r3, [pc, #212]	; (1b78 <main+0x240>)
    1aa4:	4798      	blx	r3
	cpu_irq_enable();
    1aa6:	4b35      	ldr	r3, [pc, #212]	; (1b7c <main+0x244>)
    1aa8:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1aaa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1aae:	b662      	cpsie	i
	config->input_pull = PORT_PIN_PULL_UP;
    1ab0:	a911      	add	r1, sp, #68	; 0x44
    1ab2:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    1ab4:	2300      	movs	r3, #0
    1ab6:	708b      	strb	r3, [r1, #2]
	system_interrupt_enable_global();


    /*Configures PORT for LED0*/
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1ab8:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    1aba:	203e      	movs	r0, #62	; 0x3e
    1abc:	4b30      	ldr	r3, [pc, #192]	; (1b80 <main+0x248>)
    1abe:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1ac0:	4c30      	ldr	r4, [pc, #192]	; (1b84 <main+0x24c>)
    1ac2:	2580      	movs	r5, #128	; 0x80
    1ac4:	05ed      	lsls	r5, r5, #23
    1ac6:	61a5      	str	r5, [r4, #24]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1ac8:	61e5      	str	r5, [r4, #28]

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	for (int i = 0; i < 3; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_s(1);
    1aca:	27fa      	movs	r7, #250	; 0xfa
    1acc:	00bf      	lsls	r7, r7, #2
    1ace:	0038      	movs	r0, r7
    1ad0:	4e2d      	ldr	r6, [pc, #180]	; (1b88 <main+0x250>)
    1ad2:	47b0      	blx	r6
    1ad4:	61e5      	str	r5, [r4, #28]
    1ad6:	0038      	movs	r0, r7
    1ad8:	47b0      	blx	r6
    1ada:	61e5      	str	r5, [r4, #28]
    1adc:	0038      	movs	r0, r7
    1ade:	47b0      	blx	r6
    1ae0:	2414      	movs	r4, #20
    1ae2:	4f28      	ldr	r7, [pc, #160]	; (1b84 <main+0x24c>)
    1ae4:	002e      	movs	r6, r5
	}

	for (int i = 0; i < 20; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_ms(100);
    1ae6:	4d28      	ldr	r5, [pc, #160]	; (1b88 <main+0x250>)
    1ae8:	61fe      	str	r6, [r7, #28]
    1aea:	2064      	movs	r0, #100	; 0x64
    1aec:	47a8      	blx	r5
    1aee:	3c01      	subs	r4, #1
	for (int i = 0; i < 20; i++) {
    1af0:	2c00      	cmp	r4, #0
    1af2:	d1f9      	bne.n	1ae8 <main+0x1b0>
		port_base->OUTSET.reg = pin_mask;
    1af4:	2280      	movs	r2, #128	; 0x80
    1af6:	05d2      	lsls	r2, r2, #23
    1af8:	4b22      	ldr	r3, [pc, #136]	; (1b84 <main+0x24c>)
    1afa:	619a      	str	r2, [r3, #24]
    1afc:	e7fe      	b.n	1afc <main+0x1c4>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00001315 	.word	0x00001315
    1b04:	00160002 	.word	0x00160002
    1b08:	00170002 	.word	0x00170002
    1b0c:	200000cc 	.word	0x200000cc
    1b10:	200001a0 	.word	0x200001a0
    1b14:	000018dd 	.word	0x000018dd
    1b18:	2000019c 	.word	0x2000019c
    1b1c:	000018b1 	.word	0x000018b1
    1b20:	20000198 	.word	0x20000198
    1b24:	42001400 	.word	0x42001400
    1b28:	00000841 	.word	0x00000841
    1b2c:	2000000c 	.word	0x2000000c
    1b30:	00001e25 	.word	0x00001e25
    1b34:	000007b1 	.word	0x000007b1
    1b38:	e000e100 	.word	0xe000e100
    1b3c:	0000034d 	.word	0x0000034d
    1b40:	00000361 	.word	0x00000361
    1b44:	0000188d 	.word	0x0000188d
    1b48:	00000229 	.word	0x00000229
    1b4c:	00000255 	.word	0x00000255
    1b50:	ffffd8ef 	.word	0xffffd8ef
    1b54:	20000104 	.word	0x20000104
    1b58:	42002c00 	.word	0x42002c00
    1b5c:	00001465 	.word	0x00001465
    1b60:	000018f5 	.word	0x000018f5
    1b64:	00001341 	.word	0x00001341
    1b68:	00001429 	.word	0x00001429
    1b6c:	00002970 	.word	0x00002970
    1b70:	00000115 	.word	0x00000115
    1b74:	000028a4 	.word	0x000028a4
    1b78:	00001e11 	.word	0x00001e11
    1b7c:	20000008 	.word	0x20000008
    1b80:	000003d9 	.word	0x000003d9
    1b84:	41004480 	.word	0x41004480
    1b88:	00000155 	.word	0x00000155

00001b8c <__udivsi3>:
    1b8c:	2200      	movs	r2, #0
    1b8e:	0843      	lsrs	r3, r0, #1
    1b90:	428b      	cmp	r3, r1
    1b92:	d374      	bcc.n	1c7e <__udivsi3+0xf2>
    1b94:	0903      	lsrs	r3, r0, #4
    1b96:	428b      	cmp	r3, r1
    1b98:	d35f      	bcc.n	1c5a <__udivsi3+0xce>
    1b9a:	0a03      	lsrs	r3, r0, #8
    1b9c:	428b      	cmp	r3, r1
    1b9e:	d344      	bcc.n	1c2a <__udivsi3+0x9e>
    1ba0:	0b03      	lsrs	r3, r0, #12
    1ba2:	428b      	cmp	r3, r1
    1ba4:	d328      	bcc.n	1bf8 <__udivsi3+0x6c>
    1ba6:	0c03      	lsrs	r3, r0, #16
    1ba8:	428b      	cmp	r3, r1
    1baa:	d30d      	bcc.n	1bc8 <__udivsi3+0x3c>
    1bac:	22ff      	movs	r2, #255	; 0xff
    1bae:	0209      	lsls	r1, r1, #8
    1bb0:	ba12      	rev	r2, r2
    1bb2:	0c03      	lsrs	r3, r0, #16
    1bb4:	428b      	cmp	r3, r1
    1bb6:	d302      	bcc.n	1bbe <__udivsi3+0x32>
    1bb8:	1212      	asrs	r2, r2, #8
    1bba:	0209      	lsls	r1, r1, #8
    1bbc:	d065      	beq.n	1c8a <__udivsi3+0xfe>
    1bbe:	0b03      	lsrs	r3, r0, #12
    1bc0:	428b      	cmp	r3, r1
    1bc2:	d319      	bcc.n	1bf8 <__udivsi3+0x6c>
    1bc4:	e000      	b.n	1bc8 <__udivsi3+0x3c>
    1bc6:	0a09      	lsrs	r1, r1, #8
    1bc8:	0bc3      	lsrs	r3, r0, #15
    1bca:	428b      	cmp	r3, r1
    1bcc:	d301      	bcc.n	1bd2 <__udivsi3+0x46>
    1bce:	03cb      	lsls	r3, r1, #15
    1bd0:	1ac0      	subs	r0, r0, r3
    1bd2:	4152      	adcs	r2, r2
    1bd4:	0b83      	lsrs	r3, r0, #14
    1bd6:	428b      	cmp	r3, r1
    1bd8:	d301      	bcc.n	1bde <__udivsi3+0x52>
    1bda:	038b      	lsls	r3, r1, #14
    1bdc:	1ac0      	subs	r0, r0, r3
    1bde:	4152      	adcs	r2, r2
    1be0:	0b43      	lsrs	r3, r0, #13
    1be2:	428b      	cmp	r3, r1
    1be4:	d301      	bcc.n	1bea <__udivsi3+0x5e>
    1be6:	034b      	lsls	r3, r1, #13
    1be8:	1ac0      	subs	r0, r0, r3
    1bea:	4152      	adcs	r2, r2
    1bec:	0b03      	lsrs	r3, r0, #12
    1bee:	428b      	cmp	r3, r1
    1bf0:	d301      	bcc.n	1bf6 <__udivsi3+0x6a>
    1bf2:	030b      	lsls	r3, r1, #12
    1bf4:	1ac0      	subs	r0, r0, r3
    1bf6:	4152      	adcs	r2, r2
    1bf8:	0ac3      	lsrs	r3, r0, #11
    1bfa:	428b      	cmp	r3, r1
    1bfc:	d301      	bcc.n	1c02 <__udivsi3+0x76>
    1bfe:	02cb      	lsls	r3, r1, #11
    1c00:	1ac0      	subs	r0, r0, r3
    1c02:	4152      	adcs	r2, r2
    1c04:	0a83      	lsrs	r3, r0, #10
    1c06:	428b      	cmp	r3, r1
    1c08:	d301      	bcc.n	1c0e <__udivsi3+0x82>
    1c0a:	028b      	lsls	r3, r1, #10
    1c0c:	1ac0      	subs	r0, r0, r3
    1c0e:	4152      	adcs	r2, r2
    1c10:	0a43      	lsrs	r3, r0, #9
    1c12:	428b      	cmp	r3, r1
    1c14:	d301      	bcc.n	1c1a <__udivsi3+0x8e>
    1c16:	024b      	lsls	r3, r1, #9
    1c18:	1ac0      	subs	r0, r0, r3
    1c1a:	4152      	adcs	r2, r2
    1c1c:	0a03      	lsrs	r3, r0, #8
    1c1e:	428b      	cmp	r3, r1
    1c20:	d301      	bcc.n	1c26 <__udivsi3+0x9a>
    1c22:	020b      	lsls	r3, r1, #8
    1c24:	1ac0      	subs	r0, r0, r3
    1c26:	4152      	adcs	r2, r2
    1c28:	d2cd      	bcs.n	1bc6 <__udivsi3+0x3a>
    1c2a:	09c3      	lsrs	r3, r0, #7
    1c2c:	428b      	cmp	r3, r1
    1c2e:	d301      	bcc.n	1c34 <__udivsi3+0xa8>
    1c30:	01cb      	lsls	r3, r1, #7
    1c32:	1ac0      	subs	r0, r0, r3
    1c34:	4152      	adcs	r2, r2
    1c36:	0983      	lsrs	r3, r0, #6
    1c38:	428b      	cmp	r3, r1
    1c3a:	d301      	bcc.n	1c40 <__udivsi3+0xb4>
    1c3c:	018b      	lsls	r3, r1, #6
    1c3e:	1ac0      	subs	r0, r0, r3
    1c40:	4152      	adcs	r2, r2
    1c42:	0943      	lsrs	r3, r0, #5
    1c44:	428b      	cmp	r3, r1
    1c46:	d301      	bcc.n	1c4c <__udivsi3+0xc0>
    1c48:	014b      	lsls	r3, r1, #5
    1c4a:	1ac0      	subs	r0, r0, r3
    1c4c:	4152      	adcs	r2, r2
    1c4e:	0903      	lsrs	r3, r0, #4
    1c50:	428b      	cmp	r3, r1
    1c52:	d301      	bcc.n	1c58 <__udivsi3+0xcc>
    1c54:	010b      	lsls	r3, r1, #4
    1c56:	1ac0      	subs	r0, r0, r3
    1c58:	4152      	adcs	r2, r2
    1c5a:	08c3      	lsrs	r3, r0, #3
    1c5c:	428b      	cmp	r3, r1
    1c5e:	d301      	bcc.n	1c64 <__udivsi3+0xd8>
    1c60:	00cb      	lsls	r3, r1, #3
    1c62:	1ac0      	subs	r0, r0, r3
    1c64:	4152      	adcs	r2, r2
    1c66:	0883      	lsrs	r3, r0, #2
    1c68:	428b      	cmp	r3, r1
    1c6a:	d301      	bcc.n	1c70 <__udivsi3+0xe4>
    1c6c:	008b      	lsls	r3, r1, #2
    1c6e:	1ac0      	subs	r0, r0, r3
    1c70:	4152      	adcs	r2, r2
    1c72:	0843      	lsrs	r3, r0, #1
    1c74:	428b      	cmp	r3, r1
    1c76:	d301      	bcc.n	1c7c <__udivsi3+0xf0>
    1c78:	004b      	lsls	r3, r1, #1
    1c7a:	1ac0      	subs	r0, r0, r3
    1c7c:	4152      	adcs	r2, r2
    1c7e:	1a41      	subs	r1, r0, r1
    1c80:	d200      	bcs.n	1c84 <__udivsi3+0xf8>
    1c82:	4601      	mov	r1, r0
    1c84:	4152      	adcs	r2, r2
    1c86:	4610      	mov	r0, r2
    1c88:	4770      	bx	lr
    1c8a:	e7ff      	b.n	1c8c <__udivsi3+0x100>
    1c8c:	b501      	push	{r0, lr}
    1c8e:	2000      	movs	r0, #0
    1c90:	f000 f806 	bl	1ca0 <__aeabi_idiv0>
    1c94:	bd02      	pop	{r1, pc}
    1c96:	46c0      	nop			; (mov r8, r8)

00001c98 <__aeabi_uidivmod>:
    1c98:	2900      	cmp	r1, #0
    1c9a:	d0f7      	beq.n	1c8c <__udivsi3+0x100>
    1c9c:	e776      	b.n	1b8c <__udivsi3>
    1c9e:	4770      	bx	lr

00001ca0 <__aeabi_idiv0>:
    1ca0:	4770      	bx	lr
    1ca2:	46c0      	nop			; (mov r8, r8)

00001ca4 <__aeabi_lmul>:
    1ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca6:	46ce      	mov	lr, r9
    1ca8:	4647      	mov	r7, r8
    1caa:	0415      	lsls	r5, r2, #16
    1cac:	0c2d      	lsrs	r5, r5, #16
    1cae:	002e      	movs	r6, r5
    1cb0:	b580      	push	{r7, lr}
    1cb2:	0407      	lsls	r7, r0, #16
    1cb4:	0c14      	lsrs	r4, r2, #16
    1cb6:	0c3f      	lsrs	r7, r7, #16
    1cb8:	4699      	mov	r9, r3
    1cba:	0c03      	lsrs	r3, r0, #16
    1cbc:	437e      	muls	r6, r7
    1cbe:	435d      	muls	r5, r3
    1cc0:	4367      	muls	r7, r4
    1cc2:	4363      	muls	r3, r4
    1cc4:	197f      	adds	r7, r7, r5
    1cc6:	0c34      	lsrs	r4, r6, #16
    1cc8:	19e4      	adds	r4, r4, r7
    1cca:	469c      	mov	ip, r3
    1ccc:	42a5      	cmp	r5, r4
    1cce:	d903      	bls.n	1cd8 <__aeabi_lmul+0x34>
    1cd0:	2380      	movs	r3, #128	; 0x80
    1cd2:	025b      	lsls	r3, r3, #9
    1cd4:	4698      	mov	r8, r3
    1cd6:	44c4      	add	ip, r8
    1cd8:	464b      	mov	r3, r9
    1cda:	4351      	muls	r1, r2
    1cdc:	4343      	muls	r3, r0
    1cde:	0436      	lsls	r6, r6, #16
    1ce0:	0c36      	lsrs	r6, r6, #16
    1ce2:	0c25      	lsrs	r5, r4, #16
    1ce4:	0424      	lsls	r4, r4, #16
    1ce6:	4465      	add	r5, ip
    1ce8:	19a4      	adds	r4, r4, r6
    1cea:	1859      	adds	r1, r3, r1
    1cec:	1949      	adds	r1, r1, r5
    1cee:	0020      	movs	r0, r4
    1cf0:	bc0c      	pop	{r2, r3}
    1cf2:	4690      	mov	r8, r2
    1cf4:	4699      	mov	r9, r3
    1cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001cf8 <__libc_init_array>:
    1cf8:	b570      	push	{r4, r5, r6, lr}
    1cfa:	2600      	movs	r6, #0
    1cfc:	4d0c      	ldr	r5, [pc, #48]	; (1d30 <__libc_init_array+0x38>)
    1cfe:	4c0d      	ldr	r4, [pc, #52]	; (1d34 <__libc_init_array+0x3c>)
    1d00:	1b64      	subs	r4, r4, r5
    1d02:	10a4      	asrs	r4, r4, #2
    1d04:	42a6      	cmp	r6, r4
    1d06:	d109      	bne.n	1d1c <__libc_init_array+0x24>
    1d08:	2600      	movs	r6, #0
    1d0a:	f000 fe67 	bl	29dc <_init>
    1d0e:	4d0a      	ldr	r5, [pc, #40]	; (1d38 <__libc_init_array+0x40>)
    1d10:	4c0a      	ldr	r4, [pc, #40]	; (1d3c <__libc_init_array+0x44>)
    1d12:	1b64      	subs	r4, r4, r5
    1d14:	10a4      	asrs	r4, r4, #2
    1d16:	42a6      	cmp	r6, r4
    1d18:	d105      	bne.n	1d26 <__libc_init_array+0x2e>
    1d1a:	bd70      	pop	{r4, r5, r6, pc}
    1d1c:	00b3      	lsls	r3, r6, #2
    1d1e:	58eb      	ldr	r3, [r5, r3]
    1d20:	4798      	blx	r3
    1d22:	3601      	adds	r6, #1
    1d24:	e7ee      	b.n	1d04 <__libc_init_array+0xc>
    1d26:	00b3      	lsls	r3, r6, #2
    1d28:	58eb      	ldr	r3, [r5, r3]
    1d2a:	4798      	blx	r3
    1d2c:	3601      	adds	r6, #1
    1d2e:	e7f2      	b.n	1d16 <__libc_init_array+0x1e>
    1d30:	000029e8 	.word	0x000029e8
    1d34:	000029e8 	.word	0x000029e8
    1d38:	000029e8 	.word	0x000029e8
    1d3c:	000029ec 	.word	0x000029ec

00001d40 <memset>:
    1d40:	0003      	movs	r3, r0
    1d42:	1882      	adds	r2, r0, r2
    1d44:	4293      	cmp	r3, r2
    1d46:	d100      	bne.n	1d4a <memset+0xa>
    1d48:	4770      	bx	lr
    1d4a:	7019      	strb	r1, [r3, #0]
    1d4c:	3301      	adds	r3, #1
    1d4e:	e7f9      	b.n	1d44 <memset+0x4>

00001d50 <_puts_r>:
    1d50:	b570      	push	{r4, r5, r6, lr}
    1d52:	0005      	movs	r5, r0
    1d54:	000e      	movs	r6, r1
    1d56:	2800      	cmp	r0, #0
    1d58:	d004      	beq.n	1d64 <_puts_r+0x14>
    1d5a:	6983      	ldr	r3, [r0, #24]
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d101      	bne.n	1d64 <_puts_r+0x14>
    1d60:	f000 fada 	bl	2318 <__sinit>
    1d64:	69ab      	ldr	r3, [r5, #24]
    1d66:	68ac      	ldr	r4, [r5, #8]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d102      	bne.n	1d72 <_puts_r+0x22>
    1d6c:	0028      	movs	r0, r5
    1d6e:	f000 fad3 	bl	2318 <__sinit>
    1d72:	4b24      	ldr	r3, [pc, #144]	; (1e04 <_puts_r+0xb4>)
    1d74:	429c      	cmp	r4, r3
    1d76:	d10f      	bne.n	1d98 <_puts_r+0x48>
    1d78:	686c      	ldr	r4, [r5, #4]
    1d7a:	89a3      	ldrh	r3, [r4, #12]
    1d7c:	071b      	lsls	r3, r3, #28
    1d7e:	d502      	bpl.n	1d86 <_puts_r+0x36>
    1d80:	6923      	ldr	r3, [r4, #16]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d120      	bne.n	1dc8 <_puts_r+0x78>
    1d86:	0021      	movs	r1, r4
    1d88:	0028      	movs	r0, r5
    1d8a:	f000 f957 	bl	203c <__swsetup_r>
    1d8e:	2800      	cmp	r0, #0
    1d90:	d01a      	beq.n	1dc8 <_puts_r+0x78>
    1d92:	2001      	movs	r0, #1
    1d94:	4240      	negs	r0, r0
    1d96:	bd70      	pop	{r4, r5, r6, pc}
    1d98:	4b1b      	ldr	r3, [pc, #108]	; (1e08 <_puts_r+0xb8>)
    1d9a:	429c      	cmp	r4, r3
    1d9c:	d101      	bne.n	1da2 <_puts_r+0x52>
    1d9e:	68ac      	ldr	r4, [r5, #8]
    1da0:	e7eb      	b.n	1d7a <_puts_r+0x2a>
    1da2:	4b1a      	ldr	r3, [pc, #104]	; (1e0c <_puts_r+0xbc>)
    1da4:	429c      	cmp	r4, r3
    1da6:	d1e8      	bne.n	1d7a <_puts_r+0x2a>
    1da8:	68ec      	ldr	r4, [r5, #12]
    1daa:	e7e6      	b.n	1d7a <_puts_r+0x2a>
    1dac:	3b01      	subs	r3, #1
    1dae:	3601      	adds	r6, #1
    1db0:	60a3      	str	r3, [r4, #8]
    1db2:	2b00      	cmp	r3, #0
    1db4:	da04      	bge.n	1dc0 <_puts_r+0x70>
    1db6:	69a2      	ldr	r2, [r4, #24]
    1db8:	4293      	cmp	r3, r2
    1dba:	db16      	blt.n	1dea <_puts_r+0x9a>
    1dbc:	290a      	cmp	r1, #10
    1dbe:	d014      	beq.n	1dea <_puts_r+0x9a>
    1dc0:	6823      	ldr	r3, [r4, #0]
    1dc2:	1c5a      	adds	r2, r3, #1
    1dc4:	6022      	str	r2, [r4, #0]
    1dc6:	7019      	strb	r1, [r3, #0]
    1dc8:	7831      	ldrb	r1, [r6, #0]
    1dca:	68a3      	ldr	r3, [r4, #8]
    1dcc:	2900      	cmp	r1, #0
    1dce:	d1ed      	bne.n	1dac <_puts_r+0x5c>
    1dd0:	3b01      	subs	r3, #1
    1dd2:	60a3      	str	r3, [r4, #8]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	da0f      	bge.n	1df8 <_puts_r+0xa8>
    1dd8:	0022      	movs	r2, r4
    1dda:	310a      	adds	r1, #10
    1ddc:	0028      	movs	r0, r5
    1dde:	f000 f8d7 	bl	1f90 <__swbuf_r>
    1de2:	1c43      	adds	r3, r0, #1
    1de4:	d0d5      	beq.n	1d92 <_puts_r+0x42>
    1de6:	200a      	movs	r0, #10
    1de8:	e7d5      	b.n	1d96 <_puts_r+0x46>
    1dea:	0022      	movs	r2, r4
    1dec:	0028      	movs	r0, r5
    1dee:	f000 f8cf 	bl	1f90 <__swbuf_r>
    1df2:	1c43      	adds	r3, r0, #1
    1df4:	d1e8      	bne.n	1dc8 <_puts_r+0x78>
    1df6:	e7cc      	b.n	1d92 <_puts_r+0x42>
    1df8:	200a      	movs	r0, #10
    1dfa:	6823      	ldr	r3, [r4, #0]
    1dfc:	1c5a      	adds	r2, r3, #1
    1dfe:	6022      	str	r2, [r4, #0]
    1e00:	7018      	strb	r0, [r3, #0]
    1e02:	e7c8      	b.n	1d96 <_puts_r+0x46>
    1e04:	0000299c 	.word	0x0000299c
    1e08:	000029bc 	.word	0x000029bc
    1e0c:	0000297c 	.word	0x0000297c

00001e10 <puts>:
    1e10:	b510      	push	{r4, lr}
    1e12:	4b03      	ldr	r3, [pc, #12]	; (1e20 <puts+0x10>)
    1e14:	0001      	movs	r1, r0
    1e16:	6818      	ldr	r0, [r3, #0]
    1e18:	f7ff ff9a 	bl	1d50 <_puts_r>
    1e1c:	bd10      	pop	{r4, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	2000000c 	.word	0x2000000c

00001e24 <setbuf>:
    1e24:	424a      	negs	r2, r1
    1e26:	414a      	adcs	r2, r1
    1e28:	2380      	movs	r3, #128	; 0x80
    1e2a:	b510      	push	{r4, lr}
    1e2c:	0052      	lsls	r2, r2, #1
    1e2e:	00db      	lsls	r3, r3, #3
    1e30:	f000 f802 	bl	1e38 <setvbuf>
    1e34:	bd10      	pop	{r4, pc}
	...

00001e38 <setvbuf>:
    1e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3a:	001d      	movs	r5, r3
    1e3c:	4b4f      	ldr	r3, [pc, #316]	; (1f7c <setvbuf+0x144>)
    1e3e:	b085      	sub	sp, #20
    1e40:	681e      	ldr	r6, [r3, #0]
    1e42:	0004      	movs	r4, r0
    1e44:	000f      	movs	r7, r1
    1e46:	9200      	str	r2, [sp, #0]
    1e48:	2e00      	cmp	r6, #0
    1e4a:	d005      	beq.n	1e58 <setvbuf+0x20>
    1e4c:	69b3      	ldr	r3, [r6, #24]
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d102      	bne.n	1e58 <setvbuf+0x20>
    1e52:	0030      	movs	r0, r6
    1e54:	f000 fa60 	bl	2318 <__sinit>
    1e58:	4b49      	ldr	r3, [pc, #292]	; (1f80 <setvbuf+0x148>)
    1e5a:	429c      	cmp	r4, r3
    1e5c:	d150      	bne.n	1f00 <setvbuf+0xc8>
    1e5e:	6874      	ldr	r4, [r6, #4]
    1e60:	9b00      	ldr	r3, [sp, #0]
    1e62:	2b02      	cmp	r3, #2
    1e64:	d005      	beq.n	1e72 <setvbuf+0x3a>
    1e66:	2b01      	cmp	r3, #1
    1e68:	d900      	bls.n	1e6c <setvbuf+0x34>
    1e6a:	e084      	b.n	1f76 <setvbuf+0x13e>
    1e6c:	2d00      	cmp	r5, #0
    1e6e:	da00      	bge.n	1e72 <setvbuf+0x3a>
    1e70:	e081      	b.n	1f76 <setvbuf+0x13e>
    1e72:	0021      	movs	r1, r4
    1e74:	0030      	movs	r0, r6
    1e76:	f000 f9e1 	bl	223c <_fflush_r>
    1e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e7c:	2900      	cmp	r1, #0
    1e7e:	d008      	beq.n	1e92 <setvbuf+0x5a>
    1e80:	0023      	movs	r3, r4
    1e82:	3344      	adds	r3, #68	; 0x44
    1e84:	4299      	cmp	r1, r3
    1e86:	d002      	beq.n	1e8e <setvbuf+0x56>
    1e88:	0030      	movs	r0, r6
    1e8a:	f000 fb51 	bl	2530 <_free_r>
    1e8e:	2300      	movs	r3, #0
    1e90:	6363      	str	r3, [r4, #52]	; 0x34
    1e92:	2300      	movs	r3, #0
    1e94:	61a3      	str	r3, [r4, #24]
    1e96:	6063      	str	r3, [r4, #4]
    1e98:	89a3      	ldrh	r3, [r4, #12]
    1e9a:	061b      	lsls	r3, r3, #24
    1e9c:	d503      	bpl.n	1ea6 <setvbuf+0x6e>
    1e9e:	6921      	ldr	r1, [r4, #16]
    1ea0:	0030      	movs	r0, r6
    1ea2:	f000 fb45 	bl	2530 <_free_r>
    1ea6:	89a3      	ldrh	r3, [r4, #12]
    1ea8:	4a36      	ldr	r2, [pc, #216]	; (1f84 <setvbuf+0x14c>)
    1eaa:	4013      	ands	r3, r2
    1eac:	81a3      	strh	r3, [r4, #12]
    1eae:	9b00      	ldr	r3, [sp, #0]
    1eb0:	2b02      	cmp	r3, #2
    1eb2:	d05a      	beq.n	1f6a <setvbuf+0x132>
    1eb4:	ab03      	add	r3, sp, #12
    1eb6:	aa02      	add	r2, sp, #8
    1eb8:	0021      	movs	r1, r4
    1eba:	0030      	movs	r0, r6
    1ebc:	f000 fac2 	bl	2444 <__swhatbuf_r>
    1ec0:	89a3      	ldrh	r3, [r4, #12]
    1ec2:	4318      	orrs	r0, r3
    1ec4:	81a0      	strh	r0, [r4, #12]
    1ec6:	2d00      	cmp	r5, #0
    1ec8:	d124      	bne.n	1f14 <setvbuf+0xdc>
    1eca:	9d02      	ldr	r5, [sp, #8]
    1ecc:	0028      	movs	r0, r5
    1ece:	f000 fb25 	bl	251c <malloc>
    1ed2:	9501      	str	r5, [sp, #4]
    1ed4:	1e07      	subs	r7, r0, #0
    1ed6:	d142      	bne.n	1f5e <setvbuf+0x126>
    1ed8:	9b02      	ldr	r3, [sp, #8]
    1eda:	9301      	str	r3, [sp, #4]
    1edc:	42ab      	cmp	r3, r5
    1ede:	d139      	bne.n	1f54 <setvbuf+0x11c>
    1ee0:	2001      	movs	r0, #1
    1ee2:	4240      	negs	r0, r0
    1ee4:	2302      	movs	r3, #2
    1ee6:	89a2      	ldrh	r2, [r4, #12]
    1ee8:	4313      	orrs	r3, r2
    1eea:	81a3      	strh	r3, [r4, #12]
    1eec:	2300      	movs	r3, #0
    1eee:	60a3      	str	r3, [r4, #8]
    1ef0:	0023      	movs	r3, r4
    1ef2:	3347      	adds	r3, #71	; 0x47
    1ef4:	6023      	str	r3, [r4, #0]
    1ef6:	6123      	str	r3, [r4, #16]
    1ef8:	2301      	movs	r3, #1
    1efa:	6163      	str	r3, [r4, #20]
    1efc:	b005      	add	sp, #20
    1efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f00:	4b21      	ldr	r3, [pc, #132]	; (1f88 <setvbuf+0x150>)
    1f02:	429c      	cmp	r4, r3
    1f04:	d101      	bne.n	1f0a <setvbuf+0xd2>
    1f06:	68b4      	ldr	r4, [r6, #8]
    1f08:	e7aa      	b.n	1e60 <setvbuf+0x28>
    1f0a:	4b20      	ldr	r3, [pc, #128]	; (1f8c <setvbuf+0x154>)
    1f0c:	429c      	cmp	r4, r3
    1f0e:	d1a7      	bne.n	1e60 <setvbuf+0x28>
    1f10:	68f4      	ldr	r4, [r6, #12]
    1f12:	e7a5      	b.n	1e60 <setvbuf+0x28>
    1f14:	2f00      	cmp	r7, #0
    1f16:	d0d9      	beq.n	1ecc <setvbuf+0x94>
    1f18:	69b3      	ldr	r3, [r6, #24]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d102      	bne.n	1f24 <setvbuf+0xec>
    1f1e:	0030      	movs	r0, r6
    1f20:	f000 f9fa 	bl	2318 <__sinit>
    1f24:	9b00      	ldr	r3, [sp, #0]
    1f26:	2b01      	cmp	r3, #1
    1f28:	d103      	bne.n	1f32 <setvbuf+0xfa>
    1f2a:	89a3      	ldrh	r3, [r4, #12]
    1f2c:	9a00      	ldr	r2, [sp, #0]
    1f2e:	431a      	orrs	r2, r3
    1f30:	81a2      	strh	r2, [r4, #12]
    1f32:	2008      	movs	r0, #8
    1f34:	89a3      	ldrh	r3, [r4, #12]
    1f36:	6027      	str	r7, [r4, #0]
    1f38:	6127      	str	r7, [r4, #16]
    1f3a:	6165      	str	r5, [r4, #20]
    1f3c:	4018      	ands	r0, r3
    1f3e:	d018      	beq.n	1f72 <setvbuf+0x13a>
    1f40:	2001      	movs	r0, #1
    1f42:	4018      	ands	r0, r3
    1f44:	2300      	movs	r3, #0
    1f46:	4298      	cmp	r0, r3
    1f48:	d011      	beq.n	1f6e <setvbuf+0x136>
    1f4a:	426d      	negs	r5, r5
    1f4c:	60a3      	str	r3, [r4, #8]
    1f4e:	61a5      	str	r5, [r4, #24]
    1f50:	0018      	movs	r0, r3
    1f52:	e7d3      	b.n	1efc <setvbuf+0xc4>
    1f54:	9801      	ldr	r0, [sp, #4]
    1f56:	f000 fae1 	bl	251c <malloc>
    1f5a:	1e07      	subs	r7, r0, #0
    1f5c:	d0c0      	beq.n	1ee0 <setvbuf+0xa8>
    1f5e:	2380      	movs	r3, #128	; 0x80
    1f60:	89a2      	ldrh	r2, [r4, #12]
    1f62:	9d01      	ldr	r5, [sp, #4]
    1f64:	4313      	orrs	r3, r2
    1f66:	81a3      	strh	r3, [r4, #12]
    1f68:	e7d6      	b.n	1f18 <setvbuf+0xe0>
    1f6a:	2000      	movs	r0, #0
    1f6c:	e7ba      	b.n	1ee4 <setvbuf+0xac>
    1f6e:	60a5      	str	r5, [r4, #8]
    1f70:	e7c4      	b.n	1efc <setvbuf+0xc4>
    1f72:	60a0      	str	r0, [r4, #8]
    1f74:	e7c2      	b.n	1efc <setvbuf+0xc4>
    1f76:	2001      	movs	r0, #1
    1f78:	4240      	negs	r0, r0
    1f7a:	e7bf      	b.n	1efc <setvbuf+0xc4>
    1f7c:	2000000c 	.word	0x2000000c
    1f80:	0000299c 	.word	0x0000299c
    1f84:	fffff35c 	.word	0xfffff35c
    1f88:	000029bc 	.word	0x000029bc
    1f8c:	0000297c 	.word	0x0000297c

00001f90 <__swbuf_r>:
    1f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f92:	0005      	movs	r5, r0
    1f94:	000e      	movs	r6, r1
    1f96:	0014      	movs	r4, r2
    1f98:	2800      	cmp	r0, #0
    1f9a:	d004      	beq.n	1fa6 <__swbuf_r+0x16>
    1f9c:	6983      	ldr	r3, [r0, #24]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d101      	bne.n	1fa6 <__swbuf_r+0x16>
    1fa2:	f000 f9b9 	bl	2318 <__sinit>
    1fa6:	4b22      	ldr	r3, [pc, #136]	; (2030 <STACK_SIZE+0x30>)
    1fa8:	429c      	cmp	r4, r3
    1faa:	d12d      	bne.n	2008 <STACK_SIZE+0x8>
    1fac:	686c      	ldr	r4, [r5, #4]
    1fae:	69a3      	ldr	r3, [r4, #24]
    1fb0:	60a3      	str	r3, [r4, #8]
    1fb2:	89a3      	ldrh	r3, [r4, #12]
    1fb4:	071b      	lsls	r3, r3, #28
    1fb6:	d531      	bpl.n	201c <STACK_SIZE+0x1c>
    1fb8:	6923      	ldr	r3, [r4, #16]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d02e      	beq.n	201c <STACK_SIZE+0x1c>
    1fbe:	6823      	ldr	r3, [r4, #0]
    1fc0:	6922      	ldr	r2, [r4, #16]
    1fc2:	b2f7      	uxtb	r7, r6
    1fc4:	1a98      	subs	r0, r3, r2
    1fc6:	6963      	ldr	r3, [r4, #20]
    1fc8:	b2f6      	uxtb	r6, r6
    1fca:	4298      	cmp	r0, r3
    1fcc:	db05      	blt.n	1fda <__swbuf_r+0x4a>
    1fce:	0021      	movs	r1, r4
    1fd0:	0028      	movs	r0, r5
    1fd2:	f000 f933 	bl	223c <_fflush_r>
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d126      	bne.n	2028 <STACK_SIZE+0x28>
    1fda:	68a3      	ldr	r3, [r4, #8]
    1fdc:	3001      	adds	r0, #1
    1fde:	3b01      	subs	r3, #1
    1fe0:	60a3      	str	r3, [r4, #8]
    1fe2:	6823      	ldr	r3, [r4, #0]
    1fe4:	1c5a      	adds	r2, r3, #1
    1fe6:	6022      	str	r2, [r4, #0]
    1fe8:	701f      	strb	r7, [r3, #0]
    1fea:	6963      	ldr	r3, [r4, #20]
    1fec:	4298      	cmp	r0, r3
    1fee:	d004      	beq.n	1ffa <__swbuf_r+0x6a>
    1ff0:	89a3      	ldrh	r3, [r4, #12]
    1ff2:	07db      	lsls	r3, r3, #31
    1ff4:	d51a      	bpl.n	202c <STACK_SIZE+0x2c>
    1ff6:	2e0a      	cmp	r6, #10
    1ff8:	d118      	bne.n	202c <STACK_SIZE+0x2c>
    1ffa:	0021      	movs	r1, r4
    1ffc:	0028      	movs	r0, r5
    1ffe:	f000 f91d 	bl	223c <_fflush_r>
    2002:	2800      	cmp	r0, #0
    2004:	d012      	beq.n	202c <STACK_SIZE+0x2c>
    2006:	e00f      	b.n	2028 <STACK_SIZE+0x28>
    2008:	4b0a      	ldr	r3, [pc, #40]	; (2034 <STACK_SIZE+0x34>)
    200a:	429c      	cmp	r4, r3
    200c:	d101      	bne.n	2012 <STACK_SIZE+0x12>
    200e:	68ac      	ldr	r4, [r5, #8]
    2010:	e7cd      	b.n	1fae <__swbuf_r+0x1e>
    2012:	4b09      	ldr	r3, [pc, #36]	; (2038 <STACK_SIZE+0x38>)
    2014:	429c      	cmp	r4, r3
    2016:	d1ca      	bne.n	1fae <__swbuf_r+0x1e>
    2018:	68ec      	ldr	r4, [r5, #12]
    201a:	e7c8      	b.n	1fae <__swbuf_r+0x1e>
    201c:	0021      	movs	r1, r4
    201e:	0028      	movs	r0, r5
    2020:	f000 f80c 	bl	203c <__swsetup_r>
    2024:	2800      	cmp	r0, #0
    2026:	d0ca      	beq.n	1fbe <__swbuf_r+0x2e>
    2028:	2601      	movs	r6, #1
    202a:	4276      	negs	r6, r6
    202c:	0030      	movs	r0, r6
    202e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2030:	0000299c 	.word	0x0000299c
    2034:	000029bc 	.word	0x000029bc
    2038:	0000297c 	.word	0x0000297c

0000203c <__swsetup_r>:
    203c:	4b36      	ldr	r3, [pc, #216]	; (2118 <__swsetup_r+0xdc>)
    203e:	b570      	push	{r4, r5, r6, lr}
    2040:	681d      	ldr	r5, [r3, #0]
    2042:	0006      	movs	r6, r0
    2044:	000c      	movs	r4, r1
    2046:	2d00      	cmp	r5, #0
    2048:	d005      	beq.n	2056 <__swsetup_r+0x1a>
    204a:	69ab      	ldr	r3, [r5, #24]
    204c:	2b00      	cmp	r3, #0
    204e:	d102      	bne.n	2056 <__swsetup_r+0x1a>
    2050:	0028      	movs	r0, r5
    2052:	f000 f961 	bl	2318 <__sinit>
    2056:	4b31      	ldr	r3, [pc, #196]	; (211c <__swsetup_r+0xe0>)
    2058:	429c      	cmp	r4, r3
    205a:	d10f      	bne.n	207c <__swsetup_r+0x40>
    205c:	686c      	ldr	r4, [r5, #4]
    205e:	230c      	movs	r3, #12
    2060:	5ee2      	ldrsh	r2, [r4, r3]
    2062:	b293      	uxth	r3, r2
    2064:	0719      	lsls	r1, r3, #28
    2066:	d42d      	bmi.n	20c4 <__swsetup_r+0x88>
    2068:	06d9      	lsls	r1, r3, #27
    206a:	d411      	bmi.n	2090 <__swsetup_r+0x54>
    206c:	2309      	movs	r3, #9
    206e:	2001      	movs	r0, #1
    2070:	6033      	str	r3, [r6, #0]
    2072:	3337      	adds	r3, #55	; 0x37
    2074:	4313      	orrs	r3, r2
    2076:	81a3      	strh	r3, [r4, #12]
    2078:	4240      	negs	r0, r0
    207a:	bd70      	pop	{r4, r5, r6, pc}
    207c:	4b28      	ldr	r3, [pc, #160]	; (2120 <__swsetup_r+0xe4>)
    207e:	429c      	cmp	r4, r3
    2080:	d101      	bne.n	2086 <__swsetup_r+0x4a>
    2082:	68ac      	ldr	r4, [r5, #8]
    2084:	e7eb      	b.n	205e <__swsetup_r+0x22>
    2086:	4b27      	ldr	r3, [pc, #156]	; (2124 <__swsetup_r+0xe8>)
    2088:	429c      	cmp	r4, r3
    208a:	d1e8      	bne.n	205e <__swsetup_r+0x22>
    208c:	68ec      	ldr	r4, [r5, #12]
    208e:	e7e6      	b.n	205e <__swsetup_r+0x22>
    2090:	075b      	lsls	r3, r3, #29
    2092:	d513      	bpl.n	20bc <__swsetup_r+0x80>
    2094:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2096:	2900      	cmp	r1, #0
    2098:	d008      	beq.n	20ac <__swsetup_r+0x70>
    209a:	0023      	movs	r3, r4
    209c:	3344      	adds	r3, #68	; 0x44
    209e:	4299      	cmp	r1, r3
    20a0:	d002      	beq.n	20a8 <__swsetup_r+0x6c>
    20a2:	0030      	movs	r0, r6
    20a4:	f000 fa44 	bl	2530 <_free_r>
    20a8:	2300      	movs	r3, #0
    20aa:	6363      	str	r3, [r4, #52]	; 0x34
    20ac:	2224      	movs	r2, #36	; 0x24
    20ae:	89a3      	ldrh	r3, [r4, #12]
    20b0:	4393      	bics	r3, r2
    20b2:	81a3      	strh	r3, [r4, #12]
    20b4:	2300      	movs	r3, #0
    20b6:	6063      	str	r3, [r4, #4]
    20b8:	6923      	ldr	r3, [r4, #16]
    20ba:	6023      	str	r3, [r4, #0]
    20bc:	2308      	movs	r3, #8
    20be:	89a2      	ldrh	r2, [r4, #12]
    20c0:	4313      	orrs	r3, r2
    20c2:	81a3      	strh	r3, [r4, #12]
    20c4:	6923      	ldr	r3, [r4, #16]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d10b      	bne.n	20e2 <__swsetup_r+0xa6>
    20ca:	21a0      	movs	r1, #160	; 0xa0
    20cc:	2280      	movs	r2, #128	; 0x80
    20ce:	89a3      	ldrh	r3, [r4, #12]
    20d0:	0089      	lsls	r1, r1, #2
    20d2:	0092      	lsls	r2, r2, #2
    20d4:	400b      	ands	r3, r1
    20d6:	4293      	cmp	r3, r2
    20d8:	d003      	beq.n	20e2 <__swsetup_r+0xa6>
    20da:	0021      	movs	r1, r4
    20dc:	0030      	movs	r0, r6
    20de:	f000 f9d9 	bl	2494 <__smakebuf_r>
    20e2:	2301      	movs	r3, #1
    20e4:	89a2      	ldrh	r2, [r4, #12]
    20e6:	4013      	ands	r3, r2
    20e8:	d011      	beq.n	210e <__swsetup_r+0xd2>
    20ea:	2300      	movs	r3, #0
    20ec:	60a3      	str	r3, [r4, #8]
    20ee:	6963      	ldr	r3, [r4, #20]
    20f0:	425b      	negs	r3, r3
    20f2:	61a3      	str	r3, [r4, #24]
    20f4:	2000      	movs	r0, #0
    20f6:	6923      	ldr	r3, [r4, #16]
    20f8:	4283      	cmp	r3, r0
    20fa:	d1be      	bne.n	207a <__swsetup_r+0x3e>
    20fc:	230c      	movs	r3, #12
    20fe:	5ee2      	ldrsh	r2, [r4, r3]
    2100:	0613      	lsls	r3, r2, #24
    2102:	d5ba      	bpl.n	207a <__swsetup_r+0x3e>
    2104:	2340      	movs	r3, #64	; 0x40
    2106:	4313      	orrs	r3, r2
    2108:	81a3      	strh	r3, [r4, #12]
    210a:	3801      	subs	r0, #1
    210c:	e7b5      	b.n	207a <__swsetup_r+0x3e>
    210e:	0792      	lsls	r2, r2, #30
    2110:	d400      	bmi.n	2114 <__swsetup_r+0xd8>
    2112:	6963      	ldr	r3, [r4, #20]
    2114:	60a3      	str	r3, [r4, #8]
    2116:	e7ed      	b.n	20f4 <__swsetup_r+0xb8>
    2118:	2000000c 	.word	0x2000000c
    211c:	0000299c 	.word	0x0000299c
    2120:	000029bc 	.word	0x000029bc
    2124:	0000297c 	.word	0x0000297c

00002128 <__sflush_r>:
    2128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    212a:	898a      	ldrh	r2, [r1, #12]
    212c:	0005      	movs	r5, r0
    212e:	000c      	movs	r4, r1
    2130:	0713      	lsls	r3, r2, #28
    2132:	d460      	bmi.n	21f6 <__sflush_r+0xce>
    2134:	684b      	ldr	r3, [r1, #4]
    2136:	2b00      	cmp	r3, #0
    2138:	dc04      	bgt.n	2144 <__sflush_r+0x1c>
    213a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    213c:	2b00      	cmp	r3, #0
    213e:	dc01      	bgt.n	2144 <__sflush_r+0x1c>
    2140:	2000      	movs	r0, #0
    2142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2144:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2146:	2f00      	cmp	r7, #0
    2148:	d0fa      	beq.n	2140 <__sflush_r+0x18>
    214a:	2300      	movs	r3, #0
    214c:	682e      	ldr	r6, [r5, #0]
    214e:	602b      	str	r3, [r5, #0]
    2150:	2380      	movs	r3, #128	; 0x80
    2152:	015b      	lsls	r3, r3, #5
    2154:	401a      	ands	r2, r3
    2156:	d034      	beq.n	21c2 <__sflush_r+0x9a>
    2158:	6d60      	ldr	r0, [r4, #84]	; 0x54
    215a:	89a3      	ldrh	r3, [r4, #12]
    215c:	075b      	lsls	r3, r3, #29
    215e:	d506      	bpl.n	216e <__sflush_r+0x46>
    2160:	6863      	ldr	r3, [r4, #4]
    2162:	1ac0      	subs	r0, r0, r3
    2164:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2166:	2b00      	cmp	r3, #0
    2168:	d001      	beq.n	216e <__sflush_r+0x46>
    216a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    216c:	1ac0      	subs	r0, r0, r3
    216e:	0002      	movs	r2, r0
    2170:	6a21      	ldr	r1, [r4, #32]
    2172:	2300      	movs	r3, #0
    2174:	0028      	movs	r0, r5
    2176:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2178:	47b8      	blx	r7
    217a:	89a1      	ldrh	r1, [r4, #12]
    217c:	1c43      	adds	r3, r0, #1
    217e:	d106      	bne.n	218e <__sflush_r+0x66>
    2180:	682b      	ldr	r3, [r5, #0]
    2182:	2b1d      	cmp	r3, #29
    2184:	d831      	bhi.n	21ea <__sflush_r+0xc2>
    2186:	4a2c      	ldr	r2, [pc, #176]	; (2238 <__sflush_r+0x110>)
    2188:	40da      	lsrs	r2, r3
    218a:	07d3      	lsls	r3, r2, #31
    218c:	d52d      	bpl.n	21ea <__sflush_r+0xc2>
    218e:	2300      	movs	r3, #0
    2190:	6063      	str	r3, [r4, #4]
    2192:	6923      	ldr	r3, [r4, #16]
    2194:	6023      	str	r3, [r4, #0]
    2196:	04cb      	lsls	r3, r1, #19
    2198:	d505      	bpl.n	21a6 <__sflush_r+0x7e>
    219a:	1c43      	adds	r3, r0, #1
    219c:	d102      	bne.n	21a4 <__sflush_r+0x7c>
    219e:	682b      	ldr	r3, [r5, #0]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d100      	bne.n	21a6 <__sflush_r+0x7e>
    21a4:	6560      	str	r0, [r4, #84]	; 0x54
    21a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21a8:	602e      	str	r6, [r5, #0]
    21aa:	2900      	cmp	r1, #0
    21ac:	d0c8      	beq.n	2140 <__sflush_r+0x18>
    21ae:	0023      	movs	r3, r4
    21b0:	3344      	adds	r3, #68	; 0x44
    21b2:	4299      	cmp	r1, r3
    21b4:	d002      	beq.n	21bc <__sflush_r+0x94>
    21b6:	0028      	movs	r0, r5
    21b8:	f000 f9ba 	bl	2530 <_free_r>
    21bc:	2000      	movs	r0, #0
    21be:	6360      	str	r0, [r4, #52]	; 0x34
    21c0:	e7bf      	b.n	2142 <__sflush_r+0x1a>
    21c2:	2301      	movs	r3, #1
    21c4:	6a21      	ldr	r1, [r4, #32]
    21c6:	0028      	movs	r0, r5
    21c8:	47b8      	blx	r7
    21ca:	1c43      	adds	r3, r0, #1
    21cc:	d1c5      	bne.n	215a <__sflush_r+0x32>
    21ce:	682b      	ldr	r3, [r5, #0]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d0c2      	beq.n	215a <__sflush_r+0x32>
    21d4:	2b1d      	cmp	r3, #29
    21d6:	d001      	beq.n	21dc <__sflush_r+0xb4>
    21d8:	2b16      	cmp	r3, #22
    21da:	d101      	bne.n	21e0 <__sflush_r+0xb8>
    21dc:	602e      	str	r6, [r5, #0]
    21de:	e7af      	b.n	2140 <__sflush_r+0x18>
    21e0:	2340      	movs	r3, #64	; 0x40
    21e2:	89a2      	ldrh	r2, [r4, #12]
    21e4:	4313      	orrs	r3, r2
    21e6:	81a3      	strh	r3, [r4, #12]
    21e8:	e7ab      	b.n	2142 <__sflush_r+0x1a>
    21ea:	2340      	movs	r3, #64	; 0x40
    21ec:	430b      	orrs	r3, r1
    21ee:	2001      	movs	r0, #1
    21f0:	81a3      	strh	r3, [r4, #12]
    21f2:	4240      	negs	r0, r0
    21f4:	e7a5      	b.n	2142 <__sflush_r+0x1a>
    21f6:	690f      	ldr	r7, [r1, #16]
    21f8:	2f00      	cmp	r7, #0
    21fa:	d0a1      	beq.n	2140 <__sflush_r+0x18>
    21fc:	680b      	ldr	r3, [r1, #0]
    21fe:	600f      	str	r7, [r1, #0]
    2200:	1bdb      	subs	r3, r3, r7
    2202:	9301      	str	r3, [sp, #4]
    2204:	2300      	movs	r3, #0
    2206:	0792      	lsls	r2, r2, #30
    2208:	d100      	bne.n	220c <__sflush_r+0xe4>
    220a:	694b      	ldr	r3, [r1, #20]
    220c:	60a3      	str	r3, [r4, #8]
    220e:	9b01      	ldr	r3, [sp, #4]
    2210:	2b00      	cmp	r3, #0
    2212:	dc00      	bgt.n	2216 <__sflush_r+0xee>
    2214:	e794      	b.n	2140 <__sflush_r+0x18>
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	003a      	movs	r2, r7
    221a:	6a21      	ldr	r1, [r4, #32]
    221c:	0028      	movs	r0, r5
    221e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2220:	47b0      	blx	r6
    2222:	2800      	cmp	r0, #0
    2224:	dc03      	bgt.n	222e <__sflush_r+0x106>
    2226:	2340      	movs	r3, #64	; 0x40
    2228:	89a2      	ldrh	r2, [r4, #12]
    222a:	4313      	orrs	r3, r2
    222c:	e7df      	b.n	21ee <__sflush_r+0xc6>
    222e:	9b01      	ldr	r3, [sp, #4]
    2230:	183f      	adds	r7, r7, r0
    2232:	1a1b      	subs	r3, r3, r0
    2234:	9301      	str	r3, [sp, #4]
    2236:	e7ea      	b.n	220e <__sflush_r+0xe6>
    2238:	20400001 	.word	0x20400001

0000223c <_fflush_r>:
    223c:	690b      	ldr	r3, [r1, #16]
    223e:	b570      	push	{r4, r5, r6, lr}
    2240:	0005      	movs	r5, r0
    2242:	000c      	movs	r4, r1
    2244:	2b00      	cmp	r3, #0
    2246:	d101      	bne.n	224c <_fflush_r+0x10>
    2248:	2000      	movs	r0, #0
    224a:	bd70      	pop	{r4, r5, r6, pc}
    224c:	2800      	cmp	r0, #0
    224e:	d004      	beq.n	225a <_fflush_r+0x1e>
    2250:	6983      	ldr	r3, [r0, #24]
    2252:	2b00      	cmp	r3, #0
    2254:	d101      	bne.n	225a <_fflush_r+0x1e>
    2256:	f000 f85f 	bl	2318 <__sinit>
    225a:	4b0b      	ldr	r3, [pc, #44]	; (2288 <_fflush_r+0x4c>)
    225c:	429c      	cmp	r4, r3
    225e:	d109      	bne.n	2274 <_fflush_r+0x38>
    2260:	686c      	ldr	r4, [r5, #4]
    2262:	220c      	movs	r2, #12
    2264:	5ea3      	ldrsh	r3, [r4, r2]
    2266:	2b00      	cmp	r3, #0
    2268:	d0ee      	beq.n	2248 <_fflush_r+0xc>
    226a:	0021      	movs	r1, r4
    226c:	0028      	movs	r0, r5
    226e:	f7ff ff5b 	bl	2128 <__sflush_r>
    2272:	e7ea      	b.n	224a <_fflush_r+0xe>
    2274:	4b05      	ldr	r3, [pc, #20]	; (228c <_fflush_r+0x50>)
    2276:	429c      	cmp	r4, r3
    2278:	d101      	bne.n	227e <_fflush_r+0x42>
    227a:	68ac      	ldr	r4, [r5, #8]
    227c:	e7f1      	b.n	2262 <_fflush_r+0x26>
    227e:	4b04      	ldr	r3, [pc, #16]	; (2290 <_fflush_r+0x54>)
    2280:	429c      	cmp	r4, r3
    2282:	d1ee      	bne.n	2262 <_fflush_r+0x26>
    2284:	68ec      	ldr	r4, [r5, #12]
    2286:	e7ec      	b.n	2262 <_fflush_r+0x26>
    2288:	0000299c 	.word	0x0000299c
    228c:	000029bc 	.word	0x000029bc
    2290:	0000297c 	.word	0x0000297c

00002294 <_cleanup_r>:
    2294:	b510      	push	{r4, lr}
    2296:	4902      	ldr	r1, [pc, #8]	; (22a0 <_cleanup_r+0xc>)
    2298:	f000 f8b2 	bl	2400 <_fwalk_reent>
    229c:	bd10      	pop	{r4, pc}
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	0000223d 	.word	0x0000223d

000022a4 <std.isra.0>:
    22a4:	2300      	movs	r3, #0
    22a6:	b510      	push	{r4, lr}
    22a8:	0004      	movs	r4, r0
    22aa:	6003      	str	r3, [r0, #0]
    22ac:	6043      	str	r3, [r0, #4]
    22ae:	6083      	str	r3, [r0, #8]
    22b0:	8181      	strh	r1, [r0, #12]
    22b2:	6643      	str	r3, [r0, #100]	; 0x64
    22b4:	81c2      	strh	r2, [r0, #14]
    22b6:	6103      	str	r3, [r0, #16]
    22b8:	6143      	str	r3, [r0, #20]
    22ba:	6183      	str	r3, [r0, #24]
    22bc:	0019      	movs	r1, r3
    22be:	2208      	movs	r2, #8
    22c0:	305c      	adds	r0, #92	; 0x5c
    22c2:	f7ff fd3d 	bl	1d40 <memset>
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <std.isra.0+0x38>)
    22c8:	6224      	str	r4, [r4, #32]
    22ca:	6263      	str	r3, [r4, #36]	; 0x24
    22cc:	4b04      	ldr	r3, [pc, #16]	; (22e0 <std.isra.0+0x3c>)
    22ce:	62a3      	str	r3, [r4, #40]	; 0x28
    22d0:	4b04      	ldr	r3, [pc, #16]	; (22e4 <std.isra.0+0x40>)
    22d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    22d4:	4b04      	ldr	r3, [pc, #16]	; (22e8 <std.isra.0+0x44>)
    22d6:	6323      	str	r3, [r4, #48]	; 0x30
    22d8:	bd10      	pop	{r4, pc}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	000026a5 	.word	0x000026a5
    22e0:	000026cd 	.word	0x000026cd
    22e4:	00002705 	.word	0x00002705
    22e8:	00002731 	.word	0x00002731

000022ec <__sfmoreglue>:
    22ec:	b570      	push	{r4, r5, r6, lr}
    22ee:	2568      	movs	r5, #104	; 0x68
    22f0:	1e4a      	subs	r2, r1, #1
    22f2:	4355      	muls	r5, r2
    22f4:	000e      	movs	r6, r1
    22f6:	0029      	movs	r1, r5
    22f8:	3174      	adds	r1, #116	; 0x74
    22fa:	f000 f963 	bl	25c4 <_malloc_r>
    22fe:	1e04      	subs	r4, r0, #0
    2300:	d008      	beq.n	2314 <__sfmoreglue+0x28>
    2302:	2100      	movs	r1, #0
    2304:	002a      	movs	r2, r5
    2306:	6001      	str	r1, [r0, #0]
    2308:	6046      	str	r6, [r0, #4]
    230a:	300c      	adds	r0, #12
    230c:	60a0      	str	r0, [r4, #8]
    230e:	3268      	adds	r2, #104	; 0x68
    2310:	f7ff fd16 	bl	1d40 <memset>
    2314:	0020      	movs	r0, r4
    2316:	bd70      	pop	{r4, r5, r6, pc}

00002318 <__sinit>:
    2318:	6983      	ldr	r3, [r0, #24]
    231a:	b513      	push	{r0, r1, r4, lr}
    231c:	0004      	movs	r4, r0
    231e:	2b00      	cmp	r3, #0
    2320:	d128      	bne.n	2374 <__sinit+0x5c>
    2322:	6483      	str	r3, [r0, #72]	; 0x48
    2324:	64c3      	str	r3, [r0, #76]	; 0x4c
    2326:	6503      	str	r3, [r0, #80]	; 0x50
    2328:	4b13      	ldr	r3, [pc, #76]	; (2378 <__sinit+0x60>)
    232a:	4a14      	ldr	r2, [pc, #80]	; (237c <__sinit+0x64>)
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	6282      	str	r2, [r0, #40]	; 0x28
    2330:	9301      	str	r3, [sp, #4]
    2332:	4298      	cmp	r0, r3
    2334:	d101      	bne.n	233a <__sinit+0x22>
    2336:	2301      	movs	r3, #1
    2338:	6183      	str	r3, [r0, #24]
    233a:	0020      	movs	r0, r4
    233c:	f000 f820 	bl	2380 <__sfp>
    2340:	6060      	str	r0, [r4, #4]
    2342:	0020      	movs	r0, r4
    2344:	f000 f81c 	bl	2380 <__sfp>
    2348:	60a0      	str	r0, [r4, #8]
    234a:	0020      	movs	r0, r4
    234c:	f000 f818 	bl	2380 <__sfp>
    2350:	2200      	movs	r2, #0
    2352:	60e0      	str	r0, [r4, #12]
    2354:	2104      	movs	r1, #4
    2356:	6860      	ldr	r0, [r4, #4]
    2358:	f7ff ffa4 	bl	22a4 <std.isra.0>
    235c:	2201      	movs	r2, #1
    235e:	2109      	movs	r1, #9
    2360:	68a0      	ldr	r0, [r4, #8]
    2362:	f7ff ff9f 	bl	22a4 <std.isra.0>
    2366:	2202      	movs	r2, #2
    2368:	2112      	movs	r1, #18
    236a:	68e0      	ldr	r0, [r4, #12]
    236c:	f7ff ff9a 	bl	22a4 <std.isra.0>
    2370:	2301      	movs	r3, #1
    2372:	61a3      	str	r3, [r4, #24]
    2374:	bd13      	pop	{r0, r1, r4, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	00002978 	.word	0x00002978
    237c:	00002295 	.word	0x00002295

00002380 <__sfp>:
    2380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2382:	4b1e      	ldr	r3, [pc, #120]	; (23fc <__sfp+0x7c>)
    2384:	0007      	movs	r7, r0
    2386:	681e      	ldr	r6, [r3, #0]
    2388:	69b3      	ldr	r3, [r6, #24]
    238a:	2b00      	cmp	r3, #0
    238c:	d102      	bne.n	2394 <__sfp+0x14>
    238e:	0030      	movs	r0, r6
    2390:	f7ff ffc2 	bl	2318 <__sinit>
    2394:	3648      	adds	r6, #72	; 0x48
    2396:	68b4      	ldr	r4, [r6, #8]
    2398:	6873      	ldr	r3, [r6, #4]
    239a:	3b01      	subs	r3, #1
    239c:	d504      	bpl.n	23a8 <__sfp+0x28>
    239e:	6833      	ldr	r3, [r6, #0]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d007      	beq.n	23b4 <__sfp+0x34>
    23a4:	6836      	ldr	r6, [r6, #0]
    23a6:	e7f6      	b.n	2396 <__sfp+0x16>
    23a8:	220c      	movs	r2, #12
    23aa:	5ea5      	ldrsh	r5, [r4, r2]
    23ac:	2d00      	cmp	r5, #0
    23ae:	d00d      	beq.n	23cc <__sfp+0x4c>
    23b0:	3468      	adds	r4, #104	; 0x68
    23b2:	e7f2      	b.n	239a <__sfp+0x1a>
    23b4:	2104      	movs	r1, #4
    23b6:	0038      	movs	r0, r7
    23b8:	f7ff ff98 	bl	22ec <__sfmoreglue>
    23bc:	6030      	str	r0, [r6, #0]
    23be:	2800      	cmp	r0, #0
    23c0:	d1f0      	bne.n	23a4 <__sfp+0x24>
    23c2:	230c      	movs	r3, #12
    23c4:	0004      	movs	r4, r0
    23c6:	603b      	str	r3, [r7, #0]
    23c8:	0020      	movs	r0, r4
    23ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23cc:	2301      	movs	r3, #1
    23ce:	0020      	movs	r0, r4
    23d0:	425b      	negs	r3, r3
    23d2:	81e3      	strh	r3, [r4, #14]
    23d4:	3302      	adds	r3, #2
    23d6:	81a3      	strh	r3, [r4, #12]
    23d8:	6665      	str	r5, [r4, #100]	; 0x64
    23da:	6025      	str	r5, [r4, #0]
    23dc:	60a5      	str	r5, [r4, #8]
    23de:	6065      	str	r5, [r4, #4]
    23e0:	6125      	str	r5, [r4, #16]
    23e2:	6165      	str	r5, [r4, #20]
    23e4:	61a5      	str	r5, [r4, #24]
    23e6:	2208      	movs	r2, #8
    23e8:	0029      	movs	r1, r5
    23ea:	305c      	adds	r0, #92	; 0x5c
    23ec:	f7ff fca8 	bl	1d40 <memset>
    23f0:	6365      	str	r5, [r4, #52]	; 0x34
    23f2:	63a5      	str	r5, [r4, #56]	; 0x38
    23f4:	64a5      	str	r5, [r4, #72]	; 0x48
    23f6:	64e5      	str	r5, [r4, #76]	; 0x4c
    23f8:	e7e6      	b.n	23c8 <__sfp+0x48>
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	00002978 	.word	0x00002978

00002400 <_fwalk_reent>:
    2400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2402:	0004      	movs	r4, r0
    2404:	0007      	movs	r7, r0
    2406:	2600      	movs	r6, #0
    2408:	9101      	str	r1, [sp, #4]
    240a:	3448      	adds	r4, #72	; 0x48
    240c:	2c00      	cmp	r4, #0
    240e:	d101      	bne.n	2414 <_fwalk_reent+0x14>
    2410:	0030      	movs	r0, r6
    2412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2414:	6863      	ldr	r3, [r4, #4]
    2416:	68a5      	ldr	r5, [r4, #8]
    2418:	9300      	str	r3, [sp, #0]
    241a:	9b00      	ldr	r3, [sp, #0]
    241c:	3b01      	subs	r3, #1
    241e:	9300      	str	r3, [sp, #0]
    2420:	d501      	bpl.n	2426 <_fwalk_reent+0x26>
    2422:	6824      	ldr	r4, [r4, #0]
    2424:	e7f2      	b.n	240c <_fwalk_reent+0xc>
    2426:	89ab      	ldrh	r3, [r5, #12]
    2428:	2b01      	cmp	r3, #1
    242a:	d908      	bls.n	243e <_fwalk_reent+0x3e>
    242c:	220e      	movs	r2, #14
    242e:	5eab      	ldrsh	r3, [r5, r2]
    2430:	3301      	adds	r3, #1
    2432:	d004      	beq.n	243e <_fwalk_reent+0x3e>
    2434:	0029      	movs	r1, r5
    2436:	0038      	movs	r0, r7
    2438:	9b01      	ldr	r3, [sp, #4]
    243a:	4798      	blx	r3
    243c:	4306      	orrs	r6, r0
    243e:	3568      	adds	r5, #104	; 0x68
    2440:	e7eb      	b.n	241a <_fwalk_reent+0x1a>
	...

00002444 <__swhatbuf_r>:
    2444:	b570      	push	{r4, r5, r6, lr}
    2446:	000e      	movs	r6, r1
    2448:	001d      	movs	r5, r3
    244a:	230e      	movs	r3, #14
    244c:	5ec9      	ldrsh	r1, [r1, r3]
    244e:	b090      	sub	sp, #64	; 0x40
    2450:	0014      	movs	r4, r2
    2452:	2900      	cmp	r1, #0
    2454:	da07      	bge.n	2466 <__swhatbuf_r+0x22>
    2456:	2300      	movs	r3, #0
    2458:	602b      	str	r3, [r5, #0]
    245a:	89b3      	ldrh	r3, [r6, #12]
    245c:	061b      	lsls	r3, r3, #24
    245e:	d411      	bmi.n	2484 <__swhatbuf_r+0x40>
    2460:	2380      	movs	r3, #128	; 0x80
    2462:	00db      	lsls	r3, r3, #3
    2464:	e00f      	b.n	2486 <__swhatbuf_r+0x42>
    2466:	aa01      	add	r2, sp, #4
    2468:	f000 f98e 	bl	2788 <_fstat_r>
    246c:	2800      	cmp	r0, #0
    246e:	dbf2      	blt.n	2456 <__swhatbuf_r+0x12>
    2470:	22f0      	movs	r2, #240	; 0xf0
    2472:	9b02      	ldr	r3, [sp, #8]
    2474:	0212      	lsls	r2, r2, #8
    2476:	4013      	ands	r3, r2
    2478:	4a05      	ldr	r2, [pc, #20]	; (2490 <__swhatbuf_r+0x4c>)
    247a:	189b      	adds	r3, r3, r2
    247c:	425a      	negs	r2, r3
    247e:	4153      	adcs	r3, r2
    2480:	602b      	str	r3, [r5, #0]
    2482:	e7ed      	b.n	2460 <__swhatbuf_r+0x1c>
    2484:	2340      	movs	r3, #64	; 0x40
    2486:	2000      	movs	r0, #0
    2488:	6023      	str	r3, [r4, #0]
    248a:	b010      	add	sp, #64	; 0x40
    248c:	bd70      	pop	{r4, r5, r6, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	ffffe000 	.word	0xffffe000

00002494 <__smakebuf_r>:
    2494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2496:	2602      	movs	r6, #2
    2498:	898b      	ldrh	r3, [r1, #12]
    249a:	0005      	movs	r5, r0
    249c:	000c      	movs	r4, r1
    249e:	4233      	tst	r3, r6
    24a0:	d006      	beq.n	24b0 <__smakebuf_r+0x1c>
    24a2:	0023      	movs	r3, r4
    24a4:	3347      	adds	r3, #71	; 0x47
    24a6:	6023      	str	r3, [r4, #0]
    24a8:	6123      	str	r3, [r4, #16]
    24aa:	2301      	movs	r3, #1
    24ac:	6163      	str	r3, [r4, #20]
    24ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    24b0:	ab01      	add	r3, sp, #4
    24b2:	466a      	mov	r2, sp
    24b4:	f7ff ffc6 	bl	2444 <__swhatbuf_r>
    24b8:	9900      	ldr	r1, [sp, #0]
    24ba:	0007      	movs	r7, r0
    24bc:	0028      	movs	r0, r5
    24be:	f000 f881 	bl	25c4 <_malloc_r>
    24c2:	2800      	cmp	r0, #0
    24c4:	d108      	bne.n	24d8 <__smakebuf_r+0x44>
    24c6:	220c      	movs	r2, #12
    24c8:	5ea3      	ldrsh	r3, [r4, r2]
    24ca:	059a      	lsls	r2, r3, #22
    24cc:	d4ef      	bmi.n	24ae <__smakebuf_r+0x1a>
    24ce:	2203      	movs	r2, #3
    24d0:	4393      	bics	r3, r2
    24d2:	431e      	orrs	r6, r3
    24d4:	81a6      	strh	r6, [r4, #12]
    24d6:	e7e4      	b.n	24a2 <__smakebuf_r+0xe>
    24d8:	4b0f      	ldr	r3, [pc, #60]	; (2518 <__smakebuf_r+0x84>)
    24da:	62ab      	str	r3, [r5, #40]	; 0x28
    24dc:	2380      	movs	r3, #128	; 0x80
    24de:	89a2      	ldrh	r2, [r4, #12]
    24e0:	6020      	str	r0, [r4, #0]
    24e2:	4313      	orrs	r3, r2
    24e4:	81a3      	strh	r3, [r4, #12]
    24e6:	9b00      	ldr	r3, [sp, #0]
    24e8:	6120      	str	r0, [r4, #16]
    24ea:	6163      	str	r3, [r4, #20]
    24ec:	9b01      	ldr	r3, [sp, #4]
    24ee:	2b00      	cmp	r3, #0
    24f0:	d00d      	beq.n	250e <__smakebuf_r+0x7a>
    24f2:	230e      	movs	r3, #14
    24f4:	5ee1      	ldrsh	r1, [r4, r3]
    24f6:	0028      	movs	r0, r5
    24f8:	f000 f958 	bl	27ac <_isatty_r>
    24fc:	2800      	cmp	r0, #0
    24fe:	d006      	beq.n	250e <__smakebuf_r+0x7a>
    2500:	2203      	movs	r2, #3
    2502:	89a3      	ldrh	r3, [r4, #12]
    2504:	4393      	bics	r3, r2
    2506:	001a      	movs	r2, r3
    2508:	2301      	movs	r3, #1
    250a:	4313      	orrs	r3, r2
    250c:	81a3      	strh	r3, [r4, #12]
    250e:	89a0      	ldrh	r0, [r4, #12]
    2510:	4338      	orrs	r0, r7
    2512:	81a0      	strh	r0, [r4, #12]
    2514:	e7cb      	b.n	24ae <__smakebuf_r+0x1a>
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	00002295 	.word	0x00002295

0000251c <malloc>:
    251c:	b510      	push	{r4, lr}
    251e:	4b03      	ldr	r3, [pc, #12]	; (252c <malloc+0x10>)
    2520:	0001      	movs	r1, r0
    2522:	6818      	ldr	r0, [r3, #0]
    2524:	f000 f84e 	bl	25c4 <_malloc_r>
    2528:	bd10      	pop	{r4, pc}
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	2000000c 	.word	0x2000000c

00002530 <_free_r>:
    2530:	b570      	push	{r4, r5, r6, lr}
    2532:	0005      	movs	r5, r0
    2534:	2900      	cmp	r1, #0
    2536:	d010      	beq.n	255a <_free_r+0x2a>
    2538:	1f0c      	subs	r4, r1, #4
    253a:	6823      	ldr	r3, [r4, #0]
    253c:	2b00      	cmp	r3, #0
    253e:	da00      	bge.n	2542 <_free_r+0x12>
    2540:	18e4      	adds	r4, r4, r3
    2542:	0028      	movs	r0, r5
    2544:	f000 f958 	bl	27f8 <__malloc_lock>
    2548:	4a1d      	ldr	r2, [pc, #116]	; (25c0 <_free_r+0x90>)
    254a:	6813      	ldr	r3, [r2, #0]
    254c:	2b00      	cmp	r3, #0
    254e:	d105      	bne.n	255c <_free_r+0x2c>
    2550:	6063      	str	r3, [r4, #4]
    2552:	6014      	str	r4, [r2, #0]
    2554:	0028      	movs	r0, r5
    2556:	f000 f950 	bl	27fa <__malloc_unlock>
    255a:	bd70      	pop	{r4, r5, r6, pc}
    255c:	42a3      	cmp	r3, r4
    255e:	d909      	bls.n	2574 <_free_r+0x44>
    2560:	6821      	ldr	r1, [r4, #0]
    2562:	1860      	adds	r0, r4, r1
    2564:	4283      	cmp	r3, r0
    2566:	d1f3      	bne.n	2550 <_free_r+0x20>
    2568:	6818      	ldr	r0, [r3, #0]
    256a:	685b      	ldr	r3, [r3, #4]
    256c:	1841      	adds	r1, r0, r1
    256e:	6021      	str	r1, [r4, #0]
    2570:	e7ee      	b.n	2550 <_free_r+0x20>
    2572:	0013      	movs	r3, r2
    2574:	685a      	ldr	r2, [r3, #4]
    2576:	2a00      	cmp	r2, #0
    2578:	d001      	beq.n	257e <_free_r+0x4e>
    257a:	42a2      	cmp	r2, r4
    257c:	d9f9      	bls.n	2572 <_free_r+0x42>
    257e:	6819      	ldr	r1, [r3, #0]
    2580:	1858      	adds	r0, r3, r1
    2582:	42a0      	cmp	r0, r4
    2584:	d10b      	bne.n	259e <_free_r+0x6e>
    2586:	6820      	ldr	r0, [r4, #0]
    2588:	1809      	adds	r1, r1, r0
    258a:	1858      	adds	r0, r3, r1
    258c:	6019      	str	r1, [r3, #0]
    258e:	4282      	cmp	r2, r0
    2590:	d1e0      	bne.n	2554 <_free_r+0x24>
    2592:	6810      	ldr	r0, [r2, #0]
    2594:	6852      	ldr	r2, [r2, #4]
    2596:	1841      	adds	r1, r0, r1
    2598:	6019      	str	r1, [r3, #0]
    259a:	605a      	str	r2, [r3, #4]
    259c:	e7da      	b.n	2554 <_free_r+0x24>
    259e:	42a0      	cmp	r0, r4
    25a0:	d902      	bls.n	25a8 <_free_r+0x78>
    25a2:	230c      	movs	r3, #12
    25a4:	602b      	str	r3, [r5, #0]
    25a6:	e7d5      	b.n	2554 <_free_r+0x24>
    25a8:	6821      	ldr	r1, [r4, #0]
    25aa:	1860      	adds	r0, r4, r1
    25ac:	4282      	cmp	r2, r0
    25ae:	d103      	bne.n	25b8 <_free_r+0x88>
    25b0:	6810      	ldr	r0, [r2, #0]
    25b2:	6852      	ldr	r2, [r2, #4]
    25b4:	1841      	adds	r1, r0, r1
    25b6:	6021      	str	r1, [r4, #0]
    25b8:	6062      	str	r2, [r4, #4]
    25ba:	605c      	str	r4, [r3, #4]
    25bc:	e7ca      	b.n	2554 <_free_r+0x24>
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000120 	.word	0x20000120

000025c4 <_malloc_r>:
    25c4:	2303      	movs	r3, #3
    25c6:	b570      	push	{r4, r5, r6, lr}
    25c8:	1ccd      	adds	r5, r1, #3
    25ca:	439d      	bics	r5, r3
    25cc:	3508      	adds	r5, #8
    25ce:	0006      	movs	r6, r0
    25d0:	2d0c      	cmp	r5, #12
    25d2:	d21e      	bcs.n	2612 <_malloc_r+0x4e>
    25d4:	250c      	movs	r5, #12
    25d6:	42a9      	cmp	r1, r5
    25d8:	d81d      	bhi.n	2616 <_malloc_r+0x52>
    25da:	0030      	movs	r0, r6
    25dc:	f000 f90c 	bl	27f8 <__malloc_lock>
    25e0:	4a25      	ldr	r2, [pc, #148]	; (2678 <_malloc_r+0xb4>)
    25e2:	6814      	ldr	r4, [r2, #0]
    25e4:	0021      	movs	r1, r4
    25e6:	2900      	cmp	r1, #0
    25e8:	d119      	bne.n	261e <_malloc_r+0x5a>
    25ea:	4c24      	ldr	r4, [pc, #144]	; (267c <_malloc_r+0xb8>)
    25ec:	6823      	ldr	r3, [r4, #0]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d103      	bne.n	25fa <_malloc_r+0x36>
    25f2:	0030      	movs	r0, r6
    25f4:	f000 f844 	bl	2680 <_sbrk_r>
    25f8:	6020      	str	r0, [r4, #0]
    25fa:	0029      	movs	r1, r5
    25fc:	0030      	movs	r0, r6
    25fe:	f000 f83f 	bl	2680 <_sbrk_r>
    2602:	1c43      	adds	r3, r0, #1
    2604:	d12c      	bne.n	2660 <_malloc_r+0x9c>
    2606:	230c      	movs	r3, #12
    2608:	0030      	movs	r0, r6
    260a:	6033      	str	r3, [r6, #0]
    260c:	f000 f8f5 	bl	27fa <__malloc_unlock>
    2610:	e003      	b.n	261a <_malloc_r+0x56>
    2612:	2d00      	cmp	r5, #0
    2614:	dadf      	bge.n	25d6 <_malloc_r+0x12>
    2616:	230c      	movs	r3, #12
    2618:	6033      	str	r3, [r6, #0]
    261a:	2000      	movs	r0, #0
    261c:	bd70      	pop	{r4, r5, r6, pc}
    261e:	680b      	ldr	r3, [r1, #0]
    2620:	1b5b      	subs	r3, r3, r5
    2622:	d41a      	bmi.n	265a <_malloc_r+0x96>
    2624:	2b0b      	cmp	r3, #11
    2626:	d903      	bls.n	2630 <_malloc_r+0x6c>
    2628:	600b      	str	r3, [r1, #0]
    262a:	18cc      	adds	r4, r1, r3
    262c:	6025      	str	r5, [r4, #0]
    262e:	e003      	b.n	2638 <_malloc_r+0x74>
    2630:	428c      	cmp	r4, r1
    2632:	d10e      	bne.n	2652 <_malloc_r+0x8e>
    2634:	6863      	ldr	r3, [r4, #4]
    2636:	6013      	str	r3, [r2, #0]
    2638:	0030      	movs	r0, r6
    263a:	f000 f8de 	bl	27fa <__malloc_unlock>
    263e:	0020      	movs	r0, r4
    2640:	2207      	movs	r2, #7
    2642:	300b      	adds	r0, #11
    2644:	1d23      	adds	r3, r4, #4
    2646:	4390      	bics	r0, r2
    2648:	1ac3      	subs	r3, r0, r3
    264a:	d0e7      	beq.n	261c <_malloc_r+0x58>
    264c:	425a      	negs	r2, r3
    264e:	50e2      	str	r2, [r4, r3]
    2650:	e7e4      	b.n	261c <_malloc_r+0x58>
    2652:	684b      	ldr	r3, [r1, #4]
    2654:	6063      	str	r3, [r4, #4]
    2656:	000c      	movs	r4, r1
    2658:	e7ee      	b.n	2638 <_malloc_r+0x74>
    265a:	000c      	movs	r4, r1
    265c:	6849      	ldr	r1, [r1, #4]
    265e:	e7c2      	b.n	25e6 <_malloc_r+0x22>
    2660:	2303      	movs	r3, #3
    2662:	1cc4      	adds	r4, r0, #3
    2664:	439c      	bics	r4, r3
    2666:	42a0      	cmp	r0, r4
    2668:	d0e0      	beq.n	262c <_malloc_r+0x68>
    266a:	1a21      	subs	r1, r4, r0
    266c:	0030      	movs	r0, r6
    266e:	f000 f807 	bl	2680 <_sbrk_r>
    2672:	1c43      	adds	r3, r0, #1
    2674:	d1da      	bne.n	262c <_malloc_r+0x68>
    2676:	e7c6      	b.n	2606 <_malloc_r+0x42>
    2678:	20000120 	.word	0x20000120
    267c:	20000124 	.word	0x20000124

00002680 <_sbrk_r>:
    2680:	2300      	movs	r3, #0
    2682:	b570      	push	{r4, r5, r6, lr}
    2684:	4c06      	ldr	r4, [pc, #24]	; (26a0 <_sbrk_r+0x20>)
    2686:	0005      	movs	r5, r0
    2688:	0008      	movs	r0, r1
    268a:	6023      	str	r3, [r4, #0]
    268c:	f7ff f8e0 	bl	1850 <_sbrk>
    2690:	1c43      	adds	r3, r0, #1
    2692:	d103      	bne.n	269c <_sbrk_r+0x1c>
    2694:	6823      	ldr	r3, [r4, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	d000      	beq.n	269c <_sbrk_r+0x1c>
    269a:	602b      	str	r3, [r5, #0]
    269c:	bd70      	pop	{r4, r5, r6, pc}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	200001a4 	.word	0x200001a4

000026a4 <__sread>:
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	000c      	movs	r4, r1
    26a8:	250e      	movs	r5, #14
    26aa:	5f49      	ldrsh	r1, [r1, r5]
    26ac:	f000 f8a6 	bl	27fc <_read_r>
    26b0:	2800      	cmp	r0, #0
    26b2:	db03      	blt.n	26bc <__sread+0x18>
    26b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    26b6:	181b      	adds	r3, r3, r0
    26b8:	6563      	str	r3, [r4, #84]	; 0x54
    26ba:	bd70      	pop	{r4, r5, r6, pc}
    26bc:	89a3      	ldrh	r3, [r4, #12]
    26be:	4a02      	ldr	r2, [pc, #8]	; (26c8 <__sread+0x24>)
    26c0:	4013      	ands	r3, r2
    26c2:	81a3      	strh	r3, [r4, #12]
    26c4:	e7f9      	b.n	26ba <__sread+0x16>
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	ffffefff 	.word	0xffffefff

000026cc <__swrite>:
    26cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ce:	001f      	movs	r7, r3
    26d0:	898b      	ldrh	r3, [r1, #12]
    26d2:	0005      	movs	r5, r0
    26d4:	000c      	movs	r4, r1
    26d6:	0016      	movs	r6, r2
    26d8:	05db      	lsls	r3, r3, #23
    26da:	d505      	bpl.n	26e8 <__swrite+0x1c>
    26dc:	230e      	movs	r3, #14
    26de:	5ec9      	ldrsh	r1, [r1, r3]
    26e0:	2200      	movs	r2, #0
    26e2:	2302      	movs	r3, #2
    26e4:	f000 f874 	bl	27d0 <_lseek_r>
    26e8:	89a3      	ldrh	r3, [r4, #12]
    26ea:	4a05      	ldr	r2, [pc, #20]	; (2700 <__swrite+0x34>)
    26ec:	0028      	movs	r0, r5
    26ee:	4013      	ands	r3, r2
    26f0:	81a3      	strh	r3, [r4, #12]
    26f2:	0032      	movs	r2, r6
    26f4:	230e      	movs	r3, #14
    26f6:	5ee1      	ldrsh	r1, [r4, r3]
    26f8:	003b      	movs	r3, r7
    26fa:	f000 f81f 	bl	273c <_write_r>
    26fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2700:	ffffefff 	.word	0xffffefff

00002704 <__sseek>:
    2704:	b570      	push	{r4, r5, r6, lr}
    2706:	000c      	movs	r4, r1
    2708:	250e      	movs	r5, #14
    270a:	5f49      	ldrsh	r1, [r1, r5]
    270c:	f000 f860 	bl	27d0 <_lseek_r>
    2710:	89a3      	ldrh	r3, [r4, #12]
    2712:	1c42      	adds	r2, r0, #1
    2714:	d103      	bne.n	271e <__sseek+0x1a>
    2716:	4a05      	ldr	r2, [pc, #20]	; (272c <__sseek+0x28>)
    2718:	4013      	ands	r3, r2
    271a:	81a3      	strh	r3, [r4, #12]
    271c:	bd70      	pop	{r4, r5, r6, pc}
    271e:	2280      	movs	r2, #128	; 0x80
    2720:	0152      	lsls	r2, r2, #5
    2722:	4313      	orrs	r3, r2
    2724:	81a3      	strh	r3, [r4, #12]
    2726:	6560      	str	r0, [r4, #84]	; 0x54
    2728:	e7f8      	b.n	271c <__sseek+0x18>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	ffffefff 	.word	0xffffefff

00002730 <__sclose>:
    2730:	b510      	push	{r4, lr}
    2732:	230e      	movs	r3, #14
    2734:	5ec9      	ldrsh	r1, [r1, r3]
    2736:	f000 f815 	bl	2764 <_close_r>
    273a:	bd10      	pop	{r4, pc}

0000273c <_write_r>:
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	0005      	movs	r5, r0
    2740:	0008      	movs	r0, r1
    2742:	0011      	movs	r1, r2
    2744:	2200      	movs	r2, #0
    2746:	4c06      	ldr	r4, [pc, #24]	; (2760 <_write_r+0x24>)
    2748:	6022      	str	r2, [r4, #0]
    274a:	001a      	movs	r2, r3
    274c:	f7ff f858 	bl	1800 <_write>
    2750:	1c43      	adds	r3, r0, #1
    2752:	d103      	bne.n	275c <_write_r+0x20>
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d000      	beq.n	275c <_write_r+0x20>
    275a:	602b      	str	r3, [r5, #0]
    275c:	bd70      	pop	{r4, r5, r6, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	200001a4 	.word	0x200001a4

00002764 <_close_r>:
    2764:	2300      	movs	r3, #0
    2766:	b570      	push	{r4, r5, r6, lr}
    2768:	4c06      	ldr	r4, [pc, #24]	; (2784 <_close_r+0x20>)
    276a:	0005      	movs	r5, r0
    276c:	0008      	movs	r0, r1
    276e:	6023      	str	r3, [r4, #0]
    2770:	f7ff f880 	bl	1874 <_close>
    2774:	1c43      	adds	r3, r0, #1
    2776:	d103      	bne.n	2780 <_close_r+0x1c>
    2778:	6823      	ldr	r3, [r4, #0]
    277a:	2b00      	cmp	r3, #0
    277c:	d000      	beq.n	2780 <_close_r+0x1c>
    277e:	602b      	str	r3, [r5, #0]
    2780:	bd70      	pop	{r4, r5, r6, pc}
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	200001a4 	.word	0x200001a4

00002788 <_fstat_r>:
    2788:	2300      	movs	r3, #0
    278a:	b570      	push	{r4, r5, r6, lr}
    278c:	4c06      	ldr	r4, [pc, #24]	; (27a8 <_fstat_r+0x20>)
    278e:	0005      	movs	r5, r0
    2790:	0008      	movs	r0, r1
    2792:	0011      	movs	r1, r2
    2794:	6023      	str	r3, [r4, #0]
    2796:	f7ff f870 	bl	187a <_fstat>
    279a:	1c43      	adds	r3, r0, #1
    279c:	d103      	bne.n	27a6 <_fstat_r+0x1e>
    279e:	6823      	ldr	r3, [r4, #0]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d000      	beq.n	27a6 <_fstat_r+0x1e>
    27a4:	602b      	str	r3, [r5, #0]
    27a6:	bd70      	pop	{r4, r5, r6, pc}
    27a8:	200001a4 	.word	0x200001a4

000027ac <_isatty_r>:
    27ac:	2300      	movs	r3, #0
    27ae:	b570      	push	{r4, r5, r6, lr}
    27b0:	4c06      	ldr	r4, [pc, #24]	; (27cc <_isatty_r+0x20>)
    27b2:	0005      	movs	r5, r0
    27b4:	0008      	movs	r0, r1
    27b6:	6023      	str	r3, [r4, #0]
    27b8:	f7ff f864 	bl	1884 <_isatty>
    27bc:	1c43      	adds	r3, r0, #1
    27be:	d103      	bne.n	27c8 <_isatty_r+0x1c>
    27c0:	6823      	ldr	r3, [r4, #0]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d000      	beq.n	27c8 <_isatty_r+0x1c>
    27c6:	602b      	str	r3, [r5, #0]
    27c8:	bd70      	pop	{r4, r5, r6, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	200001a4 	.word	0x200001a4

000027d0 <_lseek_r>:
    27d0:	b570      	push	{r4, r5, r6, lr}
    27d2:	0005      	movs	r5, r0
    27d4:	0008      	movs	r0, r1
    27d6:	0011      	movs	r1, r2
    27d8:	2200      	movs	r2, #0
    27da:	4c06      	ldr	r4, [pc, #24]	; (27f4 <_lseek_r+0x24>)
    27dc:	6022      	str	r2, [r4, #0]
    27de:	001a      	movs	r2, r3
    27e0:	f7ff f852 	bl	1888 <_lseek>
    27e4:	1c43      	adds	r3, r0, #1
    27e6:	d103      	bne.n	27f0 <_lseek_r+0x20>
    27e8:	6823      	ldr	r3, [r4, #0]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d000      	beq.n	27f0 <_lseek_r+0x20>
    27ee:	602b      	str	r3, [r5, #0]
    27f0:	bd70      	pop	{r4, r5, r6, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	200001a4 	.word	0x200001a4

000027f8 <__malloc_lock>:
    27f8:	4770      	bx	lr

000027fa <__malloc_unlock>:
    27fa:	4770      	bx	lr

000027fc <_read_r>:
    27fc:	b570      	push	{r4, r5, r6, lr}
    27fe:	0005      	movs	r5, r0
    2800:	0008      	movs	r0, r1
    2802:	0011      	movs	r1, r2
    2804:	2200      	movs	r2, #0
    2806:	4c06      	ldr	r4, [pc, #24]	; (2820 <_read_r+0x24>)
    2808:	6022      	str	r2, [r4, #0]
    280a:	001a      	movs	r2, r3
    280c:	f7fe ffd6 	bl	17bc <_read>
    2810:	1c43      	adds	r3, r0, #1
    2812:	d103      	bne.n	281c <_read_r+0x20>
    2814:	6823      	ldr	r3, [r4, #0]
    2816:	2b00      	cmp	r3, #0
    2818:	d000      	beq.n	281c <_read_r+0x20>
    281a:	602b      	str	r3, [r5, #0]
    281c:	bd70      	pop	{r4, r5, r6, pc}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	200001a4 	.word	0x200001a4
    2824:	42000800 	.word	0x42000800
    2828:	42000c00 	.word	0x42000c00
    282c:	42001000 	.word	0x42001000
    2830:	42001400 	.word	0x42001400
    2834:	42001800 	.word	0x42001800
    2838:	42001c00 	.word	0x42001c00
    283c:	00000db2 	.word	0x00000db2
    2840:	00000dae 	.word	0x00000dae
    2844:	00000dae 	.word	0x00000dae
    2848:	00000e14 	.word	0x00000e14
    284c:	00000e14 	.word	0x00000e14
    2850:	00000dc6 	.word	0x00000dc6
    2854:	00000db8 	.word	0x00000db8
    2858:	00000dcc 	.word	0x00000dcc
    285c:	00000e02 	.word	0x00000e02
    2860:	00000e9c 	.word	0x00000e9c
    2864:	00000e7c 	.word	0x00000e7c
    2868:	00000e7c 	.word	0x00000e7c
    286c:	00000f08 	.word	0x00000f08
    2870:	00000e8e 	.word	0x00000e8e
    2874:	00000eaa 	.word	0x00000eaa
    2878:	00000e80 	.word	0x00000e80
    287c:	00000eb8 	.word	0x00000eb8
    2880:	00000ef8 	.word	0x00000ef8
    2884:	42002c00 	.word	0x42002c00
    2888:	42003000 	.word	0x42003000
    288c:	42003400 	.word	0x42003400
    2890:	42003800 	.word	0x42003800
    2894:	42003c00 	.word	0x42003c00
    2898:	10000800 	.word	0x10000800
    289c:	40002000 	.word	0x40002000
    28a0:	00008000 	.word	0x00008000
    28a4:	47202d2d 	.word	0x47202d2d
    28a8:	69747465 	.word	0x69747465
    28ac:	5320676e 	.word	0x5320676e
    28b0:	74726174 	.word	0x74726174
    28b4:	45206465 	.word	0x45206465
    28b8:	706d6178 	.word	0x706d6178
    28bc:	2d20656c 	.word	0x2d20656c
    28c0:	2d0a0d2d 	.word	0x2d0a0d2d
    28c4:	4153202d 	.word	0x4153202d
    28c8:	3132444d 	.word	0x3132444d
    28cc:	4c50585f 	.word	0x4c50585f
    28d0:	454e4941 	.word	0x454e4941
    28d4:	52505f44 	.word	0x52505f44
    28d8:	2d2d204f 	.word	0x2d2d204f
    28dc:	2d2d0a0d 	.word	0x2d2d0a0d
    28e0:	6d6f4320 	.word	0x6d6f4320
    28e4:	656c6970 	.word	0x656c6970
    28e8:	4e203a64 	.word	0x4e203a64
    28ec:	2020766f 	.word	0x2020766f
    28f0:	30322031 	.word	0x30322031
    28f4:	31203232 	.word	0x31203232
    28f8:	37353a39 	.word	0x37353a39
    28fc:	2031333a 	.word	0x2031333a
    2900:	0a0d2d2d 	.word	0x0a0d2d2d
    2904:	50202d2d 	.word	0x50202d2d
    2908:	73736572 	.word	0x73736572
    290c:	20676e69 	.word	0x20676e69
    2910:	20646e61 	.word	0x20646e61
    2914:	656c6572 	.word	0x656c6572
    2918:	20657361 	.word	0x20657361
    291c:	74747562 	.word	0x74747562
    2920:	53206e6f 	.word	0x53206e6f
    2924:	73203057 	.word	0x73203057
    2928:	6c756f68 	.word	0x6c756f68
    292c:	616d2064 	.word	0x616d2064
    2930:	4c20656b 	.word	0x4c20656b
    2934:	20304445 	.word	0x20304445
    2938:	61206e6f 	.word	0x61206e6f
    293c:	6f20646e 	.word	0x6f20646e
    2940:	2d206666 	.word	0x2d206666
    2944:	00000d2d 	.word	0x00000d2d
    2948:	20656854 	.word	0x20656854
    294c:	7074756f 	.word	0x7074756f
    2950:	69207475 	.word	0x69207475
    2954:	72742073 	.word	0x72742073
    2958:	65676769 	.word	0x65676769
    295c:	20646572 	.word	0x20646572
    2960:	54207962 	.word	0x54207962
    2964:	6f632043 	.word	0x6f632043
    2968:	65746e75 	.word	0x65746e75
    296c:	00000d72 	.word	0x00000d72

00002970 <tc_interrupt_vectors.12814>:
    2970:	15141312 00000016                       ........

00002978 <_global_impure_ptr>:
    2978:	20000010                                ... 

0000297c <__sf_fake_stderr>:
	...

0000299c <__sf_fake_stdin>:
	...

000029bc <__sf_fake_stdout>:
	...

000029dc <_init>:
    29dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29e2:	bc08      	pop	{r3}
    29e4:	469e      	mov	lr, r3
    29e6:	4770      	bx	lr

000029e8 <__init_array_start>:
    29e8:	000000dd 	.word	0x000000dd

000029ec <_fini>:
    29ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29f2:	bc08      	pop	{r3}
    29f4:	469e      	mov	lr, r3
    29f6:	4770      	bx	lr

000029f8 <__fini_array_start>:
    29f8:	000000b5 	.word	0x000000b5
