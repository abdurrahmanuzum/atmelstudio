
atstart_timers_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000028  20000000  00000840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  20000028  00000868  00020028  2**2
                  ALLOC
  3 .stack        00002000  20000078  000008b8  00020028  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .debug_info   000135a9  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d09  00000000  00000000  00033652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001939  00000000  00000000  0003535b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000350  00000000  00000000  00036c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a0  00000000  00000000  00036fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000158ba  00000000  00000000  00037284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008b68  00000000  00000000  0004cb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078b04  00000000  00000000  000556a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000628  00000000  00000000  000ce1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     x . %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
  7c:	45 07 00 00 21 01 00 00 21 01 00 00 21 01 00 00     E...!...!...!...
  8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000028 	.word	0x20000028
  d4:	00000000 	.word	0x00000000
  d8:	00000840 	.word	0x00000840

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	2000002c 	.word	0x2000002c
 108:	00000840 	.word	0x00000840
 10c:	00000840 	.word	0x00000840
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	00000235 	.word	0x00000235

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
 128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
 12a:	429a      	cmp	r2, r3
 12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
 12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
 130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
 132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 134:	6811      	ldr	r1, [r2, #0]
 136:	6019      	str	r1, [r3, #0]
 138:	3304      	adds	r3, #4
 13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
 13e:	428b      	cmp	r3, r1
 140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
 144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
 146:	2200      	movs	r2, #0
 148:	601a      	str	r2, [r3, #0]
 14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
 14e:	4293      	cmp	r3, r2
 150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
 154:	21ff      	movs	r1, #255	; 0xff
 156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
 158:	438b      	bics	r3, r1
 15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 15c:	39fd      	subs	r1, #253	; 0xfd
 15e:	2390      	movs	r3, #144	; 0x90
 160:	005b      	lsls	r3, r3, #1
 162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
 164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	2503      	movs	r5, #3
 16c:	43ab      	bics	r3, r5
 16e:	2402      	movs	r4, #2
 170:	4323      	orrs	r3, r4
 172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 174:	78d3      	ldrb	r3, [r2, #3]
 176:	270c      	movs	r7, #12
 178:	43bb      	bics	r3, r7
 17a:	2608      	movs	r6, #8
 17c:	4333      	orrs	r3, r6
 17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
 182:	7b98      	ldrb	r0, [r3, #14]
 184:	2230      	movs	r2, #48	; 0x30
 186:	4390      	bics	r0, r2
 188:	2220      	movs	r2, #32
 18a:	4310      	orrs	r0, r2
 18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 18e:	7b99      	ldrb	r1, [r3, #14]
 190:	43b9      	bics	r1, r7
 192:	4331      	orrs	r1, r6
 194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 196:	7b9a      	ldrb	r2, [r3, #14]
 198:	43aa      	bics	r2, r5
 19a:	4322      	orrs	r2, r4
 19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
 1a0:	6851      	ldr	r1, [r2, #4]
 1a2:	2380      	movs	r3, #128	; 0x80
 1a4:	430b      	orrs	r3, r1
 1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
 1aa:	4798      	blx	r3
        main();
 1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
 1ae:	4798      	blx	r3
 1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	00000840 	.word	0x00000840
 1b8:	20000000 	.word	0x20000000
 1bc:	20000028 	.word	0x20000028
 1c0:	20000028 	.word	0x20000028
 1c4:	20000078 	.word	0x20000078
 1c8:	e000ed00 	.word	0xe000ed00
 1cc:	00000000 	.word	0x00000000
 1d0:	41007000 	.word	0x41007000
 1d4:	41005000 	.word	0x41005000
 1d8:	41004800 	.word	0x41004800
 1dc:	41004000 	.word	0x41004000
 1e0:	000007a1 	.word	0x000007a1
 1e4:	00000765 	.word	0x00000765

000001e8 <TIMER_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
 1e8:	4a04      	ldr	r2, [pc, #16]	; (1fc <TIMER_0_CLOCK_init+0x14>)
 1ea:	6a11      	ldr	r1, [r2, #32]
 1ec:	2380      	movs	r3, #128	; 0x80
 1ee:	005b      	lsls	r3, r3, #1
 1f0:	430b      	orrs	r3, r1
 1f2:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
 1f4:	4a02      	ldr	r2, [pc, #8]	; (200 <TIMER_0_CLOCK_init+0x18>)
 1f6:	4b03      	ldr	r3, [pc, #12]	; (204 <TIMER_0_CLOCK_init+0x1c>)
 1f8:	805a      	strh	r2, [r3, #2]

void TIMER_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
}
 1fa:	4770      	bx	lr
 1fc:	40000400 	.word	0x40000400
 200:	0000401a 	.word	0x0000401a
 204:	40000c00 	.word	0x40000c00

00000208 <TIMER_0_init>:

void TIMER_0_init(void)
{
 208:	b510      	push	{r4, lr}
	TIMER_0_CLOCK_init();
 20a:	4b05      	ldr	r3, [pc, #20]	; (220 <TIMER_0_init+0x18>)
 20c:	4798      	blx	r3
	timer_init(&TIMER_0, TCC0, _tcc_get_timer());
 20e:	4b05      	ldr	r3, [pc, #20]	; (224 <TIMER_0_init+0x1c>)
 210:	4798      	blx	r3
 212:	0002      	movs	r2, r0
 214:	4904      	ldr	r1, [pc, #16]	; (228 <TIMER_0_init+0x20>)
 216:	4805      	ldr	r0, [pc, #20]	; (22c <TIMER_0_init+0x24>)
 218:	4b05      	ldr	r3, [pc, #20]	; (230 <TIMER_0_init+0x28>)
 21a:	4798      	blx	r3
}
 21c:	bd10      	pop	{r4, pc}
 21e:	46c0      	nop			; (mov r8, r8)
 220:	000001e9 	.word	0x000001e9
 224:	00000725 	.word	0x00000725
 228:	42002000 	.word	0x42002000
 22c:	20000048 	.word	0x20000048
 230:	0000034d 	.word	0x0000034d

00000234 <system_init>:

void system_init(void)
{
 234:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 236:	4b0b      	ldr	r3, [pc, #44]	; (264 <system_init+0x30>)
 238:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 23a:	23c0      	movs	r3, #192	; 0xc0
 23c:	05db      	lsls	r3, r3, #23
 23e:	2280      	movs	r2, #128	; 0x80
 240:	0312      	lsls	r2, r2, #12
 242:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 244:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 246:	4b08      	ldr	r3, [pc, #32]	; (268 <system_init+0x34>)
 248:	2280      	movs	r2, #128	; 0x80
 24a:	05d2      	lsls	r2, r2, #23
 24c:	629a      	str	r2, [r3, #40]	; 0x28
 24e:	4a07      	ldr	r2, [pc, #28]	; (26c <system_init+0x38>)
 250:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 252:	2153      	movs	r1, #83	; 0x53
 254:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 256:	2001      	movs	r0, #1
 258:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 25a:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LC1_SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LC1_SCK, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
 25c:	4b04      	ldr	r3, [pc, #16]	; (270 <system_init+0x3c>)
 25e:	4798      	blx	r3
}
 260:	bd10      	pop	{r4, pc}
 262:	46c0      	nop			; (mov r8, r8)
 264:	00000501 	.word	0x00000501
 268:	41004400 	.word	0x41004400
 26c:	c0000008 	.word	0xc0000008
 270:	00000209 	.word	0x00000209

00000274 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 274:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
 278:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 27a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 27c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
 280:	4770      	bx	lr

00000282 <atomic_leave_critical>:
 282:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
 286:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 288:	f383 8810 	msr	PRIMASK, r3
}
 28c:	4770      	bx	lr
	...

00000290 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
 290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
 292:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
 294:	2e00      	cmp	r6, #0
 296:	d002      	beq.n	29e <timer_add_timer_task+0xe>
 298:	0033      	movs	r3, r6
 29a:	2500      	movs	r5, #0
 29c:	e00c      	b.n	2b8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
 29e:	4b10      	ldr	r3, [pc, #64]	; (2e0 <timer_add_timer_task+0x50>)
 2a0:	4798      	blx	r3
		return;
 2a2:	e018      	b.n	2d6 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
 2a4:	689f      	ldr	r7, [r3, #8]
 2a6:	46bc      	mov	ip, r7
 2a8:	4464      	add	r4, ip
 2aa:	1aa4      	subs	r4, r4, r2
 2ac:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
 2ae:	688f      	ldr	r7, [r1, #8]
 2b0:	42bc      	cmp	r4, r7
 2b2:	d20b      	bcs.n	2cc <timer_add_timer_task+0x3c>
			break;
		prev = it;
 2b4:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
 2b6:	681b      	ldr	r3, [r3, #0]
 2b8:	2b00      	cmp	r3, #0
 2ba:	d007      	beq.n	2cc <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
 2bc:	685c      	ldr	r4, [r3, #4]
 2be:	4294      	cmp	r4, r2
 2c0:	d8f0      	bhi.n	2a4 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
 2c2:	1aa4      	subs	r4, r4, r2
 2c4:	689f      	ldr	r7, [r3, #8]
 2c6:	46bc      	mov	ip, r7
 2c8:	4464      	add	r4, ip
 2ca:	e7f0      	b.n	2ae <timer_add_timer_task+0x1e>
	}

	if (it == head) {
 2cc:	42b3      	cmp	r3, r6
 2ce:	d003      	beq.n	2d8 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
 2d0:	0028      	movs	r0, r5
 2d2:	4b04      	ldr	r3, [pc, #16]	; (2e4 <timer_add_timer_task+0x54>)
 2d4:	4798      	blx	r3
	}
}
 2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
 2d8:	4b01      	ldr	r3, [pc, #4]	; (2e0 <timer_add_timer_task+0x50>)
 2da:	4798      	blx	r3
 2dc:	e7fb      	b.n	2d6 <timer_add_timer_task+0x46>
 2de:	46c0      	nop			; (mov r8, r8)
 2e0:	0000049d 	.word	0x0000049d
 2e4:	000004c9 	.word	0x000004c9

000002e8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
 2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2ea:	0005      	movs	r5, r0
 2ec:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
 2ee:	6903      	ldr	r3, [r0, #16]
 2f0:	1c5e      	adds	r6, r3, #1
 2f2:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
 2f4:	7e03      	ldrb	r3, [r0, #24]
 2f6:	07db      	lsls	r3, r3, #31
 2f8:	d402      	bmi.n	300 <timer_process_counted+0x18>
 2fa:	7e03      	ldrb	r3, [r0, #24]
 2fc:	079b      	lsls	r3, r3, #30
 2fe:	d50a      	bpl.n	316 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
 300:	7e2b      	ldrb	r3, [r5, #24]
 302:	2202      	movs	r2, #2
 304:	4313      	orrs	r3, r2
 306:	b2db      	uxtb	r3, r3
 308:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
 30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 30c:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
 30e:	68e3      	ldr	r3, [r4, #12]
 310:	0020      	movs	r0, r4
 312:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
 314:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
 316:	2c00      	cmp	r4, #0
 318:	d0f7      	beq.n	30a <timer_process_counted+0x22>
 31a:	6863      	ldr	r3, [r4, #4]
 31c:	1af3      	subs	r3, r6, r3
 31e:	68a2      	ldr	r2, [r4, #8]
 320:	4293      	cmp	r3, r2
 322:	d3f2      	bcc.n	30a <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
 324:	002f      	movs	r7, r5
 326:	3714      	adds	r7, #20
 328:	0038      	movs	r0, r7
 32a:	4b06      	ldr	r3, [pc, #24]	; (344 <timer_process_counted+0x5c>)
 32c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
 32e:	7c23      	ldrb	r3, [r4, #16]
 330:	2b01      	cmp	r3, #1
 332:	d1eb      	bne.n	30c <timer_process_counted+0x24>
			tmp->time_label = time;
 334:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
 336:	0032      	movs	r2, r6
 338:	0021      	movs	r1, r4
 33a:	0038      	movs	r0, r7
 33c:	4b02      	ldr	r3, [pc, #8]	; (348 <timer_process_counted+0x60>)
 33e:	4798      	blx	r3
 340:	e7e4      	b.n	30c <timer_process_counted+0x24>
 342:	46c0      	nop			; (mov r8, r8)
 344:	000004d1 	.word	0x000004d1
 348:	00000291 	.word	0x00000291

0000034c <timer_init>:
{
 34c:	b570      	push	{r4, r5, r6, lr}
 34e:	0004      	movs	r4, r0
 350:	000d      	movs	r5, r1
	ASSERT(descr && hw);
 352:	2800      	cmp	r0, #0
 354:	d012      	beq.n	37c <timer_init+0x30>
 356:	2900      	cmp	r1, #0
 358:	d00e      	beq.n	378 <timer_init+0x2c>
 35a:	2001      	movs	r0, #1
 35c:	223b      	movs	r2, #59	; 0x3b
 35e:	4908      	ldr	r1, [pc, #32]	; (380 <timer_init+0x34>)
 360:	4b08      	ldr	r3, [pc, #32]	; (384 <timer_init+0x38>)
 362:	4798      	blx	r3
	_timer_init(&descr->device, hw);
 364:	0029      	movs	r1, r5
 366:	0020      	movs	r0, r4
 368:	4b07      	ldr	r3, [pc, #28]	; (388 <timer_init+0x3c>)
 36a:	4798      	blx	r3
	descr->time                           = 0;
 36c:	2300      	movs	r3, #0
 36e:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
 370:	4b06      	ldr	r3, [pc, #24]	; (38c <timer_init+0x40>)
 372:	6023      	str	r3, [r4, #0]
}
 374:	2000      	movs	r0, #0
 376:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
 378:	2000      	movs	r0, #0
 37a:	e7ef      	b.n	35c <timer_init+0x10>
 37c:	2000      	movs	r0, #0
 37e:	e7ed      	b.n	35c <timer_init+0x10>
 380:	000007e8 	.word	0x000007e8
 384:	0000047d 	.word	0x0000047d
 388:	00000621 	.word	0x00000621
 38c:	000002e9 	.word	0x000002e9

00000390 <timer_start>:
{
 390:	b510      	push	{r4, lr}
 392:	0004      	movs	r4, r0
	ASSERT(descr);
 394:	1e43      	subs	r3, r0, #1
 396:	4198      	sbcs	r0, r3
 398:	b2c0      	uxtb	r0, r0
 39a:	2253      	movs	r2, #83	; 0x53
 39c:	4907      	ldr	r1, [pc, #28]	; (3bc <timer_start+0x2c>)
 39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <timer_start+0x30>)
 3a0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
 3a2:	0020      	movs	r0, r4
 3a4:	4b07      	ldr	r3, [pc, #28]	; (3c4 <timer_start+0x34>)
 3a6:	4798      	blx	r3
 3a8:	2800      	cmp	r0, #0
 3aa:	d104      	bne.n	3b6 <timer_start+0x26>
	_timer_start(&descr->device);
 3ac:	0020      	movs	r0, r4
 3ae:	4b06      	ldr	r3, [pc, #24]	; (3c8 <timer_start+0x38>)
 3b0:	4798      	blx	r3
	return ERR_NONE;
 3b2:	2000      	movs	r0, #0
}
 3b4:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
 3b6:	2011      	movs	r0, #17
 3b8:	4240      	negs	r0, r0
 3ba:	e7fb      	b.n	3b4 <timer_start+0x24>
 3bc:	000007e8 	.word	0x000007e8
 3c0:	0000047d 	.word	0x0000047d
 3c4:	00000713 	.word	0x00000713
 3c8:	00000701 	.word	0x00000701

000003cc <timer_add_task>:
{
 3cc:	b570      	push	{r4, r5, r6, lr}
 3ce:	b082      	sub	sp, #8
 3d0:	0004      	movs	r4, r0
 3d2:	000d      	movs	r5, r1
	ASSERT(descr && task);
 3d4:	2800      	cmp	r0, #0
 3d6:	d026      	beq.n	426 <timer_add_task+0x5a>
 3d8:	2900      	cmp	r1, #0
 3da:	d022      	beq.n	422 <timer_add_task+0x56>
 3dc:	2001      	movs	r0, #1
 3de:	227a      	movs	r2, #122	; 0x7a
 3e0:	491f      	ldr	r1, [pc, #124]	; (460 <timer_add_task+0x94>)
 3e2:	4b20      	ldr	r3, [pc, #128]	; (464 <timer_add_task+0x98>)
 3e4:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
 3e6:	7e23      	ldrb	r3, [r4, #24]
 3e8:	2201      	movs	r2, #1
 3ea:	4313      	orrs	r3, r2
 3ec:	b2db      	uxtb	r3, r3
 3ee:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
 3f0:	0026      	movs	r6, r4
 3f2:	3614      	adds	r6, #20
 3f4:	0029      	movs	r1, r5
 3f6:	0030      	movs	r0, r6
 3f8:	4b1b      	ldr	r3, [pc, #108]	; (468 <timer_add_task+0x9c>)
 3fa:	4798      	blx	r3
 3fc:	2800      	cmp	r0, #0
 3fe:	d114      	bne.n	42a <timer_add_task+0x5e>
	task->time_label = descr->time;
 400:	6923      	ldr	r3, [r4, #16]
 402:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
 404:	6922      	ldr	r2, [r4, #16]
 406:	0029      	movs	r1, r5
 408:	0030      	movs	r0, r6
 40a:	4b18      	ldr	r3, [pc, #96]	; (46c <timer_add_task+0xa0>)
 40c:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
 40e:	7e23      	ldrb	r3, [r4, #24]
 410:	2201      	movs	r2, #1
 412:	4393      	bics	r3, r2
 414:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
 416:	7e23      	ldrb	r3, [r4, #24]
 418:	079b      	lsls	r3, r3, #30
 41a:	d412      	bmi.n	442 <timer_add_task+0x76>
	return ERR_NONE;
 41c:	2000      	movs	r0, #0
}
 41e:	b002      	add	sp, #8
 420:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
 422:	2000      	movs	r0, #0
 424:	e7db      	b.n	3de <timer_add_task+0x12>
 426:	2000      	movs	r0, #0
 428:	e7d9      	b.n	3de <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
 42a:	7e23      	ldrb	r3, [r4, #24]
 42c:	2201      	movs	r2, #1
 42e:	4393      	bics	r3, r2
 430:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
 432:	327e      	adds	r2, #126	; 0x7e
 434:	490a      	ldr	r1, [pc, #40]	; (460 <timer_add_task+0x94>)
 436:	2000      	movs	r0, #0
 438:	4b0a      	ldr	r3, [pc, #40]	; (464 <timer_add_task+0x98>)
 43a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
 43c:	2012      	movs	r0, #18
 43e:	4240      	negs	r0, r0
 440:	e7ed      	b.n	41e <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
 442:	a801      	add	r0, sp, #4
 444:	4b0a      	ldr	r3, [pc, #40]	; (470 <timer_add_task+0xa4>)
 446:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
 448:	7e23      	ldrb	r3, [r4, #24]
 44a:	2202      	movs	r2, #2
 44c:	4393      	bics	r3, r2
 44e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
 450:	0020      	movs	r0, r4
 452:	4b08      	ldr	r3, [pc, #32]	; (474 <timer_add_task+0xa8>)
 454:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
 456:	a801      	add	r0, sp, #4
 458:	4b07      	ldr	r3, [pc, #28]	; (478 <timer_add_task+0xac>)
 45a:	4798      	blx	r3
	return ERR_NONE;
 45c:	2000      	movs	r0, #0
 45e:	e7de      	b.n	41e <timer_add_task+0x52>
 460:	000007e8 	.word	0x000007e8
 464:	0000047d 	.word	0x0000047d
 468:	00000485 	.word	0x00000485
 46c:	00000291 	.word	0x00000291
 470:	00000275 	.word	0x00000275
 474:	00000729 	.word	0x00000729
 478:	00000283 	.word	0x00000283

0000047c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 47c:	2800      	cmp	r0, #0
 47e:	d100      	bne.n	482 <assert+0x6>
		__asm("BKPT #0");
 480:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 482:	4770      	bx	lr

00000484 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
 484:	6803      	ldr	r3, [r0, #0]
 486:	2b00      	cmp	r3, #0
 488:	d003      	beq.n	492 <is_list_element+0xe>
		if (it == element) {
 48a:	428b      	cmp	r3, r1
 48c:	d003      	beq.n	496 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
 48e:	681b      	ldr	r3, [r3, #0]
 490:	e7f9      	b.n	486 <is_list_element+0x2>
			return true;
		}
	}

	return false;
 492:	2000      	movs	r0, #0
}
 494:	4770      	bx	lr
			return true;
 496:	2001      	movs	r0, #1
 498:	e7fc      	b.n	494 <is_list_element+0x10>
	...

0000049c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
 49c:	b570      	push	{r4, r5, r6, lr}
 49e:	0004      	movs	r4, r0
 4a0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
 4a2:	4b06      	ldr	r3, [pc, #24]	; (4bc <list_insert_as_head+0x20>)
 4a4:	4798      	blx	r3
 4a6:	2301      	movs	r3, #1
 4a8:	4058      	eors	r0, r3
 4aa:	b2c0      	uxtb	r0, r0
 4ac:	2239      	movs	r2, #57	; 0x39
 4ae:	4904      	ldr	r1, [pc, #16]	; (4c0 <list_insert_as_head+0x24>)
 4b0:	4b04      	ldr	r3, [pc, #16]	; (4c4 <list_insert_as_head+0x28>)
 4b2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
 4b4:	6823      	ldr	r3, [r4, #0]
 4b6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
 4b8:	6025      	str	r5, [r4, #0]
}
 4ba:	bd70      	pop	{r4, r5, r6, pc}
 4bc:	00000485 	.word	0x00000485
 4c0:	00000800 	.word	0x00000800
 4c4:	0000047d 	.word	0x0000047d

000004c8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
 4c8:	6803      	ldr	r3, [r0, #0]
 4ca:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
 4cc:	6001      	str	r1, [r0, #0]
}
 4ce:	4770      	bx	lr

000004d0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
 4d0:	6803      	ldr	r3, [r0, #0]
 4d2:	2b00      	cmp	r3, #0
 4d4:	d003      	beq.n	4de <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
 4d6:	681a      	ldr	r2, [r3, #0]
 4d8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
 4da:	0018      	movs	r0, r3
	}

	return NULL;
}
 4dc:	4770      	bx	lr
	return NULL;
 4de:	2000      	movs	r0, #0
 4e0:	e7fc      	b.n	4dc <list_remove_head+0xc>
	...

000004e4 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
 4e4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 4e6:	2b00      	cmp	r3, #0
 4e8:	db07      	blt.n	4fa <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 4ea:	231f      	movs	r3, #31
 4ec:	4018      	ands	r0, r3
 4ee:	3b1e      	subs	r3, #30
 4f0:	4083      	lsls	r3, r0
 4f2:	2280      	movs	r2, #128	; 0x80
 4f4:	0052      	lsls	r2, r2, #1
 4f6:	4901      	ldr	r1, [pc, #4]	; (4fc <_irq_set+0x18>)
 4f8:	508b      	str	r3, [r1, r2]
}
 4fa:	4770      	bx	lr
 4fc:	e000e100 	.word	0xe000e100

00000500 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 500:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 502:	4b06      	ldr	r3, [pc, #24]	; (51c <_init_chip+0x1c>)
 504:	685a      	ldr	r2, [r3, #4]
 506:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 508:	4b05      	ldr	r3, [pc, #20]	; (520 <_init_chip+0x20>)
 50a:	4798      	blx	r3
	_sysctrl_init_sources();
 50c:	4b05      	ldr	r3, [pc, #20]	; (524 <_init_chip+0x24>)
 50e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
 510:	4b05      	ldr	r3, [pc, #20]	; (528 <_init_chip+0x28>)
 512:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 514:	20ff      	movs	r0, #255	; 0xff
 516:	4b05      	ldr	r3, [pc, #20]	; (52c <_init_chip+0x2c>)
 518:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
 51a:	bd10      	pop	{r4, pc}
 51c:	41004000 	.word	0x41004000
 520:	00000551 	.word	0x00000551
 524:	00000571 	.word	0x00000571
 528:	000005b5 	.word	0x000005b5
 52c:	00000531 	.word	0x00000531

00000530 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 530:	07c3      	lsls	r3, r0, #31
 532:	d50a      	bpl.n	54a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
 534:	4b05      	ldr	r3, [pc, #20]	; (54c <_gclk_init_generators_by_fref+0x1c>)
 536:	2280      	movs	r2, #128	; 0x80
 538:	0052      	lsls	r2, r2, #1
 53a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 53c:	2283      	movs	r2, #131	; 0x83
 53e:	0252      	lsls	r2, r2, #9
 540:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 542:	4b02      	ldr	r3, [pc, #8]	; (54c <_gclk_init_generators_by_fref+0x1c>)
 544:	785b      	ldrb	r3, [r3, #1]
 546:	09db      	lsrs	r3, r3, #7
 548:	d1fb      	bne.n	542 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
 54a:	4770      	bx	lr
 54c:	40000c00 	.word	0x40000c00

00000550 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 550:	4b06      	ldr	r3, [pc, #24]	; (56c <_pm_init+0x1c>)
 552:	7a1a      	ldrb	r2, [r3, #8]
 554:	b2d2      	uxtb	r2, r2
 556:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 558:	7a5a      	ldrb	r2, [r3, #9]
 55a:	b2d2      	uxtb	r2, r2
 55c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 55e:	7a9a      	ldrb	r2, [r3, #10]
 560:	b2d2      	uxtb	r2, r2
 562:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 564:	7ada      	ldrb	r2, [r3, #11]
 566:	b2d2      	uxtb	r2, r2
 568:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 56a:	4770      	bx	lr
 56c:	40000400 	.word	0x40000400

00000570 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 570:	4a0e      	ldr	r2, [pc, #56]	; (5ac <_sysctrl_init_sources+0x3c>)
 572:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
 574:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 576:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
 578:	0f9b      	lsrs	r3, r3, #30
 57a:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
 57c:	0409      	lsls	r1, r1, #16
 57e:	480c      	ldr	r0, [pc, #48]	; (5b0 <_sysctrl_init_sources+0x40>)
 580:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
 582:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
 584:	2102      	movs	r1, #2
 586:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
 588:	6213      	str	r3, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 58a:	6993      	ldr	r3, [r2, #24]
 58c:	430b      	orrs	r3, r1
 58e:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
 590:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
 592:	311d      	adds	r1, #29
 594:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 596:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
 598:	4b04      	ldr	r3, [pc, #16]	; (5ac <_sysctrl_init_sources+0x3c>)
 59a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
 59c:	071b      	lsls	r3, r3, #28
 59e:	d5fb      	bpl.n	598 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
 5a0:	4a02      	ldr	r2, [pc, #8]	; (5ac <_sysctrl_init_sources+0x3c>)
 5a2:	6a13      	ldr	r3, [r2, #32]
 5a4:	2180      	movs	r1, #128	; 0x80
 5a6:	430b      	orrs	r3, r1
 5a8:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 5aa:	4770      	bx	lr
 5ac:	40000800 	.word	0x40000800
 5b0:	0fff0000 	.word	0x0fff0000

000005b4 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
 5b4:	4a02      	ldr	r2, [pc, #8]	; (5c0 <_sysctrl_init_referenced_generators+0xc>)
 5b6:	6993      	ldr	r3, [r2, #24]
 5b8:	2102      	movs	r1, #2
 5ba:	438b      	bics	r3, r1
 5bc:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 5be:	4770      	bx	lr
 5c0:	40000800 	.word	0x40000800

000005c4 <_tcc_init_irq_param>:
/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TCC0) {
 5c4:	4b03      	ldr	r3, [pc, #12]	; (5d4 <_tcc_init_irq_param+0x10>)
 5c6:	4298      	cmp	r0, r3
 5c8:	d000      	beq.n	5cc <_tcc_init_irq_param+0x8>
		_tcc0_dev = (struct _timer_device *)dev;
	}
}
 5ca:	4770      	bx	lr
		_tcc0_dev = (struct _timer_device *)dev;
 5cc:	4b02      	ldr	r3, [pc, #8]	; (5d8 <_tcc_init_irq_param+0x14>)
 5ce:	6019      	str	r1, [r3, #0]
}
 5d0:	e7fb      	b.n	5ca <_tcc_init_irq_param+0x6>
 5d2:	46c0      	nop			; (mov r8, r8)
 5d4:	42002000 	.word	0x42002000
 5d8:	20000044 	.word	0x20000044

000005dc <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
 5dc:	b510      	push	{r4, lr}
	void *const hw = device->hw;
 5de:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC3;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
 5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
 5e2:	07d2      	lsls	r2, r2, #31
 5e4:	d400      	bmi.n	5e8 <tcc_interrupt_handler+0xc>
		hri_tcc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
 5e6:	bd10      	pop	{r4, pc}
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
 5e8:	2201      	movs	r2, #1
 5ea:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
 5ec:	6803      	ldr	r3, [r0, #0]
 5ee:	4798      	blx	r3
}
 5f0:	e7f9      	b.n	5e6 <tcc_interrupt_handler+0xa>
	...

000005f4 <_get_tcc_cfg>:
{
	tcc_interrupt_handler(_tcc0_dev);
}

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
 5f4:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
 5f6:	2300      	movs	r3, #0
 5f8:	2b00      	cmp	r3, #0
 5fa:	d001      	beq.n	600 <_get_tcc_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
 5fc:	2000      	movs	r0, #0
}
 5fe:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
 600:	009a      	lsls	r2, r3, #2
 602:	18d2      	adds	r2, r2, r3
 604:	00d1      	lsls	r1, r2, #3
 606:	4a05      	ldr	r2, [pc, #20]	; (61c <_get_tcc_cfg+0x28>)
 608:	588a      	ldr	r2, [r1, r2]
 60a:	4282      	cmp	r2, r0
 60c:	d002      	beq.n	614 <_get_tcc_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
 60e:	3301      	adds	r3, #1
 610:	b2db      	uxtb	r3, r3
 612:	e7f1      	b.n	5f8 <_get_tcc_cfg+0x4>
			return &(_cfgs[i]);
 614:	4801      	ldr	r0, [pc, #4]	; (61c <_get_tcc_cfg+0x28>)
 616:	1840      	adds	r0, r0, r1
 618:	e7f1      	b.n	5fe <_get_tcc_cfg+0xa>
 61a:	46c0      	nop			; (mov r8, r8)
 61c:	20000000 	.word	0x20000000

00000620 <_timer_init>:
{
 620:	b570      	push	{r4, r5, r6, lr}
 622:	0006      	movs	r6, r0
 624:	000c      	movs	r4, r1
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
 626:	0008      	movs	r0, r1
 628:	4b32      	ldr	r3, [pc, #200]	; (6f4 <_timer_init+0xd4>)
 62a:	4798      	blx	r3
 62c:	1e05      	subs	r5, r0, #0
	if (cfg == NULL) {
 62e:	d05b      	beq.n	6e8 <_timer_init+0xc8>
	device->hw = hw;
 630:	60f4      	str	r4, [r6, #12]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
 632:	68a3      	ldr	r3, [r4, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
 634:	07db      	lsls	r3, r3, #31
 636:	d414      	bmi.n	662 <_timer_init+0x42>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
 638:	68a3      	ldr	r3, [r4, #8]
 63a:	079b      	lsls	r3, r3, #30
 63c:	d1fc      	bne.n	638 <_timer_init+0x18>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
 63e:	6823      	ldr	r3, [r4, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
 640:	079b      	lsls	r3, r3, #30
 642:	d509      	bpl.n	658 <_timer_init+0x38>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
 644:	6823      	ldr	r3, [r4, #0]
 646:	2202      	movs	r2, #2
 648:	4393      	bics	r3, r2
 64a:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
 64c:	68a3      	ldr	r3, [r4, #8]
 64e:	079b      	lsls	r3, r3, #30
 650:	d1fc      	bne.n	64c <_timer_init+0x2c>
 652:	68a3      	ldr	r3, [r4, #8]
 654:	079b      	lsls	r3, r3, #30
 656:	d4fc      	bmi.n	652 <_timer_init+0x32>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
 658:	2301      	movs	r3, #1
 65a:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
 65c:	68a3      	ldr	r3, [r4, #8]
 65e:	079b      	lsls	r3, r3, #30
 660:	d1fc      	bne.n	65c <_timer_init+0x3c>
 662:	68a3      	ldr	r3, [r4, #8]
 664:	07db      	lsls	r3, r3, #31
 666:	d4fc      	bmi.n	662 <_timer_init+0x42>
	((Tcc *)hw)->CTRLA.reg = data;
 668:	68ab      	ldr	r3, [r5, #8]
 66a:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
 66c:	68a3      	ldr	r3, [r4, #8]
 66e:	079b      	lsls	r3, r3, #30
 670:	d1fc      	bne.n	66c <_timer_init+0x4c>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
 672:	7b2b      	ldrb	r3, [r5, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
 674:	7163      	strb	r3, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
 676:	7b6b      	ldrb	r3, [r5, #13]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
 678:	77a3      	strb	r3, [r4, #30]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
 67a:	692b      	ldr	r3, [r5, #16]
 67c:	6223      	str	r3, [r4, #32]
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
 67e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 680:	6423      	str	r3, [r4, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
 682:	68a3      	ldr	r3, [r4, #8]
 684:	061b      	lsls	r3, r3, #24
 686:	d4fc      	bmi.n	682 <_timer_init+0x62>
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
 688:	2301      	movs	r3, #1
 68a:	62a3      	str	r3, [r4, #40]	; 0x28
	_tcc_init_irq_param(hw, (void *)device);
 68c:	0031      	movs	r1, r6
 68e:	0020      	movs	r0, r4
 690:	4b19      	ldr	r3, [pc, #100]	; (6f8 <_timer_init+0xd8>)
 692:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
 694:	2304      	movs	r3, #4
 696:	56eb      	ldrsb	r3, [r5, r3]
  if ((int32_t)(IRQn) >= 0)
 698:	2b00      	cmp	r3, #0
 69a:	db0b      	blt.n	6b4 <_timer_init+0x94>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 69c:	221f      	movs	r2, #31
 69e:	4013      	ands	r3, r2
 6a0:	3a1e      	subs	r2, #30
 6a2:	409a      	lsls	r2, r3
 6a4:	0013      	movs	r3, r2
 6a6:	2280      	movs	r2, #128	; 0x80
 6a8:	4914      	ldr	r1, [pc, #80]	; (6fc <_timer_init+0xdc>)
 6aa:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 6ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 6b0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
 6b4:	2304      	movs	r3, #4
 6b6:	56eb      	ldrsb	r3, [r5, r3]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 6b8:	2b00      	cmp	r3, #0
 6ba:	db08      	blt.n	6ce <_timer_init+0xae>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 6bc:	221f      	movs	r2, #31
 6be:	4013      	ands	r3, r2
 6c0:	3a1e      	subs	r2, #30
 6c2:	409a      	lsls	r2, r3
 6c4:	0013      	movs	r3, r2
 6c6:	22c0      	movs	r2, #192	; 0xc0
 6c8:	0052      	lsls	r2, r2, #1
 6ca:	490c      	ldr	r1, [pc, #48]	; (6fc <_timer_init+0xdc>)
 6cc:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
 6ce:	2304      	movs	r3, #4
 6d0:	56eb      	ldrsb	r3, [r5, r3]
  if ((int32_t)(IRQn) >= 0)
 6d2:	2b00      	cmp	r3, #0
 6d4:	db0b      	blt.n	6ee <_timer_init+0xce>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 6d6:	221f      	movs	r2, #31
 6d8:	4013      	ands	r3, r2
 6da:	3a1e      	subs	r2, #30
 6dc:	409a      	lsls	r2, r3
 6de:	0013      	movs	r3, r2
 6e0:	4a06      	ldr	r2, [pc, #24]	; (6fc <_timer_init+0xdc>)
 6e2:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
 6e4:	2000      	movs	r0, #0
}
 6e6:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NOT_FOUND;
 6e8:	200a      	movs	r0, #10
 6ea:	4240      	negs	r0, r0
 6ec:	e7fb      	b.n	6e6 <_timer_init+0xc6>
	return ERR_NONE;
 6ee:	2000      	movs	r0, #0
 6f0:	e7f9      	b.n	6e6 <_timer_init+0xc6>
 6f2:	46c0      	nop			; (mov r8, r8)
 6f4:	000005f5 	.word	0x000005f5
 6f8:	000005c5 	.word	0x000005c5
 6fc:	e000e100 	.word	0xe000e100

00000700 <_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
 700:	68c2      	ldr	r2, [r0, #12]
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
 702:	6813      	ldr	r3, [r2, #0]
 704:	2102      	movs	r1, #2
 706:	430b      	orrs	r3, r1
 708:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
 70a:	6893      	ldr	r3, [r2, #8]
 70c:	079b      	lsls	r3, r3, #30
 70e:	d1fc      	bne.n	70a <_timer_start+0xa>
}
 710:	4770      	bx	lr

00000712 <_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
 712:	68c2      	ldr	r2, [r0, #12]
 714:	6893      	ldr	r3, [r2, #8]
 716:	079b      	lsls	r3, r3, #30
 718:	d1fc      	bne.n	714 <_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
 71a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
 71c:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
 71e:	2001      	movs	r0, #1
 720:	4018      	ands	r0, r3
}
 722:	4770      	bx	lr

00000724 <_tcc_get_timer>:
}
 724:	2000      	movs	r0, #0
 726:	4770      	bx	lr

00000728 <_timer_set_irq>:
{
 728:	b510      	push	{r4, lr}
	void *const     hw  = device->hw;
 72a:	68c0      	ldr	r0, [r0, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
 72c:	4b03      	ldr	r3, [pc, #12]	; (73c <_timer_set_irq+0x14>)
 72e:	4798      	blx	r3
	if (cfg != NULL) {
 730:	2800      	cmp	r0, #0
 732:	d002      	beq.n	73a <_timer_set_irq+0x12>
		_irq_set((IRQn_Type)cfg->irq);
 734:	7900      	ldrb	r0, [r0, #4]
 736:	4b02      	ldr	r3, [pc, #8]	; (740 <_timer_set_irq+0x18>)
 738:	4798      	blx	r3
}
 73a:	bd10      	pop	{r4, pc}
 73c:	000005f5 	.word	0x000005f5
 740:	000004e5 	.word	0x000004e5

00000744 <TCC0_Handler>:
{
 744:	b510      	push	{r4, lr}
	tcc_interrupt_handler(_tcc0_dev);
 746:	4b02      	ldr	r3, [pc, #8]	; (750 <TCC0_Handler+0xc>)
 748:	6818      	ldr	r0, [r3, #0]
 74a:	4b02      	ldr	r3, [pc, #8]	; (754 <TCC0_Handler+0x10>)
 74c:	4798      	blx	r3
}
 74e:	bd10      	pop	{r4, pc}
 750:	20000044 	.word	0x20000044
 754:	000005dd 	.word	0x000005dd

00000758 <cbf>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 758:	2280      	movs	r2, #128	; 0x80
 75a:	0312      	lsls	r2, r2, #12
 75c:	23c0      	movs	r3, #192	; 0xc0
 75e:	05db      	lsls	r3, r3, #23
 760:	61da      	str	r2, [r3, #28]
struct timer_task task;

static void cbf ( const struct timer_task *const timer_task )
{
	gpio_toggle_pin_level( LC1_SCK );
}
 762:	4770      	bx	lr

00000764 <main>:



int main(void)
{
 764:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 766:	4b08      	ldr	r3, [pc, #32]	; (788 <main+0x24>)
 768:	4798      	blx	r3
	
	task.interval	= 1;
 76a:	4908      	ldr	r1, [pc, #32]	; (78c <main+0x28>)
 76c:	2301      	movs	r3, #1
 76e:	608b      	str	r3, [r1, #8]
	task.cb			= cbf;
 770:	4a07      	ldr	r2, [pc, #28]	; (790 <main+0x2c>)
 772:	60ca      	str	r2, [r1, #12]
	task.mode		= TIMER_TASK_REPEAT;
 774:	740b      	strb	r3, [r1, #16]
	
	timer_add_task( &TIMER_0, &task );
 776:	4c07      	ldr	r4, [pc, #28]	; (794 <main+0x30>)
 778:	0020      	movs	r0, r4
 77a:	4b07      	ldr	r3, [pc, #28]	; (798 <main+0x34>)
 77c:	4798      	blx	r3
	
	timer_start( &TIMER_0 );
 77e:	0020      	movs	r0, r4
 780:	4b06      	ldr	r3, [pc, #24]	; (79c <main+0x38>)
 782:	4798      	blx	r3
 784:	e7fe      	b.n	784 <main+0x20>
 786:	46c0      	nop			; (mov r8, r8)
 788:	00000115 	.word	0x00000115
 78c:	20000064 	.word	0x20000064
 790:	00000759 	.word	0x00000759
 794:	20000048 	.word	0x20000048
 798:	000003cd 	.word	0x000003cd
 79c:	00000391 	.word	0x00000391

000007a0 <__libc_init_array>:
 7a0:	b570      	push	{r4, r5, r6, lr}
 7a2:	2600      	movs	r6, #0
 7a4:	4d0c      	ldr	r5, [pc, #48]	; (7d8 <__libc_init_array+0x38>)
 7a6:	4c0d      	ldr	r4, [pc, #52]	; (7dc <__libc_init_array+0x3c>)
 7a8:	1b64      	subs	r4, r4, r5
 7aa:	10a4      	asrs	r4, r4, #2
 7ac:	42a6      	cmp	r6, r4
 7ae:	d109      	bne.n	7c4 <__libc_init_array+0x24>
 7b0:	2600      	movs	r6, #0
 7b2:	f000 f835 	bl	820 <_init>
 7b6:	4d0a      	ldr	r5, [pc, #40]	; (7e0 <__libc_init_array+0x40>)
 7b8:	4c0a      	ldr	r4, [pc, #40]	; (7e4 <__libc_init_array+0x44>)
 7ba:	1b64      	subs	r4, r4, r5
 7bc:	10a4      	asrs	r4, r4, #2
 7be:	42a6      	cmp	r6, r4
 7c0:	d105      	bne.n	7ce <__libc_init_array+0x2e>
 7c2:	bd70      	pop	{r4, r5, r6, pc}
 7c4:	00b3      	lsls	r3, r6, #2
 7c6:	58eb      	ldr	r3, [r5, r3]
 7c8:	4798      	blx	r3
 7ca:	3601      	adds	r6, #1
 7cc:	e7ee      	b.n	7ac <__libc_init_array+0xc>
 7ce:	00b3      	lsls	r3, r6, #2
 7d0:	58eb      	ldr	r3, [r5, r3]
 7d2:	4798      	blx	r3
 7d4:	3601      	adds	r6, #1
 7d6:	e7f2      	b.n	7be <__libc_init_array+0x1e>
 7d8:	0000082c 	.word	0x0000082c
 7dc:	0000082c 	.word	0x0000082c
 7e0:	0000082c 	.word	0x0000082c
 7e4:	00000830 	.word	0x00000830
 7e8:	682f2e2e 	.word	0x682f2e2e
 7ec:	732f6c61 	.word	0x732f6c61
 7f0:	682f6372 	.word	0x682f6372
 7f4:	745f6c61 	.word	0x745f6c61
 7f8:	72656d69 	.word	0x72656d69
 7fc:	0000632e 	.word	0x0000632e
 800:	682f2e2e 	.word	0x682f2e2e
 804:	752f6c61 	.word	0x752f6c61
 808:	736c6974 	.word	0x736c6974
 80c:	6372732f 	.word	0x6372732f
 810:	6974752f 	.word	0x6974752f
 814:	6c5f736c 	.word	0x6c5f736c
 818:	2e747369 	.word	0x2e747369
 81c:	00000063 	.word	0x00000063

00000820 <_init>:
 820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 822:	46c0      	nop			; (mov r8, r8)
 824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 826:	bc08      	pop	{r3}
 828:	469e      	mov	lr, r3
 82a:	4770      	bx	lr

0000082c <__init_array_start>:
 82c:	000000dd 	.word	0x000000dd

00000830 <_fini>:
 830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 832:	46c0      	nop			; (mov r8, r8)
 834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 836:	bc08      	pop	{r3}
 838:	469e      	mov	lr, r3
 83a:	4770      	bx	lr

0000083c <__fini_array_start>:
 83c:	000000b5 	.word	0x000000b5
