
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c04  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000348  20000068  00002c6c  00020068  2**2
                  ALLOC
  3 .stack        00002000  200003b0  00002fb4  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001de68  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a8f  00000000  00000000  0003df51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009159  00000000  00000000  000409e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000690  00000000  00000000  00049b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006e0  00000000  00000000  0004a1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017df3  00000000  00000000  0004a8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c22d  00000000  00000000  0006269c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008069d  00000000  00000000  0006e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010a8  00000000  00000000  000eef68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 23 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .#. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	59 1d 00 00 29 01 00 00 29 01 00 00 29 01 00 00     Y...)...)...)...
      6c:	29 01 00 00 29 01 00 00 00 00 00 00 00 00 00 00     )...)...........
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 00 00 00 00 00 00 00 00     )...)...........
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002c04 	.word	0x00002c04

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002c04 	.word	0x00002c04
     10c:	00002c04 	.word	0x00002c04
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000002c5 	.word	0x000002c5
     124:	00002ad9 	.word	0x00002ad9

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a23      	ldr	r2, [pc, #140]	; (1bc <Reset_Handler+0x90>)
     130:	4b23      	ldr	r3, [pc, #140]	; (1c0 <Reset_Handler+0x94>)
     132:	429a      	cmp	r2, r3
     134:	d009      	beq.n	14a <Reset_Handler+0x1e>
     136:	4b22      	ldr	r3, [pc, #136]	; (1c0 <Reset_Handler+0x94>)
     138:	4a20      	ldr	r2, [pc, #128]	; (1bc <Reset_Handler+0x90>)
     13a:	e003      	b.n	144 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     13c:	6811      	ldr	r1, [r2, #0]
     13e:	6019      	str	r1, [r3, #0]
     140:	3304      	adds	r3, #4
     142:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     144:	491f      	ldr	r1, [pc, #124]	; (1c4 <Reset_Handler+0x98>)
     146:	428b      	cmp	r3, r1
     148:	d3f8      	bcc.n	13c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     14a:	4b1f      	ldr	r3, [pc, #124]	; (1c8 <Reset_Handler+0x9c>)
     14c:	e002      	b.n	154 <Reset_Handler+0x28>
                *pDest++ = 0;
     14e:	2200      	movs	r2, #0
     150:	601a      	str	r2, [r3, #0]
     152:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	4a1d      	ldr	r2, [pc, #116]	; (1cc <Reset_Handler+0xa0>)
     156:	4293      	cmp	r3, r2
     158:	d3f9      	bcc.n	14e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     15a:	4a1d      	ldr	r2, [pc, #116]	; (1d0 <Reset_Handler+0xa4>)
     15c:	21ff      	movs	r1, #255	; 0xff
     15e:	4b1d      	ldr	r3, [pc, #116]	; (1d4 <Reset_Handler+0xa8>)
     160:	438b      	bics	r3, r1
     162:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     164:	39fd      	subs	r1, #253	; 0xfd
     166:	2390      	movs	r3, #144	; 0x90
     168:	005b      	lsls	r3, r3, #1
     16a:	4a1b      	ldr	r2, [pc, #108]	; (1d8 <Reset_Handler+0xac>)
     16c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     16e:	4a1b      	ldr	r2, [pc, #108]	; (1dc <Reset_Handler+0xb0>)
     170:	78d3      	ldrb	r3, [r2, #3]
     172:	2503      	movs	r5, #3
     174:	43ab      	bics	r3, r5
     176:	2402      	movs	r4, #2
     178:	4323      	orrs	r3, r4
     17a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     17c:	78d3      	ldrb	r3, [r2, #3]
     17e:	270c      	movs	r7, #12
     180:	43bb      	bics	r3, r7
     182:	2608      	movs	r6, #8
     184:	4333      	orrs	r3, r6
     186:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     188:	4b15      	ldr	r3, [pc, #84]	; (1e0 <Reset_Handler+0xb4>)
     18a:	7b98      	ldrb	r0, [r3, #14]
     18c:	2230      	movs	r2, #48	; 0x30
     18e:	4390      	bics	r0, r2
     190:	2220      	movs	r2, #32
     192:	4310      	orrs	r0, r2
     194:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     196:	7b99      	ldrb	r1, [r3, #14]
     198:	43b9      	bics	r1, r7
     19a:	4331      	orrs	r1, r6
     19c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     19e:	7b9a      	ldrb	r2, [r3, #14]
     1a0:	43aa      	bics	r2, r5
     1a2:	4322      	orrs	r2, r4
     1a4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1a6:	4a0f      	ldr	r2, [pc, #60]	; (1e4 <Reset_Handler+0xb8>)
     1a8:	6851      	ldr	r1, [r2, #4]
     1aa:	2380      	movs	r3, #128	; 0x80
     1ac:	430b      	orrs	r3, r1
     1ae:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <Reset_Handler+0xbc>)
     1b2:	4798      	blx	r3
        main();
     1b4:	4b0d      	ldr	r3, [pc, #52]	; (1ec <Reset_Handler+0xc0>)
     1b6:	4798      	blx	r3
     1b8:	e7fe      	b.n	1b8 <Reset_Handler+0x8c>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	00002c04 	.word	0x00002c04
     1c0:	20000000 	.word	0x20000000
     1c4:	20000068 	.word	0x20000068
     1c8:	20000068 	.word	0x20000068
     1cc:	200003b0 	.word	0x200003b0
     1d0:	e000ed00 	.word	0xe000ed00
     1d4:	00000000 	.word	0x00000000
     1d8:	41007000 	.word	0x41007000
     1dc:	41005000 	.word	0x41005000
     1e0:	41004800 	.word	0x41004800
     1e4:	41004000 	.word	0x41004000
     1e8:	00002ae5 	.word	0x00002ae5
     1ec:	00001d65 	.word	0x00001d65

000001f0 <USB_DEVICE_INSTANCE_PORT_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	46c6      	mov	lr, r8
     1f4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     1f6:	24c0      	movs	r4, #192	; 0xc0
     1f8:	05e4      	lsls	r4, r4, #23
     1fa:	2280      	movs	r2, #128	; 0x80
     1fc:	0452      	lsls	r2, r2, #17
     1fe:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     200:	4b1c      	ldr	r3, [pc, #112]	; (274 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     202:	2780      	movs	r7, #128	; 0x80
     204:	05ff      	lsls	r7, r7, #23
     206:	629f      	str	r7, [r3, #40]	; 0x28
     208:	491b      	ldr	r1, [pc, #108]	; (278 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
     20a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     20c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     20e:	2058      	movs	r0, #88	; 0x58
     210:	5c19      	ldrb	r1, [r3, r0]
     212:	2204      	movs	r2, #4
     214:	4690      	mov	r8, r2
     216:	4391      	bics	r1, r2
     218:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     21c:	2601      	movs	r6, #1
     21e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     220:	2501      	movs	r5, #1
     222:	4329      	orrs	r1, r5
     224:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     226:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     228:	381c      	subs	r0, #28
     22a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     22c:	320b      	adds	r2, #11
     22e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     230:	2206      	movs	r2, #6
     232:	4694      	mov	ip, r2
     234:	4662      	mov	r2, ip
     236:	4311      	orrs	r1, r2
     238:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     23a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     23c:	2180      	movs	r1, #128	; 0x80
     23e:	0489      	lsls	r1, r1, #18
     240:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     242:	629f      	str	r7, [r3, #40]	; 0x28
     244:	4f0d      	ldr	r7, [pc, #52]	; (27c <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
     246:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     248:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     24a:	2159      	movs	r1, #89	; 0x59
     24c:	5c5c      	ldrb	r4, [r3, r1]
     24e:	4642      	mov	r2, r8
     250:	4394      	bics	r4, r2
     252:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     254:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     256:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     258:	432a      	orrs	r2, r5
     25a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     25c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     25e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     260:	394a      	subs	r1, #74	; 0x4a
     262:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     264:	2160      	movs	r1, #96	; 0x60
     266:	430a      	orrs	r2, r1
     268:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26a:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     26c:	bc04      	pop	{r2}
     26e:	4690      	mov	r8, r2
     270:	bdf0      	pop	{r4, r5, r6, r7, pc}
     272:	46c0      	nop			; (mov r8, r8)
     274:	41004400 	.word	0x41004400
     278:	c0000100 	.word	0xc0000100
     27c:	c0000200 	.word	0xc0000200

00000280 <USB_DEVICE_INSTANCE_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     280:	4b06      	ldr	r3, [pc, #24]	; (29c <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     282:	69da      	ldr	r2, [r3, #28]
     284:	2120      	movs	r1, #32
     286:	430a      	orrs	r2, r1
     288:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     28a:	695a      	ldr	r2, [r3, #20]
     28c:	3120      	adds	r1, #32
     28e:	430a      	orrs	r2, r1
     290:	615a      	str	r2, [r3, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     292:	4a03      	ldr	r2, [pc, #12]	; (2a0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     294:	4b03      	ldr	r3, [pc, #12]	; (2a4 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     296:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     298:	4770      	bx	lr
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	40000400 	.word	0x40000400
     2a0:	00004006 	.word	0x00004006
     2a4:	40000c00 	.word	0x40000c00

000002a8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     2a8:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     2aa:	4b03      	ldr	r3, [pc, #12]	; (2b8 <USB_DEVICE_INSTANCE_init+0x10>)
     2ac:	4798      	blx	r3
	usb_d_init();
     2ae:	4b03      	ldr	r3, [pc, #12]	; (2bc <USB_DEVICE_INSTANCE_init+0x14>)
     2b0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     2b2:	4b03      	ldr	r3, [pc, #12]	; (2c0 <USB_DEVICE_INSTANCE_init+0x18>)
     2b4:	4798      	blx	r3
}
     2b6:	bd10      	pop	{r4, pc}
     2b8:	00000281 	.word	0x00000281
     2bc:	00000541 	.word	0x00000541
     2c0:	000001f1 	.word	0x000001f1

000002c4 <system_init>:

void system_init(void)
{
     2c4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <system_init+0xc>)
     2c8:	4798      	blx	r3
	init_mcu();

	USB_DEVICE_INSTANCE_init();
     2ca:	4b02      	ldr	r3, [pc, #8]	; (2d4 <system_init+0x10>)
     2cc:	4798      	blx	r3
}
     2ce:	bd10      	pop	{r4, pc}
     2d0:	000008fd 	.word	0x000008fd
     2d4:	000002a9 	.word	0x000002a9

000002d8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2d8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     2dc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     2de:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     2e0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     2e4:	4770      	bx	lr

000002e6 <atomic_leave_critical>:
     2e6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     2ea:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     2ec:	f383 8810 	msr	PRIMASK, r3
}
     2f0:	4770      	bx	lr
	...

000002f4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     2f4:	b510      	push	{r4, lr}
     2f6:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     2f8:	2000      	movs	r0, #0
     2fa:	e001      	b.n	300 <_usb_d_find_ep+0xc>
     2fc:	3001      	adds	r0, #1
     2fe:	b240      	sxtb	r0, r0
     300:	2803      	cmp	r0, #3
     302:	dc0f      	bgt.n	324 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     304:	0142      	lsls	r2, r0, #5
     306:	4b09      	ldr	r3, [pc, #36]	; (32c <_usb_d_find_ep+0x38>)
     308:	189b      	adds	r3, r3, r2
     30a:	785a      	ldrb	r2, [r3, #1]
     30c:	428a      	cmp	r2, r1
     30e:	d00b      	beq.n	328 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     310:	0143      	lsls	r3, r0, #5
     312:	4c06      	ldr	r4, [pc, #24]	; (32c <_usb_d_find_ep+0x38>)
     314:	5d1b      	ldrb	r3, [r3, r4]
     316:	2b00      	cmp	r3, #0
     318:	d1f0      	bne.n	2fc <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     31a:	330f      	adds	r3, #15
     31c:	400b      	ands	r3, r1
     31e:	4293      	cmp	r3, r2
     320:	d1ec      	bne.n	2fc <_usb_d_find_ep+0x8>
     322:	e001      	b.n	328 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     324:	2001      	movs	r0, #1
     326:	4240      	negs	r0, r0
}
     328:	bd10      	pop	{r4, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	20000084 	.word	0x20000084

00000330 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     330:	2000      	movs	r0, #0
     332:	4770      	bx	lr

00000334 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	0004      	movs	r4, r0
     338:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     33a:	4b08      	ldr	r3, [pc, #32]	; (35c <usb_d_cb_trans_more+0x28>)
     33c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     33e:	0142      	lsls	r2, r0, #5
     340:	4b07      	ldr	r3, [pc, #28]	; (360 <usb_d_cb_trans_more+0x2c>)
     342:	189b      	adds	r3, r3, r2
     344:	789b      	ldrb	r3, [r3, #2]
     346:	2b03      	cmp	r3, #3
     348:	d001      	beq.n	34e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     34a:	2000      	movs	r0, #0
}
     34c:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <usb_d_cb_trans_more+0x2c>)
     350:	1898      	adds	r0, r3, r2
     352:	6983      	ldr	r3, [r0, #24]
     354:	0029      	movs	r1, r5
     356:	0020      	movs	r0, r4
     358:	4798      	blx	r3
     35a:	e7f7      	b.n	34c <usb_d_cb_trans_more+0x18>
     35c:	000002f5 	.word	0x000002f5
     360:	20000084 	.word	0x20000084

00000364 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     364:	b5f0      	push	{r4, r5, r6, r7, lr}
     366:	b087      	sub	sp, #28
     368:	0005      	movs	r5, r0
     36a:	000f      	movs	r7, r1
     36c:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     36e:	4b4a      	ldr	r3, [pc, #296]	; (498 <_usb_d_cb_trans_done+0x134>)
     370:	4798      	blx	r3
     372:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     374:	0146      	lsls	r6, r0, #5
     376:	4a49      	ldr	r2, [pc, #292]	; (49c <_usb_d_cb_trans_done+0x138>)
     378:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
     37a:	2f00      	cmp	r7, #0
     37c:	d151      	bne.n	422 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
     37e:	0013      	movs	r3, r2
     380:	0142      	lsls	r2, r0, #5
     382:	2000      	movs	r0, #0
     384:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     386:	5cd3      	ldrb	r3, [r2, r3]
     388:	2b00      	cmp	r3, #0
     38a:	d00e      	beq.n	3aa <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     38c:	0162      	lsls	r2, r4, #5
     38e:	4b43      	ldr	r3, [pc, #268]	; (49c <_usb_d_cb_trans_done+0x138>)
     390:	189b      	adds	r3, r3, r2
     392:	2201      	movs	r2, #1
     394:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     396:	0164      	lsls	r4, r4, #5
     398:	4b40      	ldr	r3, [pc, #256]	; (49c <_usb_d_cb_trans_done+0x138>)
     39a:	191c      	adds	r4, r3, r4
     39c:	69e3      	ldr	r3, [r4, #28]
     39e:	78e1      	ldrb	r1, [r4, #3]
     3a0:	9a01      	ldr	r2, [sp, #4]
     3a2:	0028      	movs	r0, r5
     3a4:	4798      	blx	r3
}
     3a6:	b007      	add	sp, #28
     3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
     3aa:	78b3      	ldrb	r3, [r6, #2]
     3ac:	240c      	movs	r4, #12
     3ae:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
     3b0:	2b03      	cmp	r3, #3
     3b2:	d008      	beq.n	3c6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     3b4:	0032      	movs	r2, r6
     3b6:	320c      	adds	r2, #12
     3b8:	7870      	ldrb	r0, [r6, #1]
     3ba:	2100      	movs	r1, #0
     3bc:	69f3      	ldr	r3, [r6, #28]
     3be:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     3c0:	2302      	movs	r3, #2
     3c2:	70b3      	strb	r3, [r6, #2]
     3c4:	e7ef      	b.n	3a6 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     3c6:	7870      	ldrb	r0, [r6, #1]
     3c8:	0032      	movs	r2, r6
     3ca:	320c      	adds	r2, #12
     3cc:	2101      	movs	r1, #1
     3ce:	69f3      	ldr	r3, [r6, #28]
     3d0:	4798      	blx	r3
		if (err) {
     3d2:	2800      	cmp	r0, #0
     3d4:	d010      	beq.n	3f8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     3d6:	2305      	movs	r3, #5
     3d8:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     3da:	3b03      	subs	r3, #3
     3dc:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     3de:	2c00      	cmp	r4, #0
     3e0:	db08      	blt.n	3f4 <_usb_d_cb_trans_done+0x90>
     3e2:	7873      	ldrb	r3, [r6, #1]
     3e4:	2080      	movs	r0, #128	; 0x80
     3e6:	4240      	negs	r0, r0
     3e8:	4318      	orrs	r0, r3
     3ea:	b2c0      	uxtb	r0, r0
     3ec:	2101      	movs	r1, #1
     3ee:	4b2c      	ldr	r3, [pc, #176]	; (4a0 <_usb_d_cb_trans_done+0x13c>)
     3f0:	4798      	blx	r3
     3f2:	e7d8      	b.n	3a6 <_usb_d_cb_trans_done+0x42>
     3f4:	7870      	ldrb	r0, [r6, #1]
     3f6:	e7f9      	b.n	3ec <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     3f8:	2304      	movs	r3, #4
     3fa:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     3fc:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
     3fe:	2200      	movs	r2, #0
     400:	9203      	str	r2, [sp, #12]
     402:	9204      	str	r2, [sp, #16]
     404:	2c00      	cmp	r4, #0
     406:	db09      	blt.n	41c <_usb_d_cb_trans_done+0xb8>
     408:	3b84      	subs	r3, #132	; 0x84
     40a:	430b      	orrs	r3, r1
     40c:	b2da      	uxtb	r2, r3
     40e:	a803      	add	r0, sp, #12
     410:	7202      	strb	r2, [r0, #8]
     412:	2301      	movs	r3, #1
     414:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     416:	4b23      	ldr	r3, [pc, #140]	; (4a4 <_usb_d_cb_trans_done+0x140>)
     418:	4798      	blx	r3
     41a:	e7c4      	b.n	3a6 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     41c:	220f      	movs	r2, #15
     41e:	400a      	ands	r2, r1
     420:	e7f5      	b.n	40e <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
     422:	2f01      	cmp	r7, #1
     424:	d00a      	beq.n	43c <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
     426:	2f02      	cmp	r7, #2
     428:	d01d      	beq.n	466 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
     42a:	2f03      	cmp	r7, #3
     42c:	d02c      	beq.n	488 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     42e:	0142      	lsls	r2, r0, #5
     430:	4b1a      	ldr	r3, [pc, #104]	; (49c <_usb_d_cb_trans_done+0x138>)
     432:	189b      	adds	r3, r3, r2
     434:	2206      	movs	r2, #6
     436:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     438:	70da      	strb	r2, [r3, #3]
     43a:	e7ac      	b.n	396 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     43c:	4b17      	ldr	r3, [pc, #92]	; (49c <_usb_d_cb_trans_done+0x138>)
     43e:	0142      	lsls	r2, r0, #5
     440:	1899      	adds	r1, r3, r2
     442:	2002      	movs	r0, #2
     444:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     446:	5cd3      	ldrb	r3, [r2, r3]
     448:	2b00      	cmp	r3, #0
     44a:	d005      	beq.n	458 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     44c:	0162      	lsls	r2, r4, #5
     44e:	4b13      	ldr	r3, [pc, #76]	; (49c <_usb_d_cb_trans_done+0x138>)
     450:	189b      	adds	r3, r3, r2
     452:	2205      	movs	r2, #5
     454:	709a      	strb	r2, [r3, #2]
     456:	e79e      	b.n	396 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     458:	2202      	movs	r2, #2
     45a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     45c:	2100      	movs	r1, #0
     45e:	0028      	movs	r0, r5
     460:	4b0f      	ldr	r3, [pc, #60]	; (4a0 <_usb_d_cb_trans_done+0x13c>)
     462:	4798      	blx	r3
     464:	e797      	b.n	396 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     466:	4b0d      	ldr	r3, [pc, #52]	; (49c <_usb_d_cb_trans_done+0x138>)
     468:	0142      	lsls	r2, r0, #5
     46a:	1899      	adds	r1, r3, r2
     46c:	2004      	movs	r0, #4
     46e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     470:	5cd3      	ldrb	r3, [r2, r3]
     472:	2b00      	cmp	r3, #0
     474:	d005      	beq.n	482 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     476:	0162      	lsls	r2, r4, #5
     478:	4b08      	ldr	r3, [pc, #32]	; (49c <_usb_d_cb_trans_done+0x138>)
     47a:	189b      	adds	r3, r3, r2
     47c:	2201      	movs	r2, #1
     47e:	709a      	strb	r2, [r3, #2]
     480:	e789      	b.n	396 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     482:	2302      	movs	r3, #2
     484:	708b      	strb	r3, [r1, #2]
			return;
     486:	e78e      	b.n	3a6 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     488:	0142      	lsls	r2, r0, #5
     48a:	4b04      	ldr	r3, [pc, #16]	; (49c <_usb_d_cb_trans_done+0x138>)
     48c:	189b      	adds	r3, r3, r2
     48e:	2200      	movs	r2, #0
     490:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     492:	3205      	adds	r2, #5
     494:	70da      	strb	r2, [r3, #3]
     496:	e77e      	b.n	396 <_usb_d_cb_trans_done+0x32>
     498:	000002f5 	.word	0x000002f5
     49c:	20000084 	.word	0x20000084
     4a0:	0000195d 	.word	0x0000195d
     4a4:	00001b2d 	.word	0x00001b2d

000004a8 <usb_d_cb_trans_setup>:
{
     4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4aa:	46c6      	mov	lr, r8
     4ac:	b500      	push	{lr}
     4ae:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     4b0:	4b1f      	ldr	r3, [pc, #124]	; (530 <usb_d_cb_trans_setup+0x88>)
     4b2:	4798      	blx	r3
     4b4:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     4b6:	0143      	lsls	r3, r0, #5
     4b8:	3308      	adds	r3, #8
     4ba:	4c1e      	ldr	r4, [pc, #120]	; (534 <usb_d_cb_trans_setup+0x8c>)
     4bc:	18e4      	adds	r4, r4, r3
     4be:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     4c0:	0021      	movs	r1, r4
     4c2:	0028      	movs	r0, r5
     4c4:	4b1c      	ldr	r3, [pc, #112]	; (538 <usb_d_cb_trans_setup+0x90>)
     4c6:	4798      	blx	r3
     4c8:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     4ca:	2808      	cmp	r0, #8
     4cc:	d00c      	beq.n	4e8 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     4ce:	2101      	movs	r1, #1
     4d0:	0028      	movs	r0, r5
     4d2:	4c1a      	ldr	r4, [pc, #104]	; (53c <usb_d_cb_trans_setup+0x94>)
     4d4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     4d6:	2080      	movs	r0, #128	; 0x80
     4d8:	4240      	negs	r0, r0
     4da:	4328      	orrs	r0, r5
     4dc:	b2c0      	uxtb	r0, r0
     4de:	2101      	movs	r1, #1
     4e0:	47a0      	blx	r4
}
     4e2:	bc04      	pop	{r2}
     4e4:	4690      	mov	r8, r2
     4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     4e8:	2100      	movs	r1, #0
     4ea:	0028      	movs	r0, r5
     4ec:	4b13      	ldr	r3, [pc, #76]	; (53c <usb_d_cb_trans_setup+0x94>)
     4ee:	4698      	mov	r8, r3
     4f0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     4f2:	2780      	movs	r7, #128	; 0x80
     4f4:	427f      	negs	r7, r7
     4f6:	432f      	orrs	r7, r5
     4f8:	b2ff      	uxtb	r7, r7
     4fa:	2100      	movs	r1, #0
     4fc:	0038      	movs	r0, r7
     4fe:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     500:	0172      	lsls	r2, r6, #5
     502:	4b0c      	ldr	r3, [pc, #48]	; (534 <usb_d_cb_trans_setup+0x8c>)
     504:	189b      	adds	r3, r3, r2
     506:	2201      	movs	r2, #1
     508:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     50a:	695b      	ldr	r3, [r3, #20]
     50c:	0021      	movs	r1, r4
     50e:	0028      	movs	r0, r5
     510:	4798      	blx	r3
     512:	2800      	cmp	r0, #0
     514:	d1e5      	bne.n	4e2 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     516:	0176      	lsls	r6, r6, #5
     518:	4b06      	ldr	r3, [pc, #24]	; (534 <usb_d_cb_trans_setup+0x8c>)
     51a:	199e      	adds	r6, r3, r6
     51c:	2305      	movs	r3, #5
     51e:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     520:	2101      	movs	r1, #1
     522:	0028      	movs	r0, r5
     524:	4c05      	ldr	r4, [pc, #20]	; (53c <usb_d_cb_trans_setup+0x94>)
     526:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     528:	2101      	movs	r1, #1
     52a:	0038      	movs	r0, r7
     52c:	47a0      	blx	r4
     52e:	e7d8      	b.n	4e2 <usb_d_cb_trans_setup+0x3a>
     530:	000002f5 	.word	0x000002f5
     534:	20000084 	.word	0x20000084
     538:	00001ab5 	.word	0x00001ab5
     53c:	0000195d 	.word	0x0000195d

00000540 <usb_d_init>:

int32_t usb_d_init(void)
{
     540:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     542:	4b12      	ldr	r3, [pc, #72]	; (58c <usb_d_init+0x4c>)
     544:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     546:	2800      	cmp	r0, #0
     548:	db1e      	blt.n	588 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     54a:	2280      	movs	r2, #128	; 0x80
     54c:	2100      	movs	r1, #0
     54e:	4810      	ldr	r0, [pc, #64]	; (590 <usb_d_init+0x50>)
     550:	4b10      	ldr	r3, [pc, #64]	; (594 <usb_d_init+0x54>)
     552:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     554:	2200      	movs	r2, #0
     556:	e00a      	b.n	56e <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     558:	0151      	lsls	r1, r2, #5
     55a:	4b0d      	ldr	r3, [pc, #52]	; (590 <usb_d_init+0x50>)
     55c:	185b      	adds	r3, r3, r1
     55e:	21ff      	movs	r1, #255	; 0xff
     560:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     562:	490d      	ldr	r1, [pc, #52]	; (598 <usb_d_init+0x58>)
     564:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     566:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     568:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     56a:	3201      	adds	r2, #1
     56c:	b2d2      	uxtb	r2, r2
     56e:	2a03      	cmp	r2, #3
     570:	d9f2      	bls.n	558 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     572:	490a      	ldr	r1, [pc, #40]	; (59c <usb_d_init+0x5c>)
     574:	2000      	movs	r0, #0
     576:	4c0a      	ldr	r4, [pc, #40]	; (5a0 <usb_d_init+0x60>)
     578:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     57a:	490a      	ldr	r1, [pc, #40]	; (5a4 <usb_d_init+0x64>)
     57c:	2001      	movs	r0, #1
     57e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     580:	4909      	ldr	r1, [pc, #36]	; (5a8 <usb_d_init+0x68>)
     582:	2002      	movs	r0, #2
     584:	47a0      	blx	r4
	return ERR_NONE;
     586:	2000      	movs	r0, #0
}
     588:	bd10      	pop	{r4, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	00001335 	.word	0x00001335
     590:	20000084 	.word	0x20000084
     594:	00002b3f 	.word	0x00002b3f
     598:	00000331 	.word	0x00000331
     59c:	000004a9 	.word	0x000004a9
     5a0:	00001d29 	.word	0x00001d29
     5a4:	00000335 	.word	0x00000335
     5a8:	00000365 	.word	0x00000365

000005ac <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     5ac:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     5ae:	4b01      	ldr	r3, [pc, #4]	; (5b4 <usb_d_register_callback+0x8>)
     5b0:	4798      	blx	r3
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	00001d05 	.word	0x00001d05

000005b8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     5b8:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     5ba:	4b01      	ldr	r3, [pc, #4]	; (5c0 <usb_d_enable+0x8>)
     5bc:	4798      	blx	r3
}
     5be:	bd10      	pop	{r4, pc}
     5c0:	000013d9 	.word	0x000013d9

000005c4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     5c4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     5c6:	4b01      	ldr	r3, [pc, #4]	; (5cc <usb_d_attach+0x8>)
     5c8:	4798      	blx	r3
}
     5ca:	bd10      	pop	{r4, pc}
     5cc:	00001429 	.word	0x00001429

000005d0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     5d0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     5d2:	4b01      	ldr	r3, [pc, #4]	; (5d8 <usb_d_set_address+0x8>)
     5d4:	4798      	blx	r3
}
     5d6:	bd10      	pop	{r4, pc}
     5d8:	00001439 	.word	0x00001439

000005dc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5de:	0005      	movs	r5, r0
     5e0:	000e      	movs	r6, r1
     5e2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     5e4:	4b0f      	ldr	r3, [pc, #60]	; (624 <usb_d_ep_init+0x48>)
     5e6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     5e8:	2800      	cmp	r0, #0
     5ea:	da14      	bge.n	616 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     5ec:	20ff      	movs	r0, #255	; 0xff
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <usb_d_ep_init+0x48>)
     5f0:	4798      	blx	r3
     5f2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     5f4:	db12      	blt.n	61c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     5f6:	003a      	movs	r2, r7
     5f8:	0031      	movs	r1, r6
     5fa:	0028      	movs	r0, r5
     5fc:	4b0a      	ldr	r3, [pc, #40]	; (628 <usb_d_ep_init+0x4c>)
     5fe:	4798      	blx	r3
	if (rc < 0) {
     600:	2800      	cmp	r0, #0
     602:	db07      	blt.n	614 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     604:	4a09      	ldr	r2, [pc, #36]	; (62c <usb_d_ep_init+0x50>)
     606:	0164      	lsls	r4, r4, #5
     608:	1913      	adds	r3, r2, r4
     60a:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     60c:	2303      	movs	r3, #3
     60e:	401e      	ands	r6, r3
     610:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     612:	2000      	movs	r0, #0
}
     614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     616:	2014      	movs	r0, #20
     618:	4240      	negs	r0, r0
     61a:	e7fb      	b.n	614 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     61c:	2015      	movs	r0, #21
     61e:	4240      	negs	r0, r0
     620:	e7f8      	b.n	614 <usb_d_ep_init+0x38>
     622:	46c0      	nop			; (mov r8, r8)
     624:	000002f5 	.word	0x000002f5
     628:	0000144d 	.word	0x0000144d
     62c:	20000084 	.word	0x20000084

00000630 <usb_d_ep0_init>:
{
     630:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     632:	b282      	uxth	r2, r0
     634:	2100      	movs	r1, #0
     636:	2000      	movs	r0, #0
     638:	4b01      	ldr	r3, [pc, #4]	; (640 <usb_d_ep0_init+0x10>)
     63a:	4798      	blx	r3
}
     63c:	bd10      	pop	{r4, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	000005dd 	.word	0x000005dd

00000644 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     644:	b570      	push	{r4, r5, r6, lr}
     646:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     648:	4b06      	ldr	r3, [pc, #24]	; (664 <usb_d_ep_deinit+0x20>)
     64a:	4798      	blx	r3
     64c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     64e:	db07      	blt.n	660 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     650:	0028      	movs	r0, r5
     652:	4b05      	ldr	r3, [pc, #20]	; (668 <usb_d_ep_deinit+0x24>)
     654:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     656:	0164      	lsls	r4, r4, #5
     658:	4b04      	ldr	r3, [pc, #16]	; (66c <usb_d_ep_deinit+0x28>)
     65a:	191c      	adds	r4, r3, r4
     65c:	23ff      	movs	r3, #255	; 0xff
     65e:	7063      	strb	r3, [r4, #1]
}
     660:	bd70      	pop	{r4, r5, r6, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	000002f5 	.word	0x000002f5
     668:	00001599 	.word	0x00001599
     66c:	20000084 	.word	0x20000084

00000670 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     670:	b570      	push	{r4, r5, r6, lr}
     672:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     674:	4b0f      	ldr	r3, [pc, #60]	; (6b4 <usb_d_ep_enable+0x44>)
     676:	4798      	blx	r3
     678:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     67a:	db17      	blt.n	6ac <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     67c:	0143      	lsls	r3, r0, #5
     67e:	4a0e      	ldr	r2, [pc, #56]	; (6b8 <usb_d_ep_enable+0x48>)
     680:	5c9b      	ldrb	r3, [r3, r2]
     682:	2b00      	cmp	r3, #0
     684:	d10a      	bne.n	69c <usb_d_ep_enable+0x2c>
     686:	2102      	movs	r1, #2
     688:	0162      	lsls	r2, r4, #5
     68a:	4b0b      	ldr	r3, [pc, #44]	; (6b8 <usb_d_ep_enable+0x48>)
     68c:	189b      	adds	r3, r3, r2
     68e:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     690:	0028      	movs	r0, r5
     692:	4b0a      	ldr	r3, [pc, #40]	; (6bc <usb_d_ep_enable+0x4c>)
     694:	4798      	blx	r3
	if (rc < 0) {
     696:	2800      	cmp	r0, #0
     698:	db02      	blt.n	6a0 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     69a:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     69c:	2101      	movs	r1, #1
     69e:	e7f3      	b.n	688 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     6a0:	0164      	lsls	r4, r4, #5
     6a2:	4b05      	ldr	r3, [pc, #20]	; (6b8 <usb_d_ep_enable+0x48>)
     6a4:	191c      	adds	r4, r3, r4
     6a6:	2300      	movs	r3, #0
     6a8:	70a3      	strb	r3, [r4, #2]
     6aa:	e7f6      	b.n	69a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     6ac:	2012      	movs	r0, #18
     6ae:	4240      	negs	r0, r0
     6b0:	e7f3      	b.n	69a <usb_d_ep_enable+0x2a>
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	000002f5 	.word	0x000002f5
     6b8:	20000084 	.word	0x20000084
     6bc:	0000165d 	.word	0x0000165d

000006c0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c2:	46d6      	mov	lr, sl
     6c4:	464f      	mov	r7, r9
     6c6:	4646      	mov	r6, r8
     6c8:	b5c0      	push	{r6, r7, lr}
     6ca:	b086      	sub	sp, #24
     6cc:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     6ce:	7a06      	ldrb	r6, [r0, #8]
     6d0:	0030      	movs	r0, r6
     6d2:	4b3f      	ldr	r3, [pc, #252]	; (7d0 <usb_d_ep_transfer+0x110>)
     6d4:	4798      	blx	r3
     6d6:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     6d8:	09f6      	lsrs	r6, r6, #7
     6da:	7a6b      	ldrb	r3, [r5, #9]
     6dc:	1e5a      	subs	r2, r3, #1
     6de:	4193      	sbcs	r3, r2
     6e0:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
     6e2:	686b      	ldr	r3, [r5, #4]
     6e4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     6e6:	2800      	cmp	r0, #0
     6e8:	db6b      	blt.n	7c2 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     6ea:	a804      	add	r0, sp, #16
     6ec:	4b39      	ldr	r3, [pc, #228]	; (7d4 <usb_d_ep_transfer+0x114>)
     6ee:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     6f0:	017a      	lsls	r2, r7, #5
     6f2:	4b39      	ldr	r3, [pc, #228]	; (7d8 <usb_d_ep_transfer+0x118>)
     6f4:	189b      	adds	r3, r3, r2
     6f6:	789a      	ldrb	r2, [r3, #2]
     6f8:	2317      	movs	r3, #23
     6fa:	446b      	add	r3, sp
     6fc:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     6fe:	781b      	ldrb	r3, [r3, #0]
     700:	2b01      	cmp	r3, #1
     702:	d00e      	beq.n	722 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     704:	a804      	add	r0, sp, #16
     706:	4b35      	ldr	r3, [pc, #212]	; (7dc <usb_d_ep_transfer+0x11c>)
     708:	4798      	blx	r3
		switch (state) {
     70a:	2317      	movs	r3, #23
     70c:	446b      	add	r3, sp
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	b2db      	uxtb	r3, r3
     712:	2b05      	cmp	r3, #5
     714:	d02b      	beq.n	76e <usb_d_ep_transfer+0xae>
     716:	2b06      	cmp	r3, #6
     718:	d056      	beq.n	7c8 <usb_d_ep_transfer+0x108>
     71a:	2b00      	cmp	r3, #0
     71c:	d029      	beq.n	772 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     71e:	2001      	movs	r0, #1
     720:	e01f      	b.n	762 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     722:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <usb_d_ep_transfer+0x118>)
     724:	4699      	mov	r9, r3
     726:	017b      	lsls	r3, r7, #5
     728:	469a      	mov	sl, r3
     72a:	464b      	mov	r3, r9
     72c:	4453      	add	r3, sl
     72e:	2203      	movs	r2, #3
     730:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     732:	a804      	add	r0, sp, #16
     734:	4b29      	ldr	r3, [pc, #164]	; (7dc <usb_d_ep_transfer+0x11c>)
     736:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     738:	464b      	mov	r3, r9
     73a:	4652      	mov	r2, sl
     73c:	5cd3      	ldrb	r3, [r2, r3]
     73e:	2b00      	cmp	r3, #0
     740:	d01a      	beq.n	778 <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     742:	7a29      	ldrb	r1, [r5, #8]
     744:	682b      	ldr	r3, [r5, #0]
     746:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
     748:	4643      	mov	r3, r8
     74a:	9302      	str	r3, [sp, #8]
     74c:	2e00      	cmp	r6, #0
     74e:	d035      	beq.n	7bc <usb_d_ep_transfer+0xfc>
     750:	2280      	movs	r2, #128	; 0x80
     752:	4252      	negs	r2, r2
     754:	430a      	orrs	r2, r1
     756:	b2d2      	uxtb	r2, r2
     758:	a801      	add	r0, sp, #4
     75a:	7202      	strb	r2, [r0, #8]
     75c:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     75e:	4b20      	ldr	r3, [pc, #128]	; (7e0 <usb_d_ep_transfer+0x120>)
     760:	4798      	blx	r3
	return rc;
}
     762:	b006      	add	sp, #24
     764:	bc1c      	pop	{r2, r3, r4}
     766:	4690      	mov	r8, r2
     768:	4699      	mov	r9, r3
     76a:	46a2      	mov	sl, r4
     76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
     76e:	2002      	movs	r0, #2
     770:	e7f7      	b.n	762 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
     772:	2013      	movs	r0, #19
     774:	4240      	negs	r0, r0
     776:	e7f4      	b.n	762 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     778:	017b      	lsls	r3, r7, #5
     77a:	4a17      	ldr	r2, [pc, #92]	; (7d8 <usb_d_ep_transfer+0x118>)
     77c:	18d2      	adds	r2, r2, r3
     77e:	7c93      	ldrb	r3, [r2, #18]
     780:	7cd4      	ldrb	r4, [r2, #19]
     782:	0224      	lsls	r4, r4, #8
     784:	191b      	adds	r3, r3, r4
     786:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     788:	2b00      	cmp	r3, #0
     78a:	d106      	bne.n	79a <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     78c:	2304      	movs	r3, #4
     78e:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     790:	2300      	movs	r3, #0
     792:	4698      	mov	r8, r3
			zlp                 = true;
     794:	2401      	movs	r4, #1
			dir                 = true;
     796:	2601      	movs	r6, #1
     798:	e7d3      	b.n	742 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     79a:	017f      	lsls	r7, r7, #5
     79c:	4a0e      	ldr	r2, [pc, #56]	; (7d8 <usb_d_ep_transfer+0x118>)
     79e:	19d7      	adds	r7, r2, r7
     7a0:	220c      	movs	r2, #12
     7a2:	56ba      	ldrsb	r2, [r7, r2]
     7a4:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
     7a6:	4598      	cmp	r8, r3
     7a8:	d900      	bls.n	7ac <usb_d_ep_transfer+0xec>
				len = req_len;
     7aa:	4698      	mov	r8, r3
			if (dir) {
     7ac:	2a00      	cmp	r2, #0
     7ae:	db01      	blt.n	7b4 <usb_d_ep_transfer+0xf4>
				zlp = false;
     7b0:	2400      	movs	r4, #0
     7b2:	e7c6      	b.n	742 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
     7b4:	4598      	cmp	r8, r3
     7b6:	419b      	sbcs	r3, r3
     7b8:	425c      	negs	r4, r3
     7ba:	e7c2      	b.n	742 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
     7bc:	220f      	movs	r2, #15
     7be:	400a      	ands	r2, r1
     7c0:	e7ca      	b.n	758 <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
     7c2:	2012      	movs	r0, #18
     7c4:	4240      	negs	r0, r0
     7c6:	e7cc      	b.n	762 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
     7c8:	2010      	movs	r0, #16
     7ca:	4240      	negs	r0, r0
     7cc:	e7c9      	b.n	762 <usb_d_ep_transfer+0xa2>
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	000002f5 	.word	0x000002f5
     7d4:	000002d9 	.word	0x000002d9
     7d8:	20000084 	.word	0x20000084
     7dc:	000002e7 	.word	0x000002e7
     7e0:	00001b2d 	.word	0x00001b2d

000007e4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     7e4:	b570      	push	{r4, r5, r6, lr}
     7e6:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     7e8:	2900      	cmp	r1, #0
     7ea:	d005      	beq.n	7f8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     7ec:	2901      	cmp	r1, #1
     7ee:	d024      	beq.n	83a <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     7f0:	2102      	movs	r1, #2
     7f2:	4b13      	ldr	r3, [pc, #76]	; (840 <usb_d_ep_halt+0x5c>)
     7f4:	4798      	blx	r3
	}
}
     7f6:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     7f8:	4b12      	ldr	r3, [pc, #72]	; (844 <usb_d_ep_halt+0x60>)
     7fa:	4798      	blx	r3
     7fc:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     7fe:	db19      	blt.n	834 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     800:	2102      	movs	r1, #2
     802:	0020      	movs	r0, r4
     804:	4b0e      	ldr	r3, [pc, #56]	; (840 <usb_d_ep_halt+0x5c>)
     806:	4798      	blx	r3
     808:	2800      	cmp	r0, #0
     80a:	d0f4      	beq.n	7f6 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     80c:	2100      	movs	r1, #0
     80e:	0020      	movs	r0, r4
     810:	4b0b      	ldr	r3, [pc, #44]	; (840 <usb_d_ep_halt+0x5c>)
     812:	4798      	blx	r3
		if (rc < 0) {
     814:	2800      	cmp	r0, #0
     816:	dbee      	blt.n	7f6 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     818:	016d      	lsls	r5, r5, #5
     81a:	4b0b      	ldr	r3, [pc, #44]	; (848 <usb_d_ep_halt+0x64>)
     81c:	195d      	adds	r5, r3, r5
     81e:	2301      	movs	r3, #1
     820:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     822:	3302      	adds	r3, #2
     824:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     826:	69eb      	ldr	r3, [r5, #28]
     828:	2200      	movs	r2, #0
     82a:	2103      	movs	r1, #3
     82c:	0020      	movs	r0, r4
     82e:	4798      	blx	r3
	return ERR_NONE;
     830:	2000      	movs	r0, #0
     832:	e7e0      	b.n	7f6 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     834:	2012      	movs	r0, #18
     836:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
     838:	e7dd      	b.n	7f6 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     83a:	4b01      	ldr	r3, [pc, #4]	; (840 <usb_d_ep_halt+0x5c>)
     83c:	4798      	blx	r3
     83e:	e7da      	b.n	7f6 <usb_d_ep_halt+0x12>
     840:	0000195d 	.word	0x0000195d
     844:	000002f5 	.word	0x000002f5
     848:	20000084 	.word	0x20000084

0000084c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     84c:	b570      	push	{r4, r5, r6, lr}
     84e:	000d      	movs	r5, r1
     850:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     852:	4b0f      	ldr	r3, [pc, #60]	; (890 <usb_d_ep_register_callback+0x44>)
     854:	4798      	blx	r3
     856:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     858:	2c00      	cmp	r4, #0
     85a:	d008      	beq.n	86e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     85c:	2b00      	cmp	r3, #0
     85e:	db05      	blt.n	86c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     860:	2d01      	cmp	r5, #1
     862:	d00b      	beq.n	87c <usb_d_ep_register_callback+0x30>
     864:	2d00      	cmp	r5, #0
     866:	d004      	beq.n	872 <usb_d_ep_register_callback+0x26>
     868:	2d02      	cmp	r5, #2
     86a:	d00c      	beq.n	886 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     86c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     86e:	4c09      	ldr	r4, [pc, #36]	; (894 <usb_d_ep_register_callback+0x48>)
     870:	e7f4      	b.n	85c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     872:	0140      	lsls	r0, r0, #5
     874:	4b08      	ldr	r3, [pc, #32]	; (898 <usb_d_ep_register_callback+0x4c>)
     876:	1818      	adds	r0, r3, r0
     878:	6144      	str	r4, [r0, #20]
		break;
     87a:	e7f7      	b.n	86c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     87c:	0140      	lsls	r0, r0, #5
     87e:	4b06      	ldr	r3, [pc, #24]	; (898 <usb_d_ep_register_callback+0x4c>)
     880:	1818      	adds	r0, r3, r0
     882:	6184      	str	r4, [r0, #24]
		break;
     884:	e7f2      	b.n	86c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     886:	0140      	lsls	r0, r0, #5
     888:	4b03      	ldr	r3, [pc, #12]	; (898 <usb_d_ep_register_callback+0x4c>)
     88a:	1818      	adds	r0, r3, r0
     88c:	61c4      	str	r4, [r0, #28]
		break;
     88e:	e7ed      	b.n	86c <usb_d_ep_register_callback+0x20>
     890:	000002f5 	.word	0x000002f5
     894:	00000331 	.word	0x00000331
     898:	20000084 	.word	0x20000084

0000089c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     89c:	2800      	cmp	r0, #0
     89e:	d100      	bne.n	8a2 <assert+0x6>
		__asm("BKPT #0");
     8a0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8a2:	4770      	bx	lr

000008a4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8a4:	6803      	ldr	r3, [r0, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d003      	beq.n	8b2 <is_list_element+0xe>
		if (it == element) {
     8aa:	428b      	cmp	r3, r1
     8ac:	d003      	beq.n	8b6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	e7f9      	b.n	8a6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     8b2:	2000      	movs	r0, #0
}
     8b4:	4770      	bx	lr
			return true;
     8b6:	2001      	movs	r0, #1
     8b8:	e7fc      	b.n	8b4 <is_list_element+0x10>
	...

000008bc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     8bc:	b570      	push	{r4, r5, r6, lr}
     8be:	0005      	movs	r5, r0
     8c0:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     8c2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     8c4:	4b0a      	ldr	r3, [pc, #40]	; (8f0 <list_insert_at_end+0x34>)
     8c6:	4798      	blx	r3
     8c8:	2301      	movs	r3, #1
     8ca:	4058      	eors	r0, r3
     8cc:	b2c0      	uxtb	r0, r0
     8ce:	224f      	movs	r2, #79	; 0x4f
     8d0:	4908      	ldr	r1, [pc, #32]	; (8f4 <list_insert_at_end+0x38>)
     8d2:	4b09      	ldr	r3, [pc, #36]	; (8f8 <list_insert_at_end+0x3c>)
     8d4:	4798      	blx	r3

	if (!list->head) {
     8d6:	682b      	ldr	r3, [r5, #0]
     8d8:	2b00      	cmp	r3, #0
     8da:	d103      	bne.n	8e4 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     8dc:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     8de:	6033      	str	r3, [r6, #0]
		return;
     8e0:	e005      	b.n	8ee <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     8e2:	001c      	movs	r4, r3
	while (it->next) {
     8e4:	6823      	ldr	r3, [r4, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d1fb      	bne.n	8e2 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     8ea:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     8ec:	6033      	str	r3, [r6, #0]
}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	000008a5 	.word	0x000008a5
     8f4:	00002b50 	.word	0x00002b50
     8f8:	0000089d 	.word	0x0000089d

000008fc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     8fc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     8fe:	4a08      	ldr	r2, [pc, #32]	; (920 <_init_chip+0x24>)
     900:	6853      	ldr	r3, [r2, #4]
     902:	2102      	movs	r1, #2
     904:	430b      	orrs	r3, r1
     906:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     908:	4b06      	ldr	r3, [pc, #24]	; (924 <_init_chip+0x28>)
     90a:	4798      	blx	r3
	_sysctrl_init_sources();
     90c:	4b06      	ldr	r3, [pc, #24]	; (928 <_init_chip+0x2c>)
     90e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     910:	2002      	movs	r0, #2
     912:	4c06      	ldr	r4, [pc, #24]	; (92c <_init_chip+0x30>)
     914:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     916:	4b06      	ldr	r3, [pc, #24]	; (930 <_init_chip+0x34>)
     918:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     91a:	20fd      	movs	r0, #253	; 0xfd
     91c:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     91e:	bd10      	pop	{r4, pc}
     920:	41004000 	.word	0x41004000
     924:	00000975 	.word	0x00000975
     928:	00000995 	.word	0x00000995
     92c:	00000935 	.word	0x00000935
     930:	000009c1 	.word	0x000009c1

00000934 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     934:	07c3      	lsls	r3, r0, #31
     936:	d509      	bpl.n	94c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     938:	4b0b      	ldr	r3, [pc, #44]	; (968 <_gclk_init_generators_by_fref+0x34>)
     93a:	2280      	movs	r2, #128	; 0x80
     93c:	0052      	lsls	r2, r2, #1
     93e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     940:	4a0a      	ldr	r2, [pc, #40]	; (96c <_gclk_init_generators_by_fref+0x38>)
     942:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     944:	4b08      	ldr	r3, [pc, #32]	; (968 <_gclk_init_generators_by_fref+0x34>)
     946:	785b      	ldrb	r3, [r3, #1]
     948:	09db      	lsrs	r3, r3, #7
     94a:	d1fb      	bne.n	944 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     94c:	0783      	lsls	r3, r0, #30
     94e:	d509      	bpl.n	964 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     950:	4b05      	ldr	r3, [pc, #20]	; (968 <_gclk_init_generators_by_fref+0x34>)
     952:	2202      	movs	r2, #2
     954:	32ff      	adds	r2, #255	; 0xff
     956:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     958:	4a05      	ldr	r2, [pc, #20]	; (970 <_gclk_init_generators_by_fref+0x3c>)
     95a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <_gclk_init_generators_by_fref+0x34>)
     95e:	785b      	ldrb	r3, [r3, #1]
     960:	09db      	lsrs	r3, r3, #7
     962:	d1fb      	bne.n	95c <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     964:	4770      	bx	lr
     966:	46c0      	nop			; (mov r8, r8)
     968:	40000c00 	.word	0x40000c00
     96c:	00290700 	.word	0x00290700
     970:	00290401 	.word	0x00290401

00000974 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     974:	4b06      	ldr	r3, [pc, #24]	; (990 <_pm_init+0x1c>)
     976:	7a1a      	ldrb	r2, [r3, #8]
     978:	b2d2      	uxtb	r2, r2
     97a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     97c:	7a5a      	ldrb	r2, [r3, #9]
     97e:	b2d2      	uxtb	r2, r2
     980:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     982:	7a9a      	ldrb	r2, [r3, #10]
     984:	b2d2      	uxtb	r2, r2
     986:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     988:	7ada      	ldrb	r2, [r3, #11]
     98a:	b2d2      	uxtb	r2, r2
     98c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     98e:	4770      	bx	lr
     990:	40000400 	.word	0x40000400

00000994 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc32k_reg_t hri_sysctrl_read_OSC32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
     994:	4a09      	ldr	r2, [pc, #36]	; (9bc <_sysctrl_init_sources+0x28>)
     996:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
     998:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
     99a:	041b      	lsls	r3, r3, #16
     99c:	21fe      	movs	r1, #254	; 0xfe
     99e:	03c9      	lsls	r1, r1, #15
     9a0:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
     9a2:	210e      	movs	r1, #14
     9a4:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC32K_reg(const void *const hw, hri_sysctrl_osc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg = data;
     9a6:	6193      	str	r3, [r2, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     9a8:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     9aa:	3111      	adds	r1, #17
     9ac:	400b      	ands	r3, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     9ae:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
     9b0:	4b02      	ldr	r3, [pc, #8]	; (9bc <_sysctrl_init_sources+0x28>)
     9b2:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
     9b4:	075b      	lsls	r3, r3, #29
     9b6:	d5fb      	bpl.n	9b0 <_sysctrl_init_sources+0x1c>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     9b8:	4770      	bx	lr
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	40000800 	.word	0x40000800

000009c0 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
     9c0:	2282      	movs	r2, #130	; 0x82
     9c2:	01d2      	lsls	r2, r2, #7
     9c4:	4b17      	ldr	r3, [pc, #92]	; (a24 <_sysctrl_init_referenced_generators+0x64>)
     9c6:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     9c8:	2202      	movs	r2, #2
     9ca:	4b17      	ldr	r3, [pc, #92]	; (a28 <_sysctrl_init_referenced_generators+0x68>)
     9cc:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     9ce:	4b16      	ldr	r3, [pc, #88]	; (a28 <_sysctrl_init_referenced_generators+0x68>)
     9d0:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     9d2:	06db      	lsls	r3, r3, #27
     9d4:	d5fb      	bpl.n	9ce <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     9d6:	4a15      	ldr	r2, [pc, #84]	; (a2c <_sysctrl_init_referenced_generators+0x6c>)
     9d8:	4b13      	ldr	r3, [pc, #76]	; (a28 <_sysctrl_init_referenced_generators+0x68>)
     9da:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     9dc:	4b14      	ldr	r3, [pc, #80]	; (a30 <_sysctrl_init_referenced_generators+0x70>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	0e9b      	lsrs	r3, r3, #26
     9e2:	2b3f      	cmp	r3, #63	; 0x3f
     9e4:	d015      	beq.n	a12 <_sysctrl_init_referenced_generators+0x52>
     9e6:	029b      	lsls	r3, r3, #10
     9e8:	2280      	movs	r2, #128	; 0x80
     9ea:	0092      	lsls	r2, r2, #2
     9ec:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     9ee:	4a0e      	ldr	r2, [pc, #56]	; (a28 <_sysctrl_init_referenced_generators+0x68>)
     9f0:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     9f2:	2346      	movs	r3, #70	; 0x46
     9f4:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     9f6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     9f8:	075b      	lsls	r3, r3, #29
     9fa:	d50d      	bpl.n	a18 <_sysctrl_init_referenced_generators+0x58>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     9fc:	4b0a      	ldr	r3, [pc, #40]	; (a28 <_sysctrl_init_referenced_generators+0x68>)
     9fe:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
     a00:	23d0      	movs	r3, #208	; 0xd0
     a02:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     a04:	2bd0      	cmp	r3, #208	; 0xd0
     a06:	d1f9      	bne.n	9fc <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     a08:	4b06      	ldr	r3, [pc, #24]	; (a24 <_sysctrl_init_referenced_generators+0x64>)
     a0a:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     a0c:	09db      	lsrs	r3, r3, #7
     a0e:	d1fb      	bne.n	a08 <_sysctrl_init_referenced_generators+0x48>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     a10:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     a12:	23fc      	movs	r3, #252	; 0xfc
     a14:	01db      	lsls	r3, r3, #7
     a16:	e7ea      	b.n	9ee <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     a18:	4b03      	ldr	r3, [pc, #12]	; (a28 <_sysctrl_init_referenced_generators+0x68>)
     a1a:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     a1c:	06db      	lsls	r3, r3, #27
     a1e:	d5fb      	bpl.n	a18 <_sysctrl_init_referenced_generators+0x58>
     a20:	e7f2      	b.n	a08 <_sysctrl_init_referenced_generators+0x48>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	40000c00 	.word	0x40000c00
     a28:	40000800 	.word	0x40000800
     a2c:	040105b9 	.word	0x040105b9
     a30:	00806024 	.word	0x00806024

00000a34 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     a34:	2000      	movs	r0, #0
     a36:	4770      	bx	lr

00000a38 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
     a38:	4b12      	ldr	r3, [pc, #72]	; (a84 <_usb_load_calib+0x4c>)
     a3a:	681a      	ldr	r2, [r3, #0]
     a3c:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
     a3e:	211f      	movs	r1, #31
     a40:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
     a42:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
     a44:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
     a46:	0dd0      	lsrs	r0, r2, #23
     a48:	2207      	movs	r2, #7
     a4a:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
     a4c:	2b1f      	cmp	r3, #31
     a4e:	d012      	beq.n	a76 <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
     a50:	291f      	cmp	r1, #31
     a52:	d012      	beq.n	a7a <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
     a54:	2a07      	cmp	r2, #7
     a56:	d012      	beq.n	a7e <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
     a58:	019b      	lsls	r3, r3, #6
     a5a:	430b      	orrs	r3, r1
     a5c:	0312      	lsls	r2, r2, #12
     a5e:	4313      	orrs	r3, r2
     a60:	4a09      	ldr	r2, [pc, #36]	; (a88 <_usb_load_calib+0x50>)
     a62:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
     a64:	78d3      	ldrb	r3, [r2, #3]
     a66:	2103      	movs	r1, #3
     a68:	430b      	orrs	r3, r1
     a6a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
     a6c:	78d3      	ldrb	r3, [r2, #3]
     a6e:	210c      	movs	r1, #12
     a70:	430b      	orrs	r3, r1
     a72:	70d3      	strb	r3, [r2, #3]
}
     a74:	4770      	bx	lr
		pad_transn = 5;
     a76:	3b1a      	subs	r3, #26
     a78:	e7ea      	b.n	a50 <_usb_load_calib+0x18>
		pad_transp = 29;
     a7a:	3902      	subs	r1, #2
     a7c:	e7ea      	b.n	a54 <_usb_load_calib+0x1c>
		pad_trim = 5;
     a7e:	3a02      	subs	r2, #2
     a80:	e7ea      	b.n	a58 <_usb_load_calib+0x20>
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	00806024 	.word	0x00806024
     a88:	41005000 	.word	0x41005000

00000a8c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     a8c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     a8e:	7c83      	ldrb	r3, [r0, #18]
     a90:	220f      	movs	r2, #15
     a92:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     a94:	7cc1      	ldrb	r1, [r0, #19]
     a96:	3a08      	subs	r2, #8
     a98:	400a      	ands	r2, r1

	if (!is_ctrl) {
     a9a:	2a01      	cmp	r2, #1
     a9c:	d00d      	beq.n	aba <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     a9e:	001a      	movs	r2, r3
     aa0:	3208      	adds	r2, #8
     aa2:	0152      	lsls	r2, r2, #5
     aa4:	4919      	ldr	r1, [pc, #100]	; (b0c <_usb_d_dev_handle_setup+0x80>)
     aa6:	468c      	mov	ip, r1
     aa8:	4462      	add	r2, ip
     aaa:	2110      	movs	r1, #16
     aac:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     aae:	015b      	lsls	r3, r3, #5
     ab0:	4a17      	ldr	r2, [pc, #92]	; (b10 <_usb_d_dev_handle_setup+0x84>)
     ab2:	4694      	mov	ip, r2
     ab4:	4463      	add	r3, ip
     ab6:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     ab8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     aba:	064a      	lsls	r2, r1, #25
     abc:	d50c      	bpl.n	ad8 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     abe:	7cc2      	ldrb	r2, [r0, #19]
     ac0:	2140      	movs	r1, #64	; 0x40
     ac2:	438a      	bics	r2, r1
     ac4:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     ac6:	001a      	movs	r2, r3
     ac8:	3208      	adds	r2, #8
     aca:	0152      	lsls	r2, r2, #5
     acc:	4c0f      	ldr	r4, [pc, #60]	; (b0c <_usb_d_dev_handle_setup+0x80>)
     ace:	46a4      	mov	ip, r4
     ad0:	4462      	add	r2, ip
     ad2:	2480      	movs	r4, #128	; 0x80
     ad4:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     ad6:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
     ad8:	7cc2      	ldrb	r2, [r0, #19]
     ada:	2108      	movs	r1, #8
     adc:	438a      	bics	r2, r1
     ade:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     ae0:	490c      	ldr	r1, [pc, #48]	; (b14 <_usb_d_dev_handle_setup+0x88>)
     ae2:	015a      	lsls	r2, r3, #5
     ae4:	188c      	adds	r4, r1, r2
     ae6:	2500      	movs	r5, #0
     ae8:	72a5      	strb	r5, [r4, #10]
     aea:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     aec:	3308      	adds	r3, #8
     aee:	015b      	lsls	r3, r3, #5
     af0:	4c06      	ldr	r4, [pc, #24]	; (b0c <_usb_d_dev_handle_setup+0x80>)
     af2:	46a4      	mov	ip, r4
     af4:	4463      	add	r3, ip
     af6:	246f      	movs	r4, #111	; 0x6f
     af8:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <_usb_d_dev_handle_setup+0x84>)
     afc:	469c      	mov	ip, r3
     afe:	4462      	add	r2, ip
     b00:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     b02:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     b04:	7c80      	ldrb	r0, [r0, #18]
     b06:	4798      	blx	r3
     b08:	e7d6      	b.n	ab8 <_usb_d_dev_handle_setup+0x2c>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	41005000 	.word	0x41005000
     b10:	41005108 	.word	0x41005108
     b14:	20000104 	.word	0x20000104

00000b18 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     b18:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
     b1a:	7c82      	ldrb	r2, [r0, #18]
     b1c:	230f      	movs	r3, #15
     b1e:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     b20:	2220      	movs	r2, #32
     b22:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     b24:	b2d2      	uxtb	r2, r2
     b26:	015b      	lsls	r3, r3, #5
     b28:	4905      	ldr	r1, [pc, #20]	; (b40 <_usb_d_dev_handle_stall+0x28>)
     b2a:	468c      	mov	ip, r1
     b2c:	4463      	add	r3, ip
     b2e:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     b30:	4b04      	ldr	r3, [pc, #16]	; (b44 <_usb_d_dev_handle_stall+0x2c>)
     b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     b34:	6882      	ldr	r2, [r0, #8]
     b36:	7c80      	ldrb	r0, [r0, #18]
     b38:	2101      	movs	r1, #1
     b3a:	4798      	blx	r3
}
     b3c:	bd10      	pop	{r4, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	41005108 	.word	0x41005108
     b44:	20000104 	.word	0x20000104

00000b48 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     b48:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     b4a:	7c83      	ldrb	r3, [r0, #18]
     b4c:	2bff      	cmp	r3, #255	; 0xff
     b4e:	d002      	beq.n	b56 <_usb_d_dev_trans_done+0xe>
     b50:	7cc2      	ldrb	r2, [r0, #19]
     b52:	0652      	lsls	r2, r2, #25
     b54:	d400      	bmi.n	b58 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     b56:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     b58:	7cc2      	ldrb	r2, [r0, #19]
     b5a:	2440      	movs	r4, #64	; 0x40
     b5c:	43a2      	bics	r2, r4
     b5e:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     b60:	4a02      	ldr	r2, [pc, #8]	; (b6c <_usb_d_dev_trans_done+0x24>)
     b62:	6f14      	ldr	r4, [r2, #112]	; 0x70
     b64:	6882      	ldr	r2, [r0, #8]
     b66:	0018      	movs	r0, r3
     b68:	47a0      	blx	r4
     b6a:	e7f4      	b.n	b56 <_usb_d_dev_trans_done+0xe>
     b6c:	20000104 	.word	0x20000104

00000b70 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     b70:	b5f0      	push	{r4, r5, r6, r7, lr}
     b72:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     b74:	7c84      	ldrb	r4, [r0, #18]
     b76:	230f      	movs	r3, #15
     b78:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     b7a:	4d18      	ldr	r5, [pc, #96]	; (bdc <_usb_d_dev_trans_stop+0x6c>)
     b7c:	882e      	ldrh	r6, [r5, #0]
     b7e:	ad01      	add	r5, sp, #4
     b80:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     b82:	2cff      	cmp	r4, #255	; 0xff
     b84:	d01e      	beq.n	bc4 <_usb_d_dev_trans_stop+0x54>
     b86:	7cc4      	ldrb	r4, [r0, #19]
     b88:	0664      	lsls	r4, r4, #25
     b8a:	d51b      	bpl.n	bc4 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
     b8c:	2900      	cmp	r1, #0
     b8e:	d01b      	beq.n	bc8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     b90:	001c      	movs	r4, r3
     b92:	3408      	adds	r4, #8
     b94:	0164      	lsls	r4, r4, #5
     b96:	4d12      	ldr	r5, [pc, #72]	; (be0 <_usb_d_dev_trans_stop+0x70>)
     b98:	46ac      	mov	ip, r5
     b9a:	4464      	add	r4, ip
     b9c:	2580      	movs	r5, #128	; 0x80
     b9e:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     ba0:	ad01      	add	r5, sp, #4
     ba2:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ba4:	001c      	movs	r4, r3
     ba6:	3408      	adds	r4, #8
     ba8:	0164      	lsls	r4, r4, #5
     baa:	4f0d      	ldr	r7, [pc, #52]	; (be0 <_usb_d_dev_trans_stop+0x70>)
     bac:	46bc      	mov	ip, r7
     bae:	4464      	add	r4, ip
     bb0:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
     bb2:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     bb4:	015b      	lsls	r3, r3, #5
     bb6:	4c0b      	ldr	r4, [pc, #44]	; (be4 <_usb_d_dev_trans_stop+0x74>)
     bb8:	46a4      	mov	ip, r4
     bba:	4463      	add	r3, ip
     bbc:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
     bbe:	0011      	movs	r1, r2
     bc0:	4b09      	ldr	r3, [pc, #36]	; (be8 <_usb_d_dev_trans_stop+0x78>)
     bc2:	4798      	blx	r3
}
     bc4:	b003      	add	sp, #12
     bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     bc8:	001c      	movs	r4, r3
     bca:	3408      	adds	r4, #8
     bcc:	0164      	lsls	r4, r4, #5
     bce:	4d04      	ldr	r5, [pc, #16]	; (be0 <_usb_d_dev_trans_stop+0x70>)
     bd0:	46ac      	mov	ip, r5
     bd2:	4464      	add	r4, ip
     bd4:	2540      	movs	r5, #64	; 0x40
     bd6:	7165      	strb	r5, [r4, #5]
     bd8:	e7e2      	b.n	ba0 <_usb_d_dev_trans_stop+0x30>
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	00002b70 	.word	0x00002b70
     be0:	41005000 	.word	0x41005000
     be4:	41005108 	.word	0x41005108
     be8:	00000b49 	.word	0x00000b49

00000bec <_usb_d_dev_handle_trfail>:
{
     bec:	b5f0      	push	{r4, r5, r6, r7, lr}
     bee:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     bf0:	7c83      	ldrb	r3, [r0, #18]
     bf2:	220f      	movs	r2, #15
     bf4:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     bf6:	4a3c      	ldr	r2, [pc, #240]	; (ce8 <_usb_d_dev_handle_trfail+0xfc>)
     bf8:	8894      	ldrh	r4, [r2, #4]
     bfa:	aa01      	add	r2, sp, #4
     bfc:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
     bfe:	015a      	lsls	r2, r3, #5
     c00:	4c3a      	ldr	r4, [pc, #232]	; (cec <_usb_d_dev_handle_trfail+0x100>)
     c02:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
     c04:	2900      	cmp	r1, #0
     c06:	d033      	beq.n	c70 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     c08:	001a      	movs	r2, r3
     c0a:	3208      	adds	r2, #8
     c0c:	0152      	lsls	r2, r2, #5
     c0e:	4d38      	ldr	r5, [pc, #224]	; (cf0 <_usb_d_dev_handle_trfail+0x104>)
     c10:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     c12:	0912      	lsrs	r2, r2, #4
     c14:	2507      	movs	r5, #7
     c16:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     c18:	7cc2      	ldrb	r2, [r0, #19]
     c1a:	2607      	movs	r6, #7
     c1c:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
     c1e:	010a      	lsls	r2, r1, #4
     c20:	18a2      	adds	r2, r4, r2
     c22:	7a94      	ldrb	r4, [r2, #10]
     c24:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     c26:	2d02      	cmp	r5, #2
     c28:	d02a      	beq.n	c80 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
     c2a:	07a4      	lsls	r4, r4, #30
     c2c:	d544      	bpl.n	cb8 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     c2e:	7a94      	ldrb	r4, [r2, #10]
     c30:	2502      	movs	r5, #2
     c32:	43ac      	bics	r4, r5
     c34:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     c36:	ac01      	add	r4, sp, #4
     c38:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     c3a:	001a      	movs	r2, r3
     c3c:	3208      	adds	r2, #8
     c3e:	0152      	lsls	r2, r2, #5
     c40:	4f2b      	ldr	r7, [pc, #172]	; (cf0 <_usb_d_dev_handle_trfail+0x104>)
     c42:	46bc      	mov	ip, r7
     c44:	4462      	add	r2, ip
     c46:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
     c48:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     c4a:	015b      	lsls	r3, r3, #5
     c4c:	4c29      	ldr	r4, [pc, #164]	; (cf4 <_usb_d_dev_handle_trfail+0x108>)
     c4e:	46a4      	mov	ip, r4
     c50:	4463      	add	r3, ip
     c52:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     c54:	2e01      	cmp	r6, #1
     c56:	d145      	bne.n	ce4 <_usb_d_dev_handle_trfail+0xf8>
     c58:	7cc3      	ldrb	r3, [r0, #19]
     c5a:	065b      	lsls	r3, r3, #25
     c5c:	d542      	bpl.n	ce4 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     c5e:	7cc3      	ldrb	r3, [r0, #19]
     c60:	09db      	lsrs	r3, r3, #7
     c62:	4299      	cmp	r1, r3
     c64:	d03e      	beq.n	ce4 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     c66:	2200      	movs	r2, #0
     c68:	0019      	movs	r1, r3
     c6a:	4b23      	ldr	r3, [pc, #140]	; (cf8 <_usb_d_dev_handle_trfail+0x10c>)
     c6c:	4798      	blx	r3
     c6e:	e039      	b.n	ce4 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     c70:	001a      	movs	r2, r3
     c72:	3208      	adds	r2, #8
     c74:	0152      	lsls	r2, r2, #5
     c76:	4d1e      	ldr	r5, [pc, #120]	; (cf0 <_usb_d_dev_handle_trfail+0x104>)
     c78:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     c7a:	2207      	movs	r2, #7
     c7c:	4015      	ands	r5, r2
     c7e:	e7cb      	b.n	c18 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     c80:	07e5      	lsls	r5, r4, #31
     c82:	d5d2      	bpl.n	c2a <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     c84:	7a94      	ldrb	r4, [r2, #10]
     c86:	2501      	movs	r5, #1
     c88:	43ac      	bics	r4, r5
     c8a:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     c8c:	ac01      	add	r4, sp, #4
     c8e:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     c90:	001a      	movs	r2, r3
     c92:	3208      	adds	r2, #8
     c94:	0152      	lsls	r2, r2, #5
     c96:	4e16      	ldr	r6, [pc, #88]	; (cf0 <_usb_d_dev_handle_trfail+0x104>)
     c98:	46b4      	mov	ip, r6
     c9a:	4462      	add	r2, ip
     c9c:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
     c9e:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     ca0:	015b      	lsls	r3, r3, #5
     ca2:	4c14      	ldr	r4, [pc, #80]	; (cf4 <_usb_d_dev_handle_trfail+0x108>)
     ca4:	46a4      	mov	ip, r4
     ca6:	4463      	add	r3, ip
     ca8:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     caa:	1e4b      	subs	r3, r1, #1
     cac:	4199      	sbcs	r1, r3
     cae:	b2c9      	uxtb	r1, r1
     cb0:	2204      	movs	r2, #4
     cb2:	4b11      	ldr	r3, [pc, #68]	; (cf8 <_usb_d_dev_handle_trfail+0x10c>)
     cb4:	4798      	blx	r3
     cb6:	e015      	b.n	ce4 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
     cb8:	005a      	lsls	r2, r3, #1
     cba:	1852      	adds	r2, r2, r1
     cbc:	0112      	lsls	r2, r2, #4
     cbe:	480b      	ldr	r0, [pc, #44]	; (cec <_usb_d_dev_handle_trfail+0x100>)
     cc0:	1882      	adds	r2, r0, r2
     cc2:	2000      	movs	r0, #0
     cc4:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     cc6:	a801      	add	r0, sp, #4
     cc8:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     cca:	001a      	movs	r2, r3
     ccc:	3208      	adds	r2, #8
     cce:	0152      	lsls	r2, r2, #5
     cd0:	4d07      	ldr	r5, [pc, #28]	; (cf0 <_usb_d_dev_handle_trfail+0x104>)
     cd2:	46ac      	mov	ip, r5
     cd4:	4462      	add	r2, ip
     cd6:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
     cd8:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     cda:	015b      	lsls	r3, r3, #5
     cdc:	4905      	ldr	r1, [pc, #20]	; (cf4 <_usb_d_dev_handle_trfail+0x108>)
     cde:	468c      	mov	ip, r1
     ce0:	4463      	add	r3, ip
     ce2:	701a      	strb	r2, [r3, #0]
}
     ce4:	b003      	add	sp, #12
     ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce8:	00002b70 	.word	0x00002b70
     cec:	20000104 	.word	0x20000104
     cf0:	41005000 	.word	0x41005000
     cf4:	41005108 	.word	0x41005108
     cf8:	00000b71 	.word	0x00000b71

00000cfc <_usb_d_dev_reset_epts>:
{
     cfc:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
     cfe:	2500      	movs	r5, #0
     d00:	e018      	b.n	d34 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     d02:	4c10      	ldr	r4, [pc, #64]	; (d44 <_usb_d_dev_reset_epts+0x48>)
     d04:	3460      	adds	r4, #96	; 0x60
     d06:	00ae      	lsls	r6, r5, #2
     d08:	1973      	adds	r3, r6, r5
     d0a:	0098      	lsls	r0, r3, #2
     d0c:	3010      	adds	r0, #16
     d0e:	1820      	adds	r0, r4, r0
     d10:	3004      	adds	r0, #4
     d12:	2103      	movs	r1, #3
     d14:	4b0c      	ldr	r3, [pc, #48]	; (d48 <_usb_d_dev_reset_epts+0x4c>)
     d16:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
     d18:	1972      	adds	r2, r6, r5
     d1a:	0093      	lsls	r3, r2, #2
     d1c:	18e3      	adds	r3, r4, r3
     d1e:	3326      	adds	r3, #38	; 0x26
     d20:	22ff      	movs	r2, #255	; 0xff
     d22:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
     d24:	1976      	adds	r6, r6, r5
     d26:	00b3      	lsls	r3, r6, #2
     d28:	18e4      	adds	r4, r4, r3
     d2a:	3427      	adds	r4, #39	; 0x27
     d2c:	2300      	movs	r3, #0
     d2e:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
     d30:	3501      	adds	r5, #1
     d32:	b2ed      	uxtb	r5, r5
     d34:	2d08      	cmp	r5, #8
     d36:	d9e4      	bls.n	d02 <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     d38:	2260      	movs	r2, #96	; 0x60
     d3a:	2100      	movs	r1, #0
     d3c:	4801      	ldr	r0, [pc, #4]	; (d44 <_usb_d_dev_reset_epts+0x48>)
     d3e:	4b03      	ldr	r3, [pc, #12]	; (d4c <_usb_d_dev_reset_epts+0x50>)
     d40:	4798      	blx	r3
}
     d42:	bd70      	pop	{r4, r5, r6, pc}
     d44:	20000104 	.word	0x20000104
     d48:	00000b49 	.word	0x00000b49
     d4c:	00002b3f 	.word	0x00002b3f

00000d50 <_usb_d_dev_in_next>:
{
     d50:	b5f0      	push	{r4, r5, r6, r7, lr}
     d52:	46c6      	mov	lr, r8
     d54:	b500      	push	{lr}
     d56:	0005      	movs	r5, r0
     d58:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
     d5a:	7c83      	ldrb	r3, [r0, #18]
     d5c:	240f      	movs	r4, #15
     d5e:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     d60:	0162      	lsls	r2, r4, #5
     d62:	4b56      	ldr	r3, [pc, #344]	; (ebc <_usb_d_dev_in_next+0x16c>)
     d64:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     d66:	2900      	cmp	r1, #0
     d68:	d058      	beq.n	e1c <_usb_d_dev_in_next+0xcc>
     d6a:	6959      	ldr	r1, [r3, #20]
     d6c:	0489      	lsls	r1, r1, #18
     d6e:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     d70:	8a2b      	ldrh	r3, [r5, #16]
     d72:	4a53      	ldr	r2, [pc, #332]	; (ec0 <_usb_d_dev_in_next+0x170>)
     d74:	4293      	cmp	r3, r2
     d76:	d053      	beq.n	e20 <_usb_d_dev_in_next+0xd0>
     d78:	3b01      	subs	r3, #1
     d7a:	b21b      	sxth	r3, r3
     d7c:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     d7e:	7cea      	ldrb	r2, [r5, #19]
     d80:	2707      	movs	r7, #7
     d82:	4017      	ands	r7, r2
	if (isr) {
     d84:	2e00      	cmp	r6, #0
     d86:	d007      	beq.n	d98 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     d88:	0022      	movs	r2, r4
     d8a:	3208      	adds	r2, #8
     d8c:	0152      	lsls	r2, r2, #5
     d8e:	484d      	ldr	r0, [pc, #308]	; (ec4 <_usb_d_dev_in_next+0x174>)
     d90:	4684      	mov	ip, r0
     d92:	4462      	add	r2, ip
     d94:	2002      	movs	r0, #2
     d96:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
     d98:	68aa      	ldr	r2, [r5, #8]
     d9a:	4694      	mov	ip, r2
     d9c:	4461      	add	r1, ip
     d9e:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
     da0:	686a      	ldr	r2, [r5, #4]
     da2:	4291      	cmp	r1, r2
     da4:	d24e      	bcs.n	e44 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
     da6:	b292      	uxth	r2, r2
     da8:	b28b      	uxth	r3, r1
     daa:	1ad2      	subs	r2, r2, r3
     dac:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
     dae:	7ceb      	ldrb	r3, [r5, #19]
     db0:	069b      	lsls	r3, r3, #26
     db2:	d537      	bpl.n	e24 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
     db4:	8a2b      	ldrh	r3, [r5, #16]
     db6:	4698      	mov	r8, r3
     db8:	429a      	cmp	r2, r3
     dba:	d800      	bhi.n	dbe <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
     dbc:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
     dbe:	682b      	ldr	r3, [r5, #0]
     dc0:	469c      	mov	ip, r3
     dc2:	4461      	add	r1, ip
     dc4:	4642      	mov	r2, r8
     dc6:	68e8      	ldr	r0, [r5, #12]
     dc8:	4b3f      	ldr	r3, [pc, #252]	; (ec8 <_usb_d_dev_in_next+0x178>)
     dca:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
     dcc:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
     dce:	0162      	lsls	r2, r4, #5
     dd0:	4b3a      	ldr	r3, [pc, #232]	; (ebc <_usb_d_dev_in_next+0x16c>)
     dd2:	189b      	adds	r3, r3, r2
     dd4:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     dd6:	0163      	lsls	r3, r4, #5
     dd8:	4a38      	ldr	r2, [pc, #224]	; (ebc <_usb_d_dev_in_next+0x16c>)
     dda:	18d2      	adds	r2, r2, r3
     ddc:	6951      	ldr	r1, [r2, #20]
     dde:	4643      	mov	r3, r8
     de0:	049b      	lsls	r3, r3, #18
     de2:	0c9b      	lsrs	r3, r3, #18
     de4:	0b89      	lsrs	r1, r1, #14
     de6:	0389      	lsls	r1, r1, #14
     de8:	430b      	orrs	r3, r1
     dea:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     dec:	6951      	ldr	r1, [r2, #20]
     dee:	4b37      	ldr	r3, [pc, #220]	; (ecc <_usb_d_dev_in_next+0x17c>)
     df0:	400b      	ands	r3, r1
     df2:	6153      	str	r3, [r2, #20]
	if (!isr) {
     df4:	2e00      	cmp	r6, #0
     df6:	d107      	bne.n	e08 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
     df8:	2f01      	cmp	r7, #1
     dfa:	d05d      	beq.n	eb8 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
     dfc:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     dfe:	0163      	lsls	r3, r4, #5
     e00:	4933      	ldr	r1, [pc, #204]	; (ed0 <_usb_d_dev_in_next+0x180>)
     e02:	468c      	mov	ip, r1
     e04:	4463      	add	r3, ip
     e06:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e08:	3408      	adds	r4, #8
     e0a:	0164      	lsls	r4, r4, #5
     e0c:	4b2d      	ldr	r3, [pc, #180]	; (ec4 <_usb_d_dev_in_next+0x174>)
     e0e:	469c      	mov	ip, r3
     e10:	4464      	add	r4, ip
     e12:	2380      	movs	r3, #128	; 0x80
     e14:	7163      	strb	r3, [r4, #5]
}
     e16:	bc04      	pop	{r2}
     e18:	4690      	mov	r8, r2
     e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     e1c:	2100      	movs	r1, #0
     e1e:	e7a7      	b.n	d70 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     e20:	b21b      	sxth	r3, r3
     e22:	e7ab      	b.n	d7c <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
     e24:	2380      	movs	r3, #128	; 0x80
     e26:	019b      	lsls	r3, r3, #6
     e28:	429a      	cmp	r2, r3
     e2a:	d807      	bhi.n	e3c <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
     e2c:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
     e2e:	682b      	ldr	r3, [r5, #0]
     e30:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
     e32:	0162      	lsls	r2, r4, #5
     e34:	4b21      	ldr	r3, [pc, #132]	; (ebc <_usb_d_dev_in_next+0x16c>)
     e36:	189b      	adds	r3, r3, r2
     e38:	6119      	str	r1, [r3, #16]
     e3a:	e7cc      	b.n	dd6 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
     e3c:	2380      	movs	r3, #128	; 0x80
     e3e:	019b      	lsls	r3, r3, #6
     e40:	4698      	mov	r8, r3
     e42:	e7f4      	b.n	e2e <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
     e44:	7cea      	ldrb	r2, [r5, #19]
     e46:	06d2      	lsls	r2, r2, #27
     e48:	d50f      	bpl.n	e6a <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
     e4a:	7ceb      	ldrb	r3, [r5, #19]
     e4c:	2210      	movs	r2, #16
     e4e:	4393      	bics	r3, r2
     e50:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     e52:	0162      	lsls	r2, r4, #5
     e54:	4b19      	ldr	r3, [pc, #100]	; (ebc <_usb_d_dev_in_next+0x16c>)
     e56:	189b      	adds	r3, r3, r2
     e58:	695a      	ldr	r2, [r3, #20]
     e5a:	0b92      	lsrs	r2, r2, #14
     e5c:	0391      	lsls	r1, r2, #14
     e5e:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     e60:	6959      	ldr	r1, [r3, #20]
     e62:	4a1a      	ldr	r2, [pc, #104]	; (ecc <_usb_d_dev_in_next+0x17c>)
     e64:	400a      	ands	r2, r1
     e66:	615a      	str	r2, [r3, #20]
     e68:	e7c4      	b.n	df4 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
     e6a:	2f01      	cmp	r7, #1
     e6c:	d00d      	beq.n	e8a <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e6e:	0164      	lsls	r4, r4, #5
     e70:	4a18      	ldr	r2, [pc, #96]	; (ed4 <_usb_d_dev_in_next+0x184>)
     e72:	4694      	mov	ip, r2
     e74:	4464      	add	r4, ip
     e76:	224a      	movs	r2, #74	; 0x4a
     e78:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
     e7a:	8a2a      	ldrh	r2, [r5, #16]
     e7c:	4293      	cmp	r3, r2
     e7e:	d00b      	beq.n	e98 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     e80:	2100      	movs	r1, #0
     e82:	0028      	movs	r0, r5
     e84:	4b14      	ldr	r3, [pc, #80]	; (ed8 <_usb_d_dev_in_next+0x188>)
     e86:	4798      	blx	r3
	return;
     e88:	e7c5      	b.n	e16 <_usb_d_dev_in_next+0xc6>
     e8a:	0164      	lsls	r4, r4, #5
     e8c:	4a11      	ldr	r2, [pc, #68]	; (ed4 <_usb_d_dev_in_next+0x184>)
     e8e:	4694      	mov	ip, r2
     e90:	4464      	add	r4, ip
     e92:	224b      	movs	r2, #75	; 0x4b
     e94:	7022      	strb	r2, [r4, #0]
     e96:	e7f0      	b.n	e7a <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
     e98:	7ceb      	ldrb	r3, [r5, #19]
     e9a:	2240      	movs	r2, #64	; 0x40
     e9c:	4393      	bics	r3, r2
     e9e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
     ea0:	4b06      	ldr	r3, [pc, #24]	; (ebc <_usb_d_dev_in_next+0x16c>)
     ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     ea4:	7ca8      	ldrb	r0, [r5, #18]
     ea6:	68a9      	ldr	r1, [r5, #8]
     ea8:	4798      	blx	r3
     eaa:	2800      	cmp	r0, #0
     eac:	d1b3      	bne.n	e16 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
     eae:	7ceb      	ldrb	r3, [r5, #19]
     eb0:	2240      	movs	r2, #64	; 0x40
     eb2:	4313      	orrs	r3, r2
     eb4:	74eb      	strb	r3, [r5, #19]
     eb6:	e7e3      	b.n	e80 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
     eb8:	224e      	movs	r2, #78	; 0x4e
     eba:	e7a0      	b.n	dfe <_usb_d_dev_in_next+0xae>
     ebc:	20000104 	.word	0x20000104
     ec0:	000003ff 	.word	0x000003ff
     ec4:	41005000 	.word	0x41005000
     ec8:	00002b2d 	.word	0x00002b2d
     ecc:	f0003fff 	.word	0xf0003fff
     ed0:	41005109 	.word	0x41005109
     ed4:	41005108 	.word	0x41005108
     ed8:	00000b49 	.word	0x00000b49

00000edc <_usb_d_dev_out_next>:
{
     edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ede:	46de      	mov	lr, fp
     ee0:	4657      	mov	r7, sl
     ee2:	464e      	mov	r6, r9
     ee4:	4645      	mov	r5, r8
     ee6:	b5e0      	push	{r5, r6, r7, lr}
     ee8:	0004      	movs	r4, r0
     eea:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     eec:	7c83      	ldrb	r3, [r0, #18]
     eee:	250f      	movs	r5, #15
     ef0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     ef2:	2900      	cmp	r1, #0
     ef4:	d059      	beq.n	faa <_usb_d_dev_out_next+0xce>
     ef6:	016a      	lsls	r2, r5, #5
     ef8:	4b71      	ldr	r3, [pc, #452]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
     efa:	189b      	adds	r3, r3, r2
     efc:	685b      	ldr	r3, [r3, #4]
     efe:	011b      	lsls	r3, r3, #4
     f00:	0c9b      	lsrs	r3, r3, #18
     f02:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     f04:	2f00      	cmp	r7, #0
     f06:	d053      	beq.n	fb0 <_usb_d_dev_out_next+0xd4>
     f08:	016a      	lsls	r2, r5, #5
     f0a:	4b6d      	ldr	r3, [pc, #436]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
     f0c:	189b      	adds	r3, r3, r2
     f0e:	685b      	ldr	r3, [r3, #4]
     f10:	049b      	lsls	r3, r3, #18
     f12:	0c9b      	lsrs	r3, r3, #18
     f14:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     f16:	8a26      	ldrh	r6, [r4, #16]
     f18:	4b6a      	ldr	r3, [pc, #424]	; (10c4 <_usb_d_dev_out_next+0x1e8>)
     f1a:	429e      	cmp	r6, r3
     f1c:	d001      	beq.n	f22 <_usb_d_dev_out_next+0x46>
     f1e:	3e01      	subs	r6, #1
     f20:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
     f22:	4643      	mov	r3, r8
     f24:	4033      	ands	r3, r6
     f26:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f28:	7ce3      	ldrb	r3, [r4, #19]
     f2a:	2207      	movs	r2, #7
     f2c:	401a      	ands	r2, r3
     f2e:	4691      	mov	r9, r2
	if (isr) {
     f30:	2f00      	cmp	r7, #0
     f32:	d007      	beq.n	f44 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f34:	002b      	movs	r3, r5
     f36:	3308      	adds	r3, #8
     f38:	015b      	lsls	r3, r3, #5
     f3a:	4a63      	ldr	r2, [pc, #396]	; (10c8 <_usb_d_dev_out_next+0x1ec>)
     f3c:	4694      	mov	ip, r2
     f3e:	4463      	add	r3, ip
     f40:	2201      	movs	r2, #1
     f42:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
     f44:	7ce3      	ldrb	r3, [r4, #19]
     f46:	069b      	lsls	r3, r3, #26
     f48:	d511      	bpl.n	f6e <_usb_d_dev_out_next+0x92>
     f4a:	6862      	ldr	r2, [r4, #4]
     f4c:	2a00      	cmp	r2, #0
     f4e:	d00e      	beq.n	f6e <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
     f50:	b292      	uxth	r2, r2
     f52:	8923      	ldrh	r3, [r4, #8]
     f54:	1ad2      	subs	r2, r2, r3
     f56:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
     f58:	6823      	ldr	r3, [r4, #0]
     f5a:	68a1      	ldr	r1, [r4, #8]
     f5c:	468c      	mov	ip, r1
     f5e:	4463      	add	r3, ip
     f60:	0018      	movs	r0, r3
     f62:	68e1      	ldr	r1, [r4, #12]
     f64:	4593      	cmp	fp, r2
     f66:	d200      	bcs.n	f6a <_usb_d_dev_out_next+0x8e>
     f68:	465a      	mov	r2, fp
     f6a:	4b58      	ldr	r3, [pc, #352]	; (10cc <_usb_d_dev_out_next+0x1f0>)
     f6c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     f6e:	6863      	ldr	r3, [r4, #4]
     f70:	2b00      	cmp	r3, #0
     f72:	d120      	bne.n	fb6 <_usb_d_dev_out_next+0xda>
     f74:	7ce2      	ldrb	r2, [r4, #19]
     f76:	06d2      	lsls	r2, r2, #27
     f78:	d51d      	bpl.n	fb6 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
     f7a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
     f7c:	2210      	movs	r2, #16
     f7e:	4393      	bics	r3, r2
     f80:	2220      	movs	r2, #32
     f82:	4313      	orrs	r3, r2
     f84:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
     f86:	494e      	ldr	r1, [pc, #312]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
     f88:	016a      	lsls	r2, r5, #5
     f8a:	68e3      	ldr	r3, [r4, #12]
     f8c:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
     f8e:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     f90:	188a      	adds	r2, r1, r2
     f92:	6851      	ldr	r1, [r2, #4]
     f94:	049b      	lsls	r3, r3, #18
     f96:	091b      	lsrs	r3, r3, #4
     f98:	484d      	ldr	r0, [pc, #308]	; (10d0 <_usb_d_dev_out_next+0x1f4>)
     f9a:	4001      	ands	r1, r0
     f9c:	430b      	orrs	r3, r1
     f9e:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     fa0:	6853      	ldr	r3, [r2, #4]
     fa2:	0b9b      	lsrs	r3, r3, #14
     fa4:	0399      	lsls	r1, r3, #14
     fa6:	6051      	str	r1, [r2, #4]
     fa8:	e047      	b.n	103a <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     faa:	2300      	movs	r3, #0
     fac:	469a      	mov	sl, r3
     fae:	e7a9      	b.n	f04 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     fb0:	2300      	movs	r3, #0
     fb2:	4698      	mov	r8, r3
     fb4:	e7af      	b.n	f16 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
     fb6:	2f00      	cmp	r7, #0
     fb8:	d01d      	beq.n	ff6 <_usb_d_dev_out_next+0x11a>
     fba:	8a22      	ldrh	r2, [r4, #16]
     fbc:	4593      	cmp	fp, r2
     fbe:	d21a      	bcs.n	ff6 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
     fc0:	7ce3      	ldrb	r3, [r4, #19]
     fc2:	2210      	movs	r2, #16
     fc4:	4393      	bics	r3, r2
     fc6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
     fc8:	68a3      	ldr	r3, [r4, #8]
     fca:	4443      	add	r3, r8
     fcc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
     fce:	464b      	mov	r3, r9
     fd0:	2b01      	cmp	r3, #1
     fd2:	d066      	beq.n	10a2 <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fd4:	016b      	lsls	r3, r5, #5
     fd6:	4a3f      	ldr	r2, [pc, #252]	; (10d4 <_usb_d_dev_out_next+0x1f8>)
     fd8:	4694      	mov	ip, r2
     fda:	4463      	add	r3, ip
     fdc:	2225      	movs	r2, #37	; 0x25
     fde:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
     fe0:	2d00      	cmp	r5, #0
     fe2:	d103      	bne.n	fec <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
     fe4:	016d      	lsls	r5, r5, #5
     fe6:	4b36      	ldr	r3, [pc, #216]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
     fe8:	68e2      	ldr	r2, [r4, #12]
     fea:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     fec:	2100      	movs	r1, #0
     fee:	0020      	movs	r0, r4
     ff0:	4b39      	ldr	r3, [pc, #228]	; (10d8 <_usb_d_dev_out_next+0x1fc>)
     ff2:	4798      	blx	r3
	return;
     ff4:	e033      	b.n	105e <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
     ff6:	68a2      	ldr	r2, [r4, #8]
     ff8:	4452      	add	r2, sl
     ffa:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
     ffc:	4293      	cmp	r3, r2
     ffe:	d9e6      	bls.n	fce <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    1000:	b29b      	uxth	r3, r3
    1002:	b291      	uxth	r1, r2
    1004:	1a5b      	subs	r3, r3, r1
    1006:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1008:	7ce1      	ldrb	r1, [r4, #19]
    100a:	0689      	lsls	r1, r1, #26
    100c:	d52d      	bpl.n	106a <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    100e:	8a21      	ldrh	r1, [r4, #16]
    1010:	428b      	cmp	r3, r1
    1012:	d800      	bhi.n	1016 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    1014:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1016:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1018:	016b      	lsls	r3, r5, #5
    101a:	4a29      	ldr	r2, [pc, #164]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
    101c:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    101e:	016b      	lsls	r3, r5, #5
    1020:	4827      	ldr	r0, [pc, #156]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
    1022:	18c0      	adds	r0, r0, r3
    1024:	6842      	ldr	r2, [r0, #4]
    1026:	048b      	lsls	r3, r1, #18
    1028:	091b      	lsrs	r3, r3, #4
    102a:	4929      	ldr	r1, [pc, #164]	; (10d0 <_usb_d_dev_out_next+0x1f4>)
    102c:	400a      	ands	r2, r1
    102e:	4313      	orrs	r3, r2
    1030:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1032:	6843      	ldr	r3, [r0, #4]
    1034:	0b9b      	lsrs	r3, r3, #14
    1036:	039a      	lsls	r2, r3, #14
    1038:	6042      	str	r2, [r0, #4]
	if (!isr) {
    103a:	2f00      	cmp	r7, #0
    103c:	d108      	bne.n	1050 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    103e:	464b      	mov	r3, r9
    1040:	2b01      	cmp	r3, #1
    1042:	d035      	beq.n	10b0 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    1044:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1046:	016b      	lsls	r3, r5, #5
    1048:	4924      	ldr	r1, [pc, #144]	; (10dc <_usb_d_dev_out_next+0x200>)
    104a:	468c      	mov	ip, r1
    104c:	4463      	add	r3, ip
    104e:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1050:	3508      	adds	r5, #8
    1052:	016d      	lsls	r5, r5, #5
    1054:	4b1c      	ldr	r3, [pc, #112]	; (10c8 <_usb_d_dev_out_next+0x1ec>)
    1056:	469c      	mov	ip, r3
    1058:	4465      	add	r5, ip
    105a:	2340      	movs	r3, #64	; 0x40
    105c:	712b      	strb	r3, [r5, #4]
}
    105e:	bc3c      	pop	{r2, r3, r4, r5}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	46ab      	mov	fp, r5
    1068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    106a:	8a21      	ldrh	r1, [r4, #16]
    106c:	428b      	cmp	r3, r1
    106e:	d90b      	bls.n	1088 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1070:	2180      	movs	r1, #128	; 0x80
    1072:	0189      	lsls	r1, r1, #6
    1074:	428b      	cmp	r3, r1
    1076:	d80f      	bhi.n	1098 <_usb_d_dev_out_next+0x1bc>
    1078:	43b3      	bics	r3, r6
    107a:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    107c:	6823      	ldr	r3, [r4, #0]
    107e:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    1080:	016b      	lsls	r3, r5, #5
    1082:	480f      	ldr	r0, [pc, #60]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
    1084:	501a      	str	r2, [r3, r0]
    1086:	e7ca      	b.n	101e <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    1088:	428b      	cmp	r3, r1
    108a:	d208      	bcs.n	109e <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    108c:	7ce1      	ldrb	r1, [r4, #19]
    108e:	2020      	movs	r0, #32
    1090:	4301      	orrs	r1, r0
    1092:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    1094:	0019      	movs	r1, r3
    1096:	e7f1      	b.n	107c <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    1098:	2180      	movs	r1, #128	; 0x80
    109a:	0189      	lsls	r1, r1, #6
    109c:	e7ee      	b.n	107c <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    109e:	0019      	movs	r1, r3
    10a0:	e7ec      	b.n	107c <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10a2:	016b      	lsls	r3, r5, #5
    10a4:	4a0b      	ldr	r2, [pc, #44]	; (10d4 <_usb_d_dev_out_next+0x1f8>)
    10a6:	4694      	mov	ip, r2
    10a8:	4463      	add	r3, ip
    10aa:	222d      	movs	r2, #45	; 0x2d
    10ac:	701a      	strb	r2, [r3, #0]
    10ae:	e797      	b.n	fe0 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    10b0:	016a      	lsls	r2, r5, #5
    10b2:	4b03      	ldr	r3, [pc, #12]	; (10c0 <_usb_d_dev_out_next+0x1e4>)
    10b4:	189b      	adds	r3, r3, r2
    10b6:	2200      	movs	r2, #0
    10b8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    10ba:	322d      	adds	r2, #45	; 0x2d
    10bc:	e7c3      	b.n	1046 <_usb_d_dev_out_next+0x16a>
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	20000104 	.word	0x20000104
    10c4:	000003ff 	.word	0x000003ff
    10c8:	41005000 	.word	0x41005000
    10cc:	00002b2d 	.word	0x00002b2d
    10d0:	f0003fff 	.word	0xf0003fff
    10d4:	41005108 	.word	0x41005108
    10d8:	00000b49 	.word	0x00000b49
    10dc:	41005109 	.word	0x41005109

000010e0 <_usb_d_dev_handler>:
{
    10e0:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    10e2:	4b89      	ldr	r3, [pc, #548]	; (1308 <_usb_d_dev_handler+0x228>)
    10e4:	8c1d      	ldrh	r5, [r3, #32]
    10e6:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    10e8:	2d00      	cmp	r5, #0
    10ea:	d001      	beq.n	10f0 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    10ec:	2400      	movs	r4, #0
    10ee:	e0bf      	b.n	1270 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    10f0:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    10f2:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    10f4:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    10f6:	075a      	lsls	r2, r3, #29
    10f8:	d40d      	bmi.n	1116 <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    10fa:	059a      	lsls	r2, r3, #22
    10fc:	d415      	bmi.n	112a <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    10fe:	061a      	lsls	r2, r3, #24
    1100:	d437      	bmi.n	1172 <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1102:	2270      	movs	r2, #112	; 0x70
    1104:	421a      	tst	r2, r3
    1106:	d13e      	bne.n	1186 <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1108:	071a      	lsls	r2, r3, #28
    110a:	d457      	bmi.n	11bc <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    110c:	07db      	lsls	r3, r3, #31
    110e:	d500      	bpl.n	1112 <_usb_d_dev_handler+0x32>
    1110:	e068      	b.n	11e4 <_usb_d_dev_handler+0x104>
		rc = false;
    1112:	2300      	movs	r3, #0
    1114:	e006      	b.n	1124 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1116:	2204      	movs	r2, #4
    1118:	4b7b      	ldr	r3, [pc, #492]	; (1308 <_usb_d_dev_handler+0x228>)
    111a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    111c:	4b7b      	ldr	r3, [pc, #492]	; (130c <_usb_d_dev_handler+0x22c>)
    111e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1120:	4798      	blx	r3
		return true;
    1122:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    1124:	2b00      	cmp	r3, #0
    1126:	d0e1      	beq.n	10ec <_usb_d_dev_handler+0xc>
}
    1128:	bd70      	pop	{r4, r5, r6, pc}
    112a:	4b77      	ldr	r3, [pc, #476]	; (1308 <_usb_d_dev_handler+0x228>)
    112c:	4a78      	ldr	r2, [pc, #480]	; (1310 <_usb_d_dev_handler+0x230>)
    112e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1130:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1132:	3a92      	subs	r2, #146	; 0x92
    1134:	3aff      	subs	r2, #255	; 0xff
    1136:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    1138:	2300      	movs	r3, #0
    113a:	2b01      	cmp	r3, #1
    113c:	d812      	bhi.n	1164 <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    113e:	0158      	lsls	r0, r3, #5
    1140:	4a72      	ldr	r2, [pc, #456]	; (130c <_usb_d_dev_handler+0x22c>)
    1142:	1812      	adds	r2, r2, r0
    1144:	8912      	ldrh	r2, [r2, #8]
    1146:	0712      	lsls	r2, r2, #28
    1148:	0f12      	lsrs	r2, r2, #28
    114a:	2a03      	cmp	r2, #3
    114c:	d002      	beq.n	1154 <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    114e:	3301      	adds	r3, #1
    1150:	b2db      	uxtb	r3, r3
    1152:	e7f2      	b.n	113a <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1154:	4b6d      	ldr	r3, [pc, #436]	; (130c <_usb_d_dev_handler+0x22c>)
    1156:	181b      	adds	r3, r3, r0
    1158:	8919      	ldrh	r1, [r3, #8]
    115a:	0449      	lsls	r1, r1, #17
    115c:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    115e:	2200      	movs	r2, #0
    1160:	811a      	strh	r2, [r3, #8]
    1162:	e000      	b.n	1166 <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    1164:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1166:	4b69      	ldr	r3, [pc, #420]	; (130c <_usb_d_dev_handler+0x22c>)
    1168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    116a:	2003      	movs	r0, #3
    116c:	4798      	blx	r3
	bool     rc    = true;
    116e:	2301      	movs	r3, #1
    1170:	e7d8      	b.n	1124 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	4b64      	ldr	r3, [pc, #400]	; (1308 <_usb_d_dev_handler+0x228>)
    1176:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1178:	4b64      	ldr	r3, [pc, #400]	; (130c <_usb_d_dev_handler+0x22c>)
    117a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    117c:	2100      	movs	r1, #0
    117e:	2005      	movs	r0, #5
    1180:	4798      	blx	r3
	bool     rc    = true;
    1182:	2301      	movs	r3, #1
    1184:	e7ce      	b.n	1124 <_usb_d_dev_handler+0x44>
    1186:	4b60      	ldr	r3, [pc, #384]	; (1308 <_usb_d_dev_handler+0x228>)
    1188:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    118a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    118c:	4a60      	ldr	r2, [pc, #384]	; (1310 <_usb_d_dev_handler+0x230>)
    118e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1190:	4b60      	ldr	r3, [pc, #384]	; (1314 <_usb_d_dev_handler+0x234>)
    1192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1194:	069b      	lsls	r3, r3, #26
    1196:	d40c      	bmi.n	11b2 <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1198:	4b5e      	ldr	r3, [pc, #376]	; (1314 <_usb_d_dev_handler+0x234>)
    119a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    119c:	23d0      	movs	r3, #208	; 0xd0
    119e:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    11a0:	2bd0      	cmp	r3, #208	; 0xd0
    11a2:	d1f9      	bne.n	1198 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    11a4:	4b59      	ldr	r3, [pc, #356]	; (130c <_usb_d_dev_handler+0x22c>)
    11a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    11a8:	2100      	movs	r1, #0
    11aa:	2002      	movs	r0, #2
    11ac:	4798      	blx	r3
	bool     rc    = true;
    11ae:	2301      	movs	r3, #1
    11b0:	e7b8      	b.n	1124 <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    11b2:	4b58      	ldr	r3, [pc, #352]	; (1314 <_usb_d_dev_handler+0x234>)
    11b4:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    11b6:	06db      	lsls	r3, r3, #27
    11b8:	d5fb      	bpl.n	11b2 <_usb_d_dev_handler+0xd2>
    11ba:	e7f3      	b.n	11a4 <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    11bc:	4b52      	ldr	r3, [pc, #328]	; (1308 <_usb_d_dev_handler+0x228>)
    11be:	2100      	movs	r1, #0
    11c0:	2280      	movs	r2, #128	; 0x80
    11c2:	0052      	lsls	r2, r2, #1
    11c4:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    11c6:	3af8      	subs	r2, #248	; 0xf8
    11c8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    11ca:	3268      	adds	r2, #104	; 0x68
    11cc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    11ce:	4a50      	ldr	r2, [pc, #320]	; (1310 <_usb_d_dev_handler+0x230>)
    11d0:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    11d2:	4b51      	ldr	r3, [pc, #324]	; (1318 <_usb_d_dev_handler+0x238>)
    11d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    11d6:	4b4d      	ldr	r3, [pc, #308]	; (130c <_usb_d_dev_handler+0x22c>)
    11d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    11da:	2100      	movs	r1, #0
    11dc:	2001      	movs	r0, #1
    11de:	4798      	blx	r3
	bool     rc    = true;
    11e0:	2301      	movs	r3, #1
    11e2:	e79f      	b.n	1124 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    11e4:	4b48      	ldr	r3, [pc, #288]	; (1308 <_usb_d_dev_handler+0x228>)
    11e6:	4a4a      	ldr	r2, [pc, #296]	; (1310 <_usb_d_dev_handler+0x230>)
    11e8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    11ea:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    11ec:	3a92      	subs	r2, #146	; 0x92
    11ee:	3aff      	subs	r2, #255	; 0xff
    11f0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    11f2:	4b46      	ldr	r3, [pc, #280]	; (130c <_usb_d_dev_handler+0x22c>)
    11f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    11f6:	2100      	movs	r1, #0
    11f8:	2004      	movs	r0, #4
    11fa:	4798      	blx	r3
	bool     rc    = true;
    11fc:	2301      	movs	r3, #1
    11fe:	e791      	b.n	1124 <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1200:	06da      	lsls	r2, r3, #27
    1202:	d407      	bmi.n	1214 <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1204:	065a      	lsls	r2, r3, #25
    1206:	d408      	bmi.n	121a <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1208:	069b      	lsls	r3, r3, #26
    120a:	d52f      	bpl.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    120c:	2100      	movs	r1, #0
    120e:	4b43      	ldr	r3, [pc, #268]	; (131c <_usb_d_dev_handler+0x23c>)
    1210:	4798      	blx	r3
    1212:	e02b      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    1214:	4b42      	ldr	r3, [pc, #264]	; (1320 <_usb_d_dev_handler+0x240>)
    1216:	4798      	blx	r3
    1218:	e028      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    121a:	2101      	movs	r1, #1
    121c:	4b3f      	ldr	r3, [pc, #252]	; (131c <_usb_d_dev_handler+0x23c>)
    121e:	4798      	blx	r3
    1220:	e024      	b.n	126c <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1222:	065a      	lsls	r2, r3, #25
    1224:	d40f      	bmi.n	1246 <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1226:	071a      	lsls	r2, r3, #28
    1228:	d411      	bmi.n	124e <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    122a:	079a      	lsls	r2, r3, #30
    122c:	d413      	bmi.n	1256 <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    122e:	7cc1      	ldrb	r1, [r0, #19]
    1230:	2207      	movs	r2, #7
    1232:	400a      	ands	r2, r1
    1234:	2a01      	cmp	r2, #1
    1236:	d119      	bne.n	126c <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1238:	075a      	lsls	r2, r3, #29
    123a:	d410      	bmi.n	125e <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    123c:	06db      	lsls	r3, r3, #27
    123e:	d515      	bpl.n	126c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    1240:	4b37      	ldr	r3, [pc, #220]	; (1320 <_usb_d_dev_handler+0x240>)
    1242:	4798      	blx	r3
    1244:	e012      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    1246:	2101      	movs	r1, #1
    1248:	4b34      	ldr	r3, [pc, #208]	; (131c <_usb_d_dev_handler+0x23c>)
    124a:	4798      	blx	r3
    124c:	e00e      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    124e:	2101      	movs	r1, #1
    1250:	4b34      	ldr	r3, [pc, #208]	; (1324 <_usb_d_dev_handler+0x244>)
    1252:	4798      	blx	r3
    1254:	e00a      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    1256:	2101      	movs	r1, #1
    1258:	4b33      	ldr	r3, [pc, #204]	; (1328 <_usb_d_dev_handler+0x248>)
    125a:	4798      	blx	r3
    125c:	e006      	b.n	126c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    125e:	2100      	movs	r1, #0
    1260:	4b30      	ldr	r3, [pc, #192]	; (1324 <_usb_d_dev_handler+0x244>)
    1262:	4798      	blx	r3
    1264:	e002      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    1266:	2100      	movs	r1, #0
    1268:	4b2c      	ldr	r3, [pc, #176]	; (131c <_usb_d_dev_handler+0x23c>)
    126a:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    126c:	3401      	adds	r4, #1
    126e:	b2e4      	uxtb	r4, r4
    1270:	2c08      	cmp	r4, #8
    1272:	d900      	bls.n	1276 <_usb_d_dev_handler+0x196>
    1274:	e758      	b.n	1128 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    1276:	4b25      	ldr	r3, [pc, #148]	; (130c <_usb_d_dev_handler+0x22c>)
    1278:	3360      	adds	r3, #96	; 0x60
    127a:	00a2      	lsls	r2, r4, #2
    127c:	1911      	adds	r1, r2, r4
    127e:	0088      	lsls	r0, r1, #2
    1280:	0001      	movs	r1, r0
    1282:	3010      	adds	r0, #16
    1284:	1818      	adds	r0, r3, r0
    1286:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    1288:	185b      	adds	r3, r3, r1
    128a:	3326      	adds	r3, #38	; 0x26
    128c:	781b      	ldrb	r3, [r3, #0]
    128e:	2bff      	cmp	r3, #255	; 0xff
    1290:	d0ec      	beq.n	126c <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1292:	7c82      	ldrb	r2, [r0, #18]
    1294:	230f      	movs	r3, #15
    1296:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    1298:	2201      	movs	r2, #1
    129a:	409a      	lsls	r2, r3
    129c:	422a      	tst	r2, r5
    129e:	d0e5      	beq.n	126c <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    12a0:	001a      	movs	r2, r3
    12a2:	3208      	adds	r2, #8
    12a4:	0152      	lsls	r2, r2, #5
    12a6:	4918      	ldr	r1, [pc, #96]	; (1308 <_usb_d_dev_handler+0x228>)
    12a8:	468c      	mov	ip, r1
    12aa:	4462      	add	r2, ip
    12ac:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    12ae:	015b      	lsls	r3, r3, #5
    12b0:	491e      	ldr	r1, [pc, #120]	; (132c <_usb_d_dev_handler+0x24c>)
    12b2:	468c      	mov	ip, r1
    12b4:	4463      	add	r3, ip
    12b6:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    12b8:	4013      	ands	r3, r2
	if (flags) {
    12ba:	d0d7      	beq.n	126c <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    12bc:	7cc2      	ldrb	r2, [r0, #19]
    12be:	2147      	movs	r1, #71	; 0x47
    12c0:	4011      	ands	r1, r2
    12c2:	2901      	cmp	r1, #1
    12c4:	d09c      	beq.n	1200 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    12c6:	b252      	sxtb	r2, r2
    12c8:	2a00      	cmp	r2, #0
    12ca:	dbaa      	blt.n	1222 <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    12cc:	069a      	lsls	r2, r3, #26
    12ce:	d4ca      	bmi.n	1266 <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    12d0:	075a      	lsls	r2, r3, #29
    12d2:	d40d      	bmi.n	12f0 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    12d4:	07da      	lsls	r2, r3, #31
    12d6:	d40f      	bmi.n	12f8 <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    12d8:	7cc1      	ldrb	r1, [r0, #19]
    12da:	2207      	movs	r2, #7
    12dc:	400a      	ands	r2, r1
    12de:	2a01      	cmp	r2, #1
    12e0:	d1c4      	bne.n	126c <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    12e2:	071a      	lsls	r2, r3, #28
    12e4:	d40c      	bmi.n	1300 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    12e6:	06db      	lsls	r3, r3, #27
    12e8:	d5c0      	bpl.n	126c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    12ea:	4b0d      	ldr	r3, [pc, #52]	; (1320 <_usb_d_dev_handler+0x240>)
    12ec:	4798      	blx	r3
    12ee:	e7bd      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    12f0:	2100      	movs	r1, #0
    12f2:	4b0c      	ldr	r3, [pc, #48]	; (1324 <_usb_d_dev_handler+0x244>)
    12f4:	4798      	blx	r3
    12f6:	e7b9      	b.n	126c <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    12f8:	2101      	movs	r1, #1
    12fa:	4b0d      	ldr	r3, [pc, #52]	; (1330 <_usb_d_dev_handler+0x250>)
    12fc:	4798      	blx	r3
    12fe:	e7b5      	b.n	126c <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    1300:	2101      	movs	r1, #1
    1302:	4b08      	ldr	r3, [pc, #32]	; (1324 <_usb_d_dev_handler+0x244>)
    1304:	4798      	blx	r3
    1306:	e7b1      	b.n	126c <_usb_d_dev_handler+0x18c>
    1308:	41005000 	.word	0x41005000
    130c:	20000104 	.word	0x20000104
    1310:	00000201 	.word	0x00000201
    1314:	40000800 	.word	0x40000800
    1318:	00000cfd 	.word	0x00000cfd
    131c:	00000b19 	.word	0x00000b19
    1320:	00000a8d 	.word	0x00000a8d
    1324:	00000bed 	.word	0x00000bed
    1328:	00000d51 	.word	0x00000d51
    132c:	41005109 	.word	0x41005109
    1330:	00000edd 	.word	0x00000edd

00001334 <_usb_d_dev_init>:
{
    1334:	b500      	push	{lr}
    1336:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    1338:	2200      	movs	r2, #0
    133a:	ab01      	add	r3, sp, #4
    133c:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    133e:	4b21      	ldr	r3, [pc, #132]	; (13c4 <_usb_d_dev_init+0x90>)
    1340:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1342:	07db      	lsls	r3, r3, #31
    1344:	d41b      	bmi.n	137e <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1346:	4b1f      	ldr	r3, [pc, #124]	; (13c4 <_usb_d_dev_init+0x90>)
    1348:	789b      	ldrb	r3, [r3, #2]
    134a:	079b      	lsls	r3, r3, #30
    134c:	d1fb      	bne.n	1346 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    134e:	4b1d      	ldr	r3, [pc, #116]	; (13c4 <_usb_d_dev_init+0x90>)
    1350:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1352:	079b      	lsls	r3, r3, #30
    1354:	d50c      	bpl.n	1370 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1356:	4a1b      	ldr	r2, [pc, #108]	; (13c4 <_usb_d_dev_init+0x90>)
    1358:	7813      	ldrb	r3, [r2, #0]
    135a:	2102      	movs	r1, #2
    135c:	438b      	bics	r3, r1
    135e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1360:	4b18      	ldr	r3, [pc, #96]	; (13c4 <_usb_d_dev_init+0x90>)
    1362:	789b      	ldrb	r3, [r3, #2]
    1364:	079b      	lsls	r3, r3, #30
    1366:	d1fb      	bne.n	1360 <_usb_d_dev_init+0x2c>
    1368:	4b16      	ldr	r3, [pc, #88]	; (13c4 <_usb_d_dev_init+0x90>)
    136a:	789b      	ldrb	r3, [r3, #2]
    136c:	079b      	lsls	r3, r3, #30
    136e:	d4fb      	bmi.n	1368 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1370:	2201      	movs	r2, #1
    1372:	4b14      	ldr	r3, [pc, #80]	; (13c4 <_usb_d_dev_init+0x90>)
    1374:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1376:	4b13      	ldr	r3, [pc, #76]	; (13c4 <_usb_d_dev_init+0x90>)
    1378:	789b      	ldrb	r3, [r3, #2]
    137a:	079b      	lsls	r3, r3, #30
    137c:	d1fb      	bne.n	1376 <_usb_d_dev_init+0x42>
    137e:	4b11      	ldr	r3, [pc, #68]	; (13c4 <_usb_d_dev_init+0x90>)
    1380:	789b      	ldrb	r3, [r3, #2]
    1382:	07db      	lsls	r3, r3, #31
    1384:	d4fb      	bmi.n	137e <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1386:	4b10      	ldr	r3, [pc, #64]	; (13c8 <_usb_d_dev_init+0x94>)
    1388:	4a10      	ldr	r2, [pc, #64]	; (13cc <_usb_d_dev_init+0x98>)
    138a:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    138c:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    138e:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1390:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1392:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1394:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <_usb_d_dev_init+0x9c>)
    1396:	4798      	blx	r3
	_usb_load_calib();
    1398:	4b0e      	ldr	r3, [pc, #56]	; (13d4 <_usb_d_dev_init+0xa0>)
    139a:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    139c:	2204      	movs	r2, #4
    139e:	4b09      	ldr	r3, [pc, #36]	; (13c4 <_usb_d_dev_init+0x90>)
    13a0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    13a2:	4b08      	ldr	r3, [pc, #32]	; (13c4 <_usb_d_dev_init+0x90>)
    13a4:	789b      	ldrb	r3, [r3, #2]
    13a6:	079b      	lsls	r3, r3, #30
    13a8:	d1fb      	bne.n	13a2 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    13aa:	4a06      	ldr	r2, [pc, #24]	; (13c4 <_usb_d_dev_init+0x90>)
    13ac:	4b06      	ldr	r3, [pc, #24]	; (13c8 <_usb_d_dev_init+0x94>)
    13ae:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    13b0:	ab01      	add	r3, sp, #4
    13b2:	785b      	ldrb	r3, [r3, #1]
    13b4:	2101      	movs	r1, #1
    13b6:	430b      	orrs	r3, r1
    13b8:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    13ba:	8113      	strh	r3, [r2, #8]
}
    13bc:	2000      	movs	r0, #0
    13be:	b003      	add	sp, #12
    13c0:	bd00      	pop	{pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	41005000 	.word	0x41005000
    13c8:	20000104 	.word	0x20000104
    13cc:	00000a35 	.word	0x00000a35
    13d0:	00000cfd 	.word	0x00000cfd
    13d4:	00000a39 	.word	0x00000a39

000013d8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    13d8:	4b10      	ldr	r3, [pc, #64]	; (141c <_usb_d_dev_enable+0x44>)
    13da:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    13dc:	079b      	lsls	r3, r3, #30
    13de:	d119      	bne.n	1414 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    13e0:	4b0e      	ldr	r3, [pc, #56]	; (141c <_usb_d_dev_enable+0x44>)
    13e2:	789b      	ldrb	r3, [r3, #2]
    13e4:	079b      	lsls	r3, r3, #30
    13e6:	d1fb      	bne.n	13e0 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    13e8:	4b0c      	ldr	r3, [pc, #48]	; (141c <_usb_d_dev_enable+0x44>)
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    13ee:	079a      	lsls	r2, r3, #30
    13f0:	d408      	bmi.n	1404 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    13f2:	2202      	movs	r2, #2
    13f4:	4313      	orrs	r3, r2
    13f6:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    13f8:	4a08      	ldr	r2, [pc, #32]	; (141c <_usb_d_dev_enable+0x44>)
    13fa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    13fc:	4b07      	ldr	r3, [pc, #28]	; (141c <_usb_d_dev_enable+0x44>)
    13fe:	789b      	ldrb	r3, [r3, #2]
    1400:	079b      	lsls	r3, r3, #30
    1402:	d1fb      	bne.n	13fc <_usb_d_dev_enable+0x24>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1404:	2280      	movs	r2, #128	; 0x80
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <_usb_d_dev_enable+0x48>)
    1408:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    140a:	4a06      	ldr	r2, [pc, #24]	; (1424 <_usb_d_dev_enable+0x4c>)
    140c:	4b03      	ldr	r3, [pc, #12]	; (141c <_usb_d_dev_enable+0x44>)
    140e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1410:	2000      	movs	r0, #0
}
    1412:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1414:	2011      	movs	r0, #17
    1416:	4240      	negs	r0, r0
    1418:	e7fb      	b.n	1412 <_usb_d_dev_enable+0x3a>
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	41005000 	.word	0x41005000
    1420:	e000e100 	.word	0xe000e100
    1424:	0000028d 	.word	0x0000028d

00001428 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1428:	4a02      	ldr	r2, [pc, #8]	; (1434 <_usb_d_dev_attach+0xc>)
    142a:	8913      	ldrh	r3, [r2, #8]
    142c:	2101      	movs	r1, #1
    142e:	438b      	bics	r3, r1
    1430:	8113      	strh	r3, [r2, #8]
}
    1432:	4770      	bx	lr
    1434:	41005000 	.word	0x41005000

00001438 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1438:	2380      	movs	r3, #128	; 0x80
    143a:	425b      	negs	r3, r3
    143c:	4318      	orrs	r0, r3
    143e:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1440:	4b01      	ldr	r3, [pc, #4]	; (1448 <_usb_d_dev_set_address+0x10>)
    1442:	7298      	strb	r0, [r3, #10]
}
    1444:	4770      	bx	lr
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	41005000 	.word	0x41005000

0000144c <_usb_d_dev_ep_init>:
{
    144c:	b5f0      	push	{r4, r5, r6, r7, lr}
    144e:	46c6      	mov	lr, r8
    1450:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1452:	230f      	movs	r3, #15
    1454:	4003      	ands	r3, r0
    1456:	b244      	sxtb	r4, r0
    1458:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    145a:	2b00      	cmp	r3, #0
    145c:	d005      	beq.n	146a <_usb_d_dev_ep_init+0x1e>
    145e:	2c00      	cmp	r4, #0
    1460:	db01      	blt.n	1466 <_usb_d_dev_ep_init+0x1a>
    1462:	001c      	movs	r4, r3
    1464:	e002      	b.n	146c <_usb_d_dev_ep_init+0x20>
    1466:	1c9c      	adds	r4, r3, #2
    1468:	e000      	b.n	146c <_usb_d_dev_ep_init+0x20>
    146a:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    146c:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    146e:	2503      	movs	r5, #3
    1470:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1472:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    1474:	2b02      	cmp	r3, #2
    1476:	d900      	bls.n	147a <_usb_d_dev_ep_init+0x2e>
    1478:	e07a      	b.n	1570 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    147a:	00a5      	lsls	r5, r4, #2
    147c:	192d      	adds	r5, r5, r4
    147e:	00ac      	lsls	r4, r5, #2
    1480:	46a0      	mov	r8, r4
    1482:	4c43      	ldr	r4, [pc, #268]	; (1590 <_usb_d_dev_ep_init+0x144>)
    1484:	3460      	adds	r4, #96	; 0x60
    1486:	4444      	add	r4, r8
    1488:	3426      	adds	r4, #38	; 0x26
    148a:	7824      	ldrb	r4, [r4, #0]
    148c:	2cff      	cmp	r4, #255	; 0xff
    148e:	d000      	beq.n	1492 <_usb_d_dev_ep_init+0x46>
    1490:	e071      	b.n	1576 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1492:	2900      	cmp	r1, #0
    1494:	d118      	bne.n	14c8 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1496:	2b00      	cmp	r3, #0
    1498:	d004      	beq.n	14a4 <_usb_d_dev_ep_init+0x58>
    149a:	4664      	mov	r4, ip
    149c:	2c00      	cmp	r4, #0
    149e:	db01      	blt.n	14a4 <_usb_d_dev_ep_init+0x58>
    14a0:	3302      	adds	r3, #2
    14a2:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    14a4:	009c      	lsls	r4, r3, #2
    14a6:	18e3      	adds	r3, r4, r3
    14a8:	009d      	lsls	r5, r3, #2
    14aa:	4b39      	ldr	r3, [pc, #228]	; (1590 <_usb_d_dev_ep_init+0x144>)
    14ac:	3360      	adds	r3, #96	; 0x60
    14ae:	195b      	adds	r3, r3, r5
    14b0:	3326      	adds	r3, #38	; 0x26
    14b2:	781b      	ldrb	r3, [r3, #0]
    14b4:	2bff      	cmp	r3, #255	; 0xff
    14b6:	d161      	bne.n	157c <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    14b8:	007b      	lsls	r3, r7, #1
    14ba:	19db      	adds	r3, r3, r7
    14bc:	009c      	lsls	r4, r3, #2
    14be:	4b35      	ldr	r3, [pc, #212]	; (1594 <_usb_d_dev_ep_init+0x148>)
    14c0:	191b      	adds	r3, r3, r4
    14c2:	689b      	ldr	r3, [r3, #8]
    14c4:	2b00      	cmp	r3, #0
    14c6:	d05c      	beq.n	1582 <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    14c8:	4663      	mov	r3, ip
    14ca:	2b00      	cmp	r3, #0
    14cc:	db37      	blt.n	153e <_usb_d_dev_ep_init+0xf2>
    14ce:	007b      	lsls	r3, r7, #1
    14d0:	19db      	adds	r3, r3, r7
    14d2:	009c      	lsls	r4, r3, #2
    14d4:	4b2f      	ldr	r3, [pc, #188]	; (1594 <_usb_d_dev_ep_init+0x148>)
    14d6:	191b      	adds	r3, r3, r4
    14d8:	689b      	ldr	r3, [r3, #8]
    14da:	1e5c      	subs	r4, r3, #1
    14dc:	41a3      	sbcs	r3, r4
    14de:	b2db      	uxtb	r3, r3
    14e0:	2b00      	cmp	r3, #0
    14e2:	d00a      	beq.n	14fa <_usb_d_dev_ep_init+0xae>
    14e4:	4663      	mov	r3, ip
    14e6:	2b00      	cmp	r3, #0
    14e8:	db33      	blt.n	1552 <_usb_d_dev_ep_init+0x106>
    14ea:	007b      	lsls	r3, r7, #1
    14ec:	19db      	adds	r3, r3, r7
    14ee:	009c      	lsls	r4, r3, #2
    14f0:	4b28      	ldr	r3, [pc, #160]	; (1594 <_usb_d_dev_ep_init+0x148>)
    14f2:	191b      	adds	r3, r3, r4
    14f4:	8a1b      	ldrh	r3, [r3, #16]
    14f6:	4293      	cmp	r3, r2
    14f8:	db46      	blt.n	1588 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    14fa:	4663      	mov	r3, ip
    14fc:	2b00      	cmp	r3, #0
    14fe:	db2f      	blt.n	1560 <_usb_d_dev_ep_init+0x114>
    1500:	007b      	lsls	r3, r7, #1
    1502:	19df      	adds	r7, r3, r7
    1504:	00bc      	lsls	r4, r7, #2
    1506:	4b23      	ldr	r3, [pc, #140]	; (1594 <_usb_d_dev_ep_init+0x148>)
    1508:	191b      	adds	r3, r3, r4
    150a:	689b      	ldr	r3, [r3, #8]
    150c:	469c      	mov	ip, r3
    150e:	4b20      	ldr	r3, [pc, #128]	; (1590 <_usb_d_dev_ep_init+0x144>)
    1510:	00b5      	lsls	r5, r6, #2
    1512:	19af      	adds	r7, r5, r6
    1514:	00bc      	lsls	r4, r7, #2
    1516:	191c      	adds	r4, r3, r4
    1518:	3480      	adds	r4, #128	; 0x80
    151a:	4667      	mov	r7, ip
    151c:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    151e:	3360      	adds	r3, #96	; 0x60
    1520:	19af      	adds	r7, r5, r6
    1522:	00bc      	lsls	r4, r7, #2
    1524:	0027      	movs	r7, r4
    1526:	191c      	adds	r4, r3, r4
    1528:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    152a:	3101      	adds	r1, #1
    152c:	3427      	adds	r4, #39	; 0x27
    152e:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1530:	19db      	adds	r3, r3, r7
    1532:	3326      	adds	r3, #38	; 0x26
    1534:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1536:	2000      	movs	r0, #0
}
    1538:	bc04      	pop	{r2}
    153a:	4690      	mov	r8, r2
    153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    153e:	007b      	lsls	r3, r7, #1
    1540:	19db      	adds	r3, r3, r7
    1542:	009c      	lsls	r4, r3, #2
    1544:	4b13      	ldr	r3, [pc, #76]	; (1594 <_usb_d_dev_ep_init+0x148>)
    1546:	191b      	adds	r3, r3, r4
    1548:	68db      	ldr	r3, [r3, #12]
    154a:	1e5c      	subs	r4, r3, #1
    154c:	41a3      	sbcs	r3, r4
    154e:	b2db      	uxtb	r3, r3
    1550:	e7c6      	b.n	14e0 <_usb_d_dev_ep_init+0x94>
    1552:	007b      	lsls	r3, r7, #1
    1554:	19db      	adds	r3, r3, r7
    1556:	009c      	lsls	r4, r3, #2
    1558:	4b0e      	ldr	r3, [pc, #56]	; (1594 <_usb_d_dev_ep_init+0x148>)
    155a:	191b      	adds	r3, r3, r4
    155c:	8a5b      	ldrh	r3, [r3, #18]
    155e:	e7ca      	b.n	14f6 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1560:	007b      	lsls	r3, r7, #1
    1562:	19df      	adds	r7, r3, r7
    1564:	00bc      	lsls	r4, r7, #2
    1566:	4b0b      	ldr	r3, [pc, #44]	; (1594 <_usb_d_dev_ep_init+0x148>)
    1568:	191b      	adds	r3, r3, r4
    156a:	68db      	ldr	r3, [r3, #12]
    156c:	469c      	mov	ip, r3
    156e:	e7ce      	b.n	150e <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    1570:	2012      	movs	r0, #18
    1572:	4240      	negs	r0, r0
    1574:	e7e0      	b.n	1538 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    1576:	2014      	movs	r0, #20
    1578:	4240      	negs	r0, r0
    157a:	e7dd      	b.n	1538 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    157c:	2014      	movs	r0, #20
    157e:	4240      	negs	r0, r0
    1580:	e7da      	b.n	1538 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    1582:	2013      	movs	r0, #19
    1584:	4240      	negs	r0, r0
    1586:	e7d7      	b.n	1538 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    1588:	2013      	movs	r0, #19
    158a:	4240      	negs	r0, r0
    158c:	e7d4      	b.n	1538 <_usb_d_dev_ep_init+0xec>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	20000104 	.word	0x20000104
    1594:	00002b70 	.word	0x00002b70

00001598 <_usb_d_dev_ep_deinit>:
{
    1598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    159a:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    159c:	250f      	movs	r5, #15
    159e:	4005      	ands	r5, r0
    15a0:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    15a2:	0ffb      	lsrs	r3, r7, #31
    15a4:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    15a6:	2d00      	cmp	r5, #0
    15a8:	d005      	beq.n	15b6 <_usb_d_dev_ep_deinit+0x1e>
    15aa:	2f00      	cmp	r7, #0
    15ac:	db01      	blt.n	15b2 <_usb_d_dev_ep_deinit+0x1a>
    15ae:	002a      	movs	r2, r5
    15b0:	e002      	b.n	15b8 <_usb_d_dev_ep_deinit+0x20>
    15b2:	1caa      	adds	r2, r5, #2
    15b4:	e000      	b.n	15b8 <_usb_d_dev_ep_deinit+0x20>
    15b6:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    15b8:	0016      	movs	r6, r2
    15ba:	0093      	lsls	r3, r2, #2
    15bc:	189b      	adds	r3, r3, r2
    15be:	0099      	lsls	r1, r3, #2
    15c0:	3110      	adds	r1, #16
    15c2:	4823      	ldr	r0, [pc, #140]	; (1650 <_usb_d_dev_ep_deinit+0xb8>)
    15c4:	3060      	adds	r0, #96	; 0x60
    15c6:	1840      	adds	r0, r0, r1
    15c8:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    15ca:	2d02      	cmp	r5, #2
    15cc:	d830      	bhi.n	1630 <_usb_d_dev_ep_deinit+0x98>
    15ce:	0093      	lsls	r3, r2, #2
    15d0:	189a      	adds	r2, r3, r2
    15d2:	0091      	lsls	r1, r2, #2
    15d4:	4b1e      	ldr	r3, [pc, #120]	; (1650 <_usb_d_dev_ep_deinit+0xb8>)
    15d6:	3360      	adds	r3, #96	; 0x60
    15d8:	185b      	adds	r3, r3, r1
    15da:	3326      	adds	r3, #38	; 0x26
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	2bff      	cmp	r3, #255	; 0xff
    15e0:	d026      	beq.n	1630 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    15e2:	2203      	movs	r2, #3
    15e4:	4661      	mov	r1, ip
    15e6:	4b1b      	ldr	r3, [pc, #108]	; (1654 <_usb_d_dev_ep_deinit+0xbc>)
    15e8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    15ea:	00b2      	lsls	r2, r6, #2
    15ec:	1992      	adds	r2, r2, r6
    15ee:	0091      	lsls	r1, r2, #2
    15f0:	4b17      	ldr	r3, [pc, #92]	; (1650 <_usb_d_dev_ep_deinit+0xb8>)
    15f2:	185b      	adds	r3, r3, r1
    15f4:	3380      	adds	r3, #128	; 0x80
    15f6:	79da      	ldrb	r2, [r3, #7]
    15f8:	2307      	movs	r3, #7
    15fa:	4013      	ands	r3, r2
    15fc:	2b01      	cmp	r3, #1
    15fe:	d018      	beq.n	1632 <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    1600:	2f00      	cmp	r7, #0
    1602:	db1c      	blt.n	163e <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1604:	4a14      	ldr	r2, [pc, #80]	; (1658 <_usb_d_dev_ep_deinit+0xc0>)
    1606:	3408      	adds	r4, #8
    1608:	0164      	lsls	r4, r4, #5
    160a:	5ca3      	ldrb	r3, [r4, r2]
    160c:	2107      	movs	r1, #7
    160e:	438b      	bics	r3, r1
    1610:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    1612:	4b0f      	ldr	r3, [pc, #60]	; (1650 <_usb_d_dev_ep_deinit+0xb8>)
    1614:	3360      	adds	r3, #96	; 0x60
    1616:	00b1      	lsls	r1, r6, #2
    1618:	1988      	adds	r0, r1, r6
    161a:	0082      	lsls	r2, r0, #2
    161c:	189a      	adds	r2, r3, r2
    161e:	3227      	adds	r2, #39	; 0x27
    1620:	2000      	movs	r0, #0
    1622:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    1624:	198e      	adds	r6, r1, r6
    1626:	00b2      	lsls	r2, r6, #2
    1628:	189b      	adds	r3, r3, r2
    162a:	3326      	adds	r3, #38	; 0x26
    162c:	22ff      	movs	r2, #255	; 0xff
    162e:	701a      	strb	r2, [r3, #0]
}
    1630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1632:	3408      	adds	r4, #8
    1634:	0164      	lsls	r4, r4, #5
    1636:	2200      	movs	r2, #0
    1638:	4b07      	ldr	r3, [pc, #28]	; (1658 <_usb_d_dev_ep_deinit+0xc0>)
    163a:	54e2      	strb	r2, [r4, r3]
    163c:	e7e9      	b.n	1612 <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    163e:	4a06      	ldr	r2, [pc, #24]	; (1658 <_usb_d_dev_ep_deinit+0xc0>)
    1640:	3508      	adds	r5, #8
    1642:	016d      	lsls	r5, r5, #5
    1644:	5cab      	ldrb	r3, [r5, r2]
    1646:	2170      	movs	r1, #112	; 0x70
    1648:	438b      	bics	r3, r1
    164a:	54ab      	strb	r3, [r5, r2]
    164c:	e7e1      	b.n	1612 <_usb_d_dev_ep_deinit+0x7a>
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	20000104 	.word	0x20000104
    1654:	00000b71 	.word	0x00000b71
    1658:	41005000 	.word	0x41005000

0000165c <_usb_d_dev_ep_enable>:
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    165e:	230f      	movs	r3, #15
    1660:	4003      	ands	r3, r0
    1662:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1664:	2b00      	cmp	r3, #0
    1666:	d005      	beq.n	1674 <_usb_d_dev_ep_enable+0x18>
    1668:	2800      	cmp	r0, #0
    166a:	db01      	blt.n	1670 <_usb_d_dev_ep_enable+0x14>
    166c:	001e      	movs	r6, r3
    166e:	e002      	b.n	1676 <_usb_d_dev_ep_enable+0x1a>
    1670:	1c9e      	adds	r6, r3, #2
    1672:	e000      	b.n	1676 <_usb_d_dev_ep_enable+0x1a>
    1674:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    1676:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1678:	001a      	movs	r2, r3
    167a:	3208      	adds	r2, #8
    167c:	0152      	lsls	r2, r2, #5
    167e:	49b2      	ldr	r1, [pc, #712]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    1680:	5c55      	ldrb	r5, [r2, r1]
    1682:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1684:	2b02      	cmp	r3, #2
    1686:	d900      	bls.n	168a <_usb_d_dev_ep_enable+0x2e>
    1688:	e14f      	b.n	192a <_usb_d_dev_ep_enable+0x2ce>
    168a:	00b1      	lsls	r1, r6, #2
    168c:	1989      	adds	r1, r1, r6
    168e:	008e      	lsls	r6, r1, #2
    1690:	4aae      	ldr	r2, [pc, #696]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    1692:	3260      	adds	r2, #96	; 0x60
    1694:	1992      	adds	r2, r2, r6
    1696:	3226      	adds	r2, #38	; 0x26
    1698:	7812      	ldrb	r2, [r2, #0]
    169a:	2aff      	cmp	r2, #255	; 0xff
    169c:	d100      	bne.n	16a0 <_usb_d_dev_ep_enable+0x44>
    169e:	e147      	b.n	1930 <_usb_d_dev_ep_enable+0x2d4>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    16a0:	4aaa      	ldr	r2, [pc, #680]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    16a2:	015e      	lsls	r6, r3, #5
    16a4:	1996      	adds	r6, r2, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    16a6:	00a1      	lsls	r1, r4, #2
    16a8:	1909      	adds	r1, r1, r4
    16aa:	008f      	lsls	r7, r1, #2
    16ac:	19d2      	adds	r2, r2, r7
    16ae:	3280      	adds	r2, #128	; 0x80
    16b0:	79d1      	ldrb	r1, [r2, #7]
    16b2:	2207      	movs	r2, #7
    16b4:	400a      	ands	r2, r1
    16b6:	2a01      	cmp	r2, #1
    16b8:	d037      	beq.n	172a <_usb_d_dev_ep_enable+0xce>
	} else if (dir) {
    16ba:	2800      	cmp	r0, #0
    16bc:	da00      	bge.n	16c0 <_usb_d_dev_ep_enable+0x64>
    16be:	e0cb      	b.n	1858 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    16c0:	076a      	lsls	r2, r5, #29
    16c2:	d000      	beq.n	16c6 <_usb_d_dev_ep_enable+0x6a>
    16c4:	e13d      	b.n	1942 <_usb_d_dev_ep_enable+0x2e6>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    16c6:	4aa1      	ldr	r2, [pc, #644]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    16c8:	00a0      	lsls	r0, r4, #2
    16ca:	1907      	adds	r7, r0, r4
    16cc:	00b9      	lsls	r1, r7, #2
    16ce:	1851      	adds	r1, r2, r1
    16d0:	3180      	adds	r1, #128	; 0x80
    16d2:	79c9      	ldrb	r1, [r1, #7]
    16d4:	0749      	lsls	r1, r1, #29
    16d6:	0f49      	lsrs	r1, r1, #29
    16d8:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    16da:	0019      	movs	r1, r3
    16dc:	3108      	adds	r1, #8
    16de:	0149      	lsls	r1, r1, #5
    16e0:	4f99      	ldr	r7, [pc, #612]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    16e2:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    16e4:	3260      	adds	r2, #96	; 0x60
    16e6:	1904      	adds	r4, r0, r4
    16e8:	00a1      	lsls	r1, r4, #2
    16ea:	1852      	adds	r2, r2, r1
    16ec:	8c90      	ldrh	r0, [r2, #36]	; 0x24
    16ee:	0382      	lsls	r2, r0, #14
    16f0:	4997      	ldr	r1, [pc, #604]	; (1950 <_usb_d_dev_ep_enable+0x2f4>)
    16f2:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16f4:	2180      	movs	r1, #128	; 0x80
    16f6:	0089      	lsls	r1, r1, #2
    16f8:	4288      	cmp	r0, r1
    16fa:	d900      	bls.n	16fe <_usb_d_dev_ep_enable+0xa2>
    16fc:	e0f8      	b.n	18f0 <_usb_d_dev_ep_enable+0x294>
    16fe:	3901      	subs	r1, #1
    1700:	39ff      	subs	r1, #255	; 0xff
    1702:	4288      	cmp	r0, r1
    1704:	d900      	bls.n	1708 <_usb_d_dev_ep_enable+0xac>
    1706:	e106      	b.n	1916 <_usb_d_dev_ep_enable+0x2ba>
    1708:	2880      	cmp	r0, #128	; 0x80
    170a:	d900      	bls.n	170e <_usb_d_dev_ep_enable+0xb2>
    170c:	e105      	b.n	191a <_usb_d_dev_ep_enable+0x2be>
    170e:	2840      	cmp	r0, #64	; 0x40
    1710:	d900      	bls.n	1714 <_usb_d_dev_ep_enable+0xb8>
    1712:	e104      	b.n	191e <_usb_d_dev_ep_enable+0x2c2>
    1714:	2820      	cmp	r0, #32
    1716:	d900      	bls.n	171a <_usb_d_dev_ep_enable+0xbe>
    1718:	e103      	b.n	1922 <_usb_d_dev_ep_enable+0x2c6>
    171a:	2810      	cmp	r0, #16
    171c:	d900      	bls.n	1720 <_usb_d_dev_ep_enable+0xc4>
    171e:	e102      	b.n	1926 <_usb_d_dev_ep_enable+0x2ca>
    1720:	39f8      	subs	r1, #248	; 0xf8
    1722:	4281      	cmp	r1, r0
    1724:	4189      	sbcs	r1, r1
    1726:	4249      	negs	r1, r1
    1728:	e0e3      	b.n	18f2 <_usb_d_dev_ep_enable+0x296>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    172a:	3276      	adds	r2, #118	; 0x76
    172c:	422a      	tst	r2, r5
    172e:	d000      	beq.n	1732 <_usb_d_dev_ep_enable+0xd6>
    1730:	e101      	b.n	1936 <_usb_d_dev_ep_enable+0x2da>
    1732:	001a      	movs	r2, r3
    1734:	3208      	adds	r2, #8
    1736:	0152      	lsls	r2, r2, #5
    1738:	2011      	movs	r0, #17
    173a:	4983      	ldr	r1, [pc, #524]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    173c:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    173e:	4a83      	ldr	r2, [pc, #524]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    1740:	3260      	adds	r2, #96	; 0x60
    1742:	19d2      	adds	r2, r2, r7
    1744:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    1746:	0391      	lsls	r1, r2, #14
    1748:	4881      	ldr	r0, [pc, #516]	; (1950 <_usb_d_dev_ep_enable+0x2f4>)
    174a:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    174c:	2080      	movs	r0, #128	; 0x80
    174e:	0080      	lsls	r0, r0, #2
    1750:	4282      	cmp	r2, r0
    1752:	d810      	bhi.n	1776 <_usb_d_dev_ep_enable+0x11a>
    1754:	3801      	subs	r0, #1
    1756:	38ff      	subs	r0, #255	; 0xff
    1758:	4282      	cmp	r2, r0
    175a:	d827      	bhi.n	17ac <_usb_d_dev_ep_enable+0x150>
    175c:	2a80      	cmp	r2, #128	; 0x80
    175e:	d827      	bhi.n	17b0 <_usb_d_dev_ep_enable+0x154>
    1760:	2a40      	cmp	r2, #64	; 0x40
    1762:	d827      	bhi.n	17b4 <_usb_d_dev_ep_enable+0x158>
    1764:	2a20      	cmp	r2, #32
    1766:	d827      	bhi.n	17b8 <_usb_d_dev_ep_enable+0x15c>
    1768:	2a10      	cmp	r2, #16
    176a:	d827      	bhi.n	17bc <_usb_d_dev_ep_enable+0x160>
    176c:	38f8      	subs	r0, #248	; 0xf8
    176e:	4290      	cmp	r0, r2
    1770:	4180      	sbcs	r0, r0
    1772:	4240      	negs	r0, r0
    1774:	e000      	b.n	1778 <_usb_d_dev_ep_enable+0x11c>
    1776:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1778:	0700      	lsls	r0, r0, #28
    177a:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    177c:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    177e:	0491      	lsls	r1, r2, #18
    1780:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1782:	2080      	movs	r0, #128	; 0x80
    1784:	0080      	lsls	r0, r0, #2
    1786:	4282      	cmp	r2, r0
    1788:	d81a      	bhi.n	17c0 <_usb_d_dev_ep_enable+0x164>
    178a:	3801      	subs	r0, #1
    178c:	38ff      	subs	r0, #255	; 0xff
    178e:	4282      	cmp	r2, r0
    1790:	d858      	bhi.n	1844 <_usb_d_dev_ep_enable+0x1e8>
    1792:	2a80      	cmp	r2, #128	; 0x80
    1794:	d858      	bhi.n	1848 <_usb_d_dev_ep_enable+0x1ec>
    1796:	2a40      	cmp	r2, #64	; 0x40
    1798:	d858      	bhi.n	184c <_usb_d_dev_ep_enable+0x1f0>
    179a:	2a20      	cmp	r2, #32
    179c:	d858      	bhi.n	1850 <_usb_d_dev_ep_enable+0x1f4>
    179e:	2a10      	cmp	r2, #16
    17a0:	d858      	bhi.n	1854 <_usb_d_dev_ep_enable+0x1f8>
    17a2:	38f8      	subs	r0, #248	; 0xf8
    17a4:	4290      	cmp	r0, r2
    17a6:	4192      	sbcs	r2, r2
    17a8:	4252      	negs	r2, r2
    17aa:	e00a      	b.n	17c2 <_usb_d_dev_ep_enable+0x166>
    17ac:	2006      	movs	r0, #6
    17ae:	e7e3      	b.n	1778 <_usb_d_dev_ep_enable+0x11c>
    17b0:	2005      	movs	r0, #5
    17b2:	e7e1      	b.n	1778 <_usb_d_dev_ep_enable+0x11c>
    17b4:	2004      	movs	r0, #4
    17b6:	e7df      	b.n	1778 <_usb_d_dev_ep_enable+0x11c>
    17b8:	2003      	movs	r0, #3
    17ba:	e7dd      	b.n	1778 <_usb_d_dev_ep_enable+0x11c>
    17bc:	2002      	movs	r0, #2
    17be:	e7db      	b.n	1778 <_usb_d_dev_ep_enable+0x11c>
    17c0:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    17c2:	0712      	lsls	r2, r2, #28
    17c4:	430a      	orrs	r2, r1
    17c6:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    17c8:	001a      	movs	r2, r3
    17ca:	3208      	adds	r2, #8
    17cc:	0152      	lsls	r2, r2, #5
    17ce:	495e      	ldr	r1, [pc, #376]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    17d0:	468c      	mov	ip, r1
    17d2:	4462      	add	r2, ip
    17d4:	2040      	movs	r0, #64	; 0x40
    17d6:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    17d8:	2180      	movs	r1, #128	; 0x80
    17da:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    17dc:	4a5b      	ldr	r2, [pc, #364]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    17de:	015b      	lsls	r3, r3, #5
    17e0:	18d3      	adds	r3, r2, r3
    17e2:	2100      	movs	r1, #0
    17e4:	7299      	strb	r1, [r3, #10]
    17e6:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    17e8:	0016      	movs	r6, r2
    17ea:	3660      	adds	r6, #96	; 0x60
    17ec:	00a1      	lsls	r1, r4, #2
    17ee:	190d      	adds	r5, r1, r4
    17f0:	00ab      	lsls	r3, r5, #2
    17f2:	18f3      	adds	r3, r6, r3
    17f4:	3326      	adds	r3, #38	; 0x26
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	250f      	movs	r5, #15
    17fa:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    17fc:	190f      	adds	r7, r1, r4
    17fe:	00bd      	lsls	r5, r7, #2
    1800:	1955      	adds	r5, r2, r5
    1802:	3580      	adds	r5, #128	; 0x80
    1804:	682f      	ldr	r7, [r5, #0]
	bank->ADDR.reg          = addr;
    1806:	015d      	lsls	r5, r3, #5
    1808:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    180a:	190c      	adds	r4, r1, r4
    180c:	00a1      	lsls	r1, r4, #2
    180e:	1876      	adds	r6, r6, r1
    1810:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1812:	1952      	adds	r2, r2, r5
    1814:	6854      	ldr	r4, [r2, #4]
    1816:	0489      	lsls	r1, r1, #18
    1818:	0909      	lsrs	r1, r1, #4
    181a:	4e4e      	ldr	r6, [pc, #312]	; (1954 <_usb_d_dev_ep_enable+0x2f8>)
    181c:	4034      	ands	r4, r6
    181e:	4321      	orrs	r1, r4
    1820:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1822:	6851      	ldr	r1, [r2, #4]
    1824:	0b89      	lsrs	r1, r1, #14
    1826:	038c      	lsls	r4, r1, #14
    1828:	6054      	str	r4, [r2, #4]
    182a:	3308      	adds	r3, #8
    182c:	015b      	lsls	r3, r3, #5
    182e:	4463      	add	r3, ip
    1830:	22b0      	movs	r2, #176	; 0xb0
    1832:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1834:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1836:	4b48      	ldr	r3, [pc, #288]	; (1958 <_usb_d_dev_ep_enable+0x2fc>)
    1838:	469c      	mov	ip, r3
    183a:	4465      	add	r5, ip
    183c:	2310      	movs	r3, #16
    183e:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    1840:	2000      	movs	r0, #0
    1842:	e067      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1844:	2206      	movs	r2, #6
    1846:	e7bc      	b.n	17c2 <_usb_d_dev_ep_enable+0x166>
    1848:	2205      	movs	r2, #5
    184a:	e7ba      	b.n	17c2 <_usb_d_dev_ep_enable+0x166>
    184c:	2204      	movs	r2, #4
    184e:	e7b8      	b.n	17c2 <_usb_d_dev_ep_enable+0x166>
    1850:	2203      	movs	r2, #3
    1852:	e7b6      	b.n	17c2 <_usb_d_dev_ep_enable+0x166>
    1854:	2202      	movs	r2, #2
    1856:	e7b4      	b.n	17c2 <_usb_d_dev_ep_enable+0x166>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1858:	2270      	movs	r2, #112	; 0x70
    185a:	422a      	tst	r2, r5
    185c:	d000      	beq.n	1860 <_usb_d_dev_ep_enable+0x204>
    185e:	e06d      	b.n	193c <_usb_d_dev_ep_enable+0x2e0>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1860:	493a      	ldr	r1, [pc, #232]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    1862:	00a0      	lsls	r0, r4, #2
    1864:	1907      	adds	r7, r0, r4
    1866:	00ba      	lsls	r2, r7, #2
    1868:	188a      	adds	r2, r1, r2
    186a:	3280      	adds	r2, #128	; 0x80
    186c:	79d2      	ldrb	r2, [r2, #7]
    186e:	0752      	lsls	r2, r2, #29
    1870:	0e52      	lsrs	r2, r2, #25
    1872:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1874:	001a      	movs	r2, r3
    1876:	3208      	adds	r2, #8
    1878:	0152      	lsls	r2, r2, #5
    187a:	4f33      	ldr	r7, [pc, #204]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    187c:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    187e:	3160      	adds	r1, #96	; 0x60
    1880:	1904      	adds	r4, r0, r4
    1882:	00a2      	lsls	r2, r4, #2
    1884:	1889      	adds	r1, r1, r2
    1886:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    1888:	048a      	lsls	r2, r1, #18
    188a:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    188c:	2080      	movs	r0, #128	; 0x80
    188e:	0080      	lsls	r0, r0, #2
    1890:	4281      	cmp	r1, r0
    1892:	d810      	bhi.n	18b6 <_usb_d_dev_ep_enable+0x25a>
    1894:	3801      	subs	r0, #1
    1896:	38ff      	subs	r0, #255	; 0xff
    1898:	4281      	cmp	r1, r0
    189a:	d81f      	bhi.n	18dc <_usb_d_dev_ep_enable+0x280>
    189c:	2980      	cmp	r1, #128	; 0x80
    189e:	d81f      	bhi.n	18e0 <_usb_d_dev_ep_enable+0x284>
    18a0:	2940      	cmp	r1, #64	; 0x40
    18a2:	d81f      	bhi.n	18e4 <_usb_d_dev_ep_enable+0x288>
    18a4:	2920      	cmp	r1, #32
    18a6:	d81f      	bhi.n	18e8 <_usb_d_dev_ep_enable+0x28c>
    18a8:	2910      	cmp	r1, #16
    18aa:	d81f      	bhi.n	18ec <_usb_d_dev_ep_enable+0x290>
    18ac:	38f8      	subs	r0, #248	; 0xf8
    18ae:	4288      	cmp	r0, r1
    18b0:	4189      	sbcs	r1, r1
    18b2:	4249      	negs	r1, r1
    18b4:	e000      	b.n	18b8 <_usb_d_dev_ep_enable+0x25c>
    18b6:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    18b8:	0709      	lsls	r1, r1, #28
    18ba:	430a      	orrs	r2, r1
    18bc:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    18be:	001a      	movs	r2, r3
    18c0:	3208      	adds	r2, #8
    18c2:	0152      	lsls	r2, r2, #5
    18c4:	4920      	ldr	r1, [pc, #128]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    18c6:	468c      	mov	ip, r1
    18c8:	4462      	add	r2, ip
    18ca:	2180      	movs	r1, #128	; 0x80
    18cc:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    18ce:	015a      	lsls	r2, r3, #5
    18d0:	4b1e      	ldr	r3, [pc, #120]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    18d2:	189b      	adds	r3, r3, r2
    18d4:	2200      	movs	r2, #0
    18d6:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    18d8:	2000      	movs	r0, #0
    18da:	e01b      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    18dc:	2106      	movs	r1, #6
    18de:	e7eb      	b.n	18b8 <_usb_d_dev_ep_enable+0x25c>
    18e0:	2105      	movs	r1, #5
    18e2:	e7e9      	b.n	18b8 <_usb_d_dev_ep_enable+0x25c>
    18e4:	2104      	movs	r1, #4
    18e6:	e7e7      	b.n	18b8 <_usb_d_dev_ep_enable+0x25c>
    18e8:	2103      	movs	r1, #3
    18ea:	e7e5      	b.n	18b8 <_usb_d_dev_ep_enable+0x25c>
    18ec:	2102      	movs	r1, #2
    18ee:	e7e3      	b.n	18b8 <_usb_d_dev_ep_enable+0x25c>
    18f0:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    18f2:	0709      	lsls	r1, r1, #28
    18f4:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    18f6:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    18f8:	001a      	movs	r2, r3
    18fa:	3208      	adds	r2, #8
    18fc:	0152      	lsls	r2, r2, #5
    18fe:	4912      	ldr	r1, [pc, #72]	; (1948 <_usb_d_dev_ep_enable+0x2ec>)
    1900:	468c      	mov	ip, r1
    1902:	4462      	add	r2, ip
    1904:	2140      	movs	r1, #64	; 0x40
    1906:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    1908:	015b      	lsls	r3, r3, #5
    190a:	4a10      	ldr	r2, [pc, #64]	; (194c <_usb_d_dev_ep_enable+0x2f0>)
    190c:	18d3      	adds	r3, r2, r3
    190e:	2200      	movs	r2, #0
    1910:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    1912:	2000      	movs	r0, #0
}
    1914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1916:	2106      	movs	r1, #6
    1918:	e7eb      	b.n	18f2 <_usb_d_dev_ep_enable+0x296>
    191a:	2105      	movs	r1, #5
    191c:	e7e9      	b.n	18f2 <_usb_d_dev_ep_enable+0x296>
    191e:	2104      	movs	r1, #4
    1920:	e7e7      	b.n	18f2 <_usb_d_dev_ep_enable+0x296>
    1922:	2103      	movs	r1, #3
    1924:	e7e5      	b.n	18f2 <_usb_d_dev_ep_enable+0x296>
    1926:	2102      	movs	r1, #2
    1928:	e7e3      	b.n	18f2 <_usb_d_dev_ep_enable+0x296>
		return -USB_ERR_PARAM;
    192a:	2012      	movs	r0, #18
    192c:	4240      	negs	r0, r0
    192e:	e7f1      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
    1930:	2012      	movs	r0, #18
    1932:	4240      	negs	r0, r0
    1934:	e7ee      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
			return -USB_ERR_REDO;
    1936:	2014      	movs	r0, #20
    1938:	4240      	negs	r0, r0
    193a:	e7eb      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
			return -USB_ERR_REDO;
    193c:	2014      	movs	r0, #20
    193e:	4240      	negs	r0, r0
    1940:	e7e8      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
			return -USB_ERR_REDO;
    1942:	2014      	movs	r0, #20
    1944:	4240      	negs	r0, r0
    1946:	e7e5      	b.n	1914 <_usb_d_dev_ep_enable+0x2b8>
    1948:	41005000 	.word	0x41005000
    194c:	20000104 	.word	0x20000104
    1950:	0fffc000 	.word	0x0fffc000
    1954:	f0003fff 	.word	0xf0003fff
    1958:	41005109 	.word	0x41005109

0000195c <_usb_d_dev_ep_stall>:
{
    195c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    195e:	220f      	movs	r2, #15
    1960:	4002      	ands	r2, r0
    1962:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1964:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1966:	2a00      	cmp	r2, #0
    1968:	d005      	beq.n	1976 <_usb_d_dev_ep_stall+0x1a>
    196a:	2800      	cmp	r0, #0
    196c:	db01      	blt.n	1972 <_usb_d_dev_ep_stall+0x16>
    196e:	0013      	movs	r3, r2
    1970:	e002      	b.n	1978 <_usb_d_dev_ep_stall+0x1c>
    1972:	1c93      	adds	r3, r2, #2
    1974:	e000      	b.n	1978 <_usb_d_dev_ep_stall+0x1c>
    1976:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    1978:	001d      	movs	r5, r3
    197a:	0098      	lsls	r0, r3, #2
    197c:	18c0      	adds	r0, r0, r3
    197e:	0083      	lsls	r3, r0, #2
    1980:	3310      	adds	r3, #16
    1982:	0018      	movs	r0, r3
    1984:	4b47      	ldr	r3, [pc, #284]	; (1aa4 <_usb_d_dev_ep_stall+0x148>)
    1986:	3360      	adds	r3, #96	; 0x60
    1988:	181b      	adds	r3, r3, r0
    198a:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    198c:	2a02      	cmp	r2, #2
    198e:	d900      	bls.n	1992 <_usb_d_dev_ep_stall+0x36>
    1990:	e084      	b.n	1a9c <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    1992:	2901      	cmp	r1, #1
    1994:	d018      	beq.n	19c8 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1996:	2900      	cmp	r1, #0
    1998:	d03d      	beq.n	1a16 <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    199a:	00aa      	lsls	r2, r5, #2
    199c:	1952      	adds	r2, r2, r5
    199e:	0091      	lsls	r1, r2, #2
    19a0:	4b40      	ldr	r3, [pc, #256]	; (1aa4 <_usb_d_dev_ep_stall+0x148>)
    19a2:	3360      	adds	r3, #96	; 0x60
    19a4:	185b      	adds	r3, r3, r1
    19a6:	3326      	adds	r3, #38	; 0x26
    19a8:	781a      	ldrb	r2, [r3, #0]
    19aa:	230f      	movs	r3, #15
    19ac:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    19ae:	3308      	adds	r3, #8
    19b0:	015b      	lsls	r3, r3, #5
    19b2:	4a3d      	ldr	r2, [pc, #244]	; (1aa8 <_usb_d_dev_ep_stall+0x14c>)
    19b4:	4694      	mov	ip, r2
    19b6:	4463      	add	r3, ip
    19b8:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    19ba:	2310      	movs	r3, #16
    19bc:	40a3      	lsls	r3, r4
    19be:	4018      	ands	r0, r3
    19c0:	1e43      	subs	r3, r0, #1
    19c2:	4198      	sbcs	r0, r3
    19c4:	b2c0      	uxtb	r0, r0
}
    19c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19c8:	4836      	ldr	r0, [pc, #216]	; (1aa4 <_usb_d_dev_ep_stall+0x148>)
    19ca:	0003      	movs	r3, r0
    19cc:	3360      	adds	r3, #96	; 0x60
    19ce:	00aa      	lsls	r2, r5, #2
    19d0:	1956      	adds	r6, r2, r5
    19d2:	00b1      	lsls	r1, r6, #2
    19d4:	185b      	adds	r3, r3, r1
    19d6:	3326      	adds	r3, #38	; 0x26
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	210f      	movs	r1, #15
    19dc:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    19de:	2610      	movs	r6, #16
    19e0:	40a6      	lsls	r6, r4
    19e2:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19e4:	0019      	movs	r1, r3
    19e6:	3108      	adds	r1, #8
    19e8:	0149      	lsls	r1, r1, #5
    19ea:	4f2f      	ldr	r7, [pc, #188]	; (1aa8 <_usb_d_dev_ep_stall+0x14c>)
    19ec:	46bc      	mov	ip, r7
    19ee:	4461      	add	r1, ip
    19f0:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    19f2:	2120      	movs	r1, #32
    19f4:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    19f6:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19f8:	0159      	lsls	r1, r3, #5
    19fa:	4b2c      	ldr	r3, [pc, #176]	; (1aac <_usb_d_dev_ep_stall+0x150>)
    19fc:	469c      	mov	ip, r3
    19fe:	4461      	add	r1, ip
    1a00:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    1a02:	1952      	adds	r2, r2, r5
    1a04:	0093      	lsls	r3, r2, #2
    1a06:	18c3      	adds	r3, r0, r3
    1a08:	3380      	adds	r3, #128	; 0x80
    1a0a:	79da      	ldrb	r2, [r3, #7]
    1a0c:	2108      	movs	r1, #8
    1a0e:	430a      	orrs	r2, r1
    1a10:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1a12:	2000      	movs	r0, #0
    1a14:	e7d7      	b.n	19c6 <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1a16:	7c9a      	ldrb	r2, [r3, #18]
    1a18:	310f      	adds	r1, #15
    1a1a:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1a1c:	0011      	movs	r1, r2
    1a1e:	3108      	adds	r1, #8
    1a20:	0149      	lsls	r1, r1, #5
    1a22:	4821      	ldr	r0, [pc, #132]	; (1aa8 <_usb_d_dev_ep_stall+0x14c>)
    1a24:	4684      	mov	ip, r0
    1a26:	4461      	add	r1, ip
    1a28:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1a2a:	2110      	movs	r1, #16
    1a2c:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    1a2e:	4208      	tst	r0, r1
    1a30:	d024      	beq.n	1a7c <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1a32:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a34:	0010      	movs	r0, r2
    1a36:	3008      	adds	r0, #8
    1a38:	0140      	lsls	r0, r0, #5
    1a3a:	4460      	add	r0, ip
    1a3c:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1a3e:	2120      	movs	r1, #32
    1a40:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1a42:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a44:	0155      	lsls	r5, r2, #5
    1a46:	4f1a      	ldr	r7, [pc, #104]	; (1ab0 <_usb_d_dev_ep_stall+0x154>)
    1a48:	46bc      	mov	ip, r7
    1a4a:	4465      	add	r5, ip
    1a4c:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1a4e:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1a50:	4208      	tst	r0, r1
    1a52:	d00a      	beq.n	1a6a <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a54:	0011      	movs	r1, r2
    1a56:	3108      	adds	r1, #8
    1a58:	0149      	lsls	r1, r1, #5
    1a5a:	4813      	ldr	r0, [pc, #76]	; (1aa8 <_usb_d_dev_ep_stall+0x14c>)
    1a5c:	4684      	mov	ip, r0
    1a5e:	4461      	add	r1, ip
    1a60:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1a62:	2001      	movs	r0, #1
    1a64:	40a0      	lsls	r0, r4
    1a66:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a68:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1a6a:	7cd8      	ldrb	r0, [r3, #19]
    1a6c:	2107      	movs	r1, #7
    1a6e:	4001      	ands	r1, r0
    1a70:	2901      	cmp	r1, #1
    1a72:	d005      	beq.n	1a80 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    1a74:	7cda      	ldrb	r2, [r3, #19]
    1a76:	2108      	movs	r1, #8
    1a78:	438a      	bics	r2, r1
    1a7a:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1a7c:	2000      	movs	r0, #0
    1a7e:	e7a2      	b.n	19c6 <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1a80:	3208      	adds	r2, #8
    1a82:	0152      	lsls	r2, r2, #5
    1a84:	4908      	ldr	r1, [pc, #32]	; (1aa8 <_usb_d_dev_ep_stall+0x14c>)
    1a86:	468c      	mov	ip, r1
    1a88:	4462      	add	r2, ip
    1a8a:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1a8c:	2230      	movs	r2, #48	; 0x30
    1a8e:	4211      	tst	r1, r2
    1a90:	d1f4      	bne.n	1a7c <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    1a92:	0002      	movs	r2, r0
    1a94:	2108      	movs	r1, #8
    1a96:	438a      	bics	r2, r1
    1a98:	74da      	strb	r2, [r3, #19]
    1a9a:	e7ef      	b.n	1a7c <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    1a9c:	2012      	movs	r0, #18
    1a9e:	4240      	negs	r0, r0
    1aa0:	e791      	b.n	19c6 <_usb_d_dev_ep_stall+0x6a>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	20000104 	.word	0x20000104
    1aa8:	41005000 	.word	0x41005000
    1aac:	41005109 	.word	0x41005109
    1ab0:	41005108 	.word	0x41005108

00001ab4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1ab8:	240f      	movs	r4, #15
    1aba:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1abc:	0162      	lsls	r2, r4, #5
    1abe:	4b18      	ldr	r3, [pc, #96]	; (1b20 <_usb_d_dev_ep_read_req+0x6c>)
    1ac0:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    1ac2:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1ac4:	685d      	ldr	r5, [r3, #4]
    1ac6:	04ad      	lsls	r5, r5, #18
    1ac8:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1aca:	2c02      	cmp	r4, #2
    1acc:	d81f      	bhi.n	1b0e <_usb_d_dev_ep_read_req+0x5a>
    1ace:	2e00      	cmp	r6, #0
    1ad0:	d020      	beq.n	1b14 <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1ad2:	0023      	movs	r3, r4
    1ad4:	3308      	adds	r3, #8
    1ad6:	015b      	lsls	r3, r3, #5
    1ad8:	4a12      	ldr	r2, [pc, #72]	; (1b24 <_usb_d_dev_ep_read_req+0x70>)
    1ada:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1adc:	2b11      	cmp	r3, #17
    1ade:	d11c      	bne.n	1b1a <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1ae0:	0023      	movs	r3, r4
    1ae2:	3308      	adds	r3, #8
    1ae4:	015b      	lsls	r3, r3, #5
    1ae6:	4694      	mov	ip, r2
    1ae8:	4463      	add	r3, ip
    1aea:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    1aec:	06db      	lsls	r3, r3, #27
    1aee:	d401      	bmi.n	1af4 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    1af0:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1af2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    1af4:	2208      	movs	r2, #8
    1af6:	0030      	movs	r0, r6
    1af8:	4b0b      	ldr	r3, [pc, #44]	; (1b28 <_usb_d_dev_ep_read_req+0x74>)
    1afa:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1afc:	3408      	adds	r4, #8
    1afe:	0164      	lsls	r4, r4, #5
    1b00:	4b08      	ldr	r3, [pc, #32]	; (1b24 <_usb_d_dev_ep_read_req+0x70>)
    1b02:	469c      	mov	ip, r3
    1b04:	4464      	add	r4, ip
    1b06:	2310      	movs	r3, #16
    1b08:	71e3      	strb	r3, [r4, #7]
	return bytes;
    1b0a:	0028      	movs	r0, r5
    1b0c:	e7f1      	b.n	1af2 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    1b0e:	2012      	movs	r0, #18
    1b10:	4240      	negs	r0, r0
    1b12:	e7ee      	b.n	1af2 <_usb_d_dev_ep_read_req+0x3e>
    1b14:	2012      	movs	r0, #18
    1b16:	4240      	negs	r0, r0
    1b18:	e7eb      	b.n	1af2 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    1b1a:	2013      	movs	r0, #19
    1b1c:	4240      	negs	r0, r0
    1b1e:	e7e8      	b.n	1af2 <_usb_d_dev_ep_read_req+0x3e>
    1b20:	20000104 	.word	0x20000104
    1b24:	41005000 	.word	0x41005000
    1b28:	00002b2d 	.word	0x00002b2d

00001b2c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b2e:	46de      	mov	lr, fp
    1b30:	4657      	mov	r7, sl
    1b32:	464e      	mov	r6, r9
    1b34:	4645      	mov	r5, r8
    1b36:	b5e0      	push	{r5, r6, r7, lr}
    1b38:	b085      	sub	sp, #20
    1b3a:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1b3c:	7a05      	ldrb	r5, [r0, #8]
    1b3e:	220f      	movs	r2, #15
    1b40:	402a      	ands	r2, r5
    1b42:	b26d      	sxtb	r5, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1b44:	0feb      	lsrs	r3, r5, #31
    1b46:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1b48:	2a00      	cmp	r2, #0
    1b4a:	d005      	beq.n	1b58 <_usb_d_dev_ep_trans+0x2c>
    1b4c:	2d00      	cmp	r5, #0
    1b4e:	db01      	blt.n	1b54 <_usb_d_dev_ep_trans+0x28>
    1b50:	0010      	movs	r0, r2
    1b52:	e002      	b.n	1b5a <_usb_d_dev_ep_trans+0x2e>
    1b54:	1c90      	adds	r0, r2, #2
    1b56:	e000      	b.n	1b5a <_usb_d_dev_ep_trans+0x2e>
    1b58:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    1b5a:	0006      	movs	r6, r0
    1b5c:	4b61      	ldr	r3, [pc, #388]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1b5e:	3360      	adds	r3, #96	; 0x60
    1b60:	0081      	lsls	r1, r0, #2
    1b62:	180f      	adds	r7, r1, r0
    1b64:	00bc      	lsls	r4, r7, #2
    1b66:	3410      	adds	r4, #16
    1b68:	191c      	adds	r4, r3, r4
    1b6a:	3404      	adds	r4, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b6c:	00b8      	lsls	r0, r7, #2
    1b6e:	181b      	adds	r3, r3, r0
    1b70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1b72:	495d      	ldr	r1, [pc, #372]	; (1ce8 <_usb_d_dev_ep_trans+0x1bc>)
    1b74:	428b      	cmp	r3, r1
    1b76:	d044      	beq.n	1c02 <_usb_d_dev_ep_trans+0xd6>
    1b78:	1e5f      	subs	r7, r3, #1
    1b7a:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    1b7c:	4641      	mov	r1, r8
    1b7e:	6849      	ldr	r1, [r1, #4]
    1b80:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1b82:	2a02      	cmp	r2, #2
    1b84:	d900      	bls.n	1b88 <_usb_d_dev_ep_trans+0x5c>
    1b86:	e0a3      	b.n	1cd0 <_usb_d_dev_ep_trans+0x1a4>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1b88:	4642      	mov	r2, r8
    1b8a:	6812      	ldr	r2, [r2, #0]
    1b8c:	4857      	ldr	r0, [pc, #348]	; (1cec <_usb_d_dev_ep_trans+0x1c0>)
    1b8e:	4282      	cmp	r2, r0
    1b90:	d90c      	bls.n	1bac <_usb_d_dev_ep_trans+0x80>
    1b92:	1888      	adds	r0, r1, r2
    1b94:	9001      	str	r0, [sp, #4]
    1b96:	4856      	ldr	r0, [pc, #344]	; (1cf0 <_usb_d_dev_ep_trans+0x1c4>)
    1b98:	4684      	mov	ip, r0
    1b9a:	9801      	ldr	r0, [sp, #4]
    1b9c:	4560      	cmp	r0, ip
    1b9e:	d805      	bhi.n	1bac <_usb_d_dev_ep_trans+0x80>
    1ba0:	0792      	lsls	r2, r2, #30
    1ba2:	d103      	bne.n	1bac <_usb_d_dev_ep_trans+0x80>
	    || (!dir && (trans->size < ept->size))) {
    1ba4:	2d00      	cmp	r5, #0
    1ba6:	db2e      	blt.n	1c06 <_usb_d_dev_ep_trans+0xda>
    1ba8:	4299      	cmp	r1, r3
    1baa:	d22f      	bcs.n	1c0c <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    1bac:	00b2      	lsls	r2, r6, #2
    1bae:	1992      	adds	r2, r2, r6
    1bb0:	0091      	lsls	r1, r2, #2
    1bb2:	4b4c      	ldr	r3, [pc, #304]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1bb4:	185b      	adds	r3, r3, r1
    1bb6:	3380      	adds	r3, #128	; 0x80
    1bb8:	681b      	ldr	r3, [r3, #0]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d100      	bne.n	1bc0 <_usb_d_dev_ep_trans+0x94>
    1bbe:	e08a      	b.n	1cd6 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    1bc0:	2301      	movs	r3, #1
    1bc2:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    1bc4:	2d00      	cmp	r5, #0
    1bc6:	db0b      	blt.n	1be0 <_usb_d_dev_ep_trans+0xb4>
    1bc8:	2f00      	cmp	r7, #0
    1bca:	d009      	beq.n	1be0 <_usb_d_dev_ep_trans+0xb4>
		if (!ept->cache) {
    1bcc:	00b2      	lsls	r2, r6, #2
    1bce:	1992      	adds	r2, r2, r6
    1bd0:	0091      	lsls	r1, r2, #2
    1bd2:	4b44      	ldr	r3, [pc, #272]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1bd4:	185b      	adds	r3, r3, r1
    1bd6:	3380      	adds	r3, #128	; 0x80
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d100      	bne.n	1be0 <_usb_d_dev_ep_trans+0xb4>
    1bde:	e07d      	b.n	1cdc <_usb_d_dev_ep_trans+0x1b0>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1be0:	00b2      	lsls	r2, r6, #2
    1be2:	1992      	adds	r2, r2, r6
    1be4:	0091      	lsls	r1, r2, #2
    1be6:	4b3f      	ldr	r3, [pc, #252]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1be8:	185b      	adds	r3, r3, r1
    1bea:	3380      	adds	r3, #128	; 0x80
    1bec:	79db      	ldrb	r3, [r3, #7]
    1bee:	071b      	lsls	r3, r3, #28
    1bf0:	d50f      	bpl.n	1c12 <_usb_d_dev_ep_trans+0xe6>
		return USB_HALTED;
    1bf2:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1bf4:	b005      	add	sp, #20
    1bf6:	bc3c      	pop	{r2, r3, r4, r5}
    1bf8:	4690      	mov	r8, r2
    1bfa:	4699      	mov	r9, r3
    1bfc:	46a2      	mov	sl, r4
    1bfe:	46ab      	mov	fp, r5
    1c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1c02:	001f      	movs	r7, r3
    1c04:	e7ba      	b.n	1b7c <_usb_d_dev_ep_trans+0x50>
	bool use_cache = false;
    1c06:	2300      	movs	r3, #0
    1c08:	9301      	str	r3, [sp, #4]
    1c0a:	e7db      	b.n	1bc4 <_usb_d_dev_ep_trans+0x98>
    1c0c:	2300      	movs	r3, #0
    1c0e:	9301      	str	r3, [sp, #4]
    1c10:	e7d8      	b.n	1bc4 <_usb_d_dev_ep_trans+0x98>
	atomic_enter_critical(&flags);
    1c12:	a803      	add	r0, sp, #12
    1c14:	4b37      	ldr	r3, [pc, #220]	; (1cf4 <_usb_d_dev_ep_trans+0x1c8>)
    1c16:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1c18:	00b2      	lsls	r2, r6, #2
    1c1a:	1992      	adds	r2, r2, r6
    1c1c:	0091      	lsls	r1, r2, #2
    1c1e:	4b31      	ldr	r3, [pc, #196]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1c20:	185b      	adds	r3, r3, r1
    1c22:	3380      	adds	r3, #128	; 0x80
    1c24:	79db      	ldrb	r3, [r3, #7]
    1c26:	065b      	lsls	r3, r3, #25
    1c28:	d430      	bmi.n	1c8c <_usb_d_dev_ep_trans+0x160>
	ept->flags.bits.is_busy = 1;
    1c2a:	00b3      	lsls	r3, r6, #2
    1c2c:	199b      	adds	r3, r3, r6
    1c2e:	009a      	lsls	r2, r3, #2
    1c30:	4b2c      	ldr	r3, [pc, #176]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1c32:	469b      	mov	fp, r3
    1c34:	4493      	add	fp, r2
    1c36:	2380      	movs	r3, #128	; 0x80
    1c38:	445b      	add	r3, fp
    1c3a:	469a      	mov	sl, r3
    1c3c:	79db      	ldrb	r3, [r3, #7]
    1c3e:	2240      	movs	r2, #64	; 0x40
    1c40:	4313      	orrs	r3, r2
    1c42:	4652      	mov	r2, sl
    1c44:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1c46:	a803      	add	r0, sp, #12
    1c48:	4b2b      	ldr	r3, [pc, #172]	; (1cf8 <_usb_d_dev_ep_trans+0x1cc>)
    1c4a:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1c4c:	465b      	mov	r3, fp
    1c4e:	4642      	mov	r2, r8
    1c50:	6812      	ldr	r2, [r2, #0]
    1c52:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1c54:	4642      	mov	r2, r8
    1c56:	6852      	ldr	r2, [r2, #4]
    1c58:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1c5a:	2300      	movs	r3, #0
    1c5c:	465a      	mov	r2, fp
    1c5e:	67d3      	str	r3, [r2, #124]	; 0x7c
	ept->flags.bits.dir       = dir;
    1c60:	464b      	mov	r3, r9
    1c62:	01db      	lsls	r3, r3, #7
    1c64:	4652      	mov	r2, sl
    1c66:	79d2      	ldrb	r2, [r2, #7]
    1c68:	217f      	movs	r1, #127	; 0x7f
    1c6a:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    1c6c:	9a01      	ldr	r2, [sp, #4]
    1c6e:	0152      	lsls	r2, r2, #5
    1c70:	430b      	orrs	r3, r1
    1c72:	2120      	movs	r1, #32
    1c74:	438b      	bics	r3, r1
    1c76:	431a      	orrs	r2, r3
    1c78:	4653      	mov	r3, sl
    1c7a:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1c7c:	4643      	mov	r3, r8
    1c7e:	7a5b      	ldrb	r3, [r3, #9]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d008      	beq.n	1c96 <_usb_d_dev_ep_trans+0x16a>
    1c84:	2f00      	cmp	r7, #0
    1c86:	d01b      	beq.n	1cc0 <_usb_d_dev_ep_trans+0x194>
    1c88:	2200      	movs	r2, #0
    1c8a:	e005      	b.n	1c98 <_usb_d_dev_ep_trans+0x16c>
		atomic_leave_critical(&flags);
    1c8c:	a803      	add	r0, sp, #12
    1c8e:	4b1a      	ldr	r3, [pc, #104]	; (1cf8 <_usb_d_dev_ep_trans+0x1cc>)
    1c90:	4798      	blx	r3
		return USB_BUSY;
    1c92:	2001      	movs	r0, #1
    1c94:	e7ae      	b.n	1bf4 <_usb_d_dev_ep_trans+0xc8>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1c96:	2200      	movs	r2, #0
    1c98:	00b3      	lsls	r3, r6, #2
    1c9a:	199e      	adds	r6, r3, r6
    1c9c:	00b1      	lsls	r1, r6, #2
    1c9e:	4b11      	ldr	r3, [pc, #68]	; (1ce4 <_usb_d_dev_ep_trans+0x1b8>)
    1ca0:	185b      	adds	r3, r3, r1
    1ca2:	3380      	adds	r3, #128	; 0x80
    1ca4:	0111      	lsls	r1, r2, #4
    1ca6:	79da      	ldrb	r2, [r3, #7]
    1ca8:	2010      	movs	r0, #16
    1caa:	4382      	bics	r2, r0
    1cac:	430a      	orrs	r2, r1
    1cae:	71da      	strb	r2, [r3, #7]
	if (dir) {
    1cb0:	2d00      	cmp	r5, #0
    1cb2:	db07      	blt.n	1cc4 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_out_next(ept, false);
    1cb4:	2100      	movs	r1, #0
    1cb6:	0020      	movs	r0, r4
    1cb8:	4b10      	ldr	r3, [pc, #64]	; (1cfc <_usb_d_dev_ep_trans+0x1d0>)
    1cba:	4798      	blx	r3
	return ERR_NONE;
    1cbc:	2000      	movs	r0, #0
    1cbe:	e799      	b.n	1bf4 <_usb_d_dev_ep_trans+0xc8>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1cc0:	2201      	movs	r2, #1
    1cc2:	e7e9      	b.n	1c98 <_usb_d_dev_ep_trans+0x16c>
		_usb_d_dev_in_next(ept, false);
    1cc4:	2100      	movs	r1, #0
    1cc6:	0020      	movs	r0, r4
    1cc8:	4b0d      	ldr	r3, [pc, #52]	; (1d00 <_usb_d_dev_ep_trans+0x1d4>)
    1cca:	4798      	blx	r3
	return ERR_NONE;
    1ccc:	2000      	movs	r0, #0
    1cce:	e791      	b.n	1bf4 <_usb_d_dev_ep_trans+0xc8>
		return -USB_ERR_PARAM;
    1cd0:	2012      	movs	r0, #18
    1cd2:	4240      	negs	r0, r0
    1cd4:	e78e      	b.n	1bf4 <_usb_d_dev_ep_trans+0xc8>
			return -USB_ERR_FUNC;
    1cd6:	2013      	movs	r0, #19
    1cd8:	4240      	negs	r0, r0
    1cda:	e78b      	b.n	1bf4 <_usb_d_dev_ep_trans+0xc8>
			return -USB_ERR_PARAM;
    1cdc:	2012      	movs	r0, #18
    1cde:	4240      	negs	r0, r0
    1ce0:	e788      	b.n	1bf4 <_usb_d_dev_ep_trans+0xc8>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	20000104 	.word	0x20000104
    1ce8:	000003ff 	.word	0x000003ff
    1cec:	1fffffff 	.word	0x1fffffff
    1cf0:	20007fff 	.word	0x20007fff
    1cf4:	000002d9 	.word	0x000002d9
    1cf8:	000002e7 	.word	0x000002e7
    1cfc:	00000edd 	.word	0x00000edd
    1d00:	00000d51 	.word	0x00000d51

00001d04 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1d04:	2900      	cmp	r1, #0
    1d06:	d006      	beq.n	1d16 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    1d08:	2801      	cmp	r0, #1
    1d0a:	d006      	beq.n	1d1a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1d0c:	2800      	cmp	r0, #0
    1d0e:	d101      	bne.n	1d14 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1d10:	4b03      	ldr	r3, [pc, #12]	; (1d20 <_usb_d_dev_register_callback+0x1c>)
    1d12:	6619      	str	r1, [r3, #96]	; 0x60
	}
}
    1d14:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1d16:	4903      	ldr	r1, [pc, #12]	; (1d24 <_usb_d_dev_register_callback+0x20>)
    1d18:	e7f6      	b.n	1d08 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1d1a:	4b01      	ldr	r3, [pc, #4]	; (1d20 <_usb_d_dev_register_callback+0x1c>)
    1d1c:	6659      	str	r1, [r3, #100]	; 0x64
    1d1e:	e7f9      	b.n	1d14 <_usb_d_dev_register_callback+0x10>
    1d20:	20000104 	.word	0x20000104
    1d24:	00000a35 	.word	0x00000a35

00001d28 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1d28:	2900      	cmp	r1, #0
    1d2a:	d008      	beq.n	1d3e <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d008      	beq.n	1d42 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1d30:	2801      	cmp	r0, #1
    1d32:	d009      	beq.n	1d48 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1d34:	2802      	cmp	r0, #2
    1d36:	d106      	bne.n	1d46 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1d38:	4b05      	ldr	r3, [pc, #20]	; (1d50 <_usb_d_dev_register_ep_callback+0x28>)
    1d3a:	6719      	str	r1, [r3, #112]	; 0x70
	}
}
    1d3c:	e003      	b.n	1d46 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1d3e:	4905      	ldr	r1, [pc, #20]	; (1d54 <_usb_d_dev_register_ep_callback+0x2c>)
    1d40:	e7f4      	b.n	1d2c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1d42:	4b03      	ldr	r3, [pc, #12]	; (1d50 <_usb_d_dev_register_ep_callback+0x28>)
    1d44:	6699      	str	r1, [r3, #104]	; 0x68
}
    1d46:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1d48:	4b01      	ldr	r3, [pc, #4]	; (1d50 <_usb_d_dev_register_ep_callback+0x28>)
    1d4a:	66d9      	str	r1, [r3, #108]	; 0x6c
    1d4c:	e7fb      	b.n	1d46 <_usb_d_dev_register_ep_callback+0x1e>
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	20000104 	.word	0x20000104
    1d54:	00000a35 	.word	0x00000a35

00001d58 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1d58:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    1d5a:	4b01      	ldr	r3, [pc, #4]	; (1d60 <USB_Handler+0x8>)
    1d5c:	4798      	blx	r3
}
    1d5e:	bd10      	pop	{r4, pc}
    1d60:	000010e1 	.word	0x000010e1

00001d64 <main>:
#include <atmel_start.h>

int main(void)
{
    1d64:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1d66:	4b02      	ldr	r3, [pc, #8]	; (1d70 <main+0xc>)
    1d68:	4798      	blx	r3

	/* Replace with your application code */
	while (1) 
	{
		cdcd_acm_example();
    1d6a:	4b02      	ldr	r3, [pc, #8]	; (1d74 <main+0x10>)
    1d6c:	4798      	blx	r3
    1d6e:	e7fc      	b.n	1d6a <main+0x6>
    1d70:	00000115 	.word	0x00000115
    1d74:	00002ab9 	.word	0x00002ab9

00001d78 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1d78:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    1d7a:	798b      	ldrb	r3, [r1, #6]
    1d7c:	79cc      	ldrb	r4, [r1, #7]
    1d7e:	0224      	lsls	r4, r4, #8
    1d80:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    1d82:	2a01      	cmp	r2, #1
    1d84:	d00a      	beq.n	1d9c <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    1d86:	784b      	ldrb	r3, [r1, #1]
    1d88:	2b21      	cmp	r3, #33	; 0x21
    1d8a:	d109      	bne.n	1da0 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1d8c:	2c07      	cmp	r4, #7
    1d8e:	d10a      	bne.n	1da6 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    1d90:	2300      	movs	r3, #0
    1d92:	0022      	movs	r2, r4
    1d94:	4905      	ldr	r1, [pc, #20]	; (1dac <cdcdf_acm_get_req+0x34>)
    1d96:	4c06      	ldr	r4, [pc, #24]	; (1db0 <cdcdf_acm_get_req+0x38>)
    1d98:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    1d9a:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    1d9c:	2000      	movs	r0, #0
    1d9e:	e7fc      	b.n	1d9a <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    1da0:	200d      	movs	r0, #13
    1da2:	4240      	negs	r0, r0
    1da4:	e7f9      	b.n	1d9a <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    1da6:	2001      	movs	r0, #1
    1da8:	4240      	negs	r0, r0
    1daa:	e7f6      	b.n	1d9a <cdcdf_acm_get_req+0x22>
    1dac:	200002ec 	.word	0x200002ec
    1db0:	000023ad 	.word	0x000023ad

00001db4 <cdcdf_acm_set_req>:
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	b083      	sub	sp, #12
    1db8:	0005      	movs	r5, r0
    1dba:	000f      	movs	r7, r1
    1dbc:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    1dbe:	798e      	ldrb	r6, [r1, #6]
    1dc0:	79cb      	ldrb	r3, [r1, #7]
    1dc2:	021b      	lsls	r3, r3, #8
    1dc4:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1dc6:	4b23      	ldr	r3, [pc, #140]	; (1e54 <cdcdf_acm_set_req+0xa0>)
    1dc8:	4798      	blx	r3
	switch (req->bRequest) {
    1dca:	787b      	ldrb	r3, [r7, #1]
    1dcc:	2b20      	cmp	r3, #32
    1dce:	d005      	beq.n	1ddc <cdcdf_acm_set_req+0x28>
    1dd0:	2b22      	cmp	r3, #34	; 0x22
    1dd2:	d026      	beq.n	1e22 <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    1dd4:	200d      	movs	r0, #13
    1dd6:	4240      	negs	r0, r0
}
    1dd8:	b003      	add	sp, #12
    1dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1ddc:	2e07      	cmp	r6, #7
    1dde:	d131      	bne.n	1e44 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    1de0:	2c00      	cmp	r4, #0
    1de2:	d017      	beq.n	1e14 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    1de4:	2207      	movs	r2, #7
    1de6:	0001      	movs	r1, r0
    1de8:	4668      	mov	r0, sp
    1dea:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <cdcdf_acm_set_req+0xa4>)
    1dec:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1dee:	4b1b      	ldr	r3, [pc, #108]	; (1e5c <cdcdf_acm_set_req+0xa8>)
    1df0:	689b      	ldr	r3, [r3, #8]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d003      	beq.n	1dfe <cdcdf_acm_set_req+0x4a>
    1df6:	4668      	mov	r0, sp
    1df8:	4798      	blx	r3
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d025      	beq.n	1e4a <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    1dfe:	4b17      	ldr	r3, [pc, #92]	; (1e5c <cdcdf_acm_set_req+0xa8>)
    1e00:	9a00      	ldr	r2, [sp, #0]
    1e02:	601a      	str	r2, [r3, #0]
    1e04:	466a      	mov	r2, sp
    1e06:	8892      	ldrh	r2, [r2, #4]
    1e08:	809a      	strh	r2, [r3, #4]
    1e0a:	466a      	mov	r2, sp
    1e0c:	7992      	ldrb	r2, [r2, #6]
    1e0e:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    1e10:	2000      	movs	r0, #0
    1e12:	e7e1      	b.n	1dd8 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1e14:	2300      	movs	r3, #0
    1e16:	0032      	movs	r2, r6
    1e18:	0001      	movs	r1, r0
    1e1a:	0028      	movs	r0, r5
    1e1c:	4c10      	ldr	r4, [pc, #64]	; (1e60 <cdcdf_acm_set_req+0xac>)
    1e1e:	47a0      	blx	r4
    1e20:	e7da      	b.n	1dd8 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    1e22:	2300      	movs	r3, #0
    1e24:	2200      	movs	r2, #0
    1e26:	2100      	movs	r1, #0
    1e28:	2000      	movs	r0, #0
    1e2a:	4c0d      	ldr	r4, [pc, #52]	; (1e60 <cdcdf_acm_set_req+0xac>)
    1e2c:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <cdcdf_acm_set_req+0xa8>)
    1e30:	68db      	ldr	r3, [r3, #12]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d00b      	beq.n	1e4e <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    1e36:	78ba      	ldrb	r2, [r7, #2]
    1e38:	78f8      	ldrb	r0, [r7, #3]
    1e3a:	0200      	lsls	r0, r0, #8
    1e3c:	4310      	orrs	r0, r2
    1e3e:	4798      	blx	r3
		return ERR_NONE;
    1e40:	2000      	movs	r0, #0
    1e42:	e7c9      	b.n	1dd8 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    1e44:	2001      	movs	r0, #1
    1e46:	4240      	negs	r0, r0
    1e48:	e7c6      	b.n	1dd8 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    1e4a:	2000      	movs	r0, #0
    1e4c:	e7c4      	b.n	1dd8 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    1e4e:	2000      	movs	r0, #0
    1e50:	e7c2      	b.n	1dd8 <cdcdf_acm_set_req+0x24>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	00002939 	.word	0x00002939
    1e58:	00002b2d 	.word	0x00002b2d
    1e5c:	200002ec 	.word	0x200002ec
    1e60:	000023ad 	.word	0x000023ad

00001e64 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1e64:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1e66:	780c      	ldrb	r4, [r1, #0]
    1e68:	0965      	lsrs	r5, r4, #5
    1e6a:	2303      	movs	r3, #3
    1e6c:	402b      	ands	r3, r5
    1e6e:	2b01      	cmp	r3, #1
    1e70:	d114      	bne.n	1e9c <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1e72:	790d      	ldrb	r5, [r1, #4]
    1e74:	794b      	ldrb	r3, [r1, #5]
    1e76:	021b      	lsls	r3, r3, #8
    1e78:	432b      	orrs	r3, r5
    1e7a:	4d0b      	ldr	r5, [pc, #44]	; (1ea8 <cdcdf_acm_req+0x44>)
    1e7c:	7c2d      	ldrb	r5, [r5, #16]
    1e7e:	42ab      	cmp	r3, r5
    1e80:	d003      	beq.n	1e8a <cdcdf_acm_req+0x26>
    1e82:	4d09      	ldr	r5, [pc, #36]	; (1ea8 <cdcdf_acm_req+0x44>)
    1e84:	7c6d      	ldrb	r5, [r5, #17]
    1e86:	42ab      	cmp	r3, r5
    1e88:	d10b      	bne.n	1ea2 <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1e8a:	b264      	sxtb	r4, r4
    1e8c:	2c00      	cmp	r4, #0
    1e8e:	db02      	blt.n	1e96 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    1e90:	4b06      	ldr	r3, [pc, #24]	; (1eac <cdcdf_acm_req+0x48>)
    1e92:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1e94:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    1e96:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <cdcdf_acm_req+0x4c>)
    1e98:	4798      	blx	r3
    1e9a:	e7fb      	b.n	1e94 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    1e9c:	200a      	movs	r0, #10
    1e9e:	4240      	negs	r0, r0
    1ea0:	e7f8      	b.n	1e94 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    1ea2:	200a      	movs	r0, #10
    1ea4:	4240      	negs	r0, r0
    1ea6:	e7f5      	b.n	1e94 <cdcdf_acm_req+0x30>
    1ea8:	200002ec 	.word	0x200002ec
    1eac:	00001db5 	.word	0x00001db5
    1eb0:	00001d79 	.word	0x00001d79

00001eb4 <cdcdf_acm_enable>:
{
    1eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eb6:	46ce      	mov	lr, r9
    1eb8:	4647      	mov	r7, r8
    1eba:	b580      	push	{r7, lr}
    1ebc:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    1ebe:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    1ec0:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    1ec2:	2300      	movs	r3, #0
    1ec4:	4698      	mov	r8, r3
    1ec6:	4643      	mov	r3, r8
    1ec8:	2b01      	cmp	r3, #1
    1eca:	d845      	bhi.n	1f58 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    1ecc:	2800      	cmp	r0, #0
    1ece:	d04b      	beq.n	1f68 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    1ed0:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    1ed2:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1ed4:	2a02      	cmp	r2, #2
    1ed6:	d001      	beq.n	1edc <cdcdf_acm_enable+0x28>
    1ed8:	2a0a      	cmp	r2, #10
    1eda:	d148      	bne.n	1f6e <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    1edc:	46c1      	mov	r9, r8
    1ede:	4642      	mov	r2, r8
    1ee0:	5cba      	ldrb	r2, [r7, r2]
    1ee2:	4293      	cmp	r3, r2
    1ee4:	d046      	beq.n	1f74 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    1ee6:	2aff      	cmp	r2, #255	; 0xff
    1ee8:	d147      	bne.n	1f7a <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    1eea:	4642      	mov	r2, r8
    1eec:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    1eee:	2205      	movs	r2, #5
    1ef0:	6871      	ldr	r1, [r6, #4]
    1ef2:	4b25      	ldr	r3, [pc, #148]	; (1f88 <cdcdf_acm_enable+0xd4>)
    1ef4:	4798      	blx	r3
    1ef6:	0004      	movs	r4, r0
		while (NULL != ep) {
    1ef8:	e00c      	b.n	1f14 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    1efa:	464b      	mov	r3, r9
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    1f00:	0028      	movs	r0, r5
    1f02:	4b22      	ldr	r3, [pc, #136]	; (1f8c <cdcdf_acm_enable+0xd8>)
    1f04:	4798      	blx	r3
			desc->sod = ep;
    1f06:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    1f08:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    1f0a:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    1f0c:	6871      	ldr	r1, [r6, #4]
    1f0e:	4b20      	ldr	r3, [pc, #128]	; (1f90 <cdcdf_acm_enable+0xdc>)
    1f10:	4798      	blx	r3
    1f12:	0004      	movs	r4, r0
		while (NULL != ep) {
    1f14:	2c00      	cmp	r4, #0
    1f16:	d013      	beq.n	1f40 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    1f18:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    1f1a:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    1f1c:	7922      	ldrb	r2, [r4, #4]
    1f1e:	7963      	ldrb	r3, [r4, #5]
    1f20:	021b      	lsls	r3, r3, #8
    1f22:	18d2      	adds	r2, r2, r3
    1f24:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    1f26:	0028      	movs	r0, r5
    1f28:	4b1a      	ldr	r3, [pc, #104]	; (1f94 <cdcdf_acm_enable+0xe0>)
    1f2a:	4798      	blx	r3
    1f2c:	2800      	cmp	r0, #0
    1f2e:	d127      	bne.n	1f80 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    1f30:	b26b      	sxtb	r3, r5
    1f32:	2b00      	cmp	r3, #0
    1f34:	dbe1      	blt.n	1efa <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    1f36:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    1f38:	0028      	movs	r0, r5
    1f3a:	4b14      	ldr	r3, [pc, #80]	; (1f8c <cdcdf_acm_enable+0xd8>)
    1f3c:	4798      	blx	r3
    1f3e:	e7e2      	b.n	1f06 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    1f40:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    1f42:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    1f44:	18c0      	adds	r0, r0, r3
    1f46:	2204      	movs	r2, #4
    1f48:	6871      	ldr	r1, [r6, #4]
    1f4a:	4b0f      	ldr	r3, [pc, #60]	; (1f88 <cdcdf_acm_enable+0xd4>)
    1f4c:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    1f4e:	4643      	mov	r3, r8
    1f50:	3301      	adds	r3, #1
    1f52:	b2db      	uxtb	r3, r3
    1f54:	4698      	mov	r8, r3
    1f56:	e7b6      	b.n	1ec6 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    1f58:	2201      	movs	r2, #1
    1f5a:	4b0f      	ldr	r3, [pc, #60]	; (1f98 <cdcdf_acm_enable+0xe4>)
    1f5c:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    1f5e:	2000      	movs	r0, #0
}
    1f60:	bc0c      	pop	{r2, r3}
    1f62:	4690      	mov	r8, r2
    1f64:	4699      	mov	r9, r3
    1f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    1f68:	200a      	movs	r0, #10
    1f6a:	4240      	negs	r0, r0
    1f6c:	e7f8      	b.n	1f60 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    1f6e:	200a      	movs	r0, #10
    1f70:	4240      	negs	r0, r0
    1f72:	e7f5      	b.n	1f60 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    1f74:	2012      	movs	r0, #18
    1f76:	4240      	negs	r0, r0
    1f78:	e7f2      	b.n	1f60 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    1f7a:	201c      	movs	r0, #28
    1f7c:	4240      	negs	r0, r0
    1f7e:	e7ef      	b.n	1f60 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    1f80:	2014      	movs	r0, #20
    1f82:	4240      	negs	r0, r0
    1f84:	e7ec      	b.n	1f60 <cdcdf_acm_enable+0xac>
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00002955 	.word	0x00002955
    1f8c:	00000671 	.word	0x00000671
    1f90:	00002973 	.word	0x00002973
    1f94:	000005dd 	.word	0x000005dd
    1f98:	200002ec 	.word	0x200002ec

00001f9c <cdcdf_acm_disable>:
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    1f9e:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    1fa0:	2900      	cmp	r1, #0
    1fa2:	d01a      	beq.n	1fda <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    1fa4:	680b      	ldr	r3, [r1, #0]
    1fa6:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    1fa8:	2b02      	cmp	r3, #2
    1faa:	d018      	beq.n	1fde <cdcdf_acm_disable+0x42>
    1fac:	2b0a      	cmp	r3, #10
    1fae:	d124      	bne.n	1ffa <cdcdf_acm_disable+0x5e>
    1fb0:	2400      	movs	r4, #0
    1fb2:	e001      	b.n	1fb8 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    1fb4:	3401      	adds	r4, #1
    1fb6:	b2e4      	uxtb	r4, r4
    1fb8:	2c01      	cmp	r4, #1
    1fba:	d812      	bhi.n	1fe2 <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    1fbc:	5d2b      	ldrb	r3, [r5, r4]
    1fbe:	2bff      	cmp	r3, #255	; 0xff
    1fc0:	d0f8      	beq.n	1fb4 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    1fc2:	23ff      	movs	r3, #255	; 0xff
    1fc4:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    1fc6:	192b      	adds	r3, r5, r4
    1fc8:	7898      	ldrb	r0, [r3, #2]
    1fca:	28ff      	cmp	r0, #255	; 0xff
    1fcc:	d0f2      	beq.n	1fb4 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    1fce:	4b0c      	ldr	r3, [pc, #48]	; (2000 <STACK_SIZE>)
    1fd0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    1fd2:	192e      	adds	r6, r5, r4
    1fd4:	22ff      	movs	r2, #255	; 0xff
    1fd6:	70b2      	strb	r2, [r6, #2]
    1fd8:	e7ec      	b.n	1fb4 <cdcdf_acm_disable+0x18>
    1fda:	2400      	movs	r4, #0
    1fdc:	e7ec      	b.n	1fb8 <cdcdf_acm_disable+0x1c>
    1fde:	2400      	movs	r4, #0
    1fe0:	e7ea      	b.n	1fb8 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    1fe2:	7928      	ldrb	r0, [r5, #4]
    1fe4:	28ff      	cmp	r0, #255	; 0xff
    1fe6:	d003      	beq.n	1ff0 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    1fe8:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fea:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    1fec:	23ff      	movs	r3, #255	; 0xff
    1fee:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    1ff0:	2200      	movs	r2, #0
    1ff2:	4b04      	ldr	r3, [pc, #16]	; (2004 <STACK_SIZE+0x4>)
    1ff4:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    1ff6:	2000      	movs	r0, #0
}
    1ff8:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    1ffa:	200a      	movs	r0, #10
    1ffc:	4240      	negs	r0, r0
    1ffe:	e7fb      	b.n	1ff8 <cdcdf_acm_disable+0x5c>
    2000:	00000645 	.word	0x00000645
    2004:	200002ec 	.word	0x200002ec

00002008 <cdcdf_acm_ctrl>:
{
    2008:	b510      	push	{r4, lr}
	switch (ctrl) {
    200a:	2901      	cmp	r1, #1
    200c:	d00a      	beq.n	2024 <cdcdf_acm_ctrl+0x1c>
    200e:	2900      	cmp	r1, #0
    2010:	d004      	beq.n	201c <cdcdf_acm_ctrl+0x14>
    2012:	2902      	cmp	r1, #2
    2014:	d10a      	bne.n	202c <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    2016:	201b      	movs	r0, #27
    2018:	4240      	negs	r0, r0
}
    201a:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    201c:	0011      	movs	r1, r2
    201e:	4b05      	ldr	r3, [pc, #20]	; (2034 <cdcdf_acm_ctrl+0x2c>)
    2020:	4798      	blx	r3
    2022:	e7fa      	b.n	201a <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    2024:	0011      	movs	r1, r2
    2026:	4b04      	ldr	r3, [pc, #16]	; (2038 <cdcdf_acm_ctrl+0x30>)
    2028:	4798      	blx	r3
    202a:	e7f6      	b.n	201a <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    202c:	200d      	movs	r0, #13
    202e:	4240      	negs	r0, r0
    2030:	e7f3      	b.n	201a <cdcdf_acm_ctrl+0x12>
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	00001eb5 	.word	0x00001eb5
    2038:	00001f9d 	.word	0x00001f9d

0000203c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    203c:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    203e:	4b0b      	ldr	r3, [pc, #44]	; (206c <cdcdf_acm_init+0x30>)
    2040:	4798      	blx	r3
    2042:	2801      	cmp	r0, #1
    2044:	d80e      	bhi.n	2064 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2046:	480a      	ldr	r0, [pc, #40]	; (2070 <cdcdf_acm_init+0x34>)
    2048:	4b0a      	ldr	r3, [pc, #40]	; (2074 <cdcdf_acm_init+0x38>)
    204a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    204c:	0003      	movs	r3, r0
    204e:	3310      	adds	r3, #16
    2050:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2052:	3018      	adds	r0, #24
    2054:	4b08      	ldr	r3, [pc, #32]	; (2078 <cdcdf_acm_init+0x3c>)
    2056:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2058:	4908      	ldr	r1, [pc, #32]	; (207c <cdcdf_acm_init+0x40>)
    205a:	2001      	movs	r0, #1
    205c:	4b08      	ldr	r3, [pc, #32]	; (2080 <cdcdf_acm_init+0x44>)
    205e:	4798      	blx	r3
	return ERR_NONE;
    2060:	2000      	movs	r0, #0
}
    2062:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2064:	2011      	movs	r0, #17
    2066:	4240      	negs	r0, r0
    2068:	e7fb      	b.n	2062 <cdcdf_acm_init+0x26>
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	00002945 	.word	0x00002945
    2070:	200002ec 	.word	0x200002ec
    2074:	00002009 	.word	0x00002009
    2078:	000028dd 	.word	0x000028dd
    207c:	20000000 	.word	0x20000000
    2080:	00002845 	.word	0x00002845

00002084 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    2084:	b510      	push	{r4, lr}
	switch (cb_type) {
    2086:	2801      	cmp	r0, #1
    2088:	d010      	beq.n	20ac <cdcdf_acm_register_callback+0x28>
    208a:	2800      	cmp	r0, #0
    208c:	d006      	beq.n	209c <cdcdf_acm_register_callback+0x18>
    208e:	2802      	cmp	r0, #2
    2090:	d014      	beq.n	20bc <cdcdf_acm_register_callback+0x38>
    2092:	2803      	cmp	r0, #3
    2094:	d016      	beq.n	20c4 <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    2096:	200d      	movs	r0, #13
    2098:	4240      	negs	r0, r0
    209a:	e006      	b.n	20aa <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    209c:	4b0b      	ldr	r3, [pc, #44]	; (20cc <cdcdf_acm_register_callback+0x48>)
    209e:	7d18      	ldrb	r0, [r3, #20]
    20a0:	000a      	movs	r2, r1
    20a2:	2102      	movs	r1, #2
    20a4:	4b0a      	ldr	r3, [pc, #40]	; (20d0 <cdcdf_acm_register_callback+0x4c>)
    20a6:	4798      	blx	r3
	}
	return ERR_NONE;
    20a8:	2000      	movs	r0, #0
}
    20aa:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    20ac:	4b07      	ldr	r3, [pc, #28]	; (20cc <cdcdf_acm_register_callback+0x48>)
    20ae:	7cd8      	ldrb	r0, [r3, #19]
    20b0:	000a      	movs	r2, r1
    20b2:	2102      	movs	r1, #2
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <cdcdf_acm_register_callback+0x4c>)
    20b6:	4798      	blx	r3
	return ERR_NONE;
    20b8:	2000      	movs	r0, #0
		break;
    20ba:	e7f6      	b.n	20aa <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    20bc:	4b03      	ldr	r3, [pc, #12]	; (20cc <cdcdf_acm_register_callback+0x48>)
    20be:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    20c0:	2000      	movs	r0, #0
		break;
    20c2:	e7f2      	b.n	20aa <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    20c4:	4b01      	ldr	r3, [pc, #4]	; (20cc <cdcdf_acm_register_callback+0x48>)
    20c6:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    20c8:	2000      	movs	r0, #0
		break;
    20ca:	e7ee      	b.n	20aa <cdcdf_acm_register_callback+0x26>
    20cc:	200002ec 	.word	0x200002ec
    20d0:	0000084d 	.word	0x0000084d

000020d4 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    20d4:	4b01      	ldr	r3, [pc, #4]	; (20dc <cdcdf_acm_is_enabled+0x8>)
    20d6:	7d58      	ldrb	r0, [r3, #21]
}
    20d8:	4770      	bx	lr
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	200002ec 	.word	0x200002ec

000020e0 <cdcdf_acm_read>:
{
    20e0:	b570      	push	{r4, r5, r6, lr}
    20e2:	0004      	movs	r4, r0
    20e4:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    20e6:	4b07      	ldr	r3, [pc, #28]	; (2104 <cdcdf_acm_read+0x24>)
    20e8:	4798      	blx	r3
    20ea:	2800      	cmp	r0, #0
    20ec:	d007      	beq.n	20fe <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    20ee:	4b06      	ldr	r3, [pc, #24]	; (2108 <cdcdf_acm_read+0x28>)
    20f0:	7d18      	ldrb	r0, [r3, #20]
    20f2:	2300      	movs	r3, #0
    20f4:	002a      	movs	r2, r5
    20f6:	0021      	movs	r1, r4
    20f8:	4c04      	ldr	r4, [pc, #16]	; (210c <cdcdf_acm_read+0x2c>)
    20fa:	47a0      	blx	r4
}
    20fc:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    20fe:	2011      	movs	r0, #17
    2100:	4240      	negs	r0, r0
    2102:	e7fb      	b.n	20fc <cdcdf_acm_read+0x1c>
    2104:	000020d5 	.word	0x000020d5
    2108:	200002ec 	.word	0x200002ec
    210c:	000023ad 	.word	0x000023ad

00002110 <cdcdf_acm_write>:
{
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	0004      	movs	r4, r0
    2114:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    2116:	4b07      	ldr	r3, [pc, #28]	; (2134 <cdcdf_acm_write+0x24>)
    2118:	4798      	blx	r3
    211a:	2800      	cmp	r0, #0
    211c:	d007      	beq.n	212e <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    211e:	4b06      	ldr	r3, [pc, #24]	; (2138 <cdcdf_acm_write+0x28>)
    2120:	7cd8      	ldrb	r0, [r3, #19]
    2122:	2301      	movs	r3, #1
    2124:	002a      	movs	r2, r5
    2126:	0021      	movs	r1, r4
    2128:	4c04      	ldr	r4, [pc, #16]	; (213c <cdcdf_acm_write+0x2c>)
    212a:	47a0      	blx	r4
}
    212c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    212e:	2011      	movs	r0, #17
    2130:	4240      	negs	r0, r0
    2132:	e7fb      	b.n	212c <cdcdf_acm_write+0x1c>
    2134:	000020d5 	.word	0x000020d5
    2138:	200002ec 	.word	0x200002ec
    213c:	000023ad 	.word	0x000023ad

00002140 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2140:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2142:	4b06      	ldr	r3, [pc, #24]	; (215c <usbdc_unconfig+0x1c>)
    2144:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2146:	e005      	b.n	2154 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2148:	2200      	movs	r2, #0
    214a:	2101      	movs	r1, #1
    214c:	0020      	movs	r0, r4
    214e:	6863      	ldr	r3, [r4, #4]
    2150:	4798      	blx	r3
		func = func->next;
    2152:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2154:	2c00      	cmp	r4, #0
    2156:	d1f7      	bne.n	2148 <usbdc_unconfig+0x8>
	}
}
    2158:	bd10      	pop	{r4, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	20000310 	.word	0x20000310

00002160 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    2160:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2162:	4b06      	ldr	r3, [pc, #24]	; (217c <usbdc_sof_notify+0x1c>)
    2164:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    2166:	e000      	b.n	216a <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    2168:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    216a:	2c00      	cmp	r4, #0
    216c:	d004      	beq.n	2178 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    216e:	6863      	ldr	r3, [r4, #4]
    2170:	2b00      	cmp	r3, #0
    2172:	d0f9      	beq.n	2168 <usbdc_sof_notify+0x8>
			sof->cb();
    2174:	4798      	blx	r3
    2176:	e7f7      	b.n	2168 <usbdc_sof_notify+0x8>
	}
}
    2178:	bd10      	pop	{r4, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	20000310 	.word	0x20000310

00002180 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2180:	b570      	push	{r4, r5, r6, lr}
    2182:	0006      	movs	r6, r0
    2184:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2186:	4b07      	ldr	r3, [pc, #28]	; (21a4 <usbdc_change_notify+0x24>)
    2188:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    218a:	e000      	b.n	218e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    218c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    218e:	2c00      	cmp	r4, #0
    2190:	d006      	beq.n	21a0 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    2192:	6863      	ldr	r3, [r4, #4]
    2194:	2b00      	cmp	r3, #0
    2196:	d0f9      	beq.n	218c <usbdc_change_notify+0xc>
			cg->cb(change, value);
    2198:	0029      	movs	r1, r5
    219a:	0030      	movs	r0, r6
    219c:	4798      	blx	r3
    219e:	e7f5      	b.n	218c <usbdc_change_notify+0xc>
	}
}
    21a0:	bd70      	pop	{r4, r5, r6, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	20000310 	.word	0x20000310

000021a8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    21a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21aa:	0007      	movs	r7, r0
    21ac:	000e      	movs	r6, r1
    21ae:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    21b0:	4b0b      	ldr	r3, [pc, #44]	; (21e0 <usbdc_request_handler+0x38>)
    21b2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    21b4:	e000      	b.n	21b8 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    21b6:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    21b8:	2c00      	cmp	r4, #0
    21ba:	d00d      	beq.n	21d8 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    21bc:	6863      	ldr	r3, [r4, #4]
    21be:	2b00      	cmp	r3, #0
    21c0:	d0f9      	beq.n	21b6 <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    21c2:	002a      	movs	r2, r5
    21c4:	0031      	movs	r1, r6
    21c6:	0038      	movs	r0, r7
    21c8:	4798      	blx	r3
			if (0 == rc) {
    21ca:	2800      	cmp	r0, #0
    21cc:	d006      	beq.n	21dc <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    21ce:	300a      	adds	r0, #10
    21d0:	d0f1      	beq.n	21b6 <usbdc_request_handler+0xe>
				return -1;
    21d2:	2001      	movs	r0, #1
    21d4:	4240      	negs	r0, r0
    21d6:	e000      	b.n	21da <usbdc_request_handler+0x32>
	}
	return false;
    21d8:	2000      	movs	r0, #0
}
    21da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    21dc:	2001      	movs	r0, #1
    21de:	e7fc      	b.n	21da <usbdc_request_handler+0x32>
    21e0:	20000310 	.word	0x20000310

000021e4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    21e4:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    21e6:	4b01      	ldr	r3, [pc, #4]	; (21ec <usbd_sof_cb+0x8>)
    21e8:	4798      	blx	r3
}
    21ea:	bd10      	pop	{r4, pc}
    21ec:	00002161 	.word	0x00002161

000021f0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    21f0:	b510      	push	{r4, lr}
    21f2:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    21f4:	2201      	movs	r2, #1
    21f6:	2000      	movs	r0, #0
    21f8:	4b01      	ldr	r3, [pc, #4]	; (2200 <usbdc_ctrl_data_end+0x10>)
    21fa:	4798      	blx	r3
	return false;
}
    21fc:	2000      	movs	r0, #0
    21fe:	bd10      	pop	{r4, pc}
    2200:	000021a9 	.word	0x000021a9

00002204 <usbdc_set_address>:
{
    2204:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    2206:	4b01      	ldr	r3, [pc, #4]	; (220c <usbdc_set_address+0x8>)
    2208:	4798      	blx	r3
}
    220a:	bd10      	pop	{r4, pc}
    220c:	000005d1 	.word	0x000005d1

00002210 <usbdc_ctrl_status_end>:
{
    2210:	b510      	push	{r4, lr}
    2212:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2214:	7803      	ldrb	r3, [r0, #0]
    2216:	2b00      	cmp	r3, #0
    2218:	d112      	bne.n	2240 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    221a:	7843      	ldrb	r3, [r0, #1]
    221c:	2b05      	cmp	r3, #5
    221e:	d012      	beq.n	2246 <usbdc_ctrl_status_end+0x36>
    2220:	2b09      	cmp	r3, #9
    2222:	d10d      	bne.n	2240 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    2224:	7882      	ldrb	r2, [r0, #2]
    2226:	4b10      	ldr	r3, [pc, #64]	; (2268 <usbdc_ctrl_status_end+0x58>)
    2228:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    222a:	7882      	ldrb	r2, [r0, #2]
    222c:	78c3      	ldrb	r3, [r0, #3]
    222e:	021b      	lsls	r3, r3, #8
    2230:	4313      	orrs	r3, r2
    2232:	d106      	bne.n	2242 <usbdc_ctrl_status_end+0x32>
    2234:	2103      	movs	r1, #3
    2236:	4b0c      	ldr	r3, [pc, #48]	; (2268 <usbdc_ctrl_status_end+0x58>)
    2238:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    223a:	2001      	movs	r0, #1
    223c:	4b0b      	ldr	r3, [pc, #44]	; (226c <usbdc_ctrl_status_end+0x5c>)
    223e:	4798      	blx	r3
}
    2240:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2242:	2104      	movs	r1, #4
    2244:	e7f7      	b.n	2236 <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    2246:	7880      	ldrb	r0, [r0, #2]
    2248:	4b09      	ldr	r3, [pc, #36]	; (2270 <usbdc_ctrl_status_end+0x60>)
    224a:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    224c:	78a2      	ldrb	r2, [r4, #2]
    224e:	78e3      	ldrb	r3, [r4, #3]
    2250:	021b      	lsls	r3, r3, #8
    2252:	4313      	orrs	r3, r2
    2254:	d006      	beq.n	2264 <usbdc_ctrl_status_end+0x54>
    2256:	2103      	movs	r1, #3
    2258:	4b03      	ldr	r3, [pc, #12]	; (2268 <usbdc_ctrl_status_end+0x58>)
    225a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    225c:	2001      	movs	r0, #1
    225e:	4b03      	ldr	r3, [pc, #12]	; (226c <usbdc_ctrl_status_end+0x5c>)
    2260:	4798      	blx	r3
		break;
    2262:	e7ed      	b.n	2240 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2264:	2102      	movs	r1, #2
    2266:	e7f7      	b.n	2258 <usbdc_ctrl_status_end+0x48>
    2268:	20000310 	.word	0x20000310
    226c:	00002181 	.word	0x00002181
    2270:	00002205 	.word	0x00002205

00002274 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2274:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    2276:	2900      	cmp	r1, #0
    2278:	d003      	beq.n	2282 <usbdc_cb_ctl_done+0xe>
    227a:	2901      	cmp	r1, #1
    227c:	d006      	beq.n	228c <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    227e:	2000      	movs	r0, #0
    2280:	e003      	b.n	228a <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    2282:	0010      	movs	r0, r2
    2284:	4b03      	ldr	r3, [pc, #12]	; (2294 <usbdc_cb_ctl_done+0x20>)
    2286:	4798      	blx	r3
	return false;
    2288:	2000      	movs	r0, #0
}
    228a:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    228c:	0010      	movs	r0, r2
    228e:	4b02      	ldr	r3, [pc, #8]	; (2298 <usbdc_cb_ctl_done+0x24>)
    2290:	4798      	blx	r3
    2292:	e7fa      	b.n	228a <usbdc_cb_ctl_done+0x16>
    2294:	00002211 	.word	0x00002211
    2298:	000021f1 	.word	0x000021f1

0000229c <usbdc_set_config>:
{
    229c:	b530      	push	{r4, r5, lr}
    229e:	b083      	sub	sp, #12
    22a0:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    22a2:	d014      	beq.n	22ce <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    22a4:	4b1e      	ldr	r3, [pc, #120]	; (2320 <usbdc_set_config+0x84>)
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	6818      	ldr	r0, [r3, #0]
    22aa:	6859      	ldr	r1, [r3, #4]
    22ac:	4b1d      	ldr	r3, [pc, #116]	; (2324 <usbdc_set_config+0x88>)
    22ae:	4798      	blx	r3
	if (NULL == cfg_desc) {
    22b0:	2800      	cmp	r0, #0
    22b2:	d032      	beq.n	231a <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    22b4:	7881      	ldrb	r1, [r0, #2]
    22b6:	78c3      	ldrb	r3, [r0, #3]
    22b8:	021b      	lsls	r3, r3, #8
    22ba:	18c9      	adds	r1, r1, r3
    22bc:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    22be:	1841      	adds	r1, r0, r1
    22c0:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    22c2:	2204      	movs	r2, #4
    22c4:	4b18      	ldr	r3, [pc, #96]	; (2328 <usbdc_set_config+0x8c>)
    22c6:	4798      	blx	r3
    22c8:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    22ca:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    22cc:	e00d      	b.n	22ea <usbdc_set_config+0x4e>
		usbdc_unconfig();
    22ce:	4b17      	ldr	r3, [pc, #92]	; (232c <usbdc_set_config+0x90>)
    22d0:	4798      	blx	r3
		return true;
    22d2:	2001      	movs	r0, #1
    22d4:	e01f      	b.n	2316 <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    22d6:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    22d8:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    22da:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    22dc:	18c0      	adds	r0, r0, r3
    22de:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    22e0:	2204      	movs	r2, #4
    22e2:	9901      	ldr	r1, [sp, #4]
    22e4:	4b10      	ldr	r3, [pc, #64]	; (2328 <usbdc_set_config+0x8c>)
    22e6:	4798      	blx	r3
    22e8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    22ea:	9b00      	ldr	r3, [sp, #0]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d011      	beq.n	2314 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    22f0:	789d      	ldrb	r5, [r3, #2]
    22f2:	42ac      	cmp	r4, r5
    22f4:	d0f0      	beq.n	22d8 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    22f6:	4b0a      	ldr	r3, [pc, #40]	; (2320 <usbdc_set_config+0x84>)
    22f8:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    22fa:	2c00      	cmp	r4, #0
    22fc:	d0eb      	beq.n	22d6 <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    22fe:	466a      	mov	r2, sp
    2300:	2100      	movs	r1, #0
    2302:	0020      	movs	r0, r4
    2304:	6863      	ldr	r3, [r4, #4]
    2306:	4798      	blx	r3
    2308:	2800      	cmp	r0, #0
    230a:	d001      	beq.n	2310 <usbdc_set_config+0x74>
					func = func->next;
    230c:	6824      	ldr	r4, [r4, #0]
    230e:	e7f4      	b.n	22fa <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    2310:	002c      	movs	r4, r5
    2312:	e7e1      	b.n	22d8 <usbdc_set_config+0x3c>
	return true;
    2314:	2001      	movs	r0, #1
}
    2316:	b003      	add	sp, #12
    2318:	bd30      	pop	{r4, r5, pc}
		return false;
    231a:	2000      	movs	r0, #0
    231c:	e7fb      	b.n	2316 <usbdc_set_config+0x7a>
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	20000310 	.word	0x20000310
    2324:	00002999 	.word	0x00002999
    2328:	00002955 	.word	0x00002955
    232c:	00002141 	.word	0x00002141

00002330 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2330:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2332:	4b0d      	ldr	r3, [pc, #52]	; (2368 <usbdc_reset+0x38>)
    2334:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2336:	4c0d      	ldr	r4, [pc, #52]	; (236c <usbdc_reset+0x3c>)
    2338:	2302      	movs	r3, #2
    233a:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    233c:	2300      	movs	r3, #0
    233e:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2340:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2342:	2000      	movs	r0, #0
    2344:	4b0a      	ldr	r3, [pc, #40]	; (2370 <usbdc_reset+0x40>)
    2346:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2348:	7f20      	ldrb	r0, [r4, #28]
    234a:	4b0a      	ldr	r3, [pc, #40]	; (2374 <usbdc_reset+0x44>)
    234c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    234e:	4a0a      	ldr	r2, [pc, #40]	; (2378 <usbdc_reset+0x48>)
    2350:	2100      	movs	r1, #0
    2352:	2000      	movs	r0, #0
    2354:	4c09      	ldr	r4, [pc, #36]	; (237c <usbdc_reset+0x4c>)
    2356:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2358:	4a09      	ldr	r2, [pc, #36]	; (2380 <usbdc_reset+0x50>)
    235a:	2102      	movs	r1, #2
    235c:	2000      	movs	r0, #0
    235e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2360:	2000      	movs	r0, #0
    2362:	4b08      	ldr	r3, [pc, #32]	; (2384 <usbdc_reset+0x54>)
    2364:	4798      	blx	r3
}
    2366:	bd10      	pop	{r4, pc}
    2368:	00002141 	.word	0x00002141
    236c:	20000310 	.word	0x20000310
    2370:	00000645 	.word	0x00000645
    2374:	00000631 	.word	0x00000631
    2378:	000027f9 	.word	0x000027f9
    237c:	0000084d 	.word	0x0000084d
    2380:	00002275 	.word	0x00002275
    2384:	00000671 	.word	0x00000671

00002388 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2388:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    238a:	2800      	cmp	r0, #0
    238c:	d002      	beq.n	2394 <usbd_event_cb+0xc>
    238e:	2801      	cmp	r0, #1
    2390:	d004      	beq.n	239c <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2392:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2394:	2000      	movs	r0, #0
    2396:	4b03      	ldr	r3, [pc, #12]	; (23a4 <usbd_event_cb+0x1c>)
    2398:	4798      	blx	r3
		break;
    239a:	e7fa      	b.n	2392 <usbd_event_cb+0xa>
		usbdc_reset();
    239c:	4b02      	ldr	r3, [pc, #8]	; (23a8 <usbd_event_cb+0x20>)
    239e:	4798      	blx	r3
}
    23a0:	e7f7      	b.n	2392 <usbd_event_cb+0xa>
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00002181 	.word	0x00002181
    23a8:	00002331 	.word	0x00002331

000023ac <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    23ac:	b510      	push	{r4, lr}
    23ae:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    23b0:	ac01      	add	r4, sp, #4
    23b2:	9101      	str	r1, [sp, #4]
    23b4:	9202      	str	r2, [sp, #8]
    23b6:	7220      	strb	r0, [r4, #8]
    23b8:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    23ba:	0020      	movs	r0, r4
    23bc:	4b01      	ldr	r3, [pc, #4]	; (23c4 <usbdc_xfer+0x18>)
    23be:	4798      	blx	r3
}
    23c0:	b004      	add	sp, #16
    23c2:	bd10      	pop	{r4, pc}
    23c4:	000006c1 	.word	0x000006c1

000023c8 <usbdc_clear_ftr_req>:
{
    23c8:	b510      	push	{r4, lr}
    23ca:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    23cc:	780a      	ldrb	r2, [r1, #0]
    23ce:	231f      	movs	r3, #31
    23d0:	4013      	ands	r3, r2
    23d2:	2b02      	cmp	r3, #2
    23d4:	d112      	bne.n	23fc <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    23d6:	798a      	ldrb	r2, [r1, #6]
    23d8:	79cb      	ldrb	r3, [r1, #7]
    23da:	021b      	lsls	r3, r3, #8
    23dc:	4313      	orrs	r3, r2
    23de:	d001      	beq.n	23e4 <usbdc_clear_ftr_req+0x1c>
			return false;
    23e0:	2000      	movs	r0, #0
    23e2:	e00c      	b.n	23fe <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    23e4:	7908      	ldrb	r0, [r1, #4]
    23e6:	2100      	movs	r1, #0
    23e8:	4b05      	ldr	r3, [pc, #20]	; (2400 <usbdc_clear_ftr_req+0x38>)
    23ea:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    23ec:	2301      	movs	r3, #1
    23ee:	2200      	movs	r2, #0
    23f0:	2100      	movs	r1, #0
    23f2:	0020      	movs	r0, r4
    23f4:	4c03      	ldr	r4, [pc, #12]	; (2404 <usbdc_clear_ftr_req+0x3c>)
    23f6:	47a0      	blx	r4
		return true;
    23f8:	2001      	movs	r0, #1
    23fa:	e000      	b.n	23fe <usbdc_clear_ftr_req+0x36>
		return false;
    23fc:	2000      	movs	r0, #0
}
    23fe:	bd10      	pop	{r4, pc}
    2400:	000007e5 	.word	0x000007e5
    2404:	000023ad 	.word	0x000023ad

00002408 <usbdc_set_ftr_req>:
{
    2408:	b510      	push	{r4, lr}
    240a:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    240c:	780a      	ldrb	r2, [r1, #0]
    240e:	231f      	movs	r3, #31
    2410:	4013      	ands	r3, r2
    2412:	2b02      	cmp	r3, #2
    2414:	d112      	bne.n	243c <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    2416:	798a      	ldrb	r2, [r1, #6]
    2418:	79cb      	ldrb	r3, [r1, #7]
    241a:	021b      	lsls	r3, r3, #8
    241c:	4313      	orrs	r3, r2
    241e:	d001      	beq.n	2424 <usbdc_set_ftr_req+0x1c>
			return false;
    2420:	2000      	movs	r0, #0
    2422:	e00c      	b.n	243e <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2424:	7908      	ldrb	r0, [r1, #4]
    2426:	2101      	movs	r1, #1
    2428:	4b05      	ldr	r3, [pc, #20]	; (2440 <usbdc_set_ftr_req+0x38>)
    242a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    242c:	2301      	movs	r3, #1
    242e:	2200      	movs	r2, #0
    2430:	2100      	movs	r1, #0
    2432:	0020      	movs	r0, r4
    2434:	4c03      	ldr	r4, [pc, #12]	; (2444 <usbdc_set_ftr_req+0x3c>)
    2436:	47a0      	blx	r4
		return true;
    2438:	2001      	movs	r0, #1
    243a:	e000      	b.n	243e <usbdc_set_ftr_req+0x36>
		return false;
    243c:	2000      	movs	r0, #0
}
    243e:	bd10      	pop	{r4, pc}
    2440:	000007e5 	.word	0x000007e5
    2444:	000023ad 	.word	0x000023ad

00002448 <usbdc_set_interface>:
{
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	b082      	sub	sp, #8
    244c:	0005      	movs	r5, r0
    244e:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2450:	4b2a      	ldr	r3, [pc, #168]	; (24fc <usbdc_set_interface+0xb4>)
    2452:	681a      	ldr	r2, [r3, #0]
    2454:	6810      	ldr	r0, [r2, #0]
    2456:	6851      	ldr	r1, [r2, #4]
    2458:	7eda      	ldrb	r2, [r3, #27]
    245a:	4b29      	ldr	r3, [pc, #164]	; (2500 <usbdc_set_interface+0xb8>)
    245c:	4798      	blx	r3
	if (NULL == ifc) {
    245e:	2800      	cmp	r0, #0
    2460:	d045      	beq.n	24ee <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    2462:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2464:	7881      	ldrb	r1, [r0, #2]
    2466:	78c3      	ldrb	r3, [r0, #3]
    2468:	021b      	lsls	r3, r3, #8
    246a:	18c9      	adds	r1, r1, r3
    246c:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    246e:	1841      	adds	r1, r0, r1
    2470:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2472:	2204      	movs	r2, #4
    2474:	4b23      	ldr	r3, [pc, #140]	; (2504 <usbdc_set_interface+0xbc>)
    2476:	4798      	blx	r3
    2478:	2800      	cmp	r0, #0
    247a:	d10b      	bne.n	2494 <usbdc_set_interface+0x4c>
		return false;
    247c:	2000      	movs	r0, #0
    247e:	e039      	b.n	24f4 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    2480:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    2482:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    2484:	18c0      	adds	r0, r0, r3
    2486:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2488:	2204      	movs	r2, #4
    248a:	9901      	ldr	r1, [sp, #4]
    248c:	4b1d      	ldr	r3, [pc, #116]	; (2504 <usbdc_set_interface+0xbc>)
    248e:	4798      	blx	r3
		if (NULL == ifc) {
    2490:	2800      	cmp	r0, #0
    2492:	d02e      	beq.n	24f2 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2494:	7883      	ldrb	r3, [r0, #2]
    2496:	42a3      	cmp	r3, r4
    2498:	d1f2      	bne.n	2480 <usbdc_set_interface+0x38>
    249a:	78c3      	ldrb	r3, [r0, #3]
    249c:	42ab      	cmp	r3, r5
    249e:	d1ef      	bne.n	2480 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    24a0:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    24a2:	4b16      	ldr	r3, [pc, #88]	; (24fc <usbdc_set_interface+0xb4>)
    24a4:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    24a6:	2e00      	cmp	r6, #0
    24a8:	d01f      	beq.n	24ea <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    24aa:	466a      	mov	r2, sp
    24ac:	2101      	movs	r1, #1
    24ae:	0030      	movs	r0, r6
    24b0:	6873      	ldr	r3, [r6, #4]
    24b2:	4798      	blx	r3
    24b4:	2800      	cmp	r0, #0
    24b6:	d001      	beq.n	24bc <usbdc_set_interface+0x74>
			func = func->next;
    24b8:	6836      	ldr	r6, [r6, #0]
    24ba:	e7f4      	b.n	24a6 <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    24bc:	6873      	ldr	r3, [r6, #4]
    24be:	466a      	mov	r2, sp
    24c0:	2100      	movs	r1, #0
    24c2:	0030      	movs	r0, r6
    24c4:	4798      	blx	r3
    24c6:	2800      	cmp	r0, #0
    24c8:	d116      	bne.n	24f8 <usbdc_set_interface+0xb0>
			if (alt_set) {
    24ca:	2d00      	cmp	r5, #0
    24cc:	d005      	beq.n	24da <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    24ce:	2201      	movs	r2, #1
    24d0:	40a2      	lsls	r2, r4
    24d2:	490a      	ldr	r1, [pc, #40]	; (24fc <usbdc_set_interface+0xb4>)
    24d4:	7f4b      	ldrb	r3, [r1, #29]
    24d6:	4313      	orrs	r3, r2
    24d8:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    24da:	2300      	movs	r3, #0
    24dc:	2200      	movs	r2, #0
    24de:	2100      	movs	r1, #0
    24e0:	2000      	movs	r0, #0
    24e2:	4c09      	ldr	r4, [pc, #36]	; (2508 <usbdc_set_interface+0xc0>)
    24e4:	47a0      	blx	r4
			return true;
    24e6:	2001      	movs	r0, #1
    24e8:	e004      	b.n	24f4 <usbdc_set_interface+0xac>
	return false;
    24ea:	2000      	movs	r0, #0
    24ec:	e002      	b.n	24f4 <usbdc_set_interface+0xac>
		return false;
    24ee:	2000      	movs	r0, #0
    24f0:	e000      	b.n	24f4 <usbdc_set_interface+0xac>
			return false;
    24f2:	2000      	movs	r0, #0
}
    24f4:	b002      	add	sp, #8
    24f6:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    24f8:	2000      	movs	r0, #0
    24fa:	e7fb      	b.n	24f4 <usbdc_set_interface+0xac>
    24fc:	20000310 	.word	0x20000310
    2500:	00002999 	.word	0x00002999
    2504:	00002955 	.word	0x00002955
    2508:	000023ad 	.word	0x000023ad

0000250c <usbdc_set_req>:
{
    250c:	b510      	push	{r4, lr}
    250e:	0004      	movs	r4, r0
	switch (req->bRequest) {
    2510:	784b      	ldrb	r3, [r1, #1]
    2512:	2b0b      	cmp	r3, #11
    2514:	d82d      	bhi.n	2572 <usbdc_set_req+0x66>
    2516:	009b      	lsls	r3, r3, #2
    2518:	4a17      	ldr	r2, [pc, #92]	; (2578 <usbdc_set_req+0x6c>)
    251a:	58d3      	ldr	r3, [r2, r3]
    251c:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    251e:	2301      	movs	r3, #1
    2520:	2200      	movs	r2, #0
    2522:	2100      	movs	r1, #0
    2524:	4c15      	ldr	r4, [pc, #84]	; (257c <usbdc_set_req+0x70>)
    2526:	47a0      	blx	r4
    2528:	4243      	negs	r3, r0
    252a:	4158      	adcs	r0, r3
    252c:	b2c0      	uxtb	r0, r0
}
    252e:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    2530:	7888      	ldrb	r0, [r1, #2]
    2532:	4b13      	ldr	r3, [pc, #76]	; (2580 <usbdc_set_req+0x74>)
    2534:	4798      	blx	r3
    2536:	2800      	cmp	r0, #0
    2538:	d0f9      	beq.n	252e <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    253a:	2301      	movs	r3, #1
    253c:	2200      	movs	r2, #0
    253e:	2100      	movs	r1, #0
    2540:	0020      	movs	r0, r4
    2542:	4c0e      	ldr	r4, [pc, #56]	; (257c <usbdc_set_req+0x70>)
    2544:	47a0      	blx	r4
    2546:	4243      	negs	r3, r0
    2548:	4158      	adcs	r0, r3
    254a:	b2c0      	uxtb	r0, r0
    254c:	e7ef      	b.n	252e <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    254e:	4b0d      	ldr	r3, [pc, #52]	; (2584 <usbdc_set_req+0x78>)
    2550:	4798      	blx	r3
    2552:	e7ec      	b.n	252e <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    2554:	4b0c      	ldr	r3, [pc, #48]	; (2588 <usbdc_set_req+0x7c>)
    2556:	4798      	blx	r3
    2558:	e7e9      	b.n	252e <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    255a:	790a      	ldrb	r2, [r1, #4]
    255c:	794b      	ldrb	r3, [r1, #5]
    255e:	021b      	lsls	r3, r3, #8
    2560:	4313      	orrs	r3, r2
    2562:	788a      	ldrb	r2, [r1, #2]
    2564:	78c8      	ldrb	r0, [r1, #3]
    2566:	0200      	lsls	r0, r0, #8
    2568:	4310      	orrs	r0, r2
    256a:	0019      	movs	r1, r3
    256c:	4b07      	ldr	r3, [pc, #28]	; (258c <usbdc_set_req+0x80>)
    256e:	4798      	blx	r3
    2570:	e7dd      	b.n	252e <usbdc_set_req+0x22>
		return false;
    2572:	2000      	movs	r0, #0
    2574:	e7db      	b.n	252e <usbdc_set_req+0x22>
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	00002b9c 	.word	0x00002b9c
    257c:	000023ad 	.word	0x000023ad
    2580:	0000229d 	.word	0x0000229d
    2584:	000023c9 	.word	0x000023c9
    2588:	00002409 	.word	0x00002409
    258c:	00002449 	.word	0x00002449

00002590 <usbdc_get_dev_desc>:
{
    2590:	b570      	push	{r4, r5, r6, lr}
    2592:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    2594:	798b      	ldrb	r3, [r1, #6]
    2596:	79cc      	ldrb	r4, [r1, #7]
    2598:	0224      	lsls	r4, r4, #8
    259a:	431c      	orrs	r4, r3
	if (length > 0x12) {
    259c:	2c12      	cmp	r4, #18
    259e:	d900      	bls.n	25a2 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    25a0:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    25a2:	4b0b      	ldr	r3, [pc, #44]	; (25d0 <usbdc_get_dev_desc+0x40>)
    25a4:	681b      	ldr	r3, [r3, #0]
    25a6:	6818      	ldr	r0, [r3, #0]
    25a8:	6859      	ldr	r1, [r3, #4]
    25aa:	2201      	movs	r2, #1
    25ac:	4b09      	ldr	r3, [pc, #36]	; (25d4 <usbdc_get_dev_desc+0x44>)
    25ae:	4798      	blx	r3
	if (!dev_desc) {
    25b0:	2800      	cmp	r0, #0
    25b2:	d00b      	beq.n	25cc <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    25b4:	2300      	movs	r3, #0
    25b6:	0022      	movs	r2, r4
    25b8:	0001      	movs	r1, r0
    25ba:	0028      	movs	r0, r5
    25bc:	4c06      	ldr	r4, [pc, #24]	; (25d8 <usbdc_get_dev_desc+0x48>)
    25be:	47a0      	blx	r4
    25c0:	2800      	cmp	r0, #0
    25c2:	d101      	bne.n	25c8 <usbdc_get_dev_desc+0x38>
	return true;
    25c4:	2001      	movs	r0, #1
}
    25c6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    25c8:	2000      	movs	r0, #0
    25ca:	e7fc      	b.n	25c6 <usbdc_get_dev_desc+0x36>
		return false;
    25cc:	2000      	movs	r0, #0
    25ce:	e7fa      	b.n	25c6 <usbdc_get_dev_desc+0x36>
    25d0:	20000310 	.word	0x20000310
    25d4:	00002955 	.word	0x00002955
    25d8:	000023ad 	.word	0x000023ad

000025dc <usbdc_get_cfg_desc>:
{
    25dc:	b570      	push	{r4, r5, r6, lr}
    25de:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    25e0:	798b      	ldrb	r3, [r1, #6]
    25e2:	79ce      	ldrb	r6, [r1, #7]
    25e4:	0236      	lsls	r6, r6, #8
    25e6:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    25e8:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    25ea:	4b13      	ldr	r3, [pc, #76]	; (2638 <usbdc_get_cfg_desc+0x5c>)
    25ec:	7f1c      	ldrb	r4, [r3, #28]
    25ee:	3c01      	subs	r4, #1
    25f0:	4034      	ands	r4, r6
    25f2:	4261      	negs	r1, r4
    25f4:	414c      	adcs	r4, r1
    25f6:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	6818      	ldr	r0, [r3, #0]
    25fc:	6859      	ldr	r1, [r3, #4]
    25fe:	3201      	adds	r2, #1
    2600:	b2d2      	uxtb	r2, r2
    2602:	4b0e      	ldr	r3, [pc, #56]	; (263c <usbdc_get_cfg_desc+0x60>)
    2604:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2606:	2800      	cmp	r0, #0
    2608:	d013      	beq.n	2632 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    260a:	7882      	ldrb	r2, [r0, #2]
    260c:	78c3      	ldrb	r3, [r0, #3]
    260e:	021b      	lsls	r3, r3, #8
    2610:	18d2      	adds	r2, r2, r3
    2612:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2614:	4296      	cmp	r6, r2
    2616:	d801      	bhi.n	261c <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    2618:	0032      	movs	r2, r6
		need_zlp = false;
    261a:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    261c:	0023      	movs	r3, r4
    261e:	0001      	movs	r1, r0
    2620:	0028      	movs	r0, r5
    2622:	4c07      	ldr	r4, [pc, #28]	; (2640 <usbdc_get_cfg_desc+0x64>)
    2624:	47a0      	blx	r4
    2626:	2800      	cmp	r0, #0
    2628:	d101      	bne.n	262e <usbdc_get_cfg_desc+0x52>
	return true;
    262a:	2001      	movs	r0, #1
}
    262c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    262e:	2000      	movs	r0, #0
    2630:	e7fc      	b.n	262c <usbdc_get_cfg_desc+0x50>
		return false;
    2632:	2000      	movs	r0, #0
    2634:	e7fa      	b.n	262c <usbdc_get_cfg_desc+0x50>
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	20000310 	.word	0x20000310
    263c:	00002999 	.word	0x00002999
    2640:	000023ad 	.word	0x000023ad

00002644 <usbdc_get_str_desc>:
{
    2644:	b570      	push	{r4, r5, r6, lr}
    2646:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    2648:	798b      	ldrb	r3, [r1, #6]
    264a:	79ce      	ldrb	r6, [r1, #7]
    264c:	0236      	lsls	r6, r6, #8
    264e:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    2650:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2652:	4b10      	ldr	r3, [pc, #64]	; (2694 <usbdc_get_str_desc+0x50>)
    2654:	7f1c      	ldrb	r4, [r3, #28]
    2656:	3c01      	subs	r4, #1
    2658:	4034      	ands	r4, r6
    265a:	4261      	negs	r1, r4
    265c:	414c      	adcs	r4, r1
    265e:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2660:	681b      	ldr	r3, [r3, #0]
    2662:	6818      	ldr	r0, [r3, #0]
    2664:	6859      	ldr	r1, [r3, #4]
    2666:	4b0c      	ldr	r3, [pc, #48]	; (2698 <usbdc_get_str_desc+0x54>)
    2668:	4798      	blx	r3
	if (NULL == str_desc) {
    266a:	2800      	cmp	r0, #0
    266c:	d00f      	beq.n	268e <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    266e:	7802      	ldrb	r2, [r0, #0]
    2670:	4296      	cmp	r6, r2
    2672:	d801      	bhi.n	2678 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    2674:	0032      	movs	r2, r6
		need_zlp = false;
    2676:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2678:	0023      	movs	r3, r4
    267a:	0001      	movs	r1, r0
    267c:	0028      	movs	r0, r5
    267e:	4c07      	ldr	r4, [pc, #28]	; (269c <usbdc_get_str_desc+0x58>)
    2680:	47a0      	blx	r4
    2682:	2800      	cmp	r0, #0
    2684:	d101      	bne.n	268a <usbdc_get_str_desc+0x46>
	return true;
    2686:	2001      	movs	r0, #1
}
    2688:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    268a:	2000      	movs	r0, #0
    268c:	e7fc      	b.n	2688 <usbdc_get_str_desc+0x44>
		return false;
    268e:	2000      	movs	r0, #0
    2690:	e7fa      	b.n	2688 <usbdc_get_str_desc+0x44>
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	20000310 	.word	0x20000310
    2698:	000029dd 	.word	0x000029dd
    269c:	000023ad 	.word	0x000023ad

000026a0 <usbdc_get_desc_req>:
{
    26a0:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    26a2:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    26a4:	2b02      	cmp	r3, #2
    26a6:	d008      	beq.n	26ba <usbdc_get_desc_req+0x1a>
    26a8:	2b03      	cmp	r3, #3
    26aa:	d009      	beq.n	26c0 <usbdc_get_desc_req+0x20>
    26ac:	2b01      	cmp	r3, #1
    26ae:	d001      	beq.n	26b4 <usbdc_get_desc_req+0x14>
	return false;
    26b0:	2000      	movs	r0, #0
    26b2:	e001      	b.n	26b8 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    26b4:	4b04      	ldr	r3, [pc, #16]	; (26c8 <usbdc_get_desc_req+0x28>)
    26b6:	4798      	blx	r3
}
    26b8:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    26ba:	4b04      	ldr	r3, [pc, #16]	; (26cc <usbdc_get_desc_req+0x2c>)
    26bc:	4798      	blx	r3
    26be:	e7fb      	b.n	26b8 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    26c0:	4b03      	ldr	r3, [pc, #12]	; (26d0 <usbdc_get_desc_req+0x30>)
    26c2:	4798      	blx	r3
    26c4:	e7f8      	b.n	26b8 <usbdc_get_desc_req+0x18>
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	00002591 	.word	0x00002591
    26cc:	000025dd 	.word	0x000025dd
    26d0:	00002645 	.word	0x00002645

000026d4 <usbdc_get_status_req>:
{
    26d4:	b530      	push	{r4, r5, lr}
    26d6:	b083      	sub	sp, #12
    26d8:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    26da:	780a      	ldrb	r2, [r1, #0]
    26dc:	231f      	movs	r3, #31
    26de:	4013      	ands	r3, r2
    26e0:	b2da      	uxtb	r2, r3
    26e2:	2a01      	cmp	r2, #1
    26e4:	d903      	bls.n	26ee <usbdc_get_status_req+0x1a>
    26e6:	2b02      	cmp	r3, #2
    26e8:	d012      	beq.n	2710 <usbdc_get_status_req+0x3c>
		return false;
    26ea:	2000      	movs	r0, #0
    26ec:	e00e      	b.n	270c <usbdc_get_status_req+0x38>
		st = 0;
    26ee:	2300      	movs	r3, #0
    26f0:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    26f2:	4d0d      	ldr	r5, [pc, #52]	; (2728 <usbdc_get_status_req+0x54>)
    26f4:	2202      	movs	r2, #2
    26f6:	a901      	add	r1, sp, #4
    26f8:	6968      	ldr	r0, [r5, #20]
    26fa:	4b0c      	ldr	r3, [pc, #48]	; (272c <usbdc_get_status_req+0x58>)
    26fc:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    26fe:	6969      	ldr	r1, [r5, #20]
    2700:	2300      	movs	r3, #0
    2702:	2202      	movs	r2, #2
    2704:	0020      	movs	r0, r4
    2706:	4c0a      	ldr	r4, [pc, #40]	; (2730 <usbdc_get_status_req+0x5c>)
    2708:	47a0      	blx	r4
	return true;
    270a:	2001      	movs	r0, #1
}
    270c:	b003      	add	sp, #12
    270e:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2710:	7908      	ldrb	r0, [r1, #4]
    2712:	2102      	movs	r1, #2
    2714:	4b07      	ldr	r3, [pc, #28]	; (2734 <usbdc_get_status_req+0x60>)
    2716:	4798      	blx	r3
		if (st < 0) {
    2718:	2800      	cmp	r0, #0
    271a:	db03      	blt.n	2724 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    271c:	2301      	movs	r3, #1
    271e:	4018      	ands	r0, r3
    2720:	9001      	str	r0, [sp, #4]
		break;
    2722:	e7e6      	b.n	26f2 <usbdc_get_status_req+0x1e>
			return false;
    2724:	2000      	movs	r0, #0
    2726:	e7f1      	b.n	270c <usbdc_get_status_req+0x38>
    2728:	20000310 	.word	0x20000310
    272c:	00002b2d 	.word	0x00002b2d
    2730:	000023ad 	.word	0x000023ad
    2734:	000007e5 	.word	0x000007e5

00002738 <usbdc_get_interface>:
{
    2738:	b570      	push	{r4, r5, r6, lr}
    273a:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    273c:	4b16      	ldr	r3, [pc, #88]	; (2798 <usbdc_get_interface+0x60>)
    273e:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2740:	7f5a      	ldrb	r2, [r3, #29]
    2742:	7901      	ldrb	r1, [r0, #4]
    2744:	7943      	ldrb	r3, [r0, #5]
    2746:	021b      	lsls	r3, r3, #8
    2748:	430b      	orrs	r3, r1
    274a:	411a      	asrs	r2, r3
    274c:	07d3      	lsls	r3, r2, #31
    274e:	d50a      	bpl.n	2766 <usbdc_get_interface+0x2e>
	while (NULL != func) {
    2750:	2c00      	cmp	r4, #0
    2752:	d01f      	beq.n	2794 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2754:	002a      	movs	r2, r5
    2756:	2102      	movs	r1, #2
    2758:	0020      	movs	r0, r4
    275a:	6863      	ldr	r3, [r4, #4]
    275c:	4798      	blx	r3
    275e:	2800      	cmp	r0, #0
    2760:	da0d      	bge.n	277e <usbdc_get_interface+0x46>
			func = func->next;
    2762:	6824      	ldr	r4, [r4, #0]
    2764:	e7f4      	b.n	2750 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    2766:	4b0c      	ldr	r3, [pc, #48]	; (2798 <usbdc_get_interface+0x60>)
    2768:	2200      	movs	r2, #0
    276a:	6959      	ldr	r1, [r3, #20]
    276c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    276e:	6959      	ldr	r1, [r3, #20]
    2770:	2300      	movs	r3, #0
    2772:	3201      	adds	r2, #1
    2774:	2000      	movs	r0, #0
    2776:	4c09      	ldr	r4, [pc, #36]	; (279c <usbdc_get_interface+0x64>)
    2778:	47a0      	blx	r4
		return true;
    277a:	2001      	movs	r0, #1
    277c:	e00b      	b.n	2796 <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    277e:	4b06      	ldr	r3, [pc, #24]	; (2798 <usbdc_get_interface+0x60>)
    2780:	695a      	ldr	r2, [r3, #20]
    2782:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2784:	6959      	ldr	r1, [r3, #20]
    2786:	2300      	movs	r3, #0
    2788:	2201      	movs	r2, #1
    278a:	2000      	movs	r0, #0
    278c:	4c03      	ldr	r4, [pc, #12]	; (279c <usbdc_get_interface+0x64>)
    278e:	47a0      	blx	r4
			return true;
    2790:	2001      	movs	r0, #1
    2792:	e000      	b.n	2796 <usbdc_get_interface+0x5e>
	return false;
    2794:	2000      	movs	r0, #0
}
    2796:	bd70      	pop	{r4, r5, r6, pc}
    2798:	20000310 	.word	0x20000310
    279c:	000023ad 	.word	0x000023ad

000027a0 <usbdc_get_req>:
{
    27a0:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    27a2:	784b      	ldrb	r3, [r1, #1]
    27a4:	2b06      	cmp	r3, #6
    27a6:	d00d      	beq.n	27c4 <usbdc_get_req+0x24>
    27a8:	d907      	bls.n	27ba <usbdc_get_req+0x1a>
    27aa:	2b08      	cmp	r3, #8
    27ac:	d00d      	beq.n	27ca <usbdc_get_req+0x2a>
    27ae:	2b0a      	cmp	r3, #10
    27b0:	d116      	bne.n	27e0 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    27b2:	0008      	movs	r0, r1
    27b4:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <usbdc_get_req+0x44>)
    27b6:	4798      	blx	r3
    27b8:	e006      	b.n	27c8 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    27ba:	2b00      	cmp	r3, #0
    27bc:	d110      	bne.n	27e0 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    27be:	4b0a      	ldr	r3, [pc, #40]	; (27e8 <usbdc_get_req+0x48>)
    27c0:	4798      	blx	r3
    27c2:	e001      	b.n	27c8 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    27c4:	4b09      	ldr	r3, [pc, #36]	; (27ec <usbdc_get_req+0x4c>)
    27c6:	4798      	blx	r3
}
    27c8:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    27ca:	4b09      	ldr	r3, [pc, #36]	; (27f0 <usbdc_get_req+0x50>)
    27cc:	7eda      	ldrb	r2, [r3, #27]
    27ce:	6959      	ldr	r1, [r3, #20]
    27d0:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    27d2:	6959      	ldr	r1, [r3, #20]
    27d4:	2300      	movs	r3, #0
    27d6:	2201      	movs	r2, #1
    27d8:	4c06      	ldr	r4, [pc, #24]	; (27f4 <usbdc_get_req+0x54>)
    27da:	47a0      	blx	r4
		return true;
    27dc:	2001      	movs	r0, #1
    27de:	e7f3      	b.n	27c8 <usbdc_get_req+0x28>
		return false;
    27e0:	2000      	movs	r0, #0
    27e2:	e7f1      	b.n	27c8 <usbdc_get_req+0x28>
    27e4:	00002739 	.word	0x00002739
    27e8:	000026d5 	.word	0x000026d5
    27ec:	000026a1 	.word	0x000026a1
    27f0:	20000310 	.word	0x20000310
    27f4:	000023ad 	.word	0x000023ad

000027f8 <usbdc_cb_ctl_req>:
{
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	0005      	movs	r5, r0
    27fc:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    27fe:	2200      	movs	r2, #0
    2800:	4b0d      	ldr	r3, [pc, #52]	; (2838 <usbdc_cb_ctl_req+0x40>)
    2802:	4798      	blx	r3
    2804:	1c43      	adds	r3, r0, #1
    2806:	d014      	beq.n	2832 <usbdc_cb_ctl_req+0x3a>
    2808:	2801      	cmp	r0, #1
    280a:	d013      	beq.n	2834 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    280c:	7823      	ldrb	r3, [r4, #0]
    280e:	221f      	movs	r2, #31
    2810:	4393      	bics	r3, r2
    2812:	d004      	beq.n	281e <usbdc_cb_ctl_req+0x26>
    2814:	b2db      	uxtb	r3, r3
    2816:	2b80      	cmp	r3, #128	; 0x80
    2818:	d006      	beq.n	2828 <usbdc_cb_ctl_req+0x30>
		return false;
    281a:	2000      	movs	r0, #0
    281c:	e00a      	b.n	2834 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    281e:	0021      	movs	r1, r4
    2820:	0028      	movs	r0, r5
    2822:	4b06      	ldr	r3, [pc, #24]	; (283c <usbdc_cb_ctl_req+0x44>)
    2824:	4798      	blx	r3
    2826:	e005      	b.n	2834 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    2828:	0021      	movs	r1, r4
    282a:	0028      	movs	r0, r5
    282c:	4b04      	ldr	r3, [pc, #16]	; (2840 <usbdc_cb_ctl_req+0x48>)
    282e:	4798      	blx	r3
    2830:	e000      	b.n	2834 <usbdc_cb_ctl_req+0x3c>
		return false;
    2832:	2000      	movs	r0, #0
}
    2834:	bd70      	pop	{r4, r5, r6, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	000021a9 	.word	0x000021a9
    283c:	0000250d 	.word	0x0000250d
    2840:	000027a1 	.word	0x000027a1

00002844 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2844:	b510      	push	{r4, lr}
	switch (type) {
    2846:	2801      	cmp	r0, #1
    2848:	d009      	beq.n	285e <usbdc_register_handler+0x1a>
    284a:	2800      	cmp	r0, #0
    284c:	d002      	beq.n	2854 <usbdc_register_handler+0x10>
    284e:	2802      	cmp	r0, #2
    2850:	d00a      	beq.n	2868 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    2852:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2854:	4807      	ldr	r0, [pc, #28]	; (2874 <usbdc_register_handler+0x30>)
    2856:	3004      	adds	r0, #4
    2858:	4b07      	ldr	r3, [pc, #28]	; (2878 <usbdc_register_handler+0x34>)
    285a:	4798      	blx	r3
		break;
    285c:	e7f9      	b.n	2852 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    285e:	4805      	ldr	r0, [pc, #20]	; (2874 <usbdc_register_handler+0x30>)
    2860:	3008      	adds	r0, #8
    2862:	4b05      	ldr	r3, [pc, #20]	; (2878 <usbdc_register_handler+0x34>)
    2864:	4798      	blx	r3
		break;
    2866:	e7f4      	b.n	2852 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2868:	4802      	ldr	r0, [pc, #8]	; (2874 <usbdc_register_handler+0x30>)
    286a:	300c      	adds	r0, #12
    286c:	4b02      	ldr	r3, [pc, #8]	; (2878 <usbdc_register_handler+0x34>)
    286e:	4798      	blx	r3
}
    2870:	e7ef      	b.n	2852 <usbdc_register_handler+0xe>
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	20000310 	.word	0x20000310
    2878:	000008bd 	.word	0x000008bd

0000287c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    287c:	b570      	push	{r4, r5, r6, lr}
    287e:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2880:	1e43      	subs	r3, r0, #1
    2882:	4198      	sbcs	r0, r3
    2884:	b2c0      	uxtb	r0, r0
    2886:	4a0c      	ldr	r2, [pc, #48]	; (28b8 <usbdc_init+0x3c>)
    2888:	490c      	ldr	r1, [pc, #48]	; (28bc <usbdc_init+0x40>)
    288a:	4b0d      	ldr	r3, [pc, #52]	; (28c0 <usbdc_init+0x44>)
    288c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    288e:	4b0d      	ldr	r3, [pc, #52]	; (28c4 <usbdc_init+0x48>)
    2890:	4798      	blx	r3
	if (rc < 0) {
    2892:	2800      	cmp	r0, #0
    2894:	db0e      	blt.n	28b4 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2896:	4d0c      	ldr	r5, [pc, #48]	; (28c8 <usbdc_init+0x4c>)
    2898:	2220      	movs	r2, #32
    289a:	2100      	movs	r1, #0
    289c:	0028      	movs	r0, r5
    289e:	4b0b      	ldr	r3, [pc, #44]	; (28cc <usbdc_init+0x50>)
    28a0:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    28a2:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    28a4:	490a      	ldr	r1, [pc, #40]	; (28d0 <usbdc_init+0x54>)
    28a6:	2000      	movs	r0, #0
    28a8:	4c0a      	ldr	r4, [pc, #40]	; (28d4 <usbdc_init+0x58>)
    28aa:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    28ac:	490a      	ldr	r1, [pc, #40]	; (28d8 <usbdc_init+0x5c>)
    28ae:	2001      	movs	r0, #1
    28b0:	47a0      	blx	r4

	return 0;
    28b2:	2000      	movs	r0, #0
}
    28b4:	bd70      	pop	{r4, r5, r6, pc}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	00000355 	.word	0x00000355
    28bc:	00002bcc 	.word	0x00002bcc
    28c0:	0000089d 	.word	0x0000089d
    28c4:	00000541 	.word	0x00000541
    28c8:	20000310 	.word	0x20000310
    28cc:	00002b3f 	.word	0x00002b3f
    28d0:	000021e5 	.word	0x000021e5
    28d4:	000005ad 	.word	0x000005ad
    28d8:	00002389 	.word	0x00002389

000028dc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    28dc:	b510      	push	{r4, lr}
    28de:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    28e0:	4802      	ldr	r0, [pc, #8]	; (28ec <usbdc_register_function+0x10>)
    28e2:	3010      	adds	r0, #16
    28e4:	4b02      	ldr	r3, [pc, #8]	; (28f0 <usbdc_register_function+0x14>)
    28e6:	4798      	blx	r3
}
    28e8:	bd10      	pop	{r4, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	20000310 	.word	0x20000310
    28f0:	000008bd 	.word	0x000008bd

000028f4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    28f4:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    28f6:	4b0b      	ldr	r3, [pc, #44]	; (2924 <usbdc_start+0x30>)
    28f8:	7e9b      	ldrb	r3, [r3, #26]
    28fa:	2b00      	cmp	r3, #0
    28fc:	d10c      	bne.n	2918 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    28fe:	2800      	cmp	r0, #0
    2900:	d00d      	beq.n	291e <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    2902:	4b08      	ldr	r3, [pc, #32]	; (2924 <usbdc_start+0x30>)
    2904:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2906:	6802      	ldr	r2, [r0, #0]
    2908:	79d2      	ldrb	r2, [r2, #7]
    290a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    290c:	2201      	movs	r2, #1
    290e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2910:	4b05      	ldr	r3, [pc, #20]	; (2928 <usbdc_start+0x34>)
    2912:	4798      	blx	r3
	return ERR_NONE;
    2914:	2000      	movs	r0, #0
}
    2916:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2918:	2004      	movs	r0, #4
    291a:	4240      	negs	r0, r0
    291c:	e7fb      	b.n	2916 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    291e:	2009      	movs	r0, #9
    2920:	4240      	negs	r0, r0
    2922:	e7f8      	b.n	2916 <usbdc_start+0x22>
    2924:	20000310 	.word	0x20000310
    2928:	000005b9 	.word	0x000005b9

0000292c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    292c:	b510      	push	{r4, lr}
	usb_d_attach();
    292e:	4b01      	ldr	r3, [pc, #4]	; (2934 <usbdc_attach+0x8>)
    2930:	4798      	blx	r3
}
    2932:	bd10      	pop	{r4, pc}
    2934:	000005c5 	.word	0x000005c5

00002938 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2938:	4b01      	ldr	r3, [pc, #4]	; (2940 <usbdc_get_ctrl_buffer+0x8>)
    293a:	6958      	ldr	r0, [r3, #20]
}
    293c:	4770      	bx	lr
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	20000310 	.word	0x20000310

00002944 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2944:	4b02      	ldr	r3, [pc, #8]	; (2950 <usbdc_get_state+0xc>)
    2946:	7e98      	ldrb	r0, [r3, #26]
    2948:	06c3      	lsls	r3, r0, #27
    294a:	d500      	bpl.n	294e <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    294c:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    294e:	4770      	bx	lr
    2950:	20000310 	.word	0x20000310

00002954 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2954:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2956:	4288      	cmp	r0, r1
    2958:	d207      	bcs.n	296a <usb_find_desc+0x16>
	return desc[0];
    295a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    295c:	2b01      	cmp	r3, #1
    295e:	d906      	bls.n	296e <usb_find_desc+0x1a>
	return desc[1];
    2960:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2962:	4294      	cmp	r4, r2
    2964:	d002      	beq.n	296c <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    2966:	18c0      	adds	r0, r0, r3
    2968:	e7f5      	b.n	2956 <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    296a:	2000      	movs	r0, #0
}
    296c:	bd10      	pop	{r4, pc}
		_desc_len_check();
    296e:	2000      	movs	r0, #0
    2970:	e7fc      	b.n	296c <usb_find_desc+0x18>

00002972 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2972:	4288      	cmp	r0, r1
    2974:	d209      	bcs.n	298a <usb_find_ep_desc+0x18>
	return desc[0];
    2976:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2978:	2b01      	cmp	r3, #1
    297a:	d908      	bls.n	298e <usb_find_ep_desc+0x1c>
	return desc[1];
    297c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    297e:	2a04      	cmp	r2, #4
    2980:	d007      	beq.n	2992 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2982:	2a05      	cmp	r2, #5
    2984:	d002      	beq.n	298c <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    2986:	18c0      	adds	r0, r0, r3
    2988:	e7f3      	b.n	2972 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    298a:	2000      	movs	r0, #0
}
    298c:	4770      	bx	lr
		_desc_len_check();
    298e:	2000      	movs	r0, #0
    2990:	e7fc      	b.n	298c <usb_find_ep_desc+0x1a>
	return NULL;
    2992:	2000      	movs	r0, #0
    2994:	e7fa      	b.n	298c <usb_find_ep_desc+0x1a>
	...

00002998 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2998:	b570      	push	{r4, r5, r6, lr}
    299a:	000c      	movs	r4, r1
    299c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    299e:	2202      	movs	r2, #2
    29a0:	4b0d      	ldr	r3, [pc, #52]	; (29d8 <usb_find_cfg_desc+0x40>)
    29a2:	4798      	blx	r3
	if (!desc) {
    29a4:	2800      	cmp	r0, #0
    29a6:	d012      	beq.n	29ce <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    29a8:	42a0      	cmp	r0, r4
    29aa:	d20f      	bcs.n	29cc <usb_find_cfg_desc+0x34>
	return desc[0];
    29ac:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    29ae:	2b01      	cmp	r3, #1
    29b0:	d90e      	bls.n	29d0 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    29b2:	7843      	ldrb	r3, [r0, #1]
    29b4:	2b02      	cmp	r3, #2
    29b6:	d10d      	bne.n	29d4 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    29b8:	7943      	ldrb	r3, [r0, #5]
    29ba:	42ab      	cmp	r3, r5
    29bc:	d007      	beq.n	29ce <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    29be:	7883      	ldrb	r3, [r0, #2]
    29c0:	78c2      	ldrb	r2, [r0, #3]
    29c2:	0212      	lsls	r2, r2, #8
    29c4:	189b      	adds	r3, r3, r2
    29c6:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    29c8:	18c0      	adds	r0, r0, r3
    29ca:	e7ed      	b.n	29a8 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    29cc:	2000      	movs	r0, #0
}
    29ce:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    29d0:	2000      	movs	r0, #0
    29d2:	e7fc      	b.n	29ce <usb_find_cfg_desc+0x36>
	return NULL;
    29d4:	2000      	movs	r0, #0
    29d6:	e7fa      	b.n	29ce <usb_find_cfg_desc+0x36>
    29d8:	00002955 	.word	0x00002955

000029dc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    29dc:	b570      	push	{r4, r5, r6, lr}
    29de:	000d      	movs	r5, r1
    29e0:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    29e2:	2400      	movs	r4, #0
    29e4:	42a8      	cmp	r0, r5
    29e6:	d20e      	bcs.n	2a06 <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    29e8:	2203      	movs	r2, #3
    29ea:	0029      	movs	r1, r5
    29ec:	4b08      	ldr	r3, [pc, #32]	; (2a10 <usb_find_str_desc+0x34>)
    29ee:	4798      	blx	r3
		if (desc) {
    29f0:	2800      	cmp	r0, #0
    29f2:	d009      	beq.n	2a08 <usb_find_str_desc+0x2c>
	return desc[0];
    29f4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    29f6:	2b01      	cmp	r3, #1
    29f8:	d907      	bls.n	2a0a <usb_find_str_desc+0x2e>
			if (i == str_index) {
    29fa:	42b4      	cmp	r4, r6
    29fc:	d004      	beq.n	2a08 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    29fe:	3401      	adds	r4, #1
    2a00:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    2a02:	18c0      	adds	r0, r0, r3
    2a04:	e7ee      	b.n	29e4 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2a06:	2000      	movs	r0, #0
}
    2a08:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    2a0a:	2000      	movs	r0, #0
    2a0c:	e7fc      	b.n	2a08 <usb_find_str_desc+0x2c>
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	00002955 	.word	0x00002955

00002a14 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    2a14:	b510      	push	{r4, lr}
    2a16:	b082      	sub	sp, #8
    2a18:	1c03      	adds	r3, r0, #0
    2a1a:	aa01      	add	r2, sp, #4
    2a1c:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    2a1e:	07db      	lsls	r3, r3, #31
    2a20:	d402      	bmi.n	2a28 <usb_device_cb_state_c+0x14>
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	}

	/* No error. */
	return false;
}
    2a22:	2000      	movs	r0, #0
    2a24:	b002      	add	sp, #8
    2a26:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    2a28:	4905      	ldr	r1, [pc, #20]	; (2a40 <usb_device_cb_state_c+0x2c>)
    2a2a:	2000      	movs	r0, #0
    2a2c:	4c05      	ldr	r4, [pc, #20]	; (2a44 <usb_device_cb_state_c+0x30>)
    2a2e:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    2a30:	4905      	ldr	r1, [pc, #20]	; (2a48 <usb_device_cb_state_c+0x34>)
    2a32:	2001      	movs	r0, #1
    2a34:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2a36:	2140      	movs	r1, #64	; 0x40
    2a38:	4804      	ldr	r0, [pc, #16]	; (2a4c <usb_device_cb_state_c+0x38>)
    2a3a:	4b05      	ldr	r3, [pc, #20]	; (2a50 <usb_device_cb_state_c+0x3c>)
    2a3c:	4798      	blx	r3
    2a3e:	e7f0      	b.n	2a22 <usb_device_cb_state_c+0xe>
    2a40:	00002a6d 	.word	0x00002a6d
    2a44:	00002085 	.word	0x00002085
    2a48:	00002a55 	.word	0x00002a55
    2a4c:	20000330 	.word	0x20000330
    2a50:	000020e1 	.word	0x000020e1

00002a54 <usb_device_cb_bulk_in>:
{
    2a54:	b510      	push	{r4, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2a56:	2140      	movs	r1, #64	; 0x40
    2a58:	4802      	ldr	r0, [pc, #8]	; (2a64 <usb_device_cb_bulk_in+0x10>)
    2a5a:	4b03      	ldr	r3, [pc, #12]	; (2a68 <usb_device_cb_bulk_in+0x14>)
    2a5c:	4798      	blx	r3
}
    2a5e:	2000      	movs	r0, #0
    2a60:	bd10      	pop	{r4, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	20000330 	.word	0x20000330
    2a68:	000020e1 	.word	0x000020e1

00002a6c <usb_device_cb_bulk_out>:
{
    2a6c:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    2a6e:	0011      	movs	r1, r2
    2a70:	4802      	ldr	r0, [pc, #8]	; (2a7c <usb_device_cb_bulk_out+0x10>)
    2a72:	4b03      	ldr	r3, [pc, #12]	; (2a80 <usb_device_cb_bulk_out+0x14>)
    2a74:	4798      	blx	r3
}
    2a76:	2000      	movs	r0, #0
    2a78:	bd10      	pop	{r4, pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	20000330 	.word	0x20000330
    2a80:	00002111 	.word	0x00002111

00002a84 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2a84:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2a86:	4806      	ldr	r0, [pc, #24]	; (2aa0 <cdc_device_acm_init+0x1c>)
    2a88:	3040      	adds	r0, #64	; 0x40
    2a8a:	4b06      	ldr	r3, [pc, #24]	; (2aa4 <cdc_device_acm_init+0x20>)
    2a8c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2a8e:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <cdc_device_acm_init+0x24>)
    2a90:	4798      	blx	r3

	usbdc_start(single_desc);
    2a92:	4806      	ldr	r0, [pc, #24]	; (2aac <cdc_device_acm_init+0x28>)
    2a94:	4b06      	ldr	r3, [pc, #24]	; (2ab0 <cdc_device_acm_init+0x2c>)
    2a96:	4798      	blx	r3
	usbdc_attach();
    2a98:	4b06      	ldr	r3, [pc, #24]	; (2ab4 <cdc_device_acm_init+0x30>)
    2a9a:	4798      	blx	r3
}
    2a9c:	bd10      	pop	{r4, pc}
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	20000330 	.word	0x20000330
    2aa4:	0000287d 	.word	0x0000287d
    2aa8:	0000203d 	.word	0x0000203d
    2aac:	20000008 	.word	0x20000008
    2ab0:	000028f5 	.word	0x000028f5
    2ab4:	0000292d 	.word	0x0000292d

00002ab8 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
    2ab8:	b510      	push	{r4, lr}
	while (!cdcdf_acm_is_enabled()) {
    2aba:	4b04      	ldr	r3, [pc, #16]	; (2acc <cdcd_acm_example+0x14>)
    2abc:	4798      	blx	r3
    2abe:	2800      	cmp	r0, #0
    2ac0:	d0fb      	beq.n	2aba <cdcd_acm_example+0x2>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    2ac2:	4903      	ldr	r1, [pc, #12]	; (2ad0 <cdcd_acm_example+0x18>)
    2ac4:	2003      	movs	r0, #3
    2ac6:	4b03      	ldr	r3, [pc, #12]	; (2ad4 <cdcd_acm_example+0x1c>)
    2ac8:	4798      	blx	r3
    2aca:	e7fe      	b.n	2aca <cdcd_acm_example+0x12>
    2acc:	000020d5 	.word	0x000020d5
    2ad0:	00002a15 	.word	0x00002a15
    2ad4:	00002085 	.word	0x00002085

00002ad8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2ad8:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2ada:	4b01      	ldr	r3, [pc, #4]	; (2ae0 <usb_init+0x8>)
    2adc:	4798      	blx	r3
}
    2ade:	bd10      	pop	{r4, pc}
    2ae0:	00002a85 	.word	0x00002a85

00002ae4 <__libc_init_array>:
    2ae4:	b570      	push	{r4, r5, r6, lr}
    2ae6:	2600      	movs	r6, #0
    2ae8:	4d0c      	ldr	r5, [pc, #48]	; (2b1c <__libc_init_array+0x38>)
    2aea:	4c0d      	ldr	r4, [pc, #52]	; (2b20 <__libc_init_array+0x3c>)
    2aec:	1b64      	subs	r4, r4, r5
    2aee:	10a4      	asrs	r4, r4, #2
    2af0:	42a6      	cmp	r6, r4
    2af2:	d109      	bne.n	2b08 <__libc_init_array+0x24>
    2af4:	2600      	movs	r6, #0
    2af6:	f000 f875 	bl	2be4 <_init>
    2afa:	4d0a      	ldr	r5, [pc, #40]	; (2b24 <__libc_init_array+0x40>)
    2afc:	4c0a      	ldr	r4, [pc, #40]	; (2b28 <__libc_init_array+0x44>)
    2afe:	1b64      	subs	r4, r4, r5
    2b00:	10a4      	asrs	r4, r4, #2
    2b02:	42a6      	cmp	r6, r4
    2b04:	d105      	bne.n	2b12 <__libc_init_array+0x2e>
    2b06:	bd70      	pop	{r4, r5, r6, pc}
    2b08:	00b3      	lsls	r3, r6, #2
    2b0a:	58eb      	ldr	r3, [r5, r3]
    2b0c:	4798      	blx	r3
    2b0e:	3601      	adds	r6, #1
    2b10:	e7ee      	b.n	2af0 <__libc_init_array+0xc>
    2b12:	00b3      	lsls	r3, r6, #2
    2b14:	58eb      	ldr	r3, [r5, r3]
    2b16:	4798      	blx	r3
    2b18:	3601      	adds	r6, #1
    2b1a:	e7f2      	b.n	2b02 <__libc_init_array+0x1e>
    2b1c:	00002bf0 	.word	0x00002bf0
    2b20:	00002bf0 	.word	0x00002bf0
    2b24:	00002bf0 	.word	0x00002bf0
    2b28:	00002bf4 	.word	0x00002bf4

00002b2c <memcpy>:
    2b2c:	2300      	movs	r3, #0
    2b2e:	b510      	push	{r4, lr}
    2b30:	429a      	cmp	r2, r3
    2b32:	d100      	bne.n	2b36 <memcpy+0xa>
    2b34:	bd10      	pop	{r4, pc}
    2b36:	5ccc      	ldrb	r4, [r1, r3]
    2b38:	54c4      	strb	r4, [r0, r3]
    2b3a:	3301      	adds	r3, #1
    2b3c:	e7f8      	b.n	2b30 <memcpy+0x4>

00002b3e <memset>:
    2b3e:	0003      	movs	r3, r0
    2b40:	1882      	adds	r2, r0, r2
    2b42:	4293      	cmp	r3, r2
    2b44:	d100      	bne.n	2b48 <memset+0xa>
    2b46:	4770      	bx	lr
    2b48:	7019      	strb	r1, [r3, #0]
    2b4a:	3301      	adds	r3, #1
    2b4c:	e7f9      	b.n	2b42 <memset+0x4>
    2b4e:	0000      	movs	r0, r0
    2b50:	682f2e2e 	.word	0x682f2e2e
    2b54:	752f6c61 	.word	0x752f6c61
    2b58:	736c6974 	.word	0x736c6974
    2b5c:	6372732f 	.word	0x6372732f
    2b60:	6974752f 	.word	0x6974752f
    2b64:	6c5f736c 	.word	0x6c5f736c
    2b68:	2e747369 	.word	0x2e747369
    2b6c:	00000063 	.word	0x00000063
    2b70:	00004a25 	.word	0x00004a25
    2b74:	00000804 	.word	0x00000804

00002b78 <_usb_ep_cfgs>:
    2b78:	200002ac 00000000 00000040 2000026c     ... ....@...l.. 
    2b88:	00000000 00000040 2000022c 00000000     ....@...,.. ....
    2b98:	00000040 00002572 0000254e 00002572     @...r%..N%..r%..
    2ba8:	00002554 00002572 0000251e 00002572     T%..r%...%..r%..
    2bb8:	00002572 00002572 00002530 00002572     r%..r%..0%..r%..
    2bc8:	0000255a 752f2e2e 642f6273 63697665     Z%..../usb/devic
    2bd8:	73752f65 2e636462 00000063              e/usbdc.c...

00002be4 <_init>:
    2be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bea:	bc08      	pop	{r3}
    2bec:	469e      	mov	lr, r3
    2bee:	4770      	bx	lr

00002bf0 <__init_array_start>:
    2bf0:	000000dd 	.word	0x000000dd

00002bf4 <_fini>:
    2bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bfa:	bc08      	pop	{r3}
    2bfc:	469e      	mov	lr, r3
    2bfe:	4770      	bx	lr

00002c00 <__fini_array_start>:
    2c00:	000000b5 	.word	0x000000b5
