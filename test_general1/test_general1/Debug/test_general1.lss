
test_general1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000111e4  2**0
                  CONTENTS
  2 .bss          00000070  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  20000070  20000070  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029205  00000000  00000000  00011265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000317c  00000000  00000000  0003a46a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ea82  00000000  00000000  0003d5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ce0  00000000  00000000  0004c068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  0004cd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019141  00000000  00000000  0004db28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000109ab  00000000  00000000  00066c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000887ff  00000000  00000000  00077614  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020a0  00000000  00000000  000ffe14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     p . %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	65 0d 00 00 ed 0b 00 00 21 01 00 00 21 01 00 00     e.......!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	000011e4 	.word	0x000011e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	000011e4 	.word	0x000011e4
     10c:	000011e4 	.word	0x000011e4
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000004bd 	.word	0x000004bd

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
     128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
     12a:	429a      	cmp	r2, r3
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
     130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
     132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     134:	6811      	ldr	r1, [r2, #0]
     136:	6019      	str	r1, [r3, #0]
     138:	3304      	adds	r3, #4
     13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
     13e:	428b      	cmp	r3, r1
     140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
     144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
     146:	2200      	movs	r2, #0
     148:	601a      	str	r2, [r3, #0]
     14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
     14e:	4293      	cmp	r3, r2
     150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
     154:	21ff      	movs	r1, #255	; 0xff
     156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
     158:	438b      	bics	r3, r1
     15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	39fd      	subs	r1, #253	; 0xfd
     15e:	2390      	movs	r3, #144	; 0x90
     160:	005b      	lsls	r3, r3, #1
     162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
     164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	2503      	movs	r5, #3
     16c:	43ab      	bics	r3, r5
     16e:	2402      	movs	r4, #2
     170:	4323      	orrs	r3, r4
     172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     174:	78d3      	ldrb	r3, [r2, #3]
     176:	270c      	movs	r7, #12
     178:	43bb      	bics	r3, r7
     17a:	2608      	movs	r6, #8
     17c:	4333      	orrs	r3, r6
     17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	2230      	movs	r2, #48	; 0x30
     186:	4390      	bics	r0, r2
     188:	2220      	movs	r2, #32
     18a:	4310      	orrs	r0, r2
     18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     18e:	7b99      	ldrb	r1, [r3, #14]
     190:	43b9      	bics	r1, r7
     192:	4331      	orrs	r1, r6
     194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     196:	7b9a      	ldrb	r2, [r3, #14]
     198:	43aa      	bics	r2, r5
     19a:	4322      	orrs	r2, r4
     19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
     1a0:	6851      	ldr	r1, [r2, #4]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	430b      	orrs	r3, r1
     1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
     1aa:	4798      	blx	r3
        main();
     1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
     1ae:	4798      	blx	r3
     1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	000011e4 	.word	0x000011e4
     1b8:	20000000 	.word	0x20000000
     1bc:	20000000 	.word	0x20000000
     1c0:	20000000 	.word	0x20000000
     1c4:	20000070 	.word	0x20000070
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	00000ff9 	.word	0x00000ff9
     1e4:	00000f99 	.word	0x00000f99

000001e8 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     1e8:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
     1ea:	4a08      	ldr	r2, [pc, #32]	; (20c <TIMER_0_init+0x24>)
     1ec:	6993      	ldr	r3, [r2, #24]
     1ee:	2120      	movs	r1, #32
     1f0:	430b      	orrs	r3, r1
     1f2:	6193      	str	r3, [r2, #24]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1f4:	4a06      	ldr	r2, [pc, #24]	; (210 <TIMER_0_init+0x28>)
     1f6:	4b07      	ldr	r3, [pc, #28]	; (214 <TIMER_0_init+0x2c>)
     1f8:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     1fa:	4b07      	ldr	r3, [pc, #28]	; (218 <TIMER_0_init+0x30>)
     1fc:	4798      	blx	r3
     1fe:	0002      	movs	r2, r0
     200:	4906      	ldr	r1, [pc, #24]	; (21c <TIMER_0_init+0x34>)
     202:	4807      	ldr	r0, [pc, #28]	; (220 <TIMER_0_init+0x38>)
     204:	4b07      	ldr	r3, [pc, #28]	; (224 <TIMER_0_init+0x3c>)
     206:	4798      	blx	r3
}
     208:	bd10      	pop	{r4, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	40000400 	.word	0x40000400
     210:	00004104 	.word	0x00004104
     214:	40000c00 	.word	0x40000c00
     218:	00000d61 	.word	0x00000d61
     21c:	40001400 	.word	0x40001400
     220:	20000054 	.word	0x20000054
     224:	0000075d 	.word	0x0000075d

00000228 <ADC_0_PORT_init>:
{
     228:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     22a:	26c0      	movs	r6, #192	; 0xc0
     22c:	05f6      	lsls	r6, r6, #23
     22e:	2310      	movs	r3, #16
     230:	6073      	str	r3, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     232:	4b14      	ldr	r3, [pc, #80]	; (284 <ADC_0_PORT_init+0x5c>)
     234:	4a14      	ldr	r2, [pc, #80]	; (288 <ADC_0_PORT_init+0x60>)
     236:	629a      	str	r2, [r3, #40]	; 0x28
     238:	22c0      	movs	r2, #192	; 0xc0
     23a:	0612      	lsls	r2, r2, #24
     23c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     23e:	2044      	movs	r0, #68	; 0x44
     240:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     242:	2501      	movs	r5, #1
     244:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     246:	2401      	movs	r4, #1
     248:	4321      	orrs	r1, r4
     24a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     24c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     24e:	3812      	subs	r0, #18
     250:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     252:	270f      	movs	r7, #15
     254:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     256:	4321      	orrs	r1, r4
     258:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     25a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     25c:	2120      	movs	r1, #32
     25e:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     260:	490a      	ldr	r1, [pc, #40]	; (28c <ADC_0_PORT_init+0x64>)
     262:	6299      	str	r1, [r3, #40]	; 0x28
     264:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     266:	2145      	movs	r1, #69	; 0x45
     268:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     26c:	4322      	orrs	r2, r4
     26e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     270:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     272:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     274:	3936      	subs	r1, #54	; 0x36
     276:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     278:	2110      	movs	r1, #16
     27a:	430a      	orrs	r2, r1
     27c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     27e:	541a      	strb	r2, [r3, r0]
}
     280:	bdf0      	pop	{r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	41004400 	.word	0x41004400
     288:	40000010 	.word	0x40000010
     28c:	40000020 	.word	0x40000020

00000290 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     290:	4a04      	ldr	r2, [pc, #16]	; (2a4 <ADC_0_CLOCK_init+0x14>)
     292:	6a11      	ldr	r1, [r2, #32]
     294:	2380      	movs	r3, #128	; 0x80
     296:	025b      	lsls	r3, r3, #9
     298:	430b      	orrs	r3, r1
     29a:	6213      	str	r3, [r2, #32]
     29c:	4a02      	ldr	r2, [pc, #8]	; (2a8 <ADC_0_CLOCK_init+0x18>)
     29e:	4b03      	ldr	r3, [pc, #12]	; (2ac <ADC_0_CLOCK_init+0x1c>)
     2a0:	805a      	strh	r2, [r3, #2]
}
     2a2:	4770      	bx	lr
     2a4:	40000400 	.word	0x40000400
     2a8:	0000401e 	.word	0x0000401e
     2ac:	40000c00 	.word	0x40000c00

000002b0 <ADC_0_init>:
{
     2b0:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     2b2:	4b05      	ldr	r3, [pc, #20]	; (2c8 <ADC_0_init+0x18>)
     2b4:	4798      	blx	r3
	ADC_0_PORT_init();
     2b6:	4b05      	ldr	r3, [pc, #20]	; (2cc <ADC_0_init+0x1c>)
     2b8:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     2ba:	2200      	movs	r2, #0
     2bc:	4904      	ldr	r1, [pc, #16]	; (2d0 <ADC_0_init+0x20>)
     2be:	4805      	ldr	r0, [pc, #20]	; (2d4 <ADC_0_init+0x24>)
     2c0:	4b05      	ldr	r3, [pc, #20]	; (2d8 <ADC_0_init+0x28>)
     2c2:	4798      	blx	r3
}
     2c4:	bd10      	pop	{r4, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000291 	.word	0x00000291
     2cc:	00000229 	.word	0x00000229
     2d0:	42004000 	.word	0x42004000
     2d4:	20000038 	.word	0x20000038
     2d8:	0000058d 	.word	0x0000058d

000002dc <EXTERNAL_IRQ_0_init>:
{
     2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2de:	4a1b      	ldr	r2, [pc, #108]	; (34c <EXTERNAL_IRQ_0_init+0x70>)
     2e0:	4b1b      	ldr	r3, [pc, #108]	; (350 <EXTERNAL_IRQ_0_init+0x74>)
     2e2:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2e4:	23c0      	movs	r3, #192	; 0xc0
     2e6:	05db      	lsls	r3, r3, #23
     2e8:	469c      	mov	ip, r3
     2ea:	2380      	movs	r3, #128	; 0x80
     2ec:	025b      	lsls	r3, r3, #9
     2ee:	4662      	mov	r2, ip
     2f0:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2f2:	4b18      	ldr	r3, [pc, #96]	; (354 <EXTERNAL_IRQ_0_init+0x78>)
     2f4:	4c18      	ldr	r4, [pc, #96]	; (358 <EXTERNAL_IRQ_0_init+0x7c>)
     2f6:	629c      	str	r4, [r3, #40]	; 0x28
     2f8:	4a18      	ldr	r2, [pc, #96]	; (35c <EXTERNAL_IRQ_0_init+0x80>)
     2fa:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2fc:	2050      	movs	r0, #80	; 0x50
     2fe:	5c1a      	ldrb	r2, [r3, r0]
     300:	2704      	movs	r7, #4
     302:	43ba      	bics	r2, r7
     304:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     306:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     308:	2601      	movs	r6, #1
     30a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     30c:	2501      	movs	r5, #1
     30e:	4329      	orrs	r1, r5
     310:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     312:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     314:	2138      	movs	r1, #56	; 0x38
     316:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     318:	3841      	subs	r0, #65	; 0x41
     31a:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     31e:	2280      	movs	r2, #128	; 0x80
     320:	0292      	lsls	r2, r2, #10
     322:	4660      	mov	r0, ip
     324:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     326:	629c      	str	r4, [r3, #40]	; 0x28
     328:	4a0d      	ldr	r2, [pc, #52]	; (360 <EXTERNAL_IRQ_0_init+0x84>)
     32a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     32c:	2051      	movs	r0, #81	; 0x51
     32e:	5c1c      	ldrb	r4, [r3, r0]
     330:	43bc      	bics	r4, r7
     332:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     334:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     336:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     338:	432a      	orrs	r2, r5
     33a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33c:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     33e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     340:	3842      	subs	r0, #66	; 0x42
     342:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     344:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     346:	4b07      	ldr	r3, [pc, #28]	; (364 <EXTERNAL_IRQ_0_init+0x88>)
     348:	4798      	blx	r3
}
     34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     34c:	00004005 	.word	0x00004005
     350:	40000c00 	.word	0x40000c00
     354:	41004400 	.word	0x41004400
     358:	40020000 	.word	0x40020000
     35c:	c0020001 	.word	0xc0020001
     360:	c0020002 	.word	0xc0020002
     364:	0000066d 	.word	0x0000066d

00000368 <USART_0_PORT_init>:
{
     368:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36a:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <USART_0_PORT_init+0x40>)
     36c:	2240      	movs	r2, #64	; 0x40
     36e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     370:	2501      	movs	r5, #1
     372:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     374:	2401      	movs	r4, #1
     376:	4321      	orrs	r1, r4
     378:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     37a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37c:	2030      	movs	r0, #48	; 0x30
     37e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     380:	3a31      	subs	r2, #49	; 0x31
     382:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     384:	2203      	movs	r2, #3
     386:	4311      	orrs	r1, r2
     388:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     38a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     38c:	2141      	movs	r1, #65	; 0x41
     38e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     390:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     392:	4322      	orrs	r2, r4
     394:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     396:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     398:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     39a:	3932      	subs	r1, #50	; 0x32
     39c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     39e:	2130      	movs	r1, #48	; 0x30
     3a0:	430a      	orrs	r2, r1
     3a2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a4:	541a      	strb	r2, [r3, r0]
}
     3a6:	bd30      	pop	{r4, r5, pc}
     3a8:	41004400 	.word	0x41004400

000003ac <USART_0_CLOCK_init>:
     3ac:	4a04      	ldr	r2, [pc, #16]	; (3c0 <USART_0_CLOCK_init+0x14>)
     3ae:	6a13      	ldr	r3, [r2, #32]
     3b0:	2108      	movs	r1, #8
     3b2:	430b      	orrs	r3, r1
     3b4:	6213      	str	r3, [r2, #32]
     3b6:	4a03      	ldr	r2, [pc, #12]	; (3c4 <USART_0_CLOCK_init+0x18>)
     3b8:	4b03      	ldr	r3, [pc, #12]	; (3c8 <USART_0_CLOCK_init+0x1c>)
     3ba:	805a      	strh	r2, [r3, #2]
}
     3bc:	4770      	bx	lr
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	40000400 	.word	0x40000400
     3c4:	00004015 	.word	0x00004015
     3c8:	40000c00 	.word	0x40000c00

000003cc <USART_0_init>:
{
     3cc:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <USART_0_init+0x18>)
     3d0:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM1, (void *)NULL);
     3d2:	2200      	movs	r2, #0
     3d4:	4904      	ldr	r1, [pc, #16]	; (3e8 <USART_0_init+0x1c>)
     3d6:	4805      	ldr	r0, [pc, #20]	; (3ec <USART_0_init+0x20>)
     3d8:	4b05      	ldr	r3, [pc, #20]	; (3f0 <USART_0_init+0x24>)
     3da:	4798      	blx	r3
	USART_0_PORT_init();
     3dc:	4b05      	ldr	r3, [pc, #20]	; (3f4 <USART_0_init+0x28>)
     3de:	4798      	blx	r3
}
     3e0:	bd10      	pop	{r4, pc}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	000003ad 	.word	0x000003ad
     3e8:	42000c00 	.word	0x42000c00
     3ec:	20000048 	.word	0x20000048
     3f0:	00000881 	.word	0x00000881
     3f4:	00000369 	.word	0x00000369

000003f8 <delay_driver_init>:
{
     3f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     3fa:	4802      	ldr	r0, [pc, #8]	; (404 <delay_driver_init+0xc>)
     3fc:	4b02      	ldr	r3, [pc, #8]	; (408 <delay_driver_init+0x10>)
     3fe:	4798      	blx	r3
}
     400:	bd10      	pop	{r4, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	e000e010 	.word	0xe000e010
     408:	00000615 	.word	0x00000615

0000040c <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
     40c:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     40e:	26c0      	movs	r6, #192	; 0xc0
     410:	05f6      	lsls	r6, r6, #23
     412:	2304      	movs	r3, #4
     414:	6073      	str	r3, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	4b14      	ldr	r3, [pc, #80]	; (468 <DAC_0_PORT_init+0x5c>)
     418:	4a14      	ldr	r2, [pc, #80]	; (46c <DAC_0_PORT_init+0x60>)
     41a:	629a      	str	r2, [r3, #40]	; 0x28
     41c:	22c0      	movs	r2, #192	; 0xc0
     41e:	0612      	lsls	r2, r2, #24
     420:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     422:	2042      	movs	r0, #66	; 0x42
     424:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     426:	2501      	movs	r5, #1
     428:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42a:	2401      	movs	r4, #1
     42c:	4321      	orrs	r1, r4
     42e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     432:	3811      	subs	r0, #17
     434:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     436:	270f      	movs	r7, #15
     438:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     43a:	4321      	orrs	r1, r4
     43c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     440:	2108      	movs	r1, #8
     442:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     444:	490a      	ldr	r1, [pc, #40]	; (470 <DAC_0_PORT_init+0x64>)
     446:	6299      	str	r1, [r3, #40]	; 0x28
     448:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     44a:	2143      	movs	r1, #67	; 0x43
     44c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     44e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     450:	4322      	orrs	r2, r4
     452:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     454:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     456:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     458:	3934      	subs	r1, #52	; 0x34
     45a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     45c:	2110      	movs	r1, #16
     45e:	430a      	orrs	r2, r1
     460:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     462:	541a      	strb	r2, [r3, r0]

	// Disable digital pin circuitry
	gpio_set_pin_direction(DAC_VREF, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(DAC_VREF, PINMUX_PA03B_DAC_VREFP);
}
     464:	bdf0      	pop	{r4, r5, r6, r7, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	41004400 	.word	0x41004400
     46c:	40000004 	.word	0x40000004
     470:	40000008 	.word	0x40000008

00000474 <DAC_0_CLOCK_init>:
     474:	4a04      	ldr	r2, [pc, #16]	; (488 <DAC_0_CLOCK_init+0x14>)
     476:	6a11      	ldr	r1, [r2, #32]
     478:	2380      	movs	r3, #128	; 0x80
     47a:	02db      	lsls	r3, r3, #11
     47c:	430b      	orrs	r3, r1
     47e:	6213      	str	r3, [r2, #32]
     480:	4a02      	ldr	r2, [pc, #8]	; (48c <DAC_0_CLOCK_init+0x18>)
     482:	4b03      	ldr	r3, [pc, #12]	; (490 <DAC_0_CLOCK_init+0x1c>)
     484:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
     486:	4770      	bx	lr
     488:	40000400 	.word	0x40000400
     48c:	00004021 	.word	0x00004021
     490:	40000c00 	.word	0x40000c00

00000494 <DAC_0_init>:

void DAC_0_init(void)
{
     494:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     496:	4b04      	ldr	r3, [pc, #16]	; (4a8 <DAC_0_init+0x14>)
     498:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     49a:	4904      	ldr	r1, [pc, #16]	; (4ac <DAC_0_init+0x18>)
     49c:	4804      	ldr	r0, [pc, #16]	; (4b0 <DAC_0_init+0x1c>)
     49e:	4b05      	ldr	r3, [pc, #20]	; (4b4 <DAC_0_init+0x20>)
     4a0:	4798      	blx	r3
	DAC_0_PORT_init();
     4a2:	4b05      	ldr	r3, [pc, #20]	; (4b8 <DAC_0_init+0x24>)
     4a4:	4798      	blx	r3
}
     4a6:	bd10      	pop	{r4, pc}
     4a8:	00000475 	.word	0x00000475
     4ac:	42004800 	.word	0x42004800
     4b0:	2000003c 	.word	0x2000003c
     4b4:	000005c5 	.word	0x000005c5
     4b8:	0000040d 	.word	0x0000040d

000004bc <system_init>:

void system_init(void)
{
     4bc:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     4be:	4b26      	ldr	r3, [pc, #152]	; (558 <system_init+0x9c>)
     4c0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4c2:	22c0      	movs	r2, #192	; 0xc0
     4c4:	05d2      	lsls	r2, r2, #23
     4c6:	2380      	movs	r3, #128	; 0x80
     4c8:	005b      	lsls	r3, r3, #1
     4ca:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4cc:	4b23      	ldr	r3, [pc, #140]	; (55c <system_init+0xa0>)
     4ce:	4924      	ldr	r1, [pc, #144]	; (560 <system_init+0xa4>)
     4d0:	6299      	str	r1, [r3, #40]	; 0x28
     4d2:	4e24      	ldr	r6, [pc, #144]	; (564 <system_init+0xa8>)
     4d4:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4d6:	2148      	movs	r1, #72	; 0x48
     4d8:	5c58      	ldrb	r0, [r3, r1]
     4da:	2404      	movs	r4, #4
     4dc:	43a0      	bics	r0, r4
     4de:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e0:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e2:	2001      	movs	r0, #1
     4e4:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e6:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e8:	2580      	movs	r5, #128	; 0x80
     4ea:	00ad      	lsls	r5, r5, #2
     4ec:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ee:	491e      	ldr	r1, [pc, #120]	; (568 <system_init+0xac>)
     4f0:	6299      	str	r1, [r3, #40]	; 0x28
     4f2:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4f4:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4f6:	2449      	movs	r4, #73	; 0x49
     4f8:	5d19      	ldrb	r1, [r3, r4]
     4fa:	2604      	movs	r6, #4
     4fc:	4331      	orrs	r1, r6
     4fe:	b2c9      	uxtb	r1, r1
     500:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     502:	6155      	str	r5, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     504:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     506:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     508:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50a:	2180      	movs	r1, #128	; 0x80
     50c:	00c9      	lsls	r1, r1, #3
     50e:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     510:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     512:	4916      	ldr	r1, [pc, #88]	; (56c <system_init+0xb0>)
     514:	6299      	str	r1, [r3, #40]	; 0x28
     516:	24c0      	movs	r4, #192	; 0xc0
     518:	0624      	lsls	r4, r4, #24
     51a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51c:	3db7      	subs	r5, #183	; 0xb7
     51e:	3dff      	subs	r5, #255	; 0xff
     520:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     522:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     524:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     526:	2180      	movs	r1, #128	; 0x80
     528:	0109      	lsls	r1, r1, #4
     52a:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     52c:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52e:	4a10      	ldr	r2, [pc, #64]	; (570 <system_init+0xb4>)
     530:	629a      	str	r2, [r3, #40]	; 0x28
     532:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     534:	214b      	movs	r1, #75	; 0x4b
     536:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     538:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53a:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(DIO_2, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(DIO_2, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     53c:	4b0d      	ldr	r3, [pc, #52]	; (574 <system_init+0xb8>)
     53e:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     540:	4b0d      	ldr	r3, [pc, #52]	; (578 <system_init+0xbc>)
     542:	4798      	blx	r3

	USART_0_init();
     544:	4b0d      	ldr	r3, [pc, #52]	; (57c <system_init+0xc0>)
     546:	4798      	blx	r3

	delay_driver_init();
     548:	4b0d      	ldr	r3, [pc, #52]	; (580 <system_init+0xc4>)
     54a:	4798      	blx	r3

	TIMER_0_init();
     54c:	4b0d      	ldr	r3, [pc, #52]	; (584 <system_init+0xc8>)
     54e:	4798      	blx	r3

	DAC_0_init();
     550:	4b0d      	ldr	r3, [pc, #52]	; (588 <system_init+0xcc>)
     552:	4798      	blx	r3
}
     554:	bd70      	pop	{r4, r5, r6, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	00000ab9 	.word	0x00000ab9
     55c:	41004400 	.word	0x41004400
     560:	40020100 	.word	0x40020100
     564:	c0020000 	.word	0xc0020000
     568:	40020200 	.word	0x40020200
     56c:	40000400 	.word	0x40000400
     570:	40000800 	.word	0x40000800
     574:	000002b1 	.word	0x000002b1
     578:	000002dd 	.word	0x000002dd
     57c:	000003cd 	.word	0x000003cd
     580:	000003f9 	.word	0x000003f9
     584:	000001e9 	.word	0x000001e9
     588:	00000495 	.word	0x00000495

0000058c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	0004      	movs	r4, r0
     590:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     592:	2800      	cmp	r0, #0
     594:	d00d      	beq.n	5b2 <adc_sync_init+0x26>
     596:	2900      	cmp	r1, #0
     598:	d009      	beq.n	5ae <adc_sync_init+0x22>
     59a:	2001      	movs	r0, #1
     59c:	2239      	movs	r2, #57	; 0x39
     59e:	4906      	ldr	r1, [pc, #24]	; (5b8 <adc_sync_init+0x2c>)
     5a0:	4b06      	ldr	r3, [pc, #24]	; (5bc <adc_sync_init+0x30>)
     5a2:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5a4:	0029      	movs	r1, r5
     5a6:	0020      	movs	r0, r4
     5a8:	4b05      	ldr	r3, [pc, #20]	; (5c0 <adc_sync_init+0x34>)
     5aa:	4798      	blx	r3
}
     5ac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5ae:	2000      	movs	r0, #0
     5b0:	e7f4      	b.n	59c <adc_sync_init+0x10>
     5b2:	2000      	movs	r0, #0
     5b4:	e7f2      	b.n	59c <adc_sync_init+0x10>
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	00001040 	.word	0x00001040
     5bc:	000008cd 	.word	0x000008cd
     5c0:	00000a81 	.word	0x00000a81

000005c4 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	0004      	movs	r4, r0
     5c8:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     5ca:	2800      	cmp	r0, #0
     5cc:	d010      	beq.n	5f0 <dac_sync_init+0x2c>
     5ce:	2900      	cmp	r1, #0
     5d0:	d00c      	beq.n	5ec <dac_sync_init+0x28>
     5d2:	2001      	movs	r0, #1
     5d4:	2232      	movs	r2, #50	; 0x32
     5d6:	490c      	ldr	r1, [pc, #48]	; (608 <dac_sync_init+0x44>)
     5d8:	4b0c      	ldr	r3, [pc, #48]	; (60c <dac_sync_init+0x48>)
     5da:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     5dc:	0029      	movs	r1, r5
     5de:	0020      	movs	r0, r4
     5e0:	4b0b      	ldr	r3, [pc, #44]	; (610 <dac_sync_init+0x4c>)
     5e2:	4798      	blx	r3
	if (rc) {
     5e4:	2800      	cmp	r0, #0
     5e6:	d10e      	bne.n	606 <dac_sync_init+0x42>
     5e8:	2300      	movs	r3, #0
     5ea:	e00a      	b.n	602 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     5ec:	2000      	movs	r0, #0
     5ee:	e7f1      	b.n	5d4 <dac_sync_init+0x10>
     5f0:	2000      	movs	r0, #0
     5f2:	e7ef      	b.n	5d4 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     5f4:	00da      	lsls	r2, r3, #3
     5f6:	18a2      	adds	r2, r4, r2
     5f8:	2100      	movs	r1, #0
     5fa:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     5fc:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     5fe:	3301      	adds	r3, #1
     600:	b2db      	uxtb	r3, r3
     602:	2b00      	cmp	r3, #0
     604:	d0f6      	beq.n	5f4 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     606:	bd70      	pop	{r4, r5, r6, pc}
     608:	0000105c 	.word	0x0000105c
     60c:	000008cd 	.word	0x000008cd
     610:	00000b2d 	.word	0x00000b2d

00000614 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     614:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <delay_init+0xc>)
     618:	6018      	str	r0, [r3, #0]
     61a:	4b02      	ldr	r3, [pc, #8]	; (624 <delay_init+0x10>)
     61c:	4798      	blx	r3
}
     61e:	bd10      	pop	{r4, pc}
     620:	2000001c 	.word	0x2000001c
     624:	00000f8d 	.word	0x00000f8d

00000628 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     628:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     62a:	2502      	movs	r5, #2
     62c:	2400      	movs	r4, #0

	while (upper >= lower) {
     62e:	e007      	b.n	640 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     630:	4a0d      	ldr	r2, [pc, #52]	; (668 <process_ext_irq+0x40>)
     632:	58b3      	ldr	r3, [r6, r2]
     634:	2b00      	cmp	r3, #0
     636:	d000      	beq.n	63a <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     638:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     63a:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     63c:	3a01      	subs	r2, #1
     63e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     640:	42ac      	cmp	r4, r5
     642:	d8fa      	bhi.n	63a <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     644:	192b      	adds	r3, r5, r4
     646:	105b      	asrs	r3, r3, #1
     648:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     64a:	2a01      	cmp	r2, #1
     64c:	d8f5      	bhi.n	63a <process_ext_irq+0x12>
     64e:	21ff      	movs	r1, #255	; 0xff
     650:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     652:	00de      	lsls	r6, r3, #3
     654:	4904      	ldr	r1, [pc, #16]	; (668 <process_ext_irq+0x40>)
     656:	1989      	adds	r1, r1, r6
     658:	6849      	ldr	r1, [r1, #4]
     65a:	4281      	cmp	r1, r0
     65c:	d0e8      	beq.n	630 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     65e:	d2ed      	bcs.n	63c <process_ext_irq+0x14>
			lower = middle + 1;
     660:	3201      	adds	r2, #1
     662:	b2d4      	uxtb	r4, r2
     664:	e7ec      	b.n	640 <process_ext_irq+0x18>
     666:	46c0      	nop			; (mov r8, r8)
     668:	20000020 	.word	0x20000020

0000066c <ext_irq_init>:
{
     66c:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     66e:	2300      	movs	r3, #0
     670:	e009      	b.n	686 <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     672:	4a08      	ldr	r2, [pc, #32]	; (694 <ext_irq_init+0x28>)
     674:	00d9      	lsls	r1, r3, #3
     676:	1850      	adds	r0, r2, r1
     678:	2401      	movs	r4, #1
     67a:	4264      	negs	r4, r4
     67c:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     67e:	2000      	movs	r0, #0
     680:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     682:	3301      	adds	r3, #1
     684:	b29b      	uxth	r3, r3
     686:	2b01      	cmp	r3, #1
     688:	d9f3      	bls.n	672 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     68a:	4803      	ldr	r0, [pc, #12]	; (698 <ext_irq_init+0x2c>)
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <ext_irq_init+0x30>)
     68e:	4798      	blx	r3
}
     690:	bd10      	pop	{r4, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	20000020 	.word	0x20000020
     698:	00000629 	.word	0x00000629
     69c:	00000b59 	.word	0x00000b59

000006a0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     6a2:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     6a4:	2e00      	cmp	r6, #0
     6a6:	d002      	beq.n	6ae <timer_add_timer_task+0xe>
     6a8:	0033      	movs	r3, r6
     6aa:	2500      	movs	r5, #0
     6ac:	e00c      	b.n	6c8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     6ae:	4b10      	ldr	r3, [pc, #64]	; (6f0 <timer_add_timer_task+0x50>)
     6b0:	4798      	blx	r3
		return;
     6b2:	e018      	b.n	6e6 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     6b4:	689f      	ldr	r7, [r3, #8]
     6b6:	46bc      	mov	ip, r7
     6b8:	4464      	add	r4, ip
     6ba:	1aa4      	subs	r4, r4, r2
     6bc:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     6be:	688f      	ldr	r7, [r1, #8]
     6c0:	42bc      	cmp	r4, r7
     6c2:	d20b      	bcs.n	6dc <timer_add_timer_task+0x3c>
			break;
		prev = it;
     6c4:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     6c6:	681b      	ldr	r3, [r3, #0]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d007      	beq.n	6dc <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     6cc:	685c      	ldr	r4, [r3, #4]
     6ce:	4294      	cmp	r4, r2
     6d0:	d8f0      	bhi.n	6b4 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     6d2:	1aa4      	subs	r4, r4, r2
     6d4:	689f      	ldr	r7, [r3, #8]
     6d6:	46bc      	mov	ip, r7
     6d8:	4464      	add	r4, ip
     6da:	e7f0      	b.n	6be <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     6dc:	42b3      	cmp	r3, r6
     6de:	d003      	beq.n	6e8 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     6e0:	0028      	movs	r0, r5
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <timer_add_timer_task+0x54>)
     6e4:	4798      	blx	r3
	}
}
     6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     6e8:	4b01      	ldr	r3, [pc, #4]	; (6f0 <timer_add_timer_task+0x50>)
     6ea:	4798      	blx	r3
     6ec:	e7fb      	b.n	6e6 <timer_add_timer_task+0x46>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	000008ed 	.word	0x000008ed
     6f4:	00000919 	.word	0x00000919

000006f8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fa:	0005      	movs	r5, r0
     6fc:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     6fe:	6903      	ldr	r3, [r0, #16]
     700:	1c5e      	adds	r6, r3, #1
     702:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     704:	7e03      	ldrb	r3, [r0, #24]
     706:	07db      	lsls	r3, r3, #31
     708:	d402      	bmi.n	710 <timer_process_counted+0x18>
     70a:	7e03      	ldrb	r3, [r0, #24]
     70c:	079b      	lsls	r3, r3, #30
     70e:	d50a      	bpl.n	726 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     710:	7e2b      	ldrb	r3, [r5, #24]
     712:	2202      	movs	r2, #2
     714:	4313      	orrs	r3, r2
     716:	b2db      	uxtb	r3, r3
     718:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     71c:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     71e:	68e3      	ldr	r3, [r4, #12]
     720:	0020      	movs	r0, r4
     722:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     724:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     726:	2c00      	cmp	r4, #0
     728:	d0f7      	beq.n	71a <timer_process_counted+0x22>
     72a:	6863      	ldr	r3, [r4, #4]
     72c:	1af3      	subs	r3, r6, r3
     72e:	68a2      	ldr	r2, [r4, #8]
     730:	4293      	cmp	r3, r2
     732:	d3f2      	bcc.n	71a <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     734:	002f      	movs	r7, r5
     736:	3714      	adds	r7, #20
     738:	0038      	movs	r0, r7
     73a:	4b06      	ldr	r3, [pc, #24]	; (754 <timer_process_counted+0x5c>)
     73c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     73e:	7c23      	ldrb	r3, [r4, #16]
     740:	2b01      	cmp	r3, #1
     742:	d1eb      	bne.n	71c <timer_process_counted+0x24>
			tmp->time_label = time;
     744:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     746:	0032      	movs	r2, r6
     748:	0021      	movs	r1, r4
     74a:	0038      	movs	r0, r7
     74c:	4b02      	ldr	r3, [pc, #8]	; (758 <timer_process_counted+0x60>)
     74e:	4798      	blx	r3
     750:	e7e4      	b.n	71c <timer_process_counted+0x24>
     752:	46c0      	nop			; (mov r8, r8)
     754:	00000921 	.word	0x00000921
     758:	000006a1 	.word	0x000006a1

0000075c <timer_init>:
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	0004      	movs	r4, r0
     760:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     762:	2800      	cmp	r0, #0
     764:	d012      	beq.n	78c <timer_init+0x30>
     766:	2900      	cmp	r1, #0
     768:	d00e      	beq.n	788 <timer_init+0x2c>
     76a:	2001      	movs	r0, #1
     76c:	223b      	movs	r2, #59	; 0x3b
     76e:	4908      	ldr	r1, [pc, #32]	; (790 <timer_init+0x34>)
     770:	4b08      	ldr	r3, [pc, #32]	; (794 <timer_init+0x38>)
     772:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     774:	0029      	movs	r1, r5
     776:	0020      	movs	r0, r4
     778:	4b07      	ldr	r3, [pc, #28]	; (798 <timer_init+0x3c>)
     77a:	4798      	blx	r3
	descr->time                           = 0;
     77c:	2300      	movs	r3, #0
     77e:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     780:	4b06      	ldr	r3, [pc, #24]	; (79c <timer_init+0x40>)
     782:	6023      	str	r3, [r4, #0]
}
     784:	2000      	movs	r0, #0
     786:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     788:	2000      	movs	r0, #0
     78a:	e7ef      	b.n	76c <timer_init+0x10>
     78c:	2000      	movs	r0, #0
     78e:	e7ed      	b.n	76c <timer_init+0x10>
     790:	00001078 	.word	0x00001078
     794:	000008cd 	.word	0x000008cd
     798:	00000d05 	.word	0x00000d05
     79c:	000006f9 	.word	0x000006f9

000007a0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7a2:	0005      	movs	r5, r0
     7a4:	000e      	movs	r6, r1
     7a6:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7a8:	2800      	cmp	r0, #0
     7aa:	d023      	beq.n	7f4 <usart_sync_write+0x54>
     7ac:	2900      	cmp	r1, #0
     7ae:	d023      	beq.n	7f8 <usart_sync_write+0x58>
     7b0:	2a00      	cmp	r2, #0
     7b2:	d123      	bne.n	7fc <usart_sync_write+0x5c>
     7b4:	2000      	movs	r0, #0
     7b6:	22f1      	movs	r2, #241	; 0xf1
     7b8:	4911      	ldr	r1, [pc, #68]	; (800 <usart_sync_write+0x60>)
     7ba:	4b12      	ldr	r3, [pc, #72]	; (804 <usart_sync_write+0x64>)
     7bc:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     7be:	002c      	movs	r4, r5
     7c0:	3408      	adds	r4, #8
     7c2:	0020      	movs	r0, r4
     7c4:	4b10      	ldr	r3, [pc, #64]	; (808 <usart_sync_write+0x68>)
     7c6:	4798      	blx	r3
     7c8:	2800      	cmp	r0, #0
     7ca:	d0f8      	beq.n	7be <usart_sync_write+0x1e>
     7cc:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7ce:	5d71      	ldrb	r1, [r6, r5]
     7d0:	0020      	movs	r0, r4
     7d2:	4b0e      	ldr	r3, [pc, #56]	; (80c <usart_sync_write+0x6c>)
     7d4:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7d6:	0020      	movs	r0, r4
     7d8:	4b0b      	ldr	r3, [pc, #44]	; (808 <usart_sync_write+0x68>)
     7da:	4798      	blx	r3
     7dc:	2800      	cmp	r0, #0
     7de:	d0fa      	beq.n	7d6 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     7e0:	3501      	adds	r5, #1
     7e2:	42bd      	cmp	r5, r7
     7e4:	d3f3      	bcc.n	7ce <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7e6:	0020      	movs	r0, r4
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <usart_sync_write+0x70>)
     7ea:	4798      	blx	r3
     7ec:	2800      	cmp	r0, #0
     7ee:	d0fa      	beq.n	7e6 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     7f0:	0028      	movs	r0, r5
     7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7f4:	2000      	movs	r0, #0
     7f6:	e7de      	b.n	7b6 <usart_sync_write+0x16>
     7f8:	2000      	movs	r0, #0
     7fa:	e7dc      	b.n	7b6 <usart_sync_write+0x16>
     7fc:	2001      	movs	r0, #1
     7fe:	e7da      	b.n	7b6 <usart_sync_write+0x16>
     800:	00001090 	.word	0x00001090
     804:	000008cd 	.word	0x000008cd
     808:	00000ef9 	.word	0x00000ef9
     80c:	00000ee9 	.word	0x00000ee9
     810:	00000f03 	.word	0x00000f03

00000814 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     816:	46ce      	mov	lr, r9
     818:	4647      	mov	r7, r8
     81a:	b580      	push	{r7, lr}
     81c:	1e05      	subs	r5, r0, #0
     81e:	4688      	mov	r8, r1
     820:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     822:	d01f      	beq.n	864 <usart_sync_read+0x50>
     824:	2900      	cmp	r1, #0
     826:	d01f      	beq.n	868 <usart_sync_read+0x54>
     828:	2a00      	cmp	r2, #0
     82a:	d11f      	bne.n	86c <usart_sync_read+0x58>
     82c:	2000      	movs	r0, #0
     82e:	2286      	movs	r2, #134	; 0x86
     830:	0052      	lsls	r2, r2, #1
     832:	490f      	ldr	r1, [pc, #60]	; (870 <usart_sync_read+0x5c>)
     834:	4b0f      	ldr	r3, [pc, #60]	; (874 <usart_sync_read+0x60>)
     836:	4798      	blx	r3
	uint32_t                      offset = 0;
     838:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     83a:	002c      	movs	r4, r5
     83c:	3408      	adds	r4, #8
     83e:	0020      	movs	r0, r4
     840:	4b0d      	ldr	r3, [pc, #52]	; (878 <usart_sync_read+0x64>)
     842:	4798      	blx	r3
     844:	2800      	cmp	r0, #0
     846:	d0f8      	beq.n	83a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     848:	4643      	mov	r3, r8
     84a:	199f      	adds	r7, r3, r6
     84c:	0020      	movs	r0, r4
     84e:	4b0b      	ldr	r3, [pc, #44]	; (87c <usart_sync_read+0x68>)
     850:	4798      	blx	r3
     852:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     854:	3601      	adds	r6, #1
     856:	454e      	cmp	r6, r9
     858:	d3ef      	bcc.n	83a <usart_sync_read+0x26>

	return (int32_t)offset;
}
     85a:	0030      	movs	r0, r6
     85c:	bc0c      	pop	{r2, r3}
     85e:	4690      	mov	r8, r2
     860:	4699      	mov	r9, r3
     862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     864:	2000      	movs	r0, #0
     866:	e7e2      	b.n	82e <usart_sync_read+0x1a>
     868:	2000      	movs	r0, #0
     86a:	e7e0      	b.n	82e <usart_sync_read+0x1a>
     86c:	2001      	movs	r0, #1
     86e:	e7de      	b.n	82e <usart_sync_read+0x1a>
     870:	00001090 	.word	0x00001090
     874:	000008cd 	.word	0x000008cd
     878:	00000f0f 	.word	0x00000f0f
     87c:	00000ef1 	.word	0x00000ef1

00000880 <usart_sync_init>:
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	0004      	movs	r4, r0
     884:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     886:	2800      	cmp	r0, #0
     888:	d014      	beq.n	8b4 <usart_sync_init+0x34>
     88a:	2900      	cmp	r1, #0
     88c:	d010      	beq.n	8b0 <usart_sync_init+0x30>
     88e:	2001      	movs	r0, #1
     890:	2234      	movs	r2, #52	; 0x34
     892:	4909      	ldr	r1, [pc, #36]	; (8b8 <usart_sync_init+0x38>)
     894:	4b09      	ldr	r3, [pc, #36]	; (8bc <usart_sync_init+0x3c>)
     896:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     898:	0020      	movs	r0, r4
     89a:	3008      	adds	r0, #8
     89c:	0029      	movs	r1, r5
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <usart_sync_init+0x40>)
     8a0:	4798      	blx	r3
	if (init_status) {
     8a2:	2800      	cmp	r0, #0
     8a4:	d103      	bne.n	8ae <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     8a6:	4b07      	ldr	r3, [pc, #28]	; (8c4 <usart_sync_init+0x44>)
     8a8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     8aa:	4b07      	ldr	r3, [pc, #28]	; (8c8 <usart_sync_init+0x48>)
     8ac:	6023      	str	r3, [r4, #0]
}
     8ae:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     8b0:	2000      	movs	r0, #0
     8b2:	e7ed      	b.n	890 <usart_sync_init+0x10>
     8b4:	2000      	movs	r0, #0
     8b6:	e7eb      	b.n	890 <usart_sync_init+0x10>
     8b8:	00001090 	.word	0x00001090
     8bc:	000008cd 	.word	0x000008cd
     8c0:	00000ebd 	.word	0x00000ebd
     8c4:	00000815 	.word	0x00000815
     8c8:	000007a1 	.word	0x000007a1

000008cc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8cc:	2800      	cmp	r0, #0
     8ce:	d100      	bne.n	8d2 <assert+0x6>
		__asm("BKPT #0");
     8d0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8d2:	4770      	bx	lr

000008d4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8d4:	6803      	ldr	r3, [r0, #0]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d003      	beq.n	8e2 <is_list_element+0xe>
		if (it == element) {
     8da:	428b      	cmp	r3, r1
     8dc:	d003      	beq.n	8e6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	e7f9      	b.n	8d6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     8e2:	2000      	movs	r0, #0
}
     8e4:	4770      	bx	lr
			return true;
     8e6:	2001      	movs	r0, #1
     8e8:	e7fc      	b.n	8e4 <is_list_element+0x10>
	...

000008ec <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	0004      	movs	r4, r0
     8f0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     8f2:	4b06      	ldr	r3, [pc, #24]	; (90c <list_insert_as_head+0x20>)
     8f4:	4798      	blx	r3
     8f6:	2301      	movs	r3, #1
     8f8:	4058      	eors	r0, r3
     8fa:	b2c0      	uxtb	r0, r0
     8fc:	2239      	movs	r2, #57	; 0x39
     8fe:	4904      	ldr	r1, [pc, #16]	; (910 <list_insert_as_head+0x24>)
     900:	4b04      	ldr	r3, [pc, #16]	; (914 <list_insert_as_head+0x28>)
     902:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     904:	6823      	ldr	r3, [r4, #0]
     906:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     908:	6025      	str	r5, [r4, #0]
}
     90a:	bd70      	pop	{r4, r5, r6, pc}
     90c:	000008d5 	.word	0x000008d5
     910:	000010ac 	.word	0x000010ac
     914:	000008cd 	.word	0x000008cd

00000918 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     918:	6803      	ldr	r3, [r0, #0]
     91a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     91c:	6001      	str	r1, [r0, #0]
}
     91e:	4770      	bx	lr

00000920 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     920:	6803      	ldr	r3, [r0, #0]
     922:	2b00      	cmp	r3, #0
     924:	d003      	beq.n	92e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     926:	681a      	ldr	r2, [r3, #0]
     928:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     92a:	0018      	movs	r0, r3
	}

	return NULL;
}
     92c:	4770      	bx	lr
	return NULL;
     92e:	2000      	movs	r0, #0
     930:	e7fc      	b.n	92c <list_remove_head+0xc>

00000932 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     932:	2000      	movs	r0, #0
     934:	4770      	bx	lr
	...

00000938 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     938:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     93a:	4b0b      	ldr	r3, [pc, #44]	; (968 <_adc_get_regs+0x30>)
     93c:	4798      	blx	r3
     93e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     940:	2000      	movs	r0, #0
     942:	2800      	cmp	r0, #0
     944:	d006      	beq.n	954 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     946:	227f      	movs	r2, #127	; 0x7f
     948:	4908      	ldr	r1, [pc, #32]	; (96c <_adc_get_regs+0x34>)
     94a:	2000      	movs	r0, #0
     94c:	4b08      	ldr	r3, [pc, #32]	; (970 <_adc_get_regs+0x38>)
     94e:	4798      	blx	r3
	return 0;
     950:	2000      	movs	r0, #0
}
     952:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     954:	00c3      	lsls	r3, r0, #3
     956:	1a1b      	subs	r3, r3, r0
     958:	0099      	lsls	r1, r3, #2
     95a:	4b06      	ldr	r3, [pc, #24]	; (974 <_adc_get_regs+0x3c>)
     95c:	5ccb      	ldrb	r3, [r1, r3]
     95e:	429a      	cmp	r2, r3
     960:	d0f7      	beq.n	952 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     962:	3001      	adds	r0, #1
     964:	b2c0      	uxtb	r0, r0
     966:	e7ec      	b.n	942 <_adc_get_regs+0xa>
     968:	00000933 	.word	0x00000933
     96c:	000010e8 	.word	0x000010e8
     970:	000008cd 	.word	0x000008cd
     974:	000010cc 	.word	0x000010cc

00000978 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	0004      	movs	r4, r0
     97c:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     97e:	4b3a      	ldr	r3, [pc, #232]	; (a68 <_adc_init+0xf0>)
     980:	18c0      	adds	r0, r0, r3
     982:	4243      	negs	r3, r0
     984:	4158      	adcs	r0, r3
     986:	b2c0      	uxtb	r0, r0
     988:	2294      	movs	r2, #148	; 0x94
     98a:	4938      	ldr	r1, [pc, #224]	; (a6c <_adc_init+0xf4>)
     98c:	4b38      	ldr	r3, [pc, #224]	; (a70 <_adc_init+0xf8>)
     98e:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     990:	4b38      	ldr	r3, [pc, #224]	; (a74 <_adc_init+0xfc>)
     992:	681a      	ldr	r2, [r3, #0]
     994:	08d2      	lsrs	r2, r2, #3
     996:	0212      	lsls	r2, r2, #8
     998:	23e0      	movs	r3, #224	; 0xe0
     99a:	00db      	lsls	r3, r3, #3
     99c:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     99e:	4936      	ldr	r1, [pc, #216]	; (a78 <_adc_init+0x100>)
     9a0:	680b      	ldr	r3, [r1, #0]
     9a2:	6849      	ldr	r1, [r1, #4]
     9a4:	0149      	lsls	r1, r1, #5
     9a6:	0edb      	lsrs	r3, r3, #27
     9a8:	430b      	orrs	r3, r1
     9aa:	21ff      	movs	r1, #255	; 0xff
     9ac:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     9ae:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     9b0:	7e63      	ldrb	r3, [r4, #25]
     9b2:	09db      	lsrs	r3, r3, #7
     9b4:	d1fc      	bne.n	9b0 <_adc_init+0x38>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     9b6:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     9b8:	079b      	lsls	r3, r3, #30
     9ba:	d504      	bpl.n	9c6 <_adc_init+0x4e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     9bc:	2300      	movs	r3, #0
     9be:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     9c0:	7e63      	ldrb	r3, [r4, #25]
     9c2:	09db      	lsrs	r3, r3, #7
     9c4:	d1fc      	bne.n	9c0 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg = data;
     9c6:	2301      	movs	r3, #1
     9c8:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     9ca:	7e63      	ldrb	r3, [r4, #25]
     9cc:	09db      	lsrs	r3, r3, #7
     9ce:	d1fc      	bne.n	9ca <_adc_init+0x52>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     9d0:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     9d2:	00ea      	lsls	r2, r5, #3
     9d4:	1b52      	subs	r2, r2, r5
     9d6:	0091      	lsls	r1, r2, #2
     9d8:	4b28      	ldr	r3, [pc, #160]	; (a7c <_adc_init+0x104>)
     9da:	185b      	adds	r3, r3, r1
     9dc:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     9de:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     9e0:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     9e2:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     9e4:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     9e6:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     9e8:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     9ea:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     9ec:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     9ee:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     9f0:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     9f2:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     9f4:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     9f6:	222a      	movs	r2, #42	; 0x2a
     9f8:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     9fa:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     9fc:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     9fe:	7e63      	ldrb	r3, [r4, #25]
     a00:	09db      	lsrs	r3, r3, #7
     a02:	d1fc      	bne.n	9fe <_adc_init+0x86>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     a04:	00eb      	lsls	r3, r5, #3
     a06:	1b5b      	subs	r3, r3, r5
     a08:	009a      	lsls	r2, r3, #2
     a0a:	4b1c      	ldr	r3, [pc, #112]	; (a7c <_adc_init+0x104>)
     a0c:	189b      	adds	r3, r3, r2
     a0e:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     a10:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a12:	7e63      	ldrb	r3, [r4, #25]
     a14:	09db      	lsrs	r3, r3, #7
     a16:	d1fc      	bne.n	a12 <_adc_init+0x9a>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     a18:	00eb      	lsls	r3, r5, #3
     a1a:	1b5b      	subs	r3, r3, r5
     a1c:	009a      	lsls	r2, r3, #2
     a1e:	4b17      	ldr	r3, [pc, #92]	; (a7c <_adc_init+0x104>)
     a20:	189b      	adds	r3, r3, r2
     a22:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     a24:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a26:	7e63      	ldrb	r3, [r4, #25]
     a28:	09db      	lsrs	r3, r3, #7
     a2a:	d1fc      	bne.n	a26 <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     a2c:	00eb      	lsls	r3, r5, #3
     a2e:	1b5b      	subs	r3, r3, r5
     a30:	009a      	lsls	r2, r3, #2
     a32:	4b12      	ldr	r3, [pc, #72]	; (a7c <_adc_init+0x104>)
     a34:	189b      	adds	r3, r3, r2
     a36:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     a38:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a3a:	7e63      	ldrb	r3, [r4, #25]
     a3c:	09db      	lsrs	r3, r3, #7
     a3e:	d1fc      	bne.n	a3a <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     a40:	00eb      	lsls	r3, r5, #3
     a42:	1b5b      	subs	r3, r3, r5
     a44:	009a      	lsls	r2, r3, #2
     a46:	4b0d      	ldr	r3, [pc, #52]	; (a7c <_adc_init+0x104>)
     a48:	189b      	adds	r3, r3, r2
     a4a:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     a4c:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a4e:	7e63      	ldrb	r3, [r4, #25]
     a50:	09db      	lsrs	r3, r3, #7
     a52:	d1fc      	bne.n	a4e <_adc_init+0xd6>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     a54:	00eb      	lsls	r3, r5, #3
     a56:	1b5d      	subs	r5, r3, r5
     a58:	00aa      	lsls	r2, r5, #2
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <_adc_init+0x104>)
     a5c:	189b      	adds	r3, r3, r2
     a5e:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
     a60:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     a62:	2000      	movs	r0, #0
     a64:	bd70      	pop	{r4, r5, r6, pc}
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	bdffc000 	.word	0xbdffc000
     a6c:	000010e8 	.word	0x000010e8
     a70:	000008cd 	.word	0x000008cd
     a74:	00806024 	.word	0x00806024
     a78:	00806020 	.word	0x00806020
     a7c:	000010cc 	.word	0x000010cc

00000a80 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     a80:	b570      	push	{r4, r5, r6, lr}
     a82:	0005      	movs	r5, r0
     a84:	000c      	movs	r4, r1
	ASSERT(device);
     a86:	1e43      	subs	r3, r0, #1
     a88:	4198      	sbcs	r0, r3
     a8a:	b2c0      	uxtb	r0, r0
     a8c:	22c5      	movs	r2, #197	; 0xc5
     a8e:	4906      	ldr	r1, [pc, #24]	; (aa8 <_adc_sync_init+0x28>)
     a90:	4b06      	ldr	r3, [pc, #24]	; (aac <_adc_sync_init+0x2c>)
     a92:	4798      	blx	r3

	device->hw = hw;
     a94:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     a96:	0020      	movs	r0, r4
     a98:	4b05      	ldr	r3, [pc, #20]	; (ab0 <_adc_sync_init+0x30>)
     a9a:	4798      	blx	r3
     a9c:	0001      	movs	r1, r0
     a9e:	0020      	movs	r0, r4
     aa0:	4b04      	ldr	r3, [pc, #16]	; (ab4 <_adc_sync_init+0x34>)
     aa2:	4798      	blx	r3
}
     aa4:	bd70      	pop	{r4, r5, r6, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	000010e8 	.word	0x000010e8
     aac:	000008cd 	.word	0x000008cd
     ab0:	00000939 	.word	0x00000939
     ab4:	00000979 	.word	0x00000979

00000ab8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     ab8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     aba:	4b06      	ldr	r3, [pc, #24]	; (ad4 <_init_chip+0x1c>)
     abc:	685a      	ldr	r2, [r3, #4]
     abe:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     ac0:	4b05      	ldr	r3, [pc, #20]	; (ad8 <_init_chip+0x20>)
     ac2:	4798      	blx	r3
	_sysctrl_init_sources();
     ac4:	4b05      	ldr	r3, [pc, #20]	; (adc <_init_chip+0x24>)
     ac6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     ac8:	4b05      	ldr	r3, [pc, #20]	; (ae0 <_init_chip+0x28>)
     aca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     acc:	20ff      	movs	r0, #255	; 0xff
     ace:	4b05      	ldr	r3, [pc, #20]	; (ae4 <_init_chip+0x2c>)
     ad0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     ad2:	bd10      	pop	{r4, pc}
     ad4:	41004000 	.word	0x41004000
     ad8:	00000cc9 	.word	0x00000cc9
     adc:	00000f1d 	.word	0x00000f1d
     ae0:	00000f69 	.word	0x00000f69
     ae4:	00000ca9 	.word	0x00000ca9

00000ae8 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
     ae8:	79c3      	ldrb	r3, [r0, #7]
     aea:	09db      	lsrs	r3, r3, #7
     aec:	d1fc      	bne.n	ae8 <_dac_init>
     aee:	79c3      	ldrb	r3, [r0, #7]
     af0:	09db      	lsrs	r3, r3, #7
     af2:	d1fc      	bne.n	aee <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
     af4:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
     af6:	079b      	lsls	r3, r3, #30
     af8:	d507      	bpl.n	b0a <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
     afa:	2300      	movs	r3, #0
     afc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
     afe:	79c3      	ldrb	r3, [r0, #7]
     b00:	09db      	lsrs	r3, r3, #7
     b02:	d1fc      	bne.n	afe <_dac_init+0x16>
     b04:	79c3      	ldrb	r3, [r0, #7]
     b06:	09db      	lsrs	r3, r3, #7
     b08:	d1fc      	bne.n	b04 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
     b0a:	2301      	movs	r3, #1
     b0c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
     b0e:	79c3      	ldrb	r3, [r0, #7]
     b10:	09db      	lsrs	r3, r3, #7
     b12:	d1fc      	bne.n	b0e <_dac_init+0x26>
     b14:	79c3      	ldrb	r3, [r0, #7]
     b16:	09db      	lsrs	r3, r3, #7
     b18:	d1fc      	bne.n	b14 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
     b1a:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
     b1c:	2201      	movs	r2, #1
     b1e:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
     b20:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
     b22:	79c3      	ldrb	r3, [r0, #7]
     b24:	09db      	lsrs	r3, r3, #7
     b26:	d1fc      	bne.n	b22 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
     b28:	2000      	movs	r0, #0
     b2a:	4770      	bx	lr

00000b2c <_dac_sync_init>:
{
     b2c:	b570      	push	{r4, r5, r6, lr}
     b2e:	0005      	movs	r5, r0
     b30:	000c      	movs	r4, r1
	ASSERT(device);
     b32:	1e43      	subs	r3, r0, #1
     b34:	4198      	sbcs	r0, r3
     b36:	b2c0      	uxtb	r0, r0
     b38:	2249      	movs	r2, #73	; 0x49
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <_dac_sync_init+0x20>)
     b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <_dac_sync_init+0x24>)
     b3e:	4798      	blx	r3
	device->hw = hw;
     b40:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
     b42:	0020      	movs	r0, r4
     b44:	4b03      	ldr	r3, [pc, #12]	; (b54 <_dac_sync_init+0x28>)
     b46:	4798      	blx	r3
}
     b48:	bd70      	pop	{r4, r5, r6, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00001100 	.word	0x00001100
     b50:	000008cd 	.word	0x000008cd
     b54:	00000ae9 	.word	0x00000ae9

00000b58 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b58:	4b21      	ldr	r3, [pc, #132]	; (be0 <_ext_irq_init+0x88>)
     b5a:	785b      	ldrb	r3, [r3, #1]
     b5c:	09db      	lsrs	r3, r3, #7
     b5e:	d1fb      	bne.n	b58 <_ext_irq_init>
     b60:	4b1f      	ldr	r3, [pc, #124]	; (be0 <_ext_irq_init+0x88>)
     b62:	785b      	ldrb	r3, [r3, #1]
     b64:	09db      	lsrs	r3, r3, #7
     b66:	d1fb      	bne.n	b60 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     b68:	4b1d      	ldr	r3, [pc, #116]	; (be0 <_ext_irq_init+0x88>)
     b6a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     b6c:	079b      	lsls	r3, r3, #30
     b6e:	d50a      	bpl.n	b86 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     b70:	2200      	movs	r2, #0
     b72:	4b1b      	ldr	r3, [pc, #108]	; (be0 <_ext_irq_init+0x88>)
     b74:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b76:	4b1a      	ldr	r3, [pc, #104]	; (be0 <_ext_irq_init+0x88>)
     b78:	785b      	ldrb	r3, [r3, #1]
     b7a:	09db      	lsrs	r3, r3, #7
     b7c:	d1fb      	bne.n	b76 <_ext_irq_init+0x1e>
     b7e:	4b18      	ldr	r3, [pc, #96]	; (be0 <_ext_irq_init+0x88>)
     b80:	785b      	ldrb	r3, [r3, #1]
     b82:	09db      	lsrs	r3, r3, #7
     b84:	d1fb      	bne.n	b7e <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     b86:	2201      	movs	r2, #1
     b88:	4b15      	ldr	r3, [pc, #84]	; (be0 <_ext_irq_init+0x88>)
     b8a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     b8c:	4b14      	ldr	r3, [pc, #80]	; (be0 <_ext_irq_init+0x88>)
     b8e:	785b      	ldrb	r3, [r3, #1]
     b90:	09db      	lsrs	r3, r3, #7
     b92:	d1fb      	bne.n	b8c <_ext_irq_init+0x34>
     b94:	4b12      	ldr	r3, [pc, #72]	; (be0 <_ext_irq_init+0x88>)
     b96:	785b      	ldrb	r3, [r3, #1]
     b98:	09db      	lsrs	r3, r3, #7
     b9a:	d1fb      	bne.n	b94 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     b9c:	4b10      	ldr	r3, [pc, #64]	; (be0 <_ext_irq_init+0x88>)
     b9e:	2200      	movs	r2, #0
     ba0:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     ba2:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     ba4:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     ba6:	2121      	movs	r1, #33	; 0x21
     ba8:	6199      	str	r1, [r3, #24]
     baa:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     bac:	781a      	ldrb	r2, [r3, #0]
     bae:	2102      	movs	r1, #2
     bb0:	430a      	orrs	r2, r1
     bb2:	b2d2      	uxtb	r2, r2
     bb4:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <_ext_irq_init+0x88>)
     bb8:	785b      	ldrb	r3, [r3, #1]
     bba:	09db      	lsrs	r3, r3, #7
     bbc:	d1fb      	bne.n	bb6 <_ext_irq_init+0x5e>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bbe:	4b09      	ldr	r3, [pc, #36]	; (be4 <_ext_irq_init+0x8c>)
     bc0:	2210      	movs	r2, #16
     bc2:	2180      	movs	r1, #128	; 0x80
     bc4:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     bca:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bce:	3101      	adds	r1, #1
     bd0:	31ff      	adds	r1, #255	; 0xff
     bd2:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bd4:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     bd6:	4b04      	ldr	r3, [pc, #16]	; (be8 <_ext_irq_init+0x90>)
     bd8:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     bda:	2000      	movs	r0, #0
     bdc:	4770      	bx	lr
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	40001800 	.word	0x40001800
     be4:	e000e100 	.word	0xe000e100
     be8:	20000030 	.word	0x20000030

00000bec <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     bec:	b5f0      	push	{r4, r5, r6, r7, lr}
     bee:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     bf0:	4b27      	ldr	r3, [pc, #156]	; (c90 <EIC_Handler+0xa4>)
     bf2:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     bf4:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     bf6:	400a      	ands	r2, r1
     bf8:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     bfa:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     bfc:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     bfe:	4b25      	ldr	r3, [pc, #148]	; (c94 <EIC_Handler+0xa8>)
     c00:	6818      	ldr	r0, [r3, #0]
     c02:	1e43      	subs	r3, r0, #1
     c04:	4198      	sbcs	r0, r3
     c06:	b2c0      	uxtb	r0, r0
     c08:	22d2      	movs	r2, #210	; 0xd2
     c0a:	4923      	ldr	r1, [pc, #140]	; (c98 <EIC_Handler+0xac>)
     c0c:	4b23      	ldr	r3, [pc, #140]	; (c9c <EIC_Handler+0xb0>)
     c0e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     c10:	2501      	movs	r5, #1
     c12:	426d      	negs	r5, r5

	while (flags) {
     c14:	e031      	b.n	c7a <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
     c16:	00db      	lsls	r3, r3, #3
     c18:	4a21      	ldr	r2, [pc, #132]	; (ca0 <EIC_Handler+0xb4>)
     c1a:	18d3      	adds	r3, r2, r3
     c1c:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     c1e:	1c6b      	adds	r3, r5, #1
     c20:	d003      	beq.n	c2a <EIC_Handler+0x3e>
				callback(pin);
     c22:	4b1c      	ldr	r3, [pc, #112]	; (c94 <EIC_Handler+0xa8>)
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	0028      	movs	r0, r5
     c28:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     c2a:	2201      	movs	r2, #1
     c2c:	40a2      	lsls	r2, r4
     c2e:	9b01      	ldr	r3, [sp, #4]
     c30:	4393      	bics	r3, r2
     c32:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     c34:	9801      	ldr	r0, [sp, #4]
     c36:	4b1b      	ldr	r3, [pc, #108]	; (ca4 <EIC_Handler+0xb8>)
     c38:	4798      	blx	r3
     c3a:	3801      	subs	r0, #1
     c3c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     c3e:	1c63      	adds	r3, r4, #1
     c40:	d014      	beq.n	c6c <EIC_Handler+0x80>
     c42:	2602      	movs	r6, #2
     c44:	2000      	movs	r0, #0
     c46:	e001      	b.n	c4c <EIC_Handler+0x60>
					upper = middle - 1;
     c48:	3901      	subs	r1, #1
     c4a:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     c4c:	42b0      	cmp	r0, r6
     c4e:	d8e6      	bhi.n	c1e <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
     c50:	1833      	adds	r3, r6, r0
     c52:	105b      	asrs	r3, r3, #1
     c54:	b2d9      	uxtb	r1, r3
     c56:	22ff      	movs	r2, #255	; 0xff
     c58:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
     c5a:	00df      	lsls	r7, r3, #3
     c5c:	4a10      	ldr	r2, [pc, #64]	; (ca0 <EIC_Handler+0xb4>)
     c5e:	5cba      	ldrb	r2, [r7, r2]
     c60:	42a2      	cmp	r2, r4
     c62:	d0d8      	beq.n	c16 <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
     c64:	daf0      	bge.n	c48 <EIC_Handler+0x5c>
					lower = middle + 1;
     c66:	3101      	adds	r1, #1
     c68:	b2c8      	uxtb	r0, r1
     c6a:	e7ef      	b.n	c4c <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
     c6c:	4b08      	ldr	r3, [pc, #32]	; (c90 <EIC_Handler+0xa4>)
     c6e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     c70:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     c72:	400a      	ands	r2, r1
     c74:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     c76:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     c78:	611a      	str	r2, [r3, #16]
	while (flags) {
     c7a:	9b01      	ldr	r3, [sp, #4]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d005      	beq.n	c8c <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
     c80:	9801      	ldr	r0, [sp, #4]
     c82:	4b08      	ldr	r3, [pc, #32]	; (ca4 <EIC_Handler+0xb8>)
     c84:	4798      	blx	r3
     c86:	3801      	subs	r0, #1
     c88:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     c8a:	e7d8      	b.n	c3e <EIC_Handler+0x52>
	}
}
     c8c:	b003      	add	sp, #12
     c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c90:	40001800 	.word	0x40001800
     c94:	20000030 	.word	0x20000030
     c98:	00001128 	.word	0x00001128
     c9c:	000008cd 	.word	0x000008cd
     ca0:	00001118 	.word	0x00001118
     ca4:	00000fa5 	.word	0x00000fa5

00000ca8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ca8:	07c3      	lsls	r3, r0, #31
     caa:	d50a      	bpl.n	cc2 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     cac:	4b05      	ldr	r3, [pc, #20]	; (cc4 <_gclk_init_generators_by_fref+0x1c>)
     cae:	2280      	movs	r2, #128	; 0x80
     cb0:	0052      	lsls	r2, r2, #1
     cb2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     cb4:	2283      	movs	r2, #131	; 0x83
     cb6:	0252      	lsls	r2, r2, #9
     cb8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     cba:	4b02      	ldr	r3, [pc, #8]	; (cc4 <_gclk_init_generators_by_fref+0x1c>)
     cbc:	785b      	ldrb	r3, [r3, #1]
     cbe:	09db      	lsrs	r3, r3, #7
     cc0:	d1fb      	bne.n	cba <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     cc2:	4770      	bx	lr
     cc4:	40000c00 	.word	0x40000c00

00000cc8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <_pm_init+0x1c>)
     cca:	7a1a      	ldrb	r2, [r3, #8]
     ccc:	b2d2      	uxtb	r2, r2
     cce:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     cd0:	7a5a      	ldrb	r2, [r3, #9]
     cd2:	b2d2      	uxtb	r2, r2
     cd4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     cd6:	7a9a      	ldrb	r2, [r3, #10]
     cd8:	b2d2      	uxtb	r2, r2
     cda:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     cdc:	7ada      	ldrb	r2, [r3, #11]
     cde:	b2d2      	uxtb	r2, r2
     ce0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     ce2:	4770      	bx	lr
     ce4:	40000400 	.word	0x40000400

00000ce8 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     ce8:	b510      	push	{r4, lr}
     cea:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     cec:	68c3      	ldr	r3, [r0, #12]
     cee:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     cf0:	07db      	lsls	r3, r3, #31
     cf2:	d506      	bpl.n	d02 <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     cf4:	6803      	ldr	r3, [r0, #0]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d000      	beq.n	cfc <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     cfa:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     cfc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     cfe:	2201      	movs	r2, #1
     d00:	721a      	strb	r2, [r3, #8]
	}
}
     d02:	bd10      	pop	{r4, pc}

00000d04 <_timer_init>:
{
     d04:	b570      	push	{r4, r5, r6, lr}
     d06:	0004      	movs	r4, r0
     d08:	000d      	movs	r5, r1
	ASSERT(dev);
     d0a:	1e43      	subs	r3, r0, #1
     d0c:	4198      	sbcs	r0, r3
     d0e:	b2c0      	uxtb	r0, r0
     d10:	2233      	movs	r2, #51	; 0x33
     d12:	4910      	ldr	r1, [pc, #64]	; (d54 <_timer_init+0x50>)
     d14:	4b10      	ldr	r3, [pc, #64]	; (d58 <_timer_init+0x54>)
     d16:	4798      	blx	r3
	dev->hw = hw;
     d18:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     d1a:	2301      	movs	r3, #1
     d1c:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d1e:	7aab      	ldrb	r3, [r5, #10]
     d20:	09db      	lsrs	r3, r3, #7
     d22:	d1fc      	bne.n	d1e <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     d24:	68e2      	ldr	r2, [r4, #12]
     d26:	7a93      	ldrb	r3, [r2, #10]
     d28:	09db      	lsrs	r3, r3, #7
     d2a:	d1fc      	bne.n	d26 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     d2c:	3380      	adds	r3, #128	; 0x80
     d2e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d30:	7a93      	ldrb	r3, [r2, #10]
     d32:	09db      	lsrs	r3, r3, #7
     d34:	d1fc      	bne.n	d30 <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     d36:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     d38:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     d3a:	2380      	movs	r3, #128	; 0x80
     d3c:	00db      	lsls	r3, r3, #3
     d3e:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d40:	7a93      	ldrb	r3, [r2, #10]
     d42:	09db      	lsrs	r3, r3, #7
     d44:	d1fc      	bne.n	d40 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     d46:	3301      	adds	r3, #1
     d48:	68e2      	ldr	r2, [r4, #12]
     d4a:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     d4c:	4b03      	ldr	r3, [pc, #12]	; (d5c <_timer_init+0x58>)
     d4e:	601c      	str	r4, [r3, #0]
}
     d50:	2000      	movs	r0, #0
     d52:	bd70      	pop	{r4, r5, r6, pc}
     d54:	00001140 	.word	0x00001140
     d58:	000008cd 	.word	0x000008cd
     d5c:	20000034 	.word	0x20000034

00000d60 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     d60:	2000      	movs	r0, #0
     d62:	4770      	bx	lr

00000d64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     d64:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <RTC_Handler+0xc>)
     d68:	6818      	ldr	r0, [r3, #0]
     d6a:	4b02      	ldr	r3, [pc, #8]	; (d74 <RTC_Handler+0x10>)
     d6c:	4798      	blx	r3
}
     d6e:	bd10      	pop	{r4, pc}
     d70:	20000034 	.word	0x20000034
     d74:	00000ce9 	.word	0x00000ce9

00000d78 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     d78:	4b02      	ldr	r3, [pc, #8]	; (d84 <_sercom_get_hardware_index+0xc>)
     d7a:	469c      	mov	ip, r3
     d7c:	4460      	add	r0, ip
     d7e:	0a80      	lsrs	r0, r0, #10
     d80:	b2c0      	uxtb	r0, r0
}
     d82:	4770      	bx	lr
     d84:	bdfff800 	.word	0xbdfff800

00000d88 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     d88:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     d8a:	4b0b      	ldr	r3, [pc, #44]	; (db8 <_get_sercom_index+0x30>)
     d8c:	4798      	blx	r3
     d8e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     d90:	2000      	movs	r0, #0
     d92:	2800      	cmp	r0, #0
     d94:	d006      	beq.n	da4 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     d96:	4a09      	ldr	r2, [pc, #36]	; (dbc <_get_sercom_index+0x34>)
     d98:	4909      	ldr	r1, [pc, #36]	; (dc0 <_get_sercom_index+0x38>)
     d9a:	2000      	movs	r0, #0
     d9c:	4b09      	ldr	r3, [pc, #36]	; (dc4 <_get_sercom_index+0x3c>)
     d9e:	4798      	blx	r3
	return 0;
     da0:	2000      	movs	r0, #0
}
     da2:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     da4:	0083      	lsls	r3, r0, #2
     da6:	181b      	adds	r3, r3, r0
     da8:	0099      	lsls	r1, r3, #2
     daa:	4b07      	ldr	r3, [pc, #28]	; (dc8 <_get_sercom_index+0x40>)
     dac:	5ccb      	ldrb	r3, [r1, r3]
     dae:	429a      	cmp	r2, r3
     db0:	d0f7      	beq.n	da2 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     db2:	3001      	adds	r0, #1
     db4:	b2c0      	uxtb	r0, r0
     db6:	e7ec      	b.n	d92 <_get_sercom_index+0xa>
     db8:	00000d79 	.word	0x00000d79
     dbc:	0000023a 	.word	0x0000023a
     dc0:	000011a8 	.word	0x000011a8
     dc4:	000008cd 	.word	0x000008cd
     dc8:	00001158 	.word	0x00001158

00000dcc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     dd0:	4b38      	ldr	r3, [pc, #224]	; (eb4 <_usart_init+0xe8>)
     dd2:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     dd4:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     dd6:	07db      	lsls	r3, r3, #31
     dd8:	d41d      	bmi.n	e16 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     dda:	0083      	lsls	r3, r0, #2
     ddc:	181b      	adds	r3, r3, r0
     dde:	009a      	lsls	r2, r3, #2
     de0:	4b35      	ldr	r3, [pc, #212]	; (eb8 <_usart_init+0xec>)
     de2:	189b      	adds	r3, r3, r2
     de4:	685a      	ldr	r2, [r3, #4]
     de6:	231c      	movs	r3, #28
     de8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dea:	69e3      	ldr	r3, [r4, #28]
     dec:	079b      	lsls	r3, r3, #30
     dee:	d1fc      	bne.n	dea <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     df0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     df2:	079b      	lsls	r3, r3, #30
     df4:	d509      	bpl.n	e0a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     df6:	6823      	ldr	r3, [r4, #0]
     df8:	2102      	movs	r1, #2
     dfa:	438b      	bics	r3, r1
     dfc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dfe:	69e3      	ldr	r3, [r4, #28]
     e00:	079b      	lsls	r3, r3, #30
     e02:	d1fc      	bne.n	dfe <_usart_init+0x32>
     e04:	69e3      	ldr	r3, [r4, #28]
     e06:	079b      	lsls	r3, r3, #30
     e08:	d4fc      	bmi.n	e04 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     e0a:	2301      	movs	r3, #1
     e0c:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e0e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e10:	69e3      	ldr	r3, [r4, #28]
     e12:	079b      	lsls	r3, r3, #30
     e14:	d1fc      	bne.n	e10 <_usart_init+0x44>
     e16:	69e3      	ldr	r3, [r4, #28]
     e18:	07db      	lsls	r3, r3, #31
     e1a:	d4fc      	bmi.n	e16 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     e1c:	0083      	lsls	r3, r0, #2
     e1e:	181b      	adds	r3, r3, r0
     e20:	009a      	lsls	r2, r3, #2
     e22:	4b25      	ldr	r3, [pc, #148]	; (eb8 <_usart_init+0xec>)
     e24:	189b      	adds	r3, r3, r2
     e26:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e28:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e2a:	69e3      	ldr	r3, [r4, #28]
     e2c:	079b      	lsls	r3, r3, #30
     e2e:	d1fc      	bne.n	e2a <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     e30:	0083      	lsls	r3, r0, #2
     e32:	181b      	adds	r3, r3, r0
     e34:	009a      	lsls	r2, r3, #2
     e36:	4b20      	ldr	r3, [pc, #128]	; (eb8 <_usart_init+0xec>)
     e38:	189b      	adds	r3, r3, r2
     e3a:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e3c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e3e:	69e3      	ldr	r3, [r4, #28]
     e40:	075b      	lsls	r3, r3, #29
     e42:	d1fc      	bne.n	e3e <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     e44:	0083      	lsls	r3, r0, #2
     e46:	181b      	adds	r3, r3, r0
     e48:	009a      	lsls	r2, r3, #2
     e4a:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <_usart_init+0xec>)
     e4c:	189b      	adds	r3, r3, r2
     e4e:	685b      	ldr	r3, [r3, #4]
     e50:	049a      	lsls	r2, r3, #18
     e52:	d40b      	bmi.n	e6c <_usart_init+0xa0>
     e54:	22c0      	movs	r2, #192	; 0xc0
     e56:	01d2      	lsls	r2, r2, #7
     e58:	4213      	tst	r3, r2
     e5a:	d107      	bne.n	e6c <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     e5c:	0083      	lsls	r3, r0, #2
     e5e:	181b      	adds	r3, r3, r0
     e60:	009a      	lsls	r2, r3, #2
     e62:	4b15      	ldr	r3, [pc, #84]	; (eb8 <_usart_init+0xec>)
     e64:	189b      	adds	r3, r3, r2
     e66:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e68:	81a3      	strh	r3, [r4, #12]
     e6a:	e015      	b.n	e98 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     e6c:	0083      	lsls	r3, r0, #2
     e6e:	181b      	adds	r3, r3, r0
     e70:	009a      	lsls	r2, r3, #2
     e72:	4911      	ldr	r1, [pc, #68]	; (eb8 <_usart_init+0xec>)
     e74:	1889      	adds	r1, r1, r2
     e76:	898a      	ldrh	r2, [r1, #12]
     e78:	89a3      	ldrh	r3, [r4, #12]
     e7a:	04d2      	lsls	r2, r2, #19
     e7c:	0cd2      	lsrs	r2, r2, #19
     e7e:	0b5b      	lsrs	r3, r3, #13
     e80:	035b      	lsls	r3, r3, #13
     e82:	4313      	orrs	r3, r2
     e84:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     e86:	7b8b      	ldrb	r3, [r1, #14]
     e88:	2207      	movs	r2, #7
     e8a:	401a      	ands	r2, r3
     e8c:	89a3      	ldrh	r3, [r4, #12]
     e8e:	0352      	lsls	r2, r2, #13
     e90:	04db      	lsls	r3, r3, #19
     e92:	0cdb      	lsrs	r3, r3, #19
     e94:	4313      	orrs	r3, r2
     e96:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     e98:	4a07      	ldr	r2, [pc, #28]	; (eb8 <_usart_init+0xec>)
     e9a:	0083      	lsls	r3, r0, #2
     e9c:	181d      	adds	r5, r3, r0
     e9e:	00a9      	lsls	r1, r5, #2
     ea0:	000d      	movs	r5, r1
     ea2:	1851      	adds	r1, r2, r1
     ea4:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     ea6:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     ea8:	1952      	adds	r2, r2, r5
     eaa:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     eac:	2330      	movs	r3, #48	; 0x30
     eae:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     eb0:	2000      	movs	r0, #0
     eb2:	bd70      	pop	{r4, r5, r6, pc}
     eb4:	00000d89 	.word	0x00000d89
     eb8:	00001158 	.word	0x00001158

00000ebc <_usart_sync_init>:
{
     ebc:	b570      	push	{r4, r5, r6, lr}
     ebe:	0005      	movs	r5, r0
     ec0:	000c      	movs	r4, r1
	ASSERT(device);
     ec2:	1e43      	subs	r3, r0, #1
     ec4:	4198      	sbcs	r0, r3
     ec6:	b2c0      	uxtb	r0, r0
     ec8:	22b4      	movs	r2, #180	; 0xb4
     eca:	4904      	ldr	r1, [pc, #16]	; (edc <_usart_sync_init+0x20>)
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <_usart_sync_init+0x24>)
     ece:	4798      	blx	r3
	device->hw = hw;
     ed0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     ed2:	0020      	movs	r0, r4
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <_usart_sync_init+0x28>)
     ed6:	4798      	blx	r3
}
     ed8:	bd70      	pop	{r4, r5, r6, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	000011a8 	.word	0x000011a8
     ee0:	000008cd 	.word	0x000008cd
     ee4:	00000dcd 	.word	0x00000dcd

00000ee8 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ee8:	6803      	ldr	r3, [r0, #0]
     eea:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     eec:	8519      	strh	r1, [r3, #40]	; 0x28
}
     eee:	4770      	bx	lr

00000ef0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     ef0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     ef2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     ef4:	b2c0      	uxtb	r0, r0
}
     ef6:	4770      	bx	lr

00000ef8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     ef8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     efa:	7e18      	ldrb	r0, [r3, #24]
     efc:	2301      	movs	r3, #1
     efe:	4018      	ands	r0, r3
}
     f00:	4770      	bx	lr

00000f02 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     f02:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f04:	7e1b      	ldrb	r3, [r3, #24]
     f06:	085b      	lsrs	r3, r3, #1
     f08:	2001      	movs	r0, #1
     f0a:	4018      	ands	r0, r3
}
     f0c:	4770      	bx	lr

00000f0e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     f0e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f10:	7e1b      	ldrb	r3, [r3, #24]
     f12:	089b      	lsrs	r3, r3, #2
     f14:	2001      	movs	r0, #1
     f16:	4018      	ands	r0, r3
}
     f18:	4770      	bx	lr
	...

00000f1c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     f1c:	4b0f      	ldr	r3, [pc, #60]	; (f5c <_sysctrl_init_sources+0x40>)
     f1e:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
     f20:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     f22:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     f24:	0f92      	lsrs	r2, r2, #30
     f26:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     f28:	0409      	lsls	r1, r1, #16
     f2a:	480d      	ldr	r0, [pc, #52]	; (f60 <_sysctrl_init_sources+0x44>)
     f2c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     f2e:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
     f30:	490c      	ldr	r1, [pc, #48]	; (f64 <_sysctrl_init_sources+0x48>)
     f32:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     f34:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f36:	699a      	ldr	r2, [r3, #24]
     f38:	2102      	movs	r1, #2
     f3a:	430a      	orrs	r2, r1
     f3c:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     f3e:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     f40:	311d      	adds	r1, #29
     f42:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     f44:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     f46:	4b05      	ldr	r3, [pc, #20]	; (f5c <_sysctrl_init_sources+0x40>)
     f48:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     f4a:	071b      	lsls	r3, r3, #28
     f4c:	d5fb      	bpl.n	f46 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     f4e:	4a03      	ldr	r2, [pc, #12]	; (f5c <_sysctrl_init_sources+0x40>)
     f50:	6a13      	ldr	r3, [r2, #32]
     f52:	2180      	movs	r1, #128	; 0x80
     f54:	430b      	orrs	r3, r1
     f56:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     f58:	4770      	bx	lr
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	40000800 	.word	0x40000800
     f60:	0fff0000 	.word	0x0fff0000
     f64:	00000302 	.word	0x00000302

00000f68 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     f68:	4a02      	ldr	r2, [pc, #8]	; (f74 <_sysctrl_init_referenced_generators+0xc>)
     f6a:	6993      	ldr	r3, [r2, #24]
     f6c:	2102      	movs	r1, #2
     f6e:	438b      	bics	r3, r1
     f70:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     f72:	4770      	bx	lr
     f74:	40000800 	.word	0x40000800

00000f78 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     f78:	4b02      	ldr	r3, [pc, #8]	; (f84 <_system_time_init+0xc>)
     f7a:	4a03      	ldr	r2, [pc, #12]	; (f88 <_system_time_init+0x10>)
     f7c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     f7e:	2205      	movs	r2, #5
     f80:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
     f82:	4770      	bx	lr
     f84:	e000e010 	.word	0xe000e010
     f88:	00ffffff 	.word	0x00ffffff

00000f8c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
     f8c:	b510      	push	{r4, lr}
	_system_time_init(hw);
     f8e:	4b01      	ldr	r3, [pc, #4]	; (f94 <_delay_init+0x8>)
     f90:	4798      	blx	r3
}
     f92:	bd10      	pop	{r4, pc}
     f94:	00000f79 	.word	0x00000f79

00000f98 <main>:
#include <atmel_start.h>

int main(void)
{
     f98:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     f9a:	4b01      	ldr	r3, [pc, #4]	; (fa0 <main+0x8>)
     f9c:	4798      	blx	r3
     f9e:	e7fe      	b.n	f9e <main+0x6>
     fa0:	00000115 	.word	0x00000115

00000fa4 <__ffssi2>:
     fa4:	b510      	push	{r4, lr}
     fa6:	2300      	movs	r3, #0
     fa8:	2800      	cmp	r0, #0
     faa:	d002      	beq.n	fb2 <__ffssi2+0xe>
     fac:	f000 f804 	bl	fb8 <__ctzsi2>
     fb0:	1c43      	adds	r3, r0, #1
     fb2:	0018      	movs	r0, r3
     fb4:	bd10      	pop	{r4, pc}
     fb6:	46c0      	nop			; (mov r8, r8)

00000fb8 <__ctzsi2>:
     fb8:	4241      	negs	r1, r0
     fba:	4008      	ands	r0, r1
     fbc:	211c      	movs	r1, #28
     fbe:	2301      	movs	r3, #1
     fc0:	041b      	lsls	r3, r3, #16
     fc2:	4298      	cmp	r0, r3
     fc4:	d301      	bcc.n	fca <__ctzsi2+0x12>
     fc6:	0c00      	lsrs	r0, r0, #16
     fc8:	3910      	subs	r1, #16
     fca:	0a1b      	lsrs	r3, r3, #8
     fcc:	4298      	cmp	r0, r3
     fce:	d301      	bcc.n	fd4 <__ctzsi2+0x1c>
     fd0:	0a00      	lsrs	r0, r0, #8
     fd2:	3908      	subs	r1, #8
     fd4:	091b      	lsrs	r3, r3, #4
     fd6:	4298      	cmp	r0, r3
     fd8:	d301      	bcc.n	fde <__ctzsi2+0x26>
     fda:	0900      	lsrs	r0, r0, #4
     fdc:	3904      	subs	r1, #4
     fde:	a202      	add	r2, pc, #8	; (adr r2, fe8 <__ctzsi2+0x30>)
     fe0:	5c10      	ldrb	r0, [r2, r0]
     fe2:	1a40      	subs	r0, r0, r1
     fe4:	4770      	bx	lr
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	1d1d1c1b 	.word	0x1d1d1c1b
     fec:	1e1e1e1e 	.word	0x1e1e1e1e
     ff0:	1f1f1f1f 	.word	0x1f1f1f1f
     ff4:	1f1f1f1f 	.word	0x1f1f1f1f

00000ff8 <__libc_init_array>:
     ff8:	b570      	push	{r4, r5, r6, lr}
     ffa:	2600      	movs	r6, #0
     ffc:	4d0c      	ldr	r5, [pc, #48]	; (1030 <__libc_init_array+0x38>)
     ffe:	4c0d      	ldr	r4, [pc, #52]	; (1034 <__libc_init_array+0x3c>)
    1000:	1b64      	subs	r4, r4, r5
    1002:	10a4      	asrs	r4, r4, #2
    1004:	42a6      	cmp	r6, r4
    1006:	d109      	bne.n	101c <__libc_init_array+0x24>
    1008:	2600      	movs	r6, #0
    100a:	f000 f8db 	bl	11c4 <_init>
    100e:	4d0a      	ldr	r5, [pc, #40]	; (1038 <__libc_init_array+0x40>)
    1010:	4c0a      	ldr	r4, [pc, #40]	; (103c <__libc_init_array+0x44>)
    1012:	1b64      	subs	r4, r4, r5
    1014:	10a4      	asrs	r4, r4, #2
    1016:	42a6      	cmp	r6, r4
    1018:	d105      	bne.n	1026 <__libc_init_array+0x2e>
    101a:	bd70      	pop	{r4, r5, r6, pc}
    101c:	00b3      	lsls	r3, r6, #2
    101e:	58eb      	ldr	r3, [r5, r3]
    1020:	4798      	blx	r3
    1022:	3601      	adds	r6, #1
    1024:	e7ee      	b.n	1004 <__libc_init_array+0xc>
    1026:	00b3      	lsls	r3, r6, #2
    1028:	58eb      	ldr	r3, [r5, r3]
    102a:	4798      	blx	r3
    102c:	3601      	adds	r6, #1
    102e:	e7f2      	b.n	1016 <__libc_init_array+0x1e>
    1030:	000011d0 	.word	0x000011d0
    1034:	000011d0 	.word	0x000011d0
    1038:	000011d0 	.word	0x000011d0
    103c:	000011d4 	.word	0x000011d4
    1040:	682f2e2e 	.word	0x682f2e2e
    1044:	732f6c61 	.word	0x732f6c61
    1048:	682f6372 	.word	0x682f6372
    104c:	615f6c61 	.word	0x615f6c61
    1050:	735f6364 	.word	0x735f6364
    1054:	2e636e79 	.word	0x2e636e79
    1058:	00000063 	.word	0x00000063
    105c:	682f2e2e 	.word	0x682f2e2e
    1060:	732f6c61 	.word	0x732f6c61
    1064:	682f6372 	.word	0x682f6372
    1068:	645f6c61 	.word	0x645f6c61
    106c:	735f6361 	.word	0x735f6361
    1070:	2e636e79 	.word	0x2e636e79
    1074:	00000063 	.word	0x00000063
    1078:	682f2e2e 	.word	0x682f2e2e
    107c:	732f6c61 	.word	0x732f6c61
    1080:	682f6372 	.word	0x682f6372
    1084:	745f6c61 	.word	0x745f6c61
    1088:	72656d69 	.word	0x72656d69
    108c:	0000632e 	.word	0x0000632e
    1090:	682f2e2e 	.word	0x682f2e2e
    1094:	732f6c61 	.word	0x732f6c61
    1098:	682f6372 	.word	0x682f6372
    109c:	755f6c61 	.word	0x755f6c61
    10a0:	74726173 	.word	0x74726173
    10a4:	6e79735f 	.word	0x6e79735f
    10a8:	00632e63 	.word	0x00632e63
    10ac:	682f2e2e 	.word	0x682f2e2e
    10b0:	752f6c61 	.word	0x752f6c61
    10b4:	736c6974 	.word	0x736c6974
    10b8:	6372732f 	.word	0x6372732f
    10bc:	6974752f 	.word	0x6974752f
    10c0:	6c5f736c 	.word	0x6c5f736c
    10c4:	2e747369 	.word	0x2e747369
    10c8:	00000063 	.word	0x00000063

000010cc <_adcs>:
    10cc:	00000200 00000000 00000000 00000000     ................
	...
    10e8:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    10f8:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    1108:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00001118 <_map>:
    1118:	00000000 00000010 00000001 00000011     ................
    1128:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    1138:	632e6369 00000000 682f2e2e 722f6c70     ic.c....../hpl/r
    1148:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....

00001158 <_usarts>:
    1158:	00000001 40100004 00030000 0000d8ad     .......@........
    1168:	00000000                                ....

0000116c <_i2cms>:
	...

00001184 <_i2css>:
	...

00001194 <sercomspi_regs>:
	...
    11a8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    11b8:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000011c4 <_init>:
    11c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    11ca:	bc08      	pop	{r3}
    11cc:	469e      	mov	lr, r3
    11ce:	4770      	bx	lr

000011d0 <__init_array_start>:
    11d0:	000000dd 	.word	0x000000dd

000011d4 <_fini>:
    11d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    11da:	bc08      	pop	{r3}
    11dc:	469e      	mov	lr, r3
    11de:	4770      	bx	lr

000011e0 <__fini_array_start>:
    11e0:	000000b5 	.word	0x000000b5
