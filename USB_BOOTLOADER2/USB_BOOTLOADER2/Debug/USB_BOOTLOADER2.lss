
USB_BOOTLOADER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006704  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  20000000  00006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007f0  200000c0  000067d0  000200c0  2**4
                  ALLOC
  3 .stack        00003000  200008b0  00006fc0  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003cc61  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e3e  00000000  00000000  0005cd96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000c00  00000000  00000000  00062bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0000c68b  00000000  00000000  000637d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00014a2a  00000000  00000000  0006fe5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00091430  00000000  00000000  00084889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e2d9  00000000  00000000  00115cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f08  00000000  00000000  00123f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002118  00000000  00000000  00124e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 38 00 20 09 44 00 00 05 44 00 00 05 44 00 00     .8. .D...D...D..
	...
      2c:	05 44 00 00 00 00 00 00 00 00 00 00 05 44 00 00     .D...........D..
      3c:	05 44 00 00 05 44 00 00 05 44 00 00 05 44 00 00     .D...D...D...D..
      4c:	05 44 00 00 85 15 00 00 05 44 00 00 65 14 00 00     .D.......D..e...
      5c:	15 3b 00 00 05 44 00 00 f9 1a 00 00 09 1b 00 00     .;...D..........
      6c:	19 1b 00 00 29 1b 00 00 00 00 00 00 00 00 00 00     ....)...........
      7c:	05 44 00 00 05 44 00 00 05 44 00 00 05 44 00 00     .D...D...D...D..
      8c:	05 44 00 00 05 44 00 00 00 00 00 00 00 00 00 00     .D...D..........
      9c:	05 44 00 00 05 44 00 00 05 44 00 00 05 44 00 00     .D...D...D...D..
      ac:	05 44 00 00 00 00 00 00                             .D......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
      d8:	00006704 	.word	0x00006704

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	00006704 	.word	0x00006704
     10c:	00006704 	.word	0x00006704
     110:	00000000 	.word	0x00000000

00000114 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
     114:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <mem_test_unit_ready+0x8>)
     118:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000a39 	.word	0x00000a39

00000120 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
     120:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
     122:	4b01      	ldr	r3, [pc, #4]	; (128 <mem_read_capacity+0x8>)
     124:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
     126:	bd10      	pop	{r4, pc}
     128:	00000aa5 	.word	0x00000aa5

0000012c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
     12c:	b510      	push	{r4, lr}
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
     12e:	4b01      	ldr	r3, [pc, #4]	; (134 <mem_sector_size+0x8>)
     130:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
     132:	bd10      	pop	{r4, pc}
     134:	00000af5 	.word	0x00000af5

00000138 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
     138:	b510      	push	{r4, lr}
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
     13a:	4b01      	ldr	r3, [pc, #4]	; (140 <mem_wr_protect+0x8>)
     13c:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
     13e:	bd10      	pop	{r4, pc}
     140:	00000b29 	.word	0x00000b29

00000144 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
     144:	b510      	push	{r4, lr}
     146:	0008      	movs	r0, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
     148:	0011      	movs	r1, r2
     14a:	4b01      	ldr	r3, [pc, #4]	; (150 <memory_2_ram+0xc>)
     14c:	4798      	blx	r3
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
     14e:	bd10      	pop	{r4, pc}
     150:	00000b61 	.word	0x00000b61

00000154 <uhi_msc_select_lun>:
 *
 * \return  true, if the LUN number is correct
 */
static bool uhi_msc_select_lun(uint8_t lun)
{
	if (lun >= uhi_msc_dev_sel->nb_lun) {
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <uhi_msc_select_lun+0x24>)
     156:	79da      	ldrb	r2, [r3, #7]
		return false;
     158:	2300      	movs	r3, #0
	if (lun >= uhi_msc_dev_sel->nb_lun) {
     15a:	4282      	cmp	r2, r0
     15c:	d90a      	bls.n	174 <uhi_msc_select_lun+0x20>
	}
	uhi_msc_lun_num_sel = lun;
     15e:	4b07      	ldr	r3, [pc, #28]	; (17c <uhi_msc_select_lun+0x28>)
     160:	7358      	strb	r0, [r3, #13]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
     162:	0043      	lsls	r3, r0, #1
     164:	1818      	adds	r0, r3, r0
     166:	0080      	lsls	r0, r0, #2
     168:	4b03      	ldr	r3, [pc, #12]	; (178 <uhi_msc_select_lun+0x24>)
     16a:	689b      	ldr	r3, [r3, #8]
     16c:	1818      	adds	r0, r3, r0
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <uhi_msc_select_lun+0x2c>)
     170:	6018      	str	r0, [r3, #0]
	return true;
     172:	2301      	movs	r3, #1
}
     174:	0018      	movs	r0, r3
     176:	4770      	bx	lr
     178:	200000f8 	.word	0x200000f8
     17c:	20000004 	.word	0x20000004
     180:	20000128 	.word	0x20000128

00000184 <uhi_msc_scsi_inquiry_done>:
 * \brief Call the callback at the end of scsi INQUIRY command
 *
 * \param b_cbw_succes true, if the scsi command is successful
 */
static void uhi_msc_scsi_inquiry_done(bool b_cbw_succes)
{
     184:	b510      	push	{r4, lr}
	if ((!b_cbw_succes) || uhi_msc_csw.dCSWDataResidue) {
     186:	2800      	cmp	r0, #0
     188:	d003      	beq.n	192 <uhi_msc_scsi_inquiry_done+0xe>
     18a:	4b07      	ldr	r3, [pc, #28]	; (1a8 <uhi_msc_scsi_inquiry_done+0x24>)
     18c:	689b      	ldr	r3, [r3, #8]
     18e:	2b00      	cmp	r3, #0
     190:	d004      	beq.n	19c <uhi_msc_scsi_inquiry_done+0x18>
		uhi_msc_scsi_callback(false);
     192:	4b06      	ldr	r3, [pc, #24]	; (1ac <uhi_msc_scsi_inquiry_done+0x28>)
     194:	681b      	ldr	r3, [r3, #0]
     196:	2000      	movs	r0, #0
     198:	4798      	blx	r3
		return;
	}
	// Inquiry successful
	uhi_msc_scsi_callback(true);
}
     19a:	bd10      	pop	{r4, pc}
	uhi_msc_scsi_callback(true);
     19c:	4b03      	ldr	r3, [pc, #12]	; (1ac <uhi_msc_scsi_inquiry_done+0x28>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	2001      	movs	r0, #1
     1a2:	4798      	blx	r3
     1a4:	e7f9      	b.n	19a <uhi_msc_scsi_inquiry_done+0x16>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	200000e4 	.word	0x200000e4
     1ac:	2000012c 	.word	0x2000012c

000001b0 <uhi_msc_scsi_test_unit_ready_sense>:

/**
 * \brief Decodes the scsi sense code after an error on TEST UNIT READY command
 */
static void uhi_msc_scsi_test_unit_ready_sense(void)
{
     1b0:	b510      	push	{r4, lr}
	uint16_t sense_key = uhi_msc_sense.sense_flag_key;
	uint16_t add_sense = (uint16_t)uhi_msc_sense.AddSenseCode<<8
		| uhi_msc_sense.AddSnsCodeQlfr;

	// Decode data sense
	if ((uhi_msc_sense.valid_reponse_code
     1b2:	4b13      	ldr	r3, [pc, #76]	; (200 <uhi_msc_scsi_test_unit_ready_sense+0x50>)
     1b4:	781a      	ldrb	r2, [r3, #0]
     1b6:	237f      	movs	r3, #127	; 0x7f
     1b8:	4013      	ands	r3, r2
     1ba:	2b70      	cmp	r3, #112	; 0x70
     1bc:	d004      	beq.n	1c8 <uhi_msc_scsi_test_unit_ready_sense+0x18>
		if ((sense_key == SCSI_SK_UNIT_ATTENTION)
				&& (add_sense == SCSI_ASC_NOT_READY_TO_READY_CHANGE)) {
			uhi_msc_lun_sel->status = LUN_BUSY;
		}
	}
	uhi_msc_scsi_callback(true);
     1be:	4b11      	ldr	r3, [pc, #68]	; (204 <uhi_msc_scsi_test_unit_ready_sense+0x54>)
     1c0:	681b      	ldr	r3, [r3, #0]
     1c2:	2001      	movs	r0, #1
     1c4:	4798      	blx	r3
}
     1c6:	bd10      	pop	{r4, pc}
	uint16_t sense_key = uhi_msc_sense.sense_flag_key;
     1c8:	4a0d      	ldr	r2, [pc, #52]	; (200 <uhi_msc_scsi_test_unit_ready_sense+0x50>)
     1ca:	7891      	ldrb	r1, [r2, #2]
	uint16_t add_sense = (uint16_t)uhi_msc_sense.AddSenseCode<<8
     1cc:	7b13      	ldrb	r3, [r2, #12]
     1ce:	021b      	lsls	r3, r3, #8
		| uhi_msc_sense.AddSnsCodeQlfr;
     1d0:	7b52      	ldrb	r2, [r2, #13]
	uint16_t add_sense = (uint16_t)uhi_msc_sense.AddSenseCode<<8
     1d2:	4313      	orrs	r3, r2
		if ((sense_key == SCSI_SK_NOT_READY)
     1d4:	2902      	cmp	r1, #2
     1d6:	d00a      	beq.n	1ee <uhi_msc_scsi_test_unit_ready_sense+0x3e>
		if ((sense_key == SCSI_SK_UNIT_ATTENTION)
     1d8:	2906      	cmp	r1, #6
     1da:	d1f0      	bne.n	1be <uhi_msc_scsi_test_unit_ready_sense+0xe>
				&& (add_sense == SCSI_ASC_NOT_READY_TO_READY_CHANGE)) {
     1dc:	22a0      	movs	r2, #160	; 0xa0
     1de:	0192      	lsls	r2, r2, #6
     1e0:	4293      	cmp	r3, r2
     1e2:	d1ec      	bne.n	1be <uhi_msc_scsi_test_unit_ready_sense+0xe>
			uhi_msc_lun_sel->status = LUN_BUSY;
     1e4:	4b08      	ldr	r3, [pc, #32]	; (208 <uhi_msc_scsi_test_unit_ready_sense+0x58>)
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	2203      	movs	r2, #3
     1ea:	725a      	strb	r2, [r3, #9]
     1ec:	e7e7      	b.n	1be <uhi_msc_scsi_test_unit_ready_sense+0xe>
				&& (add_sense==SCSI_ASC_MEDIUM_NOT_PRESENT)) {
     1ee:	22e8      	movs	r2, #232	; 0xe8
     1f0:	0192      	lsls	r2, r2, #6
     1f2:	4293      	cmp	r3, r2
     1f4:	d1e3      	bne.n	1be <uhi_msc_scsi_test_unit_ready_sense+0xe>
			uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
     1f6:	4b04      	ldr	r3, [pc, #16]	; (208 <uhi_msc_scsi_test_unit_ready_sense+0x58>)
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	2202      	movs	r2, #2
     1fc:	725a      	strb	r2, [r3, #9]
     1fe:	e7de      	b.n	1be <uhi_msc_scsi_test_unit_ready_sense+0xe>
     200:	20000138 	.word	0x20000138
     204:	2000012c 	.word	0x2000012c
     208:	20000128 	.word	0x20000128

0000020c <uhi_msc_scsi_read_capacity_sense>:

/**
 * \brief Decodes the scsi sense code after a scsi READ CAPACITY command failed
 */
static void uhi_msc_scsi_read_capacity_sense(void)
{
     20c:	b510      	push	{r4, lr}
	uhi_msc_scsi_callback(false);
     20e:	4b02      	ldr	r3, [pc, #8]	; (218 <uhi_msc_scsi_read_capacity_sense+0xc>)
     210:	681b      	ldr	r3, [r3, #0]
     212:	2000      	movs	r0, #0
     214:	4798      	blx	r3
}
     216:	bd10      	pop	{r4, pc}
     218:	2000012c 	.word	0x2000012c

0000021c <uhi_msc_scsi_mode_sense6_done>:
 * \brief Decodes the result of scsi MODE SENSE 6 command
 *
 * \param b_cbw_succes true, if the scsi command is successful
 */
static void uhi_msc_scsi_mode_sense6_done(bool b_cbw_succes)
{
     21c:	b510      	push	{r4, lr}
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
     21e:	2800      	cmp	r0, #0
     220:	d007      	beq.n	232 <uhi_msc_scsi_mode_sense6_done+0x16>
     222:	4b0e      	ldr	r3, [pc, #56]	; (25c <uhi_msc_scsi_mode_sense6_done+0x40>)
     224:	7b1b      	ldrb	r3, [r3, #12]
     226:	2b00      	cmp	r3, #0
     228:	d103      	bne.n	232 <uhi_msc_scsi_mode_sense6_done+0x16>
			|| (uhi_msc_csw.dCSWDataResidue < 4)) {
     22a:	4b0c      	ldr	r3, [pc, #48]	; (25c <uhi_msc_scsi_mode_sense6_done+0x40>)
     22c:	689b      	ldr	r3, [r3, #8]
     22e:	2b03      	cmp	r3, #3
     230:	d808      	bhi.n	244 <uhi_msc_scsi_mode_sense6_done+0x28>
		// Sense6 command is not supported,
		// The device must be not write protected.
		uhi_msc_lun_sel->b_write_protected = false;
     232:	4b0b      	ldr	r3, [pc, #44]	; (260 <uhi_msc_scsi_mode_sense6_done+0x44>)
     234:	681b      	ldr	r3, [r3, #0]
     236:	2200      	movs	r2, #0
     238:	721a      	strb	r2, [r3, #8]
		uhi_msc_scsi_callback(true);
     23a:	4b0a      	ldr	r3, [pc, #40]	; (264 <uhi_msc_scsi_mode_sense6_done+0x48>)
     23c:	681b      	ldr	r3, [r3, #0]
     23e:	2001      	movs	r0, #1
     240:	4798      	blx	r3
	// Decode field
	uhi_msc_lun_sel->b_write_protected =
			(uhi_msc_sense6.header.device_specific_parameter
			& SCSI_MS_SBC_WP);
	uhi_msc_scsi_callback(true);
}
     242:	bd10      	pop	{r4, pc}
	uhi_msc_lun_sel->b_write_protected =
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <uhi_msc_scsi_mode_sense6_done+0x44>)
     246:	681a      	ldr	r2, [r3, #0]
			(uhi_msc_sense6.header.device_specific_parameter
     248:	4b07      	ldr	r3, [pc, #28]	; (268 <uhi_msc_scsi_mode_sense6_done+0x4c>)
			& SCSI_MS_SBC_WP);
     24a:	789b      	ldrb	r3, [r3, #2]
     24c:	09db      	lsrs	r3, r3, #7
	uhi_msc_lun_sel->b_write_protected =
     24e:	7213      	strb	r3, [r2, #8]
	uhi_msc_scsi_callback(true);
     250:	4b04      	ldr	r3, [pc, #16]	; (264 <uhi_msc_scsi_mode_sense6_done+0x48>)
     252:	681b      	ldr	r3, [r3, #0]
     254:	2001      	movs	r0, #1
     256:	4798      	blx	r3
     258:	e7f3      	b.n	242 <uhi_msc_scsi_mode_sense6_done+0x26>
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	200000e4 	.word	0x200000e4
     260:	20000128 	.word	0x20000128
     264:	2000012c 	.word	0x2000012c
     268:	2000014c 	.word	0x2000014c

0000026c <uhi_msc_scsi_read_10_done>:
 * \brief Decodes the result of scsi READ 10 command
 *
 * \param b_cbw_succes true, if the scsi command is successful
 */
static void uhi_msc_scsi_read_10_done(bool b_cbw_succes)
{
     26c:	b510      	push	{r4, lr}
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
     26e:	2800      	cmp	r0, #0
     270:	d007      	beq.n	282 <uhi_msc_scsi_read_10_done+0x16>
     272:	4b0b      	ldr	r3, [pc, #44]	; (2a0 <uhi_msc_scsi_read_10_done+0x34>)
     274:	7b1b      	ldrb	r3, [r3, #12]
     276:	2b00      	cmp	r3, #0
     278:	d103      	bne.n	282 <uhi_msc_scsi_read_10_done+0x16>
			|| uhi_msc_csw.dCSWDataResidue) {
     27a:	4b09      	ldr	r3, [pc, #36]	; (2a0 <uhi_msc_scsi_read_10_done+0x34>)
     27c:	689b      	ldr	r3, [r3, #8]
     27e:	2b00      	cmp	r3, #0
     280:	d008      	beq.n	294 <uhi_msc_scsi_read_10_done+0x28>
		// Read10 has failed
		uhi_msc_lun_sel->status = LUN_FAIL;
     282:	4b08      	ldr	r3, [pc, #32]	; (2a4 <uhi_msc_scsi_read_10_done+0x38>)
     284:	681b      	ldr	r3, [r3, #0]
     286:	2201      	movs	r2, #1
     288:	725a      	strb	r2, [r3, #9]
		uhi_msc_scsi_callback(false);
     28a:	4b07      	ldr	r3, [pc, #28]	; (2a8 <uhi_msc_scsi_read_10_done+0x3c>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	2000      	movs	r0, #0
     290:	4798      	blx	r3
		return;
	}
	uhi_msc_scsi_callback(true);
}
     292:	bd10      	pop	{r4, pc}
	uhi_msc_scsi_callback(true);
     294:	4b04      	ldr	r3, [pc, #16]	; (2a8 <uhi_msc_scsi_read_10_done+0x3c>)
     296:	681b      	ldr	r3, [r3, #0]
     298:	2001      	movs	r0, #1
     29a:	4798      	blx	r3
     29c:	e7f9      	b.n	292 <uhi_msc_scsi_read_10_done+0x26>
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	200000e4 	.word	0x200000e4
     2a4:	20000128 	.word	0x20000128
     2a8:	2000012c 	.word	0x2000012c

000002ac <uhi_msc_scsi_request_sense_done>:
 * \brief Decodes the result of scsi REQUEST SENSE command
 *
 * \param b_cbw_succes true, if the scsi command is successful
 */
static void uhi_msc_scsi_request_sense_done(bool b_cbw_succes)
{
     2ac:	b510      	push	{r4, lr}
	if ((!b_cbw_succes) || uhi_msc_csw.dCSWDataResidue) {
     2ae:	2800      	cmp	r0, #0
     2b0:	d003      	beq.n	2ba <uhi_msc_scsi_request_sense_done+0xe>
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <uhi_msc_scsi_request_sense_done+0x20>)
     2b4:	689b      	ldr	r3, [r3, #8]
     2b6:	2b00      	cmp	r3, #0
     2b8:	d004      	beq.n	2c4 <uhi_msc_scsi_request_sense_done+0x18>
		uhi_msc_scsi_callback(false);
     2ba:	4b05      	ldr	r3, [pc, #20]	; (2d0 <uhi_msc_scsi_request_sense_done+0x24>)
     2bc:	681b      	ldr	r3, [r3, #0]
     2be:	2000      	movs	r0, #0
     2c0:	4798      	blx	r3
		return;
	}
	// Request sense successful
	uhi_msc_scsi_sense_callback();
}
     2c2:	bd10      	pop	{r4, pc}
	uhi_msc_scsi_sense_callback();
     2c4:	4b03      	ldr	r3, [pc, #12]	; (2d4 <uhi_msc_scsi_request_sense_done+0x28>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	4798      	blx	r3
     2ca:	e7fa      	b.n	2c2 <uhi_msc_scsi_request_sense_done+0x16>
     2cc:	200000e4 	.word	0x200000e4
     2d0:	2000012c 	.word	0x2000012c
     2d4:	20000130 	.word	0x20000130

000002d8 <uhi_msc_cbw_rst_stall>:
 */
static void uhi_msc_cbw_rst_stall(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
     2d8:	b510      	push	{r4, lr}
	UNUSED(add);
	UNUSED(status);
	UNUSED(payload_trans);
	uhi_msc_scsi_sub_callback(false);
     2da:	4b02      	ldr	r3, [pc, #8]	; (2e4 <uhi_msc_cbw_rst_stall+0xc>)
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	2000      	movs	r0, #0
     2e0:	4798      	blx	r3
}
     2e2:	bd10      	pop	{r4, pc}
     2e4:	20000134 	.word	0x20000134

000002e8 <uhi_msc_reset_endpoint>:
 * \param endp          Endpoint to reset
 * \param callback_end  Callback to call at the end of request
 */
static void uhi_msc_reset_endpoint(
		usb_ep_t endp, uhd_callback_setup_end_t callback )
{
     2e8:	b530      	push	{r4, r5, lr}
     2ea:	b085      	sub	sp, #20
     2ec:	000c      	movs	r4, r1
	// Setup Request to reset endpoint
	usb_setup_req_t req;
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
     2ee:	a902      	add	r1, sp, #8
     2f0:	2302      	movs	r3, #2
     2f2:	700b      	strb	r3, [r1, #0]
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_CLEAR_FEATURE;
     2f4:	3b01      	subs	r3, #1
     2f6:	704b      	strb	r3, [r1, #1]
	req.wValue = USB_EP_FEATURE_HALT;
     2f8:	2300      	movs	r3, #0
     2fa:	804b      	strh	r3, [r1, #2]
	req.wIndex = endp;
     2fc:	8088      	strh	r0, [r1, #4]
	req.wLength = 0;
     2fe:	80cb      	strh	r3, [r1, #6]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
     300:	4a09      	ldr	r2, [pc, #36]	; (328 <uhi_msc_reset_endpoint+0x40>)
     302:	6812      	ldr	r2, [r2, #0]
     304:	7c90      	ldrb	r0, [r2, #18]
     306:	9401      	str	r4, [sp, #4]
     308:	9300      	str	r3, [sp, #0]
     30a:	2200      	movs	r2, #0
     30c:	4d07      	ldr	r5, [pc, #28]	; (32c <uhi_msc_reset_endpoint+0x44>)
     30e:	47a8      	blx	r5
     310:	2800      	cmp	r0, #0
     312:	d001      	beq.n	318 <uhi_msc_reset_endpoint+0x30>
			&req, NULL, 0, NULL, callback)) {
		callback(uhi_msc_dev_sel->dev->address,UHD_TRANS_DISCONNECT,0);
	}
}
     314:	b005      	add	sp, #20
     316:	bd30      	pop	{r4, r5, pc}
		callback(uhi_msc_dev_sel->dev->address,UHD_TRANS_DISCONNECT,0);
     318:	4b03      	ldr	r3, [pc, #12]	; (328 <uhi_msc_reset_endpoint+0x40>)
     31a:	681b      	ldr	r3, [r3, #0]
     31c:	7c98      	ldrb	r0, [r3, #18]
     31e:	2200      	movs	r2, #0
     320:	2101      	movs	r1, #1
     322:	47a0      	blx	r4
}
     324:	e7f6      	b.n	314 <uhi_msc_reset_endpoint+0x2c>
     326:	46c0      	nop			; (mov r8, r8)
     328:	200000f8 	.word	0x200000f8
     32c:	0000320d 	.word	0x0000320d

00000330 <uhi_msc_csw_received>:
{
     330:	b510      	push	{r4, lr}
	if (status != UHD_TRANS_NOERROR) {
     332:	2a00      	cmp	r2, #0
     334:	d00c      	beq.n	350 <uhi_msc_csw_received+0x20>
		if (status == UHD_TRANS_STALL) {
     336:	2a04      	cmp	r2, #4
     338:	d004      	beq.n	344 <uhi_msc_csw_received+0x14>
		uhi_msc_scsi_sub_callback(false);
     33a:	4b11      	ldr	r3, [pc, #68]	; (380 <uhi_msc_csw_received+0x50>)
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	2000      	movs	r0, #0
     340:	4798      	blx	r3
		return;
     342:	e011      	b.n	368 <uhi_msc_csw_received+0x38>
			uhi_msc_reset_endpoint(uhi_msc_dev_sel->ep_in,
     344:	4b0f      	ldr	r3, [pc, #60]	; (384 <uhi_msc_csw_received+0x54>)
     346:	7918      	ldrb	r0, [r3, #4]
     348:	490f      	ldr	r1, [pc, #60]	; (388 <uhi_msc_csw_received+0x58>)
     34a:	4b10      	ldr	r3, [pc, #64]	; (38c <uhi_msc_csw_received+0x5c>)
     34c:	4798      	blx	r3
			return;
     34e:	e00b      	b.n	368 <uhi_msc_csw_received+0x38>
	if ((nb_transfered != sizeof(uhi_msc_csw))
     350:	2b0d      	cmp	r3, #13
     352:	d105      	bne.n	360 <uhi_msc_csw_received+0x30>
			|| (uhi_msc_csw.dCSWTag != uhi_msc_cbw.dCBWTag)
     354:	4b0e      	ldr	r3, [pc, #56]	; (390 <uhi_msc_csw_received+0x60>)
     356:	685a      	ldr	r2, [r3, #4]
     358:	4b0e      	ldr	r3, [pc, #56]	; (394 <uhi_msc_csw_received+0x64>)
     35a:	685b      	ldr	r3, [r3, #4]
     35c:	429a      	cmp	r2, r3
     35e:	d004      	beq.n	36a <uhi_msc_csw_received+0x3a>
		uhi_msc_scsi_sub_callback(false);
     360:	4b07      	ldr	r3, [pc, #28]	; (380 <uhi_msc_csw_received+0x50>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2000      	movs	r0, #0
     366:	4798      	blx	r3
}
     368:	bd10      	pop	{r4, pc}
			|| (uhi_msc_csw.dCSWSignature != CPU_TO_BE32(USB_CSW_SIGNATURE))) {
     36a:	4b0b      	ldr	r3, [pc, #44]	; (398 <uhi_msc_csw_received+0x68>)
     36c:	4a08      	ldr	r2, [pc, #32]	; (390 <uhi_msc_csw_received+0x60>)
     36e:	6812      	ldr	r2, [r2, #0]
     370:	429a      	cmp	r2, r3
     372:	d1f5      	bne.n	360 <uhi_msc_csw_received+0x30>
	uhi_msc_scsi_sub_callback(true);
     374:	4b02      	ldr	r3, [pc, #8]	; (380 <uhi_msc_csw_received+0x50>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	2001      	movs	r0, #1
     37a:	4798      	blx	r3
     37c:	e7f4      	b.n	368 <uhi_msc_csw_received+0x38>
     37e:	46c0      	nop			; (mov r8, r8)
     380:	20000134 	.word	0x20000134
     384:	200000f8 	.word	0x200000f8
     388:	00000729 	.word	0x00000729
     38c:	000002e9 	.word	0x000002e9
     390:	200000e4 	.word	0x200000e4
     394:	20000004 	.word	0x20000004
     398:	53425355 	.word	0x53425355

0000039c <uhi_msc_transfer>:
{
     39c:	b510      	push	{r4, lr}
     39e:	b084      	sub	sp, #16
     3a0:	0004      	movs	r4, r0
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
     3a2:	480a      	ldr	r0, [pc, #40]	; (3cc <uhi_msc_transfer+0x30>)
     3a4:	6800      	ldr	r0, [r0, #0]
     3a6:	7c80      	ldrb	r0, [r0, #18]
     3a8:	9302      	str	r3, [sp, #8]
     3aa:	4b09      	ldr	r3, [pc, #36]	; (3d0 <uhi_msc_transfer+0x34>)
     3ac:	9301      	str	r3, [sp, #4]
     3ae:	9200      	str	r2, [sp, #0]
     3b0:	000b      	movs	r3, r1
     3b2:	2200      	movs	r2, #0
     3b4:	0021      	movs	r1, r4
     3b6:	4c07      	ldr	r4, [pc, #28]	; (3d4 <uhi_msc_transfer+0x38>)
     3b8:	47a0      	blx	r4
     3ba:	2800      	cmp	r0, #0
     3bc:	d001      	beq.n	3c2 <uhi_msc_transfer+0x26>
}
     3be:	b004      	add	sp, #16
     3c0:	bd10      	pop	{r4, pc}
		uhi_msc_scsi_sub_callback(false);
     3c2:	4b05      	ldr	r3, [pc, #20]	; (3d8 <uhi_msc_transfer+0x3c>)
     3c4:	681b      	ldr	r3, [r3, #0]
     3c6:	4798      	blx	r3
}
     3c8:	e7f9      	b.n	3be <uhi_msc_transfer+0x22>
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	200000f8 	.word	0x200000f8
     3d0:	00004e20 	.word	0x00004e20
     3d4:	000034e5 	.word	0x000034e5
     3d8:	20000134 	.word	0x20000134

000003dc <uhi_msc_scsi>:
{
     3dc:	b510      	push	{r4, lr}
	uhi_msc_scsi_sub_callback = callback;
     3de:	4b07      	ldr	r3, [pc, #28]	; (3fc <uhi_msc_scsi+0x20>)
     3e0:	6018      	str	r0, [r3, #0]
	uhi_msc_data = payload;
     3e2:	4b07      	ldr	r3, [pc, #28]	; (400 <uhi_msc_scsi+0x24>)
     3e4:	6019      	str	r1, [r3, #0]
	uhi_msc_cbw.dCBWTag++;
     3e6:	4907      	ldr	r1, [pc, #28]	; (404 <uhi_msc_scsi+0x28>)
     3e8:	684b      	ldr	r3, [r1, #4]
     3ea:	3301      	adds	r3, #1
     3ec:	604b      	str	r3, [r1, #4]
	uhi_msc_transfer(uhi_msc_dev_sel->ep_out, (uint8_t *) &uhi_msc_cbw,
     3ee:	4b06      	ldr	r3, [pc, #24]	; (408 <uhi_msc_scsi+0x2c>)
     3f0:	7958      	ldrb	r0, [r3, #5]
     3f2:	4b06      	ldr	r3, [pc, #24]	; (40c <uhi_msc_scsi+0x30>)
     3f4:	221f      	movs	r2, #31
     3f6:	4c06      	ldr	r4, [pc, #24]	; (410 <uhi_msc_scsi+0x34>)
     3f8:	47a0      	blx	r4
}
     3fa:	bd10      	pop	{r4, pc}
     3fc:	20000134 	.word	0x20000134
     400:	200000f4 	.word	0x200000f4
     404:	20000004 	.word	0x20000004
     408:	200000f8 	.word	0x200000f8
     40c:	00000749 	.word	0x00000749
     410:	0000039d 	.word	0x0000039d

00000414 <uhi_msc_scsi_read_capacity>:
{
     414:	b510      	push	{r4, lr}
	uhi_msc_scsi_callback = callback;
     416:	4b0b      	ldr	r3, [pc, #44]	; (444 <uhi_msc_scsi_read_capacity+0x30>)
     418:	6018      	str	r0, [r3, #0]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
     41a:	4c0b      	ldr	r4, [pc, #44]	; (448 <uhi_msc_scsi_read_capacity+0x34>)
     41c:	2308      	movs	r3, #8
     41e:	60a3      	str	r3, [r4, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
     420:	3378      	adds	r3, #120	; 0x78
     422:	7323      	strb	r3, [r4, #12]
	uhi_msc_cbw.bCBWCBLength = 10;
     424:	3b76      	subs	r3, #118	; 0x76
     426:	73a3      	strb	r3, [r4, #14]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
     428:	0020      	movs	r0, r4
     42a:	300f      	adds	r0, #15
     42c:	2210      	movs	r2, #16
     42e:	2100      	movs	r1, #0
     430:	4b06      	ldr	r3, [pc, #24]	; (44c <uhi_msc_scsi_read_capacity+0x38>)
     432:	4798      	blx	r3
	uhi_msc_cbw.CDB[0] = SBC_READ_CAPACITY10;
     434:	2325      	movs	r3, #37	; 0x25
     436:	73e3      	strb	r3, [r4, #15]
	uhi_msc_scsi(uhi_msc_scsi_read_capacity_done, (uint8_t*)&uhi_msc_capacity);
     438:	4905      	ldr	r1, [pc, #20]	; (450 <uhi_msc_scsi_read_capacity+0x3c>)
     43a:	4806      	ldr	r0, [pc, #24]	; (454 <uhi_msc_scsi_read_capacity+0x40>)
     43c:	4b06      	ldr	r3, [pc, #24]	; (458 <uhi_msc_scsi_read_capacity+0x44>)
     43e:	4798      	blx	r3
}
     440:	bd10      	pop	{r4, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	2000012c 	.word	0x2000012c
     448:	20000004 	.word	0x20000004
     44c:	00005e13 	.word	0x00005e13
     450:	200000dc 	.word	0x200000dc
     454:	00000515 	.word	0x00000515
     458:	000003dd 	.word	0x000003dd

0000045c <uhi_msc_scsi_request_sense>:
{
     45c:	b570      	push	{r4, r5, r6, lr}
	uhi_msc_scsi_sense_callback = callback;
     45e:	4b0b      	ldr	r3, [pc, #44]	; (48c <uhi_msc_scsi_request_sense+0x30>)
     460:	6018      	str	r0, [r3, #0]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
     462:	4c0b      	ldr	r4, [pc, #44]	; (490 <uhi_msc_scsi_request_sense+0x34>)
     464:	2512      	movs	r5, #18
     466:	60a5      	str	r5, [r4, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
     468:	2380      	movs	r3, #128	; 0x80
     46a:	7323      	strb	r3, [r4, #12]
	uhi_msc_cbw.bCBWCBLength = 6;
     46c:	3b7a      	subs	r3, #122	; 0x7a
     46e:	73a3      	strb	r3, [r4, #14]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
     470:	0020      	movs	r0, r4
     472:	300f      	adds	r0, #15
     474:	2210      	movs	r2, #16
     476:	2100      	movs	r1, #0
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <uhi_msc_scsi_request_sense+0x38>)
     47a:	4798      	blx	r3
	uhi_msc_cbw.CDB[0] = SPC_REQUEST_SENSE;
     47c:	2303      	movs	r3, #3
     47e:	73e3      	strb	r3, [r4, #15]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_request_sense_data);
     480:	74e5      	strb	r5, [r4, #19]
	uhi_msc_scsi(uhi_msc_scsi_request_sense_done, (uint8_t*)&uhi_msc_sense);
     482:	4905      	ldr	r1, [pc, #20]	; (498 <uhi_msc_scsi_request_sense+0x3c>)
     484:	4805      	ldr	r0, [pc, #20]	; (49c <uhi_msc_scsi_request_sense+0x40>)
     486:	4b06      	ldr	r3, [pc, #24]	; (4a0 <uhi_msc_scsi_request_sense+0x44>)
     488:	4798      	blx	r3
}
     48a:	bd70      	pop	{r4, r5, r6, pc}
     48c:	20000130 	.word	0x20000130
     490:	20000004 	.word	0x20000004
     494:	00005e13 	.word	0x00005e13
     498:	20000138 	.word	0x20000138
     49c:	000002ad 	.word	0x000002ad
     4a0:	000003dd 	.word	0x000003dd

000004a4 <uhi_msc_scsi_test_unit_ready_done>:
{
     4a4:	b510      	push	{r4, lr}
	if (!b_cbw_succes) {
     4a6:	2800      	cmp	r0, #0
     4a8:	d011      	beq.n	4ce <uhi_msc_scsi_test_unit_ready_done+0x2a>
	if (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS) {
     4aa:	4b14      	ldr	r3, [pc, #80]	; (4fc <uhi_msc_scsi_test_unit_ready_done+0x58>)
     4ac:	7b1b      	ldrb	r3, [r3, #12]
     4ae:	2b00      	cmp	r3, #0
     4b0:	d115      	bne.n	4de <uhi_msc_scsi_test_unit_ready_done+0x3a>
	if (uhi_msc_lun_sel->status != LUN_GOOD) {
     4b2:	4b13      	ldr	r3, [pc, #76]	; (500 <uhi_msc_scsi_test_unit_ready_done+0x5c>)
     4b4:	681b      	ldr	r3, [r3, #0]
     4b6:	7a5a      	ldrb	r2, [r3, #9]
     4b8:	2a00      	cmp	r2, #0
     4ba:	d003      	beq.n	4c4 <uhi_msc_scsi_test_unit_ready_done+0x20>
		if (uhi_msc_lun_sel->status == LUN_BUSY) {
     4bc:	2a03      	cmp	r2, #3
     4be:	d016      	beq.n	4ee <uhi_msc_scsi_test_unit_ready_done+0x4a>
		uhi_msc_lun_sel->status = LUN_BUSY;
     4c0:	2203      	movs	r2, #3
     4c2:	725a      	strb	r2, [r3, #9]
	uhi_msc_scsi_callback(true);
     4c4:	4b0f      	ldr	r3, [pc, #60]	; (504 <uhi_msc_scsi_test_unit_ready_done+0x60>)
     4c6:	681b      	ldr	r3, [r3, #0]
     4c8:	2001      	movs	r0, #1
     4ca:	4798      	blx	r3
}
     4cc:	bd10      	pop	{r4, pc}
		uhi_msc_lun_sel->status = LUN_FAIL;
     4ce:	4b0c      	ldr	r3, [pc, #48]	; (500 <uhi_msc_scsi_test_unit_ready_done+0x5c>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	2201      	movs	r2, #1
     4d4:	725a      	strb	r2, [r3, #9]
		uhi_msc_scsi_callback(false);
     4d6:	4b0b      	ldr	r3, [pc, #44]	; (504 <uhi_msc_scsi_test_unit_ready_done+0x60>)
     4d8:	681b      	ldr	r3, [r3, #0]
     4da:	4798      	blx	r3
		return;
     4dc:	e7f6      	b.n	4cc <uhi_msc_scsi_test_unit_ready_done+0x28>
		uhi_msc_lun_sel->status = LUN_FAIL; // By default
     4de:	4b08      	ldr	r3, [pc, #32]	; (500 <uhi_msc_scsi_test_unit_ready_done+0x5c>)
     4e0:	681b      	ldr	r3, [r3, #0]
     4e2:	2201      	movs	r2, #1
     4e4:	725a      	strb	r2, [r3, #9]
		uhi_msc_scsi_request_sense(uhi_msc_scsi_test_unit_ready_sense);
     4e6:	4808      	ldr	r0, [pc, #32]	; (508 <uhi_msc_scsi_test_unit_ready_done+0x64>)
     4e8:	4b08      	ldr	r3, [pc, #32]	; (50c <uhi_msc_scsi_test_unit_ready_done+0x68>)
     4ea:	4798      	blx	r3
		return;
     4ec:	e7ee      	b.n	4cc <uhi_msc_scsi_test_unit_ready_done+0x28>
			uhi_msc_lun_sel->status = LUN_GOOD;
     4ee:	2200      	movs	r2, #0
     4f0:	725a      	strb	r2, [r3, #9]
			uhi_msc_scsi_read_capacity(uhi_msc_scsi_callback);
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <uhi_msc_scsi_test_unit_ready_done+0x60>)
     4f4:	6818      	ldr	r0, [r3, #0]
     4f6:	4b06      	ldr	r3, [pc, #24]	; (510 <uhi_msc_scsi_test_unit_ready_done+0x6c>)
     4f8:	4798      	blx	r3
			return;
     4fa:	e7e7      	b.n	4cc <uhi_msc_scsi_test_unit_ready_done+0x28>
     4fc:	200000e4 	.word	0x200000e4
     500:	20000128 	.word	0x20000128
     504:	2000012c 	.word	0x2000012c
     508:	000001b1 	.word	0x000001b1
     50c:	0000045d 	.word	0x0000045d
     510:	00000415 	.word	0x00000415

00000514 <uhi_msc_scsi_read_capacity_done>:
{
     514:	b570      	push	{r4, r5, r6, lr}
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
     516:	2800      	cmp	r0, #0
     518:	d007      	beq.n	52a <uhi_msc_scsi_read_capacity_done+0x16>
     51a:	4b18      	ldr	r3, [pc, #96]	; (57c <uhi_msc_scsi_read_capacity_done+0x68>)
     51c:	7b1b      	ldrb	r3, [r3, #12]
     51e:	2b00      	cmp	r3, #0
     520:	d103      	bne.n	52a <uhi_msc_scsi_read_capacity_done+0x16>
			|| uhi_msc_csw.dCSWDataResidue) {
     522:	4b16      	ldr	r3, [pc, #88]	; (57c <uhi_msc_scsi_read_capacity_done+0x68>)
     524:	689b      	ldr	r3, [r3, #8]
     526:	2b00      	cmp	r3, #0
     528:	d007      	beq.n	53a <uhi_msc_scsi_read_capacity_done+0x26>
		uhi_msc_lun_sel->status = LUN_FAIL;
     52a:	4b15      	ldr	r3, [pc, #84]	; (580 <uhi_msc_scsi_read_capacity_done+0x6c>)
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	2201      	movs	r2, #1
     530:	725a      	strb	r2, [r3, #9]
		uhi_msc_scsi_request_sense(uhi_msc_scsi_read_capacity_sense);
     532:	4814      	ldr	r0, [pc, #80]	; (584 <uhi_msc_scsi_read_capacity_done+0x70>)
     534:	4b14      	ldr	r3, [pc, #80]	; (588 <uhi_msc_scsi_read_capacity_done+0x74>)
     536:	4798      	blx	r3
}
     538:	bd70      	pop	{r4, r5, r6, pc}
	uhi_msc_lun_sel->capacity.block_len =
     53a:	4b11      	ldr	r3, [pc, #68]	; (580 <uhi_msc_scsi_read_capacity_done+0x6c>)
     53c:	681a      	ldr	r2, [r3, #0]
			be32_to_cpu(uhi_msc_capacity.block_len);
     53e:	4913      	ldr	r1, [pc, #76]	; (58c <uhi_msc_scsi_read_capacity_done+0x78>)
     540:	684b      	ldr	r3, [r1, #4]
     542:	ba1b      	rev	r3, r3
	uhi_msc_lun_sel->capacity.block_len =
     544:	6053      	str	r3, [r2, #4]
			be32_to_cpu(uhi_msc_capacity.max_lba);
     546:	680b      	ldr	r3, [r1, #0]
     548:	ba1b      	rev	r3, r3
	uhi_msc_lun_sel->capacity.max_lba =
     54a:	6013      	str	r3, [r2, #0]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(uhi_msc_sense6);
     54c:	4c10      	ldr	r4, [pc, #64]	; (590 <uhi_msc_scsi_read_capacity_done+0x7c>)
     54e:	2510      	movs	r5, #16
     550:	60a5      	str	r5, [r4, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
     552:	2380      	movs	r3, #128	; 0x80
     554:	7323      	strb	r3, [r4, #12]
	uhi_msc_cbw.bCBWCBLength = 6;
     556:	3b7a      	subs	r3, #122	; 0x7a
     558:	73a3      	strb	r3, [r4, #14]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
     55a:	0020      	movs	r0, r4
     55c:	300f      	adds	r0, #15
     55e:	2210      	movs	r2, #16
     560:	2100      	movs	r1, #0
     562:	4b0c      	ldr	r3, [pc, #48]	; (594 <uhi_msc_scsi_read_capacity_done+0x80>)
     564:	4798      	blx	r3
	uhi_msc_cbw.CDB[0] = SPC_MODE_SENSE6;
     566:	231a      	movs	r3, #26
     568:	73e3      	strb	r3, [r4, #15]
	uhi_msc_cbw.CDB[2] = SCSI_MS_MODE_INFEXP;
     56a:	3302      	adds	r3, #2
     56c:	7463      	strb	r3, [r4, #17]
	uhi_msc_cbw.CDB[4] = sizeof(uhi_msc_sense6);
     56e:	74e5      	strb	r5, [r4, #19]
	uhi_msc_scsi(uhi_msc_scsi_mode_sense6_done,
     570:	4909      	ldr	r1, [pc, #36]	; (598 <uhi_msc_scsi_read_capacity_done+0x84>)
     572:	480a      	ldr	r0, [pc, #40]	; (59c <uhi_msc_scsi_read_capacity_done+0x88>)
     574:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <uhi_msc_scsi_read_capacity_done+0x8c>)
     576:	4798      	blx	r3
     578:	e7de      	b.n	538 <uhi_msc_scsi_read_capacity_done+0x24>
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	200000e4 	.word	0x200000e4
     580:	20000128 	.word	0x20000128
     584:	0000020d 	.word	0x0000020d
     588:	0000045d 	.word	0x0000045d
     58c:	200000dc 	.word	0x200000dc
     590:	20000004 	.word	0x20000004
     594:	00005e13 	.word	0x00005e13
     598:	2000014c 	.word	0x2000014c
     59c:	0000021d 	.word	0x0000021d
     5a0:	000003dd 	.word	0x000003dd

000005a4 <uhi_msc_enable_step3>:
{
     5a4:	b570      	push	{r4, r5, r6, lr}
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
     5a6:	4b14      	ldr	r3, [pc, #80]	; (5f8 <uhi_msc_enable_step3+0x54>)
     5a8:	7b58      	ldrb	r0, [r3, #13]
     5aa:	3001      	adds	r0, #1
     5ac:	b2c0      	uxtb	r0, r0
     5ae:	7358      	strb	r0, [r3, #13]
     5b0:	4b12      	ldr	r3, [pc, #72]	; (5fc <uhi_msc_enable_step3+0x58>)
     5b2:	4798      	blx	r3
     5b4:	2800      	cmp	r0, #0
     5b6:	d103      	bne.n	5c0 <uhi_msc_enable_step3+0x1c>
		b_uhi_msc_free = true;
     5b8:	2201      	movs	r2, #1
     5ba:	4b11      	ldr	r3, [pc, #68]	; (600 <uhi_msc_enable_step3+0x5c>)
     5bc:	701a      	strb	r2, [r3, #0]
}
     5be:	bd70      	pop	{r4, r5, r6, pc}
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
     5c0:	4b10      	ldr	r3, [pc, #64]	; (604 <uhi_msc_enable_step3+0x60>)
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	2202      	movs	r2, #2
     5c6:	725a      	strb	r2, [r3, #9]
	uhi_msc_scsi_callback = callback;
     5c8:	4a0f      	ldr	r2, [pc, #60]	; (608 <uhi_msc_enable_step3+0x64>)
     5ca:	4b10      	ldr	r3, [pc, #64]	; (60c <uhi_msc_enable_step3+0x68>)
     5cc:	601a      	str	r2, [r3, #0]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
     5ce:	4c0a      	ldr	r4, [pc, #40]	; (5f8 <uhi_msc_enable_step3+0x54>)
     5d0:	2524      	movs	r5, #36	; 0x24
     5d2:	60a5      	str	r5, [r4, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
     5d4:	2380      	movs	r3, #128	; 0x80
     5d6:	7323      	strb	r3, [r4, #12]
	uhi_msc_cbw.bCBWCBLength = 6;
     5d8:	3b7a      	subs	r3, #122	; 0x7a
     5da:	73a3      	strb	r3, [r4, #14]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
     5dc:	0020      	movs	r0, r4
     5de:	300f      	adds	r0, #15
     5e0:	2210      	movs	r2, #16
     5e2:	2100      	movs	r1, #0
     5e4:	4b0a      	ldr	r3, [pc, #40]	; (610 <uhi_msc_enable_step3+0x6c>)
     5e6:	4798      	blx	r3
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
     5e8:	2312      	movs	r3, #18
     5ea:	73e3      	strb	r3, [r4, #15]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_inquiry_data);
     5ec:	74e5      	strb	r5, [r4, #19]
	uhi_msc_scsi(uhi_msc_scsi_inquiry_done, (uint8_t *) & uhi_msc_inquiry);
     5ee:	4909      	ldr	r1, [pc, #36]	; (614 <uhi_msc_enable_step3+0x70>)
     5f0:	4809      	ldr	r0, [pc, #36]	; (618 <uhi_msc_enable_step3+0x74>)
     5f2:	4b0a      	ldr	r3, [pc, #40]	; (61c <uhi_msc_enable_step3+0x78>)
     5f4:	4798      	blx	r3
     5f6:	e7e2      	b.n	5be <uhi_msc_enable_step3+0x1a>
     5f8:	20000004 	.word	0x20000004
     5fc:	00000155 	.word	0x00000155
     600:	20000000 	.word	0x20000000
     604:	20000128 	.word	0x20000128
     608:	0000068d 	.word	0x0000068d
     60c:	2000012c 	.word	0x2000012c
     610:	00005e13 	.word	0x00005e13
     614:	20000104 	.word	0x20000104
     618:	00000185 	.word	0x00000185
     61c:	000003dd 	.word	0x000003dd

00000620 <uhi_msc_enable_step2>:
{
     620:	b510      	push	{r4, lr}
	if (status == UHD_TRANS_NOERROR) {
     622:	2900      	cmp	r1, #0
     624:	d119      	bne.n	65a <uhi_msc_enable_step2+0x3a>
		if (payload_trans) {
     626:	2a00      	cmp	r2, #0
     628:	d013      	beq.n	652 <uhi_msc_enable_step2+0x32>
			uhi_msc_dev_sel->nb_lun++;
     62a:	4a13      	ldr	r2, [pc, #76]	; (678 <uhi_msc_enable_step2+0x58>)
     62c:	79d3      	ldrb	r3, [r2, #7]
     62e:	3301      	adds	r3, #1
     630:	71d3      	strb	r3, [r2, #7]
	uhi_msc_dev_sel->lun = malloc(uhi_msc_dev_sel->nb_lun*sizeof(uhi_msc_lun_t));
     632:	4c11      	ldr	r4, [pc, #68]	; (678 <uhi_msc_enable_step2+0x58>)
     634:	79e3      	ldrb	r3, [r4, #7]
     636:	0058      	lsls	r0, r3, #1
     638:	18c0      	adds	r0, r0, r3
     63a:	0080      	lsls	r0, r0, #2
     63c:	4b0f      	ldr	r3, [pc, #60]	; (67c <uhi_msc_enable_step2+0x5c>)
     63e:	4798      	blx	r3
     640:	60a0      	str	r0, [r4, #8]
	if (uhi_msc_dev_sel->lun == NULL) {
     642:	2800      	cmp	r0, #0
     644:	d013      	beq.n	66e <uhi_msc_enable_step2+0x4e>
	uhi_msc_lun_num_sel = (uint8_t) - 1;
     646:	22ff      	movs	r2, #255	; 0xff
     648:	4b0d      	ldr	r3, [pc, #52]	; (680 <uhi_msc_enable_step2+0x60>)
     64a:	735a      	strb	r2, [r3, #13]
	uhi_msc_enable_step3();
     64c:	4b0d      	ldr	r3, [pc, #52]	; (684 <uhi_msc_enable_step2+0x64>)
     64e:	4798      	blx	r3
}
     650:	bd10      	pop	{r4, pc}
			uhi_msc_dev_sel->nb_lun = 1;
     652:	2201      	movs	r2, #1
     654:	4b08      	ldr	r3, [pc, #32]	; (678 <uhi_msc_enable_step2+0x58>)
     656:	71da      	strb	r2, [r3, #7]
     658:	e7eb      	b.n	632 <uhi_msc_enable_step2+0x12>
	} else if (status == UHD_TRANS_STALL) {
     65a:	2904      	cmp	r1, #4
     65c:	d003      	beq.n	666 <uhi_msc_enable_step2+0x46>
		b_uhi_msc_free = true;
     65e:	2201      	movs	r2, #1
     660:	4b09      	ldr	r3, [pc, #36]	; (688 <uhi_msc_enable_step2+0x68>)
     662:	701a      	strb	r2, [r3, #0]
		return;
     664:	e7f4      	b.n	650 <uhi_msc_enable_step2+0x30>
		uhi_msc_dev_sel->nb_lun = 1;
     666:	2201      	movs	r2, #1
     668:	4b03      	ldr	r3, [pc, #12]	; (678 <uhi_msc_enable_step2+0x58>)
     66a:	71da      	strb	r2, [r3, #7]
     66c:	e7e1      	b.n	632 <uhi_msc_enable_step2+0x12>
		b_uhi_msc_free = true;
     66e:	2201      	movs	r2, #1
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <uhi_msc_enable_step2+0x68>)
     672:	701a      	strb	r2, [r3, #0]
		return;
     674:	e7ec      	b.n	650 <uhi_msc_enable_step2+0x30>
     676:	46c0      	nop			; (mov r8, r8)
     678:	200000f8 	.word	0x200000f8
     67c:	00005dd9 	.word	0x00005dd9
     680:	20000004 	.word	0x20000004
     684:	000005a5 	.word	0x000005a5
     688:	20000000 	.word	0x20000000

0000068c <uhi_msc_enable_step4>:
{
     68c:	b510      	push	{r4, lr}
	if (!b_success) {
     68e:	2800      	cmp	r0, #0
     690:	d003      	beq.n	69a <uhi_msc_enable_step4+0xe>
	uhi_msc_scsi_read_capacity(uhi_msc_enable_step5);
     692:	4803      	ldr	r0, [pc, #12]	; (6a0 <uhi_msc_enable_step4+0x14>)
     694:	4b03      	ldr	r3, [pc, #12]	; (6a4 <uhi_msc_enable_step4+0x18>)
     696:	4798      	blx	r3
}
     698:	bd10      	pop	{r4, pc}
		uhi_msc_enable_step3();
     69a:	4b03      	ldr	r3, [pc, #12]	; (6a8 <uhi_msc_enable_step4+0x1c>)
     69c:	4798      	blx	r3
		return;
     69e:	e7fb      	b.n	698 <uhi_msc_enable_step4+0xc>
     6a0:	000006ad 	.word	0x000006ad
     6a4:	00000415 	.word	0x00000415
     6a8:	000005a5 	.word	0x000005a5

000006ac <uhi_msc_enable_step5>:
{
     6ac:	b510      	push	{r4, lr}
	uhi_msc_enable_step3();
     6ae:	4b01      	ldr	r3, [pc, #4]	; (6b4 <uhi_msc_enable_step5+0x8>)
     6b0:	4798      	blx	r3
}
     6b2:	bd10      	pop	{r4, pc}
     6b4:	000005a5 	.word	0x000005a5

000006b8 <uhi_msc_csw_wait>:
{
     6b8:	b510      	push	{r4, lr}
	uhi_msc_transfer(uhi_msc_dev_sel->ep_in, (uint8_t *) & uhi_msc_csw,
     6ba:	4b04      	ldr	r3, [pc, #16]	; (6cc <uhi_msc_csw_wait+0x14>)
     6bc:	7918      	ldrb	r0, [r3, #4]
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <uhi_msc_csw_wait+0x18>)
     6c0:	220d      	movs	r2, #13
     6c2:	4904      	ldr	r1, [pc, #16]	; (6d4 <uhi_msc_csw_wait+0x1c>)
     6c4:	4c04      	ldr	r4, [pc, #16]	; (6d8 <uhi_msc_csw_wait+0x20>)
     6c6:	47a0      	blx	r4
}
     6c8:	bd10      	pop	{r4, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	200000f8 	.word	0x200000f8
     6d0:	00000331 	.word	0x00000331
     6d4:	200000e4 	.word	0x200000e4
     6d8:	0000039d 	.word	0x0000039d

000006dc <uhi_msc_data_transfered>:
{
     6dc:	b510      	push	{r4, lr}
	if (status != UHD_TRANS_NOERROR) {
     6de:	2a00      	cmp	r2, #0
     6e0:	d013      	beq.n	70a <uhi_msc_data_transfered+0x2e>
		if (status == UHD_TRANS_STALL) {
     6e2:	2a04      	cmp	r2, #4
     6e4:	d10c      	bne.n	700 <uhi_msc_data_transfered+0x24>
			if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
     6e6:	4b0a      	ldr	r3, [pc, #40]	; (710 <uhi_msc_data_transfered+0x34>)
     6e8:	7b1b      	ldrb	r3, [r3, #12]
     6ea:	2b7f      	cmp	r3, #127	; 0x7f
     6ec:	d805      	bhi.n	6fa <uhi_msc_data_transfered+0x1e>
				endp = uhi_msc_dev_sel->ep_out;
     6ee:	4b09      	ldr	r3, [pc, #36]	; (714 <uhi_msc_data_transfered+0x38>)
     6f0:	7958      	ldrb	r0, [r3, #5]
			uhi_msc_reset_endpoint(endp, uhi_msc_data_csw_rst_stall);
     6f2:	4909      	ldr	r1, [pc, #36]	; (718 <uhi_msc_data_transfered+0x3c>)
     6f4:	4b09      	ldr	r3, [pc, #36]	; (71c <uhi_msc_data_transfered+0x40>)
     6f6:	4798      	blx	r3
}
     6f8:	bd10      	pop	{r4, pc}
				endp = uhi_msc_dev_sel->ep_in;
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <uhi_msc_data_transfered+0x38>)
     6fc:	7918      	ldrb	r0, [r3, #4]
     6fe:	e7f8      	b.n	6f2 <uhi_msc_data_transfered+0x16>
		uhi_msc_scsi_sub_callback(false);
     700:	4b07      	ldr	r3, [pc, #28]	; (720 <uhi_msc_data_transfered+0x44>)
     702:	681b      	ldr	r3, [r3, #0]
     704:	2000      	movs	r0, #0
     706:	4798      	blx	r3
		return;
     708:	e7f6      	b.n	6f8 <uhi_msc_data_transfered+0x1c>
	uhi_msc_csw_wait();
     70a:	4b06      	ldr	r3, [pc, #24]	; (724 <uhi_msc_data_transfered+0x48>)
     70c:	4798      	blx	r3
	return;
     70e:	e7f3      	b.n	6f8 <uhi_msc_data_transfered+0x1c>
     710:	20000004 	.word	0x20000004
     714:	200000f8 	.word	0x200000f8
     718:	00000729 	.word	0x00000729
     71c:	000002e9 	.word	0x000002e9
     720:	20000134 	.word	0x20000134
     724:	000006b9 	.word	0x000006b9

00000728 <uhi_msc_data_csw_rst_stall>:
{
     728:	b510      	push	{r4, lr}
	if (status != UHD_TRANS_NOERROR) {
     72a:	2900      	cmp	r1, #0
     72c:	d102      	bne.n	734 <uhi_msc_data_csw_rst_stall+0xc>
	uhi_msc_csw_wait();
     72e:	4b04      	ldr	r3, [pc, #16]	; (740 <uhi_msc_data_csw_rst_stall+0x18>)
     730:	4798      	blx	r3
}
     732:	bd10      	pop	{r4, pc}
		uhi_msc_scsi_sub_callback(false);
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <uhi_msc_data_csw_rst_stall+0x1c>)
     736:	681b      	ldr	r3, [r3, #0]
     738:	2000      	movs	r0, #0
     73a:	4798      	blx	r3
		return;
     73c:	e7f9      	b.n	732 <uhi_msc_data_csw_rst_stall+0xa>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	000006b9 	.word	0x000006b9
     744:	20000134 	.word	0x20000134

00000748 <uhi_msc_cbw_sent>:
{
     748:	b510      	push	{r4, lr}
	if (status != UHD_TRANS_NOERROR) {
     74a:	2a00      	cmp	r2, #0
     74c:	d00c      	beq.n	768 <uhi_msc_cbw_sent+0x20>
		if (status == UHD_TRANS_STALL) {
     74e:	2a04      	cmp	r2, #4
     750:	d004      	beq.n	75c <uhi_msc_cbw_sent+0x14>
		uhi_msc_scsi_sub_callback(false);
     752:	4b11      	ldr	r3, [pc, #68]	; (798 <uhi_msc_cbw_sent+0x50>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	2000      	movs	r0, #0
     758:	4798      	blx	r3
		return;
     75a:	e015      	b.n	788 <uhi_msc_cbw_sent+0x40>
			uhi_msc_reset_endpoint(uhi_msc_dev_sel->ep_out,
     75c:	4b0f      	ldr	r3, [pc, #60]	; (79c <uhi_msc_cbw_sent+0x54>)
     75e:	7958      	ldrb	r0, [r3, #5]
     760:	490f      	ldr	r1, [pc, #60]	; (7a0 <uhi_msc_cbw_sent+0x58>)
     762:	4b10      	ldr	r3, [pc, #64]	; (7a4 <uhi_msc_cbw_sent+0x5c>)
     764:	4798      	blx	r3
			return;
     766:	e00f      	b.n	788 <uhi_msc_cbw_sent+0x40>
			cpu_to_le32(uhi_msc_cbw.dCBWDataTransferLength);
     768:	4b0f      	ldr	r3, [pc, #60]	; (7a8 <uhi_msc_cbw_sent+0x60>)
     76a:	689a      	ldr	r2, [r3, #8]
	if (!uhi_msc_cbw.dCBWDataTransferLength) {
     76c:	2a00      	cmp	r2, #0
     76e:	d00c      	beq.n	78a <uhi_msc_cbw_sent+0x42>
	if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
     770:	4b0d      	ldr	r3, [pc, #52]	; (7a8 <uhi_msc_cbw_sent+0x60>)
     772:	7b1b      	ldrb	r3, [r3, #12]
     774:	2b7f      	cmp	r3, #127	; 0x7f
     776:	d80b      	bhi.n	790 <uhi_msc_cbw_sent+0x48>
		endp = uhi_msc_dev_sel->ep_out;
     778:	4b08      	ldr	r3, [pc, #32]	; (79c <uhi_msc_cbw_sent+0x54>)
     77a:	7958      	ldrb	r0, [r3, #5]
	uhi_msc_transfer(endp, uhi_msc_data, uhi_msc_cbw.dCBWDataTransferLength,
     77c:	b292      	uxth	r2, r2
     77e:	4b0b      	ldr	r3, [pc, #44]	; (7ac <uhi_msc_cbw_sent+0x64>)
     780:	6819      	ldr	r1, [r3, #0]
     782:	4b0b      	ldr	r3, [pc, #44]	; (7b0 <uhi_msc_cbw_sent+0x68>)
     784:	4c0b      	ldr	r4, [pc, #44]	; (7b4 <uhi_msc_cbw_sent+0x6c>)
     786:	47a0      	blx	r4
}
     788:	bd10      	pop	{r4, pc}
		uhi_msc_csw_wait();
     78a:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <uhi_msc_cbw_sent+0x70>)
     78c:	4798      	blx	r3
		return;
     78e:	e7fb      	b.n	788 <uhi_msc_cbw_sent+0x40>
		endp = uhi_msc_dev_sel->ep_in;
     790:	4b02      	ldr	r3, [pc, #8]	; (79c <uhi_msc_cbw_sent+0x54>)
     792:	7918      	ldrb	r0, [r3, #4]
     794:	e7f2      	b.n	77c <uhi_msc_cbw_sent+0x34>
     796:	46c0      	nop			; (mov r8, r8)
     798:	20000134 	.word	0x20000134
     79c:	200000f8 	.word	0x200000f8
     7a0:	000002d9 	.word	0x000002d9
     7a4:	000002e9 	.word	0x000002e9
     7a8:	20000004 	.word	0x20000004
     7ac:	200000f4 	.word	0x200000f4
     7b0:	000006dd 	.word	0x000006dd
     7b4:	0000039d 	.word	0x0000039d
     7b8:	000006b9 	.word	0x000006b9

000007bc <uhi_msc_install>:
{
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	0005      	movs	r5, r0
	if (uhi_msc_dev.dev != NULL) {
     7c0:	4b29      	ldr	r3, [pc, #164]	; (868 <uhi_msc_install+0xac>)
     7c2:	681b      	ldr	r3, [r3, #0]
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
     7c4:	2005      	movs	r0, #5
	if (uhi_msc_dev.dev != NULL) {
     7c6:	2b00      	cmp	r3, #0
     7c8:	d000      	beq.n	7cc <uhi_msc_install+0x10>
}
     7ca:	bd70      	pop	{r4, r5, r6, pc}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
     7cc:	696e      	ldr	r6, [r5, #20]
     7ce:	78b3      	ldrb	r3, [r6, #2]
     7d0:	78f4      	ldrb	r4, [r6, #3]
     7d2:	0224      	lsls	r4, r4, #8
     7d4:	431c      	orrs	r4, r3
	while (conf_desc_lgt) {
     7d6:	d043      	beq.n	860 <uhi_msc_install+0xa4>
     7d8:	2000      	movs	r0, #0
     7da:	e009      	b.n	7f0 <uhi_msc_install+0x34>
			if ((ptr_iface->bInterfaceClass   == MSC_CLASS)
     7dc:	7973      	ldrb	r3, [r6, #5]
				b_iface_supported = false;
     7de:	2000      	movs	r0, #0
			if ((ptr_iface->bInterfaceClass   == MSC_CLASS)
     7e0:	2b08      	cmp	r3, #8
     7e2:	d02a      	beq.n	83a <uhi_msc_install+0x7e>
		conf_desc_lgt -= ptr_iface->bLength;
     7e4:	7833      	ldrb	r3, [r6, #0]
     7e6:	1ae4      	subs	r4, r4, r3
     7e8:	b2a4      	uxth	r4, r4
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
     7ea:	18f6      	adds	r6, r6, r3
	while (conf_desc_lgt) {
     7ec:	2c00      	cmp	r4, #0
     7ee:	d035      	beq.n	85c <uhi_msc_install+0xa0>
		switch (ptr_iface->bDescriptorType) {
     7f0:	7873      	ldrb	r3, [r6, #1]
     7f2:	2b04      	cmp	r3, #4
     7f4:	d0f2      	beq.n	7dc <uhi_msc_install+0x20>
     7f6:	2b05      	cmp	r3, #5
     7f8:	d1f4      	bne.n	7e4 <uhi_msc_install+0x28>
			if (!b_iface_supported) {
     7fa:	2800      	cmp	r0, #0
     7fc:	d0f2      	beq.n	7e4 <uhi_msc_install+0x28>
			if (ptr_ep->bmAttributes != USB_EP_TYPE_BULK) {
     7fe:	78f3      	ldrb	r3, [r6, #3]
     800:	2b02      	cmp	r3, #2
     802:	d1ef      	bne.n	7e4 <uhi_msc_install+0x28>
			if (!uhd_ep_alloc(dev->address, ptr_ep, dev->speed)) {
     804:	7cea      	ldrb	r2, [r5, #19]
     806:	7ca8      	ldrb	r0, [r5, #18]
     808:	0031      	movs	r1, r6
     80a:	4b18      	ldr	r3, [pc, #96]	; (86c <uhi_msc_install+0xb0>)
     80c:	4798      	blx	r3
     80e:	2800      	cmp	r0, #0
     810:	d028      	beq.n	864 <uhi_msc_install+0xa8>
			if (ptr_ep->bEndpointAddress & USB_EP_DIR_IN) {
     812:	78b3      	ldrb	r3, [r6, #2]
     814:	b25a      	sxtb	r2, r3
     816:	2a00      	cmp	r2, #0
     818:	db1d      	blt.n	856 <uhi_msc_install+0x9a>
				uhi_msc_dev.ep_out = ptr_ep->bEndpointAddress;
     81a:	4a13      	ldr	r2, [pc, #76]	; (868 <uhi_msc_install+0xac>)
     81c:	7153      	strb	r3, [r2, #5]
			if (uhi_msc_dev.ep_out && uhi_msc_dev.ep_in) {
     81e:	4b12      	ldr	r3, [pc, #72]	; (868 <uhi_msc_install+0xac>)
     820:	795b      	ldrb	r3, [r3, #5]
     822:	2b00      	cmp	r3, #0
     824:	d0de      	beq.n	7e4 <uhi_msc_install+0x28>
     826:	4b10      	ldr	r3, [pc, #64]	; (868 <uhi_msc_install+0xac>)
     828:	791b      	ldrb	r3, [r3, #4]
     82a:	2b00      	cmp	r3, #0
     82c:	d0da      	beq.n	7e4 <uhi_msc_install+0x28>
				uhi_msc_dev.dev = dev;
     82e:	4b0e      	ldr	r3, [pc, #56]	; (868 <uhi_msc_install+0xac>)
     830:	601d      	str	r5, [r3, #0]
				uhi_msc_dev.nb_lun = 0;
     832:	2200      	movs	r2, #0
     834:	71da      	strb	r2, [r3, #7]
				return UHC_ENUM_SUCCESS;
     836:	2000      	movs	r0, #0
     838:	e7c7      	b.n	7ca <uhi_msc_install+0xe>
			&& (ptr_iface->bInterfaceSubClass == MSC_SUBCLASS_TRANSPARENT)
     83a:	79b3      	ldrb	r3, [r6, #6]
     83c:	2b06      	cmp	r3, #6
     83e:	d1d1      	bne.n	7e4 <uhi_msc_install+0x28>
			&& (ptr_iface->bInterfaceProtocol == MSC_PROTOCOL_BULK) ) {
     840:	79f3      	ldrb	r3, [r6, #7]
     842:	2b50      	cmp	r3, #80	; 0x50
     844:	d1ce      	bne.n	7e4 <uhi_msc_install+0x28>
				uhi_msc_dev_sel->iface_num = ptr_iface->bInterfaceNumber;
     846:	78b3      	ldrb	r3, [r6, #2]
     848:	4a07      	ldr	r2, [pc, #28]	; (868 <uhi_msc_install+0xac>)
     84a:	7193      	strb	r3, [r2, #6]
				uhi_msc_dev.ep_in = 0;
     84c:	2300      	movs	r3, #0
     84e:	7113      	strb	r3, [r2, #4]
				uhi_msc_dev.ep_out = 0;
     850:	7153      	strb	r3, [r2, #5]
				b_iface_supported = true;
     852:	3001      	adds	r0, #1
				uhi_msc_dev.ep_out = 0;
     854:	e7c6      	b.n	7e4 <uhi_msc_install+0x28>
				uhi_msc_dev.ep_in = ptr_ep->bEndpointAddress;
     856:	4a04      	ldr	r2, [pc, #16]	; (868 <uhi_msc_install+0xac>)
     858:	7113      	strb	r3, [r2, #4]
     85a:	e7e0      	b.n	81e <uhi_msc_install+0x62>
	return UHC_ENUM_UNSUPPORTED; // No interface supported
     85c:	2001      	movs	r0, #1
     85e:	e7b4      	b.n	7ca <uhi_msc_install+0xe>
     860:	2001      	movs	r0, #1
     862:	e7b2      	b.n	7ca <uhi_msc_install+0xe>
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
     864:	2004      	movs	r0, #4
     866:	e7b0      	b.n	7ca <uhi_msc_install+0xe>
     868:	200000f8 	.word	0x200000f8
     86c:	0000335d 	.word	0x0000335d

00000870 <uhi_msc_enable>:
{
     870:	b510      	push	{r4, lr}
     872:	b084      	sub	sp, #16
	if (uhi_msc_dev.dev != dev) {
     874:	4b0e      	ldr	r3, [pc, #56]	; (8b0 <uhi_msc_enable+0x40>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	4283      	cmp	r3, r0
     87a:	d001      	beq.n	880 <uhi_msc_enable+0x10>
}
     87c:	b004      	add	sp, #16
     87e:	bd10      	pop	{r4, pc}
	b_uhi_msc_free = false;
     880:	2400      	movs	r4, #0
     882:	4a0c      	ldr	r2, [pc, #48]	; (8b4 <uhi_msc_enable+0x44>)
     884:	7014      	strb	r4, [r2, #0]
	uhi_msc_dev_sel->nb_lun = 0;
     886:	4a0a      	ldr	r2, [pc, #40]	; (8b0 <uhi_msc_enable+0x40>)
     888:	71d4      	strb	r4, [r2, #7]
	req.bmRequestType = USB_REQ_RECIP_INTERFACE|USB_REQ_TYPE_CLASS|USB_REQ_DIR_IN;
     88a:	a902      	add	r1, sp, #8
     88c:	20a1      	movs	r0, #161	; 0xa1
     88e:	7008      	strb	r0, [r1, #0]
	req.bRequest = USB_REQ_MSC_GET_MAX_LUN;
     890:	305d      	adds	r0, #93	; 0x5d
     892:	7048      	strb	r0, [r1, #1]
	req.wValue = 0;
     894:	804c      	strh	r4, [r1, #2]
	req.wIndex = uhi_msc_dev_sel->iface_num;
     896:	7990      	ldrb	r0, [r2, #6]
     898:	8088      	strh	r0, [r1, #4]
	req.wLength = 1;
     89a:	2001      	movs	r0, #1
     89c:	80c8      	strh	r0, [r1, #6]
	uhd_setup_request(uhi_msc_dev_sel->dev->address,
     89e:	3207      	adds	r2, #7
     8a0:	7c98      	ldrb	r0, [r3, #18]
     8a2:	4b05      	ldr	r3, [pc, #20]	; (8b8 <uhi_msc_enable+0x48>)
     8a4:	9301      	str	r3, [sp, #4]
     8a6:	9400      	str	r4, [sp, #0]
     8a8:	2301      	movs	r3, #1
     8aa:	4c04      	ldr	r4, [pc, #16]	; (8bc <uhi_msc_enable+0x4c>)
     8ac:	47a0      	blx	r4
     8ae:	e7e5      	b.n	87c <uhi_msc_enable+0xc>
     8b0:	200000f8 	.word	0x200000f8
     8b4:	20000000 	.word	0x20000000
     8b8:	00000621 	.word	0x00000621
     8bc:	0000320d 	.word	0x0000320d

000008c0 <uhi_msc_uninstall>:
{
     8c0:	b510      	push	{r4, lr}
	if (uhi_msc_dev.dev != dev) {
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <uhi_msc_uninstall+0x20>)
     8c4:	681b      	ldr	r3, [r3, #0]
     8c6:	4283      	cmp	r3, r0
     8c8:	d000      	beq.n	8cc <uhi_msc_uninstall+0xc>
}
     8ca:	bd10      	pop	{r4, pc}
	uhi_msc_dev.dev = NULL;
     8cc:	4b04      	ldr	r3, [pc, #16]	; (8e0 <uhi_msc_uninstall+0x20>)
     8ce:	2200      	movs	r2, #0
     8d0:	601a      	str	r2, [r3, #0]
	if (uhi_msc_dev_sel->lun != NULL) {
     8d2:	6898      	ldr	r0, [r3, #8]
     8d4:	2800      	cmp	r0, #0
     8d6:	d0f8      	beq.n	8ca <uhi_msc_uninstall+0xa>
		free(uhi_msc_dev_sel->lun);
     8d8:	4b02      	ldr	r3, [pc, #8]	; (8e4 <uhi_msc_uninstall+0x24>)
     8da:	4798      	blx	r3
     8dc:	e7f5      	b.n	8ca <uhi_msc_uninstall+0xa>
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	200000f8 	.word	0x200000f8
     8e4:	00005ded 	.word	0x00005ded

000008e8 <uhi_msc_is_available>:
	return b_uhi_msc_free;
     8e8:	4b01      	ldr	r3, [pc, #4]	; (8f0 <uhi_msc_is_available+0x8>)
     8ea:	7818      	ldrb	r0, [r3, #0]
     8ec:	b2c0      	uxtb	r0, r0
}
     8ee:	4770      	bx	lr
     8f0:	20000000 	.word	0x20000000

000008f4 <uhi_msc_get_lun>:
	if (uhi_msc_dev.dev == NULL) {
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <uhi_msc_get_lun+0x14>)
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d002      	beq.n	902 <uhi_msc_get_lun+0xe>
	return uhi_msc_dev.nb_lun;
     8fc:	4b02      	ldr	r3, [pc, #8]	; (908 <uhi_msc_get_lun+0x14>)
     8fe:	79d8      	ldrb	r0, [r3, #7]
}
     900:	4770      	bx	lr
		return 0;
     902:	2000      	movs	r0, #0
     904:	e7fc      	b.n	900 <uhi_msc_get_lun+0xc>
     906:	46c0      	nop			; (mov r8, r8)
     908:	200000f8 	.word	0x200000f8

0000090c <uhi_msc_get_lun_desc>:
	if (lun >= uhi_msc_dev.nb_lun) {
     90c:	4b06      	ldr	r3, [pc, #24]	; (928 <uhi_msc_get_lun_desc+0x1c>)
     90e:	79db      	ldrb	r3, [r3, #7]
     910:	4283      	cmp	r3, r0
     912:	d906      	bls.n	922 <uhi_msc_get_lun_desc+0x16>
	return &uhi_msc_dev.lun[lun];
     914:	0043      	lsls	r3, r0, #1
     916:	1818      	adds	r0, r3, r0
     918:	0080      	lsls	r0, r0, #2
     91a:	4b03      	ldr	r3, [pc, #12]	; (928 <uhi_msc_get_lun_desc+0x1c>)
     91c:	689b      	ldr	r3, [r3, #8]
     91e:	1818      	adds	r0, r3, r0
}
     920:	4770      	bx	lr
		return NULL;
     922:	2000      	movs	r0, #0
     924:	e7fc      	b.n	920 <uhi_msc_get_lun_desc+0x14>
     926:	46c0      	nop			; (mov r8, r8)
     928:	200000f8 	.word	0x200000f8

0000092c <uhi_msc_scsi_test_unit_ready>:
{
     92c:	b570      	push	{r4, r5, r6, lr}
     92e:	000d      	movs	r5, r1
	if (!uhi_msc_select_lun(lun)) {
     930:	4b0b      	ldr	r3, [pc, #44]	; (960 <uhi_msc_scsi_test_unit_ready+0x34>)
     932:	4798      	blx	r3
     934:	1e04      	subs	r4, r0, #0
     936:	d101      	bne.n	93c <uhi_msc_scsi_test_unit_ready+0x10>
}
     938:	0020      	movs	r0, r4
     93a:	bd70      	pop	{r4, r5, r6, pc}
	uhi_msc_scsi_callback = callback;
     93c:	4b09      	ldr	r3, [pc, #36]	; (964 <uhi_msc_scsi_test_unit_ready+0x38>)
     93e:	601d      	str	r5, [r3, #0]
	uhi_msc_cbw.dCBWDataTransferLength = 0;
     940:	4809      	ldr	r0, [pc, #36]	; (968 <uhi_msc_scsi_test_unit_ready+0x3c>)
     942:	2300      	movs	r3, #0
     944:	6083      	str	r3, [r0, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_OUT;
     946:	7303      	strb	r3, [r0, #12]
	uhi_msc_cbw.bCBWCBLength = 6;
     948:	3306      	adds	r3, #6
     94a:	7383      	strb	r3, [r0, #14]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
     94c:	300f      	adds	r0, #15
     94e:	2210      	movs	r2, #16
     950:	2100      	movs	r1, #0
     952:	4b06      	ldr	r3, [pc, #24]	; (96c <uhi_msc_scsi_test_unit_ready+0x40>)
     954:	4798      	blx	r3
	uhi_msc_scsi(uhi_msc_scsi_test_unit_ready_done, NULL);
     956:	2100      	movs	r1, #0
     958:	4805      	ldr	r0, [pc, #20]	; (970 <uhi_msc_scsi_test_unit_ready+0x44>)
     95a:	4b06      	ldr	r3, [pc, #24]	; (974 <uhi_msc_scsi_test_unit_ready+0x48>)
     95c:	4798      	blx	r3
	return true;
     95e:	e7eb      	b.n	938 <uhi_msc_scsi_test_unit_ready+0xc>
     960:	00000155 	.word	0x00000155
     964:	2000012c 	.word	0x2000012c
     968:	20000004 	.word	0x20000004
     96c:	00005e13 	.word	0x00005e13
     970:	000004a5 	.word	0x000004a5
     974:	000003dd 	.word	0x000003dd

00000978 <uhi_msc_scsi_read_10>:
{
     978:	b5f0      	push	{r4, r5, r6, r7, lr}
     97a:	b083      	sub	sp, #12
     97c:	9101      	str	r1, [sp, #4]
     97e:	0016      	movs	r6, r2
     980:	001f      	movs	r7, r3
	if (!uhi_msc_select_lun(lun)) {
     982:	4b15      	ldr	r3, [pc, #84]	; (9d8 <uhi_msc_scsi_read_10+0x60>)
     984:	4798      	blx	r3
     986:	1e05      	subs	r5, r0, #0
     988:	d102      	bne.n	990 <uhi_msc_scsi_read_10+0x18>
}
     98a:	0028      	movs	r0, r5
     98c:	b003      	add	sp, #12
     98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uhi_msc_scsi_callback = callback;
     990:	4b12      	ldr	r3, [pc, #72]	; (9dc <uhi_msc_scsi_read_10+0x64>)
     992:	9a08      	ldr	r2, [sp, #32]
     994:	601a      	str	r2, [r3, #0]
	uhi_msc_cbw.dCBWDataTransferLength =
     996:	4c12      	ldr	r4, [pc, #72]	; (9e0 <uhi_msc_scsi_read_10+0x68>)
			nb_sector * uhi_msc_lun_sel->capacity.block_len;
     998:	4b12      	ldr	r3, [pc, #72]	; (9e4 <uhi_msc_scsi_read_10+0x6c>)
     99a:	681b      	ldr	r3, [r3, #0]
     99c:	685b      	ldr	r3, [r3, #4]
     99e:	437b      	muls	r3, r7
	uhi_msc_cbw.dCBWDataTransferLength =
     9a0:	60a3      	str	r3, [r4, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
     9a2:	2380      	movs	r3, #128	; 0x80
     9a4:	7323      	strb	r3, [r4, #12]
	uhi_msc_cbw.bCBWCBLength = 10;
     9a6:	3b76      	subs	r3, #118	; 0x76
     9a8:	73a3      	strb	r3, [r4, #14]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
     9aa:	0020      	movs	r0, r4
     9ac:	300f      	adds	r0, #15
     9ae:	2210      	movs	r2, #16
     9b0:	2100      	movs	r1, #0
     9b2:	4b0d      	ldr	r3, [pc, #52]	; (9e8 <uhi_msc_scsi_read_10+0x70>)
     9b4:	4798      	blx	r3
	uhi_msc_cbw.CDB[0] = SBC_READ10;
     9b6:	2328      	movs	r3, #40	; 0x28
     9b8:	73e3      	strb	r3, [r4, #15]
	uhi_msc_cbw.CDB[2] = MSB0W(addr);
     9ba:	ab01      	add	r3, sp, #4
     9bc:	78da      	ldrb	r2, [r3, #3]
     9be:	7462      	strb	r2, [r4, #17]
	uhi_msc_cbw.CDB[3] = MSB1W(addr);
     9c0:	789a      	ldrb	r2, [r3, #2]
     9c2:	74a2      	strb	r2, [r4, #18]
	uhi_msc_cbw.CDB[4] = MSB2W(addr);
     9c4:	785a      	ldrb	r2, [r3, #1]
     9c6:	74e2      	strb	r2, [r4, #19]
	uhi_msc_cbw.CDB[5] = MSB3W(addr);
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	7523      	strb	r3, [r4, #20]
	uhi_msc_cbw.CDB[8] = nb_sector; // LSB
     9cc:	75e7      	strb	r7, [r4, #23]
	uhi_msc_scsi(uhi_msc_scsi_read_10_done, ram);
     9ce:	0031      	movs	r1, r6
     9d0:	4806      	ldr	r0, [pc, #24]	; (9ec <uhi_msc_scsi_read_10+0x74>)
     9d2:	4b07      	ldr	r3, [pc, #28]	; (9f0 <uhi_msc_scsi_read_10+0x78>)
     9d4:	4798      	blx	r3
	return true;
     9d6:	e7d8      	b.n	98a <uhi_msc_scsi_read_10+0x12>
     9d8:	00000155 	.word	0x00000155
     9dc:	2000012c 	.word	0x2000012c
     9e0:	20000004 	.word	0x20000004
     9e4:	20000128 	.word	0x20000128
     9e8:	00005e13 	.word	0x00005e13
     9ec:	0000026d 	.word	0x0000026d
     9f0:	000003dd 	.word	0x000003dd

000009f4 <uhi_msc_mem_stop_pooling>:
 *
 * \param b_success true, if the scsi command is successful
 */
static void uhi_msc_mem_stop_pooling(bool b_success)
{
	uhi_msc_mem_command_ongoing = false;
     9f4:	2200      	movs	r2, #0
     9f6:	4b02      	ldr	r3, [pc, #8]	; (a00 <uhi_msc_mem_stop_pooling+0xc>)
     9f8:	701a      	strb	r2, [r3, #0]
	uhi_msc_mem_command_status = b_success;
     9fa:	4b02      	ldr	r3, [pc, #8]	; (a04 <uhi_msc_mem_stop_pooling+0x10>)
     9fc:	7018      	strb	r0, [r3, #0]
}
     9fe:	4770      	bx	lr
     a00:	2000015c 	.word	0x2000015c
     a04:	2000015d 	.word	0x2000015d

00000a08 <uhi_msc_mem_translate_status>:
 *
 * \return CTRL ACCESS LUN status
 */
static Ctrl_status uhi_msc_mem_translate_status(lun_status_t status)
{
	switch (status) {
     a08:	2802      	cmp	r0, #2
     a0a:	d004      	beq.n	a16 <uhi_msc_mem_translate_status+0xe>
     a0c:	2803      	cmp	r0, #3
     a0e:	d004      	beq.n	a1a <uhi_msc_mem_translate_status+0x12>
		return CTRL_NO_PRESENT;
	case LUN_BUSY:
		return CTRL_BUSY;
	case LUN_FAIL:
	default:
		return CTRL_FAIL;
     a10:	1e43      	subs	r3, r0, #1
     a12:	4198      	sbcs	r0, r3
	}
}
     a14:	4770      	bx	lr
		return CTRL_NO_PRESENT;
     a16:	2002      	movs	r0, #2
     a18:	e7fc      	b.n	a14 <uhi_msc_mem_translate_status+0xc>
		return CTRL_BUSY;
     a1a:	2003      	movs	r0, #3
     a1c:	e7fa      	b.n	a14 <uhi_msc_mem_translate_status+0xc>
	...

00000a20 <uhi_msc_mem_get_lun>:
{
     a20:	b510      	push	{r4, lr}
	while (!uhi_msc_is_available());
     a22:	4c03      	ldr	r4, [pc, #12]	; (a30 <uhi_msc_mem_get_lun+0x10>)
     a24:	47a0      	blx	r4
     a26:	2800      	cmp	r0, #0
     a28:	d0fc      	beq.n	a24 <uhi_msc_mem_get_lun+0x4>
	return uhi_msc_get_lun();
     a2a:	4b02      	ldr	r3, [pc, #8]	; (a34 <uhi_msc_mem_get_lun+0x14>)
     a2c:	4798      	blx	r3
}
     a2e:	bd10      	pop	{r4, pc}
     a30:	000008e9 	.word	0x000008e9
     a34:	000008f5 	.word	0x000008f5

00000a38 <uhi_msc_mem_test_unit_ready>:
{
     a38:	b570      	push	{r4, r5, r6, lr}
     a3a:	0005      	movs	r5, r0
	while (!uhi_msc_is_available());
     a3c:	4c11      	ldr	r4, [pc, #68]	; (a84 <uhi_msc_mem_test_unit_ready+0x4c>)
     a3e:	47a0      	blx	r4
     a40:	2800      	cmp	r0, #0
     a42:	d0fc      	beq.n	a3e <uhi_msc_mem_test_unit_ready+0x6>
	uhi_msc_mem_command_ongoing = true;
     a44:	2201      	movs	r2, #1
     a46:	4b10      	ldr	r3, [pc, #64]	; (a88 <uhi_msc_mem_test_unit_ready+0x50>)
     a48:	701a      	strb	r2, [r3, #0]
	uhi_msc_mem_lun = lun;
     a4a:	4b10      	ldr	r3, [pc, #64]	; (a8c <uhi_msc_mem_test_unit_ready+0x54>)
     a4c:	701d      	strb	r5, [r3, #0]
	if (!uhi_msc_scsi_test_unit_ready(uhi_msc_mem_lun, uhi_msc_mem_stop_pooling)) {
     a4e:	4910      	ldr	r1, [pc, #64]	; (a90 <uhi_msc_mem_test_unit_ready+0x58>)
     a50:	0028      	movs	r0, r5
     a52:	4b10      	ldr	r3, [pc, #64]	; (a94 <uhi_msc_mem_test_unit_ready+0x5c>)
     a54:	4798      	blx	r3
		return CTRL_FAIL;
     a56:	2301      	movs	r3, #1
	if (!uhi_msc_scsi_test_unit_ready(uhi_msc_mem_lun, uhi_msc_mem_stop_pooling)) {
     a58:	2800      	cmp	r0, #0
     a5a:	d008      	beq.n	a6e <uhi_msc_mem_test_unit_ready+0x36>
	while (uhi_msc_mem_command_ongoing);
     a5c:	4a0a      	ldr	r2, [pc, #40]	; (a88 <uhi_msc_mem_test_unit_ready+0x50>)
     a5e:	7813      	ldrb	r3, [r2, #0]
     a60:	2b00      	cmp	r3, #0
     a62:	d1fc      	bne.n	a5e <uhi_msc_mem_test_unit_ready+0x26>
	if (!uhi_msc_mem_command_status) {
     a64:	4b0c      	ldr	r3, [pc, #48]	; (a98 <uhi_msc_mem_test_unit_ready+0x60>)
     a66:	781a      	ldrb	r2, [r3, #0]
		return CTRL_FAIL;
     a68:	2301      	movs	r3, #1
	if (!uhi_msc_mem_command_status) {
     a6a:	2a00      	cmp	r2, #0
     a6c:	d101      	bne.n	a72 <uhi_msc_mem_test_unit_ready+0x3a>
}
     a6e:	0018      	movs	r0, r3
     a70:	bd70      	pop	{r4, r5, r6, pc}
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
     a72:	4b06      	ldr	r3, [pc, #24]	; (a8c <uhi_msc_mem_test_unit_ready+0x54>)
     a74:	7818      	ldrb	r0, [r3, #0]
     a76:	4b09      	ldr	r3, [pc, #36]	; (a9c <uhi_msc_mem_test_unit_ready+0x64>)
     a78:	4798      	blx	r3
	return uhi_msc_mem_translate_status(lun_desc->status);
     a7a:	7a40      	ldrb	r0, [r0, #9]
     a7c:	4b08      	ldr	r3, [pc, #32]	; (aa0 <uhi_msc_mem_test_unit_ready+0x68>)
     a7e:	4798      	blx	r3
     a80:	0003      	movs	r3, r0
     a82:	e7f4      	b.n	a6e <uhi_msc_mem_test_unit_ready+0x36>
     a84:	000008e9 	.word	0x000008e9
     a88:	2000015c 	.word	0x2000015c
     a8c:	2000015e 	.word	0x2000015e
     a90:	000009f5 	.word	0x000009f5
     a94:	0000092d 	.word	0x0000092d
     a98:	2000015d 	.word	0x2000015d
     a9c:	0000090d 	.word	0x0000090d
     aa0:	00000a09 	.word	0x00000a09

00000aa4 <uhi_msc_mem_read_capacity>:
{
     aa4:	b570      	push	{r4, r5, r6, lr}
     aa6:	0005      	movs	r5, r0
     aa8:	000e      	movs	r6, r1
	while (!uhi_msc_is_available());
     aaa:	4c0e      	ldr	r4, [pc, #56]	; (ae4 <uhi_msc_mem_read_capacity+0x40>)
     aac:	47a0      	blx	r4
     aae:	2800      	cmp	r0, #0
     ab0:	d0fc      	beq.n	aac <uhi_msc_mem_read_capacity+0x8>
	uhi_msc_mem_lun = lun;
     ab2:	4b0d      	ldr	r3, [pc, #52]	; (ae8 <uhi_msc_mem_read_capacity+0x44>)
     ab4:	701d      	strb	r5, [r3, #0]
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
     ab6:	0028      	movs	r0, r5
     ab8:	4b0c      	ldr	r3, [pc, #48]	; (aec <uhi_msc_mem_read_capacity+0x48>)
     aba:	4798      	blx	r3
	if (lun_desc == NULL) {
     abc:	2800      	cmp	r0, #0
     abe:	d00e      	beq.n	ade <uhi_msc_mem_read_capacity+0x3a>
	if (lun_desc->capacity.block_len != 512) {
     ac0:	2280      	movs	r2, #128	; 0x80
     ac2:	0092      	lsls	r2, r2, #2
		return CTRL_FAIL; // Not supported
     ac4:	2301      	movs	r3, #1
	if (lun_desc->capacity.block_len != 512) {
     ac6:	6841      	ldr	r1, [r0, #4]
     ac8:	4291      	cmp	r1, r2
     aca:	d001      	beq.n	ad0 <uhi_msc_mem_read_capacity+0x2c>
}
     acc:	0018      	movs	r0, r3
     ace:	bd70      	pop	{r4, r5, r6, pc}
	*u32_nb_sector = lun_desc->capacity.max_lba;
     ad0:	6803      	ldr	r3, [r0, #0]
     ad2:	6033      	str	r3, [r6, #0]
	return uhi_msc_mem_translate_status(lun_desc->status);
     ad4:	7a40      	ldrb	r0, [r0, #9]
     ad6:	4b06      	ldr	r3, [pc, #24]	; (af0 <uhi_msc_mem_read_capacity+0x4c>)
     ad8:	4798      	blx	r3
     ada:	0003      	movs	r3, r0
     adc:	e7f6      	b.n	acc <uhi_msc_mem_read_capacity+0x28>
		return CTRL_FAIL;
     ade:	2301      	movs	r3, #1
     ae0:	e7f4      	b.n	acc <uhi_msc_mem_read_capacity+0x28>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	000008e9 	.word	0x000008e9
     ae8:	2000015e 	.word	0x2000015e
     aec:	0000090d 	.word	0x0000090d
     af0:	00000a09 	.word	0x00000a09

00000af4 <uhi_msc_mem_read_sector_size>:
{
     af4:	b570      	push	{r4, r5, r6, lr}
     af6:	0005      	movs	r5, r0
	while (!uhi_msc_is_available());
     af8:	4c08      	ldr	r4, [pc, #32]	; (b1c <uhi_msc_mem_read_sector_size+0x28>)
     afa:	47a0      	blx	r4
     afc:	2800      	cmp	r0, #0
     afe:	d0fc      	beq.n	afa <uhi_msc_mem_read_sector_size+0x6>
	uhi_msc_mem_lun = lun;
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <uhi_msc_mem_read_sector_size+0x2c>)
     b02:	701d      	strb	r5, [r3, #0]
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
     b04:	0028      	movs	r0, r5
     b06:	4b07      	ldr	r3, [pc, #28]	; (b24 <uhi_msc_mem_read_sector_size+0x30>)
     b08:	4798      	blx	r3
	if (lun_desc == NULL) {
     b0a:	2800      	cmp	r0, #0
     b0c:	d003      	beq.n	b16 <uhi_msc_mem_read_sector_size+0x22>
	return lun_desc->capacity.block_len / 512;
     b0e:	6840      	ldr	r0, [r0, #4]
     b10:	0a40      	lsrs	r0, r0, #9
     b12:	b2c0      	uxtb	r0, r0
}
     b14:	bd70      	pop	{r4, r5, r6, pc}
     b16:	2000      	movs	r0, #0
     b18:	e7fb      	b.n	b12 <uhi_msc_mem_read_sector_size+0x1e>
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	000008e9 	.word	0x000008e9
     b20:	2000015e 	.word	0x2000015e
     b24:	0000090d 	.word	0x0000090d

00000b28 <uhi_msc_mem_wr_protect>:
{
     b28:	b570      	push	{r4, r5, r6, lr}
     b2a:	0006      	movs	r6, r0
	while (!uhi_msc_is_available());
     b2c:	4d09      	ldr	r5, [pc, #36]	; (b54 <uhi_msc_mem_wr_protect+0x2c>)
     b2e:	47a8      	blx	r5
     b30:	1e04      	subs	r4, r0, #0
     b32:	d0fc      	beq.n	b2e <uhi_msc_mem_wr_protect+0x6>
	uhi_msc_mem_lun = lun;
     b34:	4b08      	ldr	r3, [pc, #32]	; (b58 <uhi_msc_mem_wr_protect+0x30>)
     b36:	701e      	strb	r6, [r3, #0]
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
     b38:	0030      	movs	r0, r6
     b3a:	4b08      	ldr	r3, [pc, #32]	; (b5c <uhi_msc_mem_wr_protect+0x34>)
     b3c:	4798      	blx	r3
	if (lun_desc == NULL) {
     b3e:	2800      	cmp	r0, #0
     b40:	d004      	beq.n	b4c <uhi_msc_mem_wr_protect+0x24>
	if (lun_desc->capacity.block_len != 512) {
     b42:	2380      	movs	r3, #128	; 0x80
     b44:	009b      	lsls	r3, r3, #2
     b46:	6842      	ldr	r2, [r0, #4]
     b48:	429a      	cmp	r2, r3
     b4a:	d001      	beq.n	b50 <uhi_msc_mem_wr_protect+0x28>
}
     b4c:	0020      	movs	r0, r4
     b4e:	bd70      	pop	{r4, r5, r6, pc}
	return lun_desc->b_write_protected;
     b50:	7a04      	ldrb	r4, [r0, #8]
     b52:	e7fb      	b.n	b4c <uhi_msc_mem_wr_protect+0x24>
     b54:	000008e9 	.word	0x000008e9
     b58:	2000015e 	.word	0x2000015e
     b5c:	0000090d 	.word	0x0000090d

00000b60 <uhi_msc_mem_read_10_ram>:
{
     b60:	b570      	push	{r4, r5, r6, lr}
     b62:	b082      	sub	sp, #8
     b64:	0005      	movs	r5, r0
     b66:	000e      	movs	r6, r1
	while (!uhi_msc_is_available());
     b68:	4c18      	ldr	r4, [pc, #96]	; (bcc <uhi_msc_mem_read_10_ram+0x6c>)
     b6a:	47a0      	blx	r4
     b6c:	2800      	cmp	r0, #0
     b6e:	d0fc      	beq.n	b6a <uhi_msc_mem_read_10_ram+0xa>
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
     b70:	4b17      	ldr	r3, [pc, #92]	; (bd0 <uhi_msc_mem_read_10_ram+0x70>)
     b72:	7818      	ldrb	r0, [r3, #0]
     b74:	4b17      	ldr	r3, [pc, #92]	; (bd4 <uhi_msc_mem_read_10_ram+0x74>)
     b76:	4798      	blx	r3
     b78:	1e04      	subs	r4, r0, #0
	if (lun_desc == NULL) {
     b7a:	d025      	beq.n	bc8 <uhi_msc_mem_read_10_ram+0x68>
	if (uhi_msc_mem_translate_status(lun_desc->status) != CTRL_GOOD) {
     b7c:	7a40      	ldrb	r0, [r0, #9]
     b7e:	4b16      	ldr	r3, [pc, #88]	; (bd8 <uhi_msc_mem_read_10_ram+0x78>)
     b80:	4798      	blx	r3
     b82:	2800      	cmp	r0, #0
     b84:	d105      	bne.n	b92 <uhi_msc_mem_read_10_ram+0x32>
	if (lun_desc->capacity.block_len != 512) {
     b86:	2380      	movs	r3, #128	; 0x80
     b88:	009b      	lsls	r3, r3, #2
		return CTRL_FAIL; // Not supported
     b8a:	3001      	adds	r0, #1
	if (lun_desc->capacity.block_len != 512) {
     b8c:	6862      	ldr	r2, [r4, #4]
     b8e:	429a      	cmp	r2, r3
     b90:	d001      	beq.n	b96 <uhi_msc_mem_read_10_ram+0x36>
}
     b92:	b002      	add	sp, #8
     b94:	bd70      	pop	{r4, r5, r6, pc}
	uhi_msc_mem_command_ongoing = true;
     b96:	2201      	movs	r2, #1
     b98:	4b10      	ldr	r3, [pc, #64]	; (bdc <uhi_msc_mem_read_10_ram+0x7c>)
     b9a:	701a      	strb	r2, [r3, #0]
	uhi_msc_scsi_read_10(uhi_msc_mem_lun, addr, ram, 1,
     b9c:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <uhi_msc_mem_read_10_ram+0x70>)
     b9e:	7818      	ldrb	r0, [r3, #0]
     ba0:	4b0f      	ldr	r3, [pc, #60]	; (be0 <uhi_msc_mem_read_10_ram+0x80>)
     ba2:	9300      	str	r3, [sp, #0]
     ba4:	2301      	movs	r3, #1
     ba6:	0032      	movs	r2, r6
     ba8:	0029      	movs	r1, r5
     baa:	4d0e      	ldr	r5, [pc, #56]	; (be4 <uhi_msc_mem_read_10_ram+0x84>)
     bac:	47a8      	blx	r5
	while (uhi_msc_mem_command_ongoing);
     bae:	4a0b      	ldr	r2, [pc, #44]	; (bdc <uhi_msc_mem_read_10_ram+0x7c>)
     bb0:	7813      	ldrb	r3, [r2, #0]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d1fc      	bne.n	bb0 <uhi_msc_mem_read_10_ram+0x50>
	if (!uhi_msc_mem_command_status) {
     bb6:	4b0c      	ldr	r3, [pc, #48]	; (be8 <uhi_msc_mem_read_10_ram+0x88>)
     bb8:	781b      	ldrb	r3, [r3, #0]
		return CTRL_FAIL;
     bba:	2001      	movs	r0, #1
	if (!uhi_msc_mem_command_status) {
     bbc:	2b00      	cmp	r3, #0
     bbe:	d0e8      	beq.n	b92 <uhi_msc_mem_read_10_ram+0x32>
	return uhi_msc_mem_translate_status(lun_desc->status);
     bc0:	7a60      	ldrb	r0, [r4, #9]
     bc2:	4b05      	ldr	r3, [pc, #20]	; (bd8 <uhi_msc_mem_read_10_ram+0x78>)
     bc4:	4798      	blx	r3
     bc6:	e7e4      	b.n	b92 <uhi_msc_mem_read_10_ram+0x32>
		return CTRL_FAIL;
     bc8:	2001      	movs	r0, #1
     bca:	e7e2      	b.n	b92 <uhi_msc_mem_read_10_ram+0x32>
     bcc:	000008e9 	.word	0x000008e9
     bd0:	2000015e 	.word	0x2000015e
     bd4:	0000090d 	.word	0x0000090d
     bd8:	00000a09 	.word	0x00000a09
     bdc:	2000015c 	.word	0x2000015c
     be0:	000009f5 	.word	0x000009f5
     be4:	00000979 	.word	0x00000979
     be8:	2000015d 	.word	0x2000015d

00000bec <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
     bec:	4a03      	ldr	r2, [pc, #12]	; (bfc <uhc_enumeration_step2+0x10>)
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <uhc_enumeration_step2+0x14>)
     bf0:	601a      	str	r2, [r3, #0]
	uhc_sof_timeout = timeout;
     bf2:	2214      	movs	r2, #20
     bf4:	4b03      	ldr	r3, [pc, #12]	; (c04 <uhc_enumeration_step2+0x18>)
     bf6:	701a      	strb	r2, [r3, #0]
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
     bf8:	4770      	bx	lr
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	000010a1 	.word	0x000010a1
     c00:	20000180 	.word	0x20000180
     c04:	20000549 	.word	0x20000549

00000c08 <uhc_remotewakeup>:
 * of all devices connected
 *
 * \param b_enable   true to enable remote wakeup feature, else disable.
 */
static void uhc_remotewakeup(bool b_enable)
{
     c08:	b510      	push	{r4, lr}
     c0a:	b084      	sub	sp, #16
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc &&
     c0c:	4b0f      	ldr	r3, [pc, #60]	; (c4c <uhc_remotewakeup+0x44>)
     c0e:	695b      	ldr	r3, [r3, #20]
     c10:	2b00      	cmp	r3, #0
     c12:	d015      	beq.n	c40 <uhc_remotewakeup+0x38>
     c14:	79db      	ldrb	r3, [r3, #7]
     c16:	069b      	lsls	r3, r3, #26
     c18:	d512      	bpl.n	c40 <uhc_remotewakeup+0x38>
				dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
			if (b_enable) {
     c1a:	2800      	cmp	r0, #0
     c1c:	d012      	beq.n	c44 <uhc_remotewakeup+0x3c>
				req.bRequest = USB_REQ_SET_FEATURE;
     c1e:	2203      	movs	r2, #3
     c20:	ab02      	add	r3, sp, #8
     c22:	705a      	strb	r2, [r3, #1]
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
     c24:	a902      	add	r1, sp, #8
     c26:	2300      	movs	r3, #0
     c28:	700b      	strb	r3, [r1, #0]
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
     c2a:	2201      	movs	r2, #1
     c2c:	804a      	strh	r2, [r1, #2]
			req.wIndex = 0;
     c2e:	808b      	strh	r3, [r1, #4]
			req.wLength = 0;
     c30:	80cb      	strh	r3, [r1, #6]
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
     c32:	4a06      	ldr	r2, [pc, #24]	; (c4c <uhc_remotewakeup+0x44>)
     c34:	7c90      	ldrb	r0, [r2, #18]
     c36:	9301      	str	r3, [sp, #4]
     c38:	9300      	str	r3, [sp, #0]
     c3a:	2200      	movs	r2, #0
     c3c:	4c04      	ldr	r4, [pc, #16]	; (c50 <uhc_remotewakeup+0x48>)
     c3e:	47a0      	blx	r4
		dev = dev->next;
#else
		break;
#endif
	}
}
     c40:	b004      	add	sp, #16
     c42:	bd10      	pop	{r4, pc}
				req.bRequest = USB_REQ_CLEAR_FEATURE;
     c44:	2201      	movs	r2, #1
     c46:	ab02      	add	r3, sp, #8
     c48:	705a      	strb	r2, [r3, #1]
     c4a:	e7eb      	b.n	c24 <uhc_remotewakeup+0x1c>
     c4c:	20000160 	.word	0x20000160
     c50:	0000320d 	.word	0x0000320d

00000c54 <uhc_enumeration_error>:
{
     c54:	b510      	push	{r4, lr}
	if (status == UHC_ENUM_DISCONNECT) {
     c56:	2807      	cmp	r0, #7
     c58:	d01b      	beq.n	c92 <uhc_enumeration_error+0x3e>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
     c5a:	4c12      	ldr	r4, [pc, #72]	; (ca4 <uhc_enumeration_error+0x50>)
     c5c:	7ca0      	ldrb	r0, [r4, #18]
     c5e:	21ff      	movs	r1, #255	; 0xff
     c60:	4b11      	ldr	r3, [pc, #68]	; (ca8 <uhc_enumeration_error+0x54>)
     c62:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
     c64:	6960      	ldr	r0, [r4, #20]
     c66:	2800      	cmp	r0, #0
     c68:	d004      	beq.n	c74 <uhc_enumeration_error+0x20>
		free(uhc_dev_enum->conf_desc);
     c6a:	4b10      	ldr	r3, [pc, #64]	; (cac <uhc_enumeration_error+0x58>)
     c6c:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
     c6e:	2200      	movs	r2, #0
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <uhc_enumeration_error+0x50>)
     c72:	615a      	str	r2, [r3, #20]
	uhc_dev_enum->address = 0;
     c74:	2200      	movs	r2, #0
     c76:	4b0b      	ldr	r3, [pc, #44]	; (ca4 <uhc_enumeration_error+0x50>)
     c78:	749a      	strb	r2, [r3, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
     c7a:	4a0d      	ldr	r2, [pc, #52]	; (cb0 <uhc_enumeration_error+0x5c>)
     c7c:	7813      	ldrb	r3, [r2, #0]
     c7e:	1c59      	adds	r1, r3, #1
     c80:	7011      	strb	r1, [r2, #0]
     c82:	2b03      	cmp	r3, #3
     c84:	d909      	bls.n	c9a <uhc_enumeration_error+0x46>
		uhd_suspend();
     c86:	4b0b      	ldr	r3, [pc, #44]	; (cb4 <uhc_enumeration_error+0x60>)
     c88:	4798      	blx	r3
	uhc_enum_try = 0;
     c8a:	2200      	movs	r2, #0
     c8c:	4b08      	ldr	r3, [pc, #32]	; (cb0 <uhc_enumeration_error+0x5c>)
     c8e:	701a      	strb	r2, [r3, #0]
}
     c90:	bd10      	pop	{r4, pc}
		uhc_enum_try = 0;
     c92:	2200      	movs	r2, #0
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <uhc_enumeration_error+0x5c>)
     c96:	701a      	strb	r2, [r3, #0]
		return; // Abort enumeration process
     c98:	e7fa      	b.n	c90 <uhc_enumeration_error+0x3c>
		uhd_send_reset(callback);
     c9a:	4807      	ldr	r0, [pc, #28]	; (cb8 <uhc_enumeration_error+0x64>)
     c9c:	4b07      	ldr	r3, [pc, #28]	; (cbc <uhc_enumeration_error+0x68>)
     c9e:	4798      	blx	r3
     ca0:	e7f6      	b.n	c90 <uhc_enumeration_error+0x3c>
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	20000160 	.word	0x20000160
     ca8:	00003425 	.word	0x00003425
     cac:	00005ded 	.word	0x00005ded
     cb0:	2000017c 	.word	0x2000017c
     cb4:	00002cf9 	.word	0x00002cf9
     cb8:	00000bed 	.word	0x00000bed
     cbc:	00002cdd 	.word	0x00002cdd

00000cc0 <uhc_enumeration_step5>:
{
     cc0:	b510      	push	{r4, lr}
     cc2:	b084      	sub	sp, #16
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
     cc4:	ab02      	add	r3, sp, #8
     cc6:	2280      	movs	r2, #128	; 0x80
     cc8:	701a      	strb	r2, [r3, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
     cca:	3a7a      	subs	r2, #122	; 0x7a
     ccc:	705a      	strb	r2, [r3, #1]
	req.wValue = (USB_DT_DEVICE << 8);
     cce:	32fa      	adds	r2, #250	; 0xfa
     cd0:	805a      	strh	r2, [r3, #2]
	req.wIndex = 0;
     cd2:	2200      	movs	r2, #0
     cd4:	809a      	strh	r2, [r3, #4]
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
     cd6:	3208      	adds	r2, #8
     cd8:	80da      	strh	r2, [r3, #6]
	uhd_ep_free(0, 0);
     cda:	2100      	movs	r1, #0
     cdc:	2000      	movs	r0, #0
     cde:	4b0e      	ldr	r3, [pc, #56]	; (d18 <uhc_enumeration_step5+0x58>)
     ce0:	4798      	blx	r3
	if (!uhd_ep0_alloc(0, 64)) {
     ce2:	2140      	movs	r1, #64	; 0x40
     ce4:	2000      	movs	r0, #0
     ce6:	4b0d      	ldr	r3, [pc, #52]	; (d1c <uhc_enumeration_step5+0x5c>)
     ce8:	4798      	blx	r3
     cea:	2800      	cmp	r0, #0
     cec:	d104      	bne.n	cf8 <uhc_enumeration_step5+0x38>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
     cee:	3004      	adds	r0, #4
     cf0:	4b0b      	ldr	r3, [pc, #44]	; (d20 <uhc_enumeration_step5+0x60>)
     cf2:	4798      	blx	r3
}
     cf4:	b004      	add	sp, #16
     cf6:	bd10      	pop	{r4, pc}
	if (!uhd_setup_request(0,
     cf8:	4b0a      	ldr	r3, [pc, #40]	; (d24 <uhc_enumeration_step5+0x64>)
     cfa:	9301      	str	r3, [sp, #4]
     cfc:	2300      	movs	r3, #0
     cfe:	9300      	str	r3, [sp, #0]
     d00:	3312      	adds	r3, #18
     d02:	4a09      	ldr	r2, [pc, #36]	; (d28 <uhc_enumeration_step5+0x68>)
     d04:	a902      	add	r1, sp, #8
     d06:	2000      	movs	r0, #0
     d08:	4c08      	ldr	r4, [pc, #32]	; (d2c <uhc_enumeration_step5+0x6c>)
     d0a:	47a0      	blx	r4
     d0c:	2800      	cmp	r0, #0
     d0e:	d1f1      	bne.n	cf4 <uhc_enumeration_step5+0x34>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     d10:	3006      	adds	r0, #6
     d12:	4b03      	ldr	r3, [pc, #12]	; (d20 <uhc_enumeration_step5+0x60>)
     d14:	4798      	blx	r3
		return;
     d16:	e7ed      	b.n	cf4 <uhc_enumeration_step5+0x34>
     d18:	00003425 	.word	0x00003425
     d1c:	000032b9 	.word	0x000032b9
     d20:	00000c55 	.word	0x00000c55
     d24:	00001245 	.word	0x00001245
     d28:	20000160 	.word	0x20000160
     d2c:	0000320d 	.word	0x0000320d

00000d30 <uhc_enumeration_step9>:
{
     d30:	b510      	push	{r4, lr}
     d32:	b084      	sub	sp, #16
	req.bmRequestType = USB_REQ_RECIP_DEVICE
     d34:	ab02      	add	r3, sp, #8
     d36:	2200      	movs	r2, #0
     d38:	701a      	strb	r2, [r3, #0]
	req.bRequest = USB_REQ_SET_ADDRESS;
     d3a:	2105      	movs	r1, #5
     d3c:	7059      	strb	r1, [r3, #1]
	req.wValue = UHC_DEVICE_ENUM_ADD;
     d3e:	3904      	subs	r1, #4
     d40:	8059      	strh	r1, [r3, #2]
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
     d42:	4c11      	ldr	r4, [pc, #68]	; (d88 <uhc_enumeration_step9+0x58>)
     d44:	74a1      	strb	r1, [r4, #18]
	req.wIndex = 0;
     d46:	809a      	strh	r2, [r3, #4]
	req.wLength = 0;
     d48:	80da      	strh	r2, [r3, #6]
	uhd_ep_free(0, 0);
     d4a:	2100      	movs	r1, #0
     d4c:	2000      	movs	r0, #0
     d4e:	4b0f      	ldr	r3, [pc, #60]	; (d8c <uhc_enumeration_step9+0x5c>)
     d50:	4798      	blx	r3
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
     d52:	79e1      	ldrb	r1, [r4, #7]
     d54:	2000      	movs	r0, #0
     d56:	4b0e      	ldr	r3, [pc, #56]	; (d90 <uhc_enumeration_step9+0x60>)
     d58:	4798      	blx	r3
     d5a:	2800      	cmp	r0, #0
     d5c:	d104      	bne.n	d68 <uhc_enumeration_step9+0x38>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
     d5e:	3004      	adds	r0, #4
     d60:	4b0c      	ldr	r3, [pc, #48]	; (d94 <uhc_enumeration_step9+0x64>)
     d62:	4798      	blx	r3
}
     d64:	b004      	add	sp, #16
     d66:	bd10      	pop	{r4, pc}
	if (!uhd_setup_request(0,
     d68:	4b0b      	ldr	r3, [pc, #44]	; (d98 <uhc_enumeration_step9+0x68>)
     d6a:	9301      	str	r3, [sp, #4]
     d6c:	2300      	movs	r3, #0
     d6e:	9300      	str	r3, [sp, #0]
     d70:	3312      	adds	r3, #18
     d72:	4a05      	ldr	r2, [pc, #20]	; (d88 <uhc_enumeration_step9+0x58>)
     d74:	a902      	add	r1, sp, #8
     d76:	2000      	movs	r0, #0
     d78:	4c08      	ldr	r4, [pc, #32]	; (d9c <uhc_enumeration_step9+0x6c>)
     d7a:	47a0      	blx	r4
     d7c:	2800      	cmp	r0, #0
     d7e:	d1f1      	bne.n	d64 <uhc_enumeration_step9+0x34>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     d80:	3006      	adds	r0, #6
     d82:	4b04      	ldr	r3, [pc, #16]	; (d94 <uhc_enumeration_step9+0x64>)
     d84:	4798      	blx	r3
		return;
     d86:	e7ed      	b.n	d64 <uhc_enumeration_step9+0x34>
     d88:	20000160 	.word	0x20000160
     d8c:	00003425 	.word	0x00003425
     d90:	000032b9 	.word	0x000032b9
     d94:	00000c55 	.word	0x00000c55
     d98:	00001211 	.word	0x00001211
     d9c:	0000320d 	.word	0x0000320d

00000da0 <uhc_enumeration_step11>:
{
     da0:	b510      	push	{r4, lr}
     da2:	b084      	sub	sp, #16
	uhd_ep_free(0, 0);
     da4:	2100      	movs	r1, #0
     da6:	2000      	movs	r0, #0
     da8:	4b13      	ldr	r3, [pc, #76]	; (df8 <uhc_enumeration_step11+0x58>)
     daa:	4798      	blx	r3
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
     dac:	4b13      	ldr	r3, [pc, #76]	; (dfc <uhc_enumeration_step11+0x5c>)
     dae:	79d9      	ldrb	r1, [r3, #7]
     db0:	2001      	movs	r0, #1
     db2:	4b13      	ldr	r3, [pc, #76]	; (e00 <uhc_enumeration_step11+0x60>)
     db4:	4798      	blx	r3
     db6:	2800      	cmp	r0, #0
     db8:	d104      	bne.n	dc4 <uhc_enumeration_step11+0x24>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
     dba:	3004      	adds	r0, #4
     dbc:	4b11      	ldr	r3, [pc, #68]	; (e04 <uhc_enumeration_step11+0x64>)
     dbe:	4798      	blx	r3
}
     dc0:	b004      	add	sp, #16
     dc2:	bd10      	pop	{r4, pc}
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
     dc4:	a902      	add	r1, sp, #8
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	700b      	strb	r3, [r1, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
     dca:	3b7a      	subs	r3, #122	; 0x7a
     dcc:	704b      	strb	r3, [r1, #1]
	req.wValue = (USB_DT_DEVICE << 8);
     dce:	33fa      	adds	r3, #250	; 0xfa
     dd0:	804b      	strh	r3, [r1, #2]
	req.wIndex = 0;
     dd2:	2300      	movs	r3, #0
     dd4:	808b      	strh	r3, [r1, #4]
	req.wLength = sizeof(usb_dev_desc_t);
     dd6:	2212      	movs	r2, #18
     dd8:	80ca      	strh	r2, [r1, #6]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
     dda:	4a0b      	ldr	r2, [pc, #44]	; (e08 <uhc_enumeration_step11+0x68>)
     ddc:	9201      	str	r2, [sp, #4]
     dde:	9300      	str	r3, [sp, #0]
     de0:	3312      	adds	r3, #18
     de2:	4a06      	ldr	r2, [pc, #24]	; (dfc <uhc_enumeration_step11+0x5c>)
     de4:	2001      	movs	r0, #1
     de6:	4c09      	ldr	r4, [pc, #36]	; (e0c <uhc_enumeration_step11+0x6c>)
     de8:	47a0      	blx	r4
     dea:	2800      	cmp	r0, #0
     dec:	d1e8      	bne.n	dc0 <uhc_enumeration_step11+0x20>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     dee:	3006      	adds	r0, #6
     df0:	4b04      	ldr	r3, [pc, #16]	; (e04 <uhc_enumeration_step11+0x64>)
     df2:	4798      	blx	r3
		return;
     df4:	e7e4      	b.n	dc0 <uhc_enumeration_step11+0x20>
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	00003425 	.word	0x00003425
     dfc:	20000160 	.word	0x20000160
     e00:	000032b9 	.word	0x000032b9
     e04:	00000c55 	.word	0x00000c55
     e08:	00000e11 	.word	0x00000e11
     e0c:	0000320d 	.word	0x0000320d

00000e10 <uhc_enumeration_step12>:
{
     e10:	b510      	push	{r4, lr}
     e12:	b084      	sub	sp, #16
	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
     e14:	2900      	cmp	r1, #0
     e16:	d12b      	bne.n	e70 <uhc_enumeration_step12+0x60>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
     e18:	2003      	movs	r0, #3
	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
     e1a:	2a12      	cmp	r2, #18
     e1c:	d003      	beq.n	e26 <uhc_enumeration_step12+0x16>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
     e1e:	4b19      	ldr	r3, [pc, #100]	; (e84 <uhc_enumeration_step12+0x74>)
     e20:	4798      	blx	r3
}
     e22:	b004      	add	sp, #16
     e24:	bd10      	pop	{r4, pc}
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
     e26:	4b18      	ldr	r3, [pc, #96]	; (e88 <uhc_enumeration_step12+0x78>)
     e28:	785b      	ldrb	r3, [r3, #1]
     e2a:	2b01      	cmp	r3, #1
     e2c:	d1f7      	bne.n	e1e <uhc_enumeration_step12+0xe>
	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
     e2e:	2009      	movs	r0, #9
     e30:	4b16      	ldr	r3, [pc, #88]	; (e8c <uhc_enumeration_step12+0x7c>)
     e32:	4798      	blx	r3
     e34:	4b14      	ldr	r3, [pc, #80]	; (e88 <uhc_enumeration_step12+0x78>)
     e36:	6158      	str	r0, [r3, #20]
	if (uhc_dev_enum->conf_desc == NULL) {
     e38:	2800      	cmp	r0, #0
     e3a:	d01e      	beq.n	e7a <uhc_enumeration_step12+0x6a>
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
     e3c:	a902      	add	r1, sp, #8
     e3e:	2380      	movs	r3, #128	; 0x80
     e40:	700b      	strb	r3, [r1, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
     e42:	3b7a      	subs	r3, #122	; 0x7a
     e44:	704b      	strb	r3, [r1, #1]
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
     e46:	33fb      	adds	r3, #251	; 0xfb
     e48:	33ff      	adds	r3, #255	; 0xff
     e4a:	804b      	strh	r3, [r1, #2]
	req.wIndex = 0;
     e4c:	2300      	movs	r3, #0
     e4e:	808b      	strh	r3, [r1, #4]
	req.wLength = sizeof(usb_conf_desc_t);
     e50:	2209      	movs	r2, #9
     e52:	80ca      	strh	r2, [r1, #6]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
     e54:	4a0e      	ldr	r2, [pc, #56]	; (e90 <uhc_enumeration_step12+0x80>)
     e56:	9201      	str	r2, [sp, #4]
     e58:	9300      	str	r3, [sp, #0]
     e5a:	3309      	adds	r3, #9
     e5c:	0002      	movs	r2, r0
     e5e:	2001      	movs	r0, #1
     e60:	4c0c      	ldr	r4, [pc, #48]	; (e94 <uhc_enumeration_step12+0x84>)
     e62:	47a0      	blx	r4
     e64:	2800      	cmp	r0, #0
     e66:	d1dc      	bne.n	e22 <uhc_enumeration_step12+0x12>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     e68:	3006      	adds	r0, #6
     e6a:	4b06      	ldr	r3, [pc, #24]	; (e84 <uhc_enumeration_step12+0x74>)
     e6c:	4798      	blx	r3
		return;
     e6e:	e7d8      	b.n	e22 <uhc_enumeration_step12+0x12>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
     e70:	2007      	movs	r0, #7
     e72:	2901      	cmp	r1, #1
     e74:	d0d3      	beq.n	e1e <uhc_enumeration_step12+0xe>
     e76:	3804      	subs	r0, #4
     e78:	e7d1      	b.n	e1e <uhc_enumeration_step12+0xe>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     e7a:	3006      	adds	r0, #6
     e7c:	4b01      	ldr	r3, [pc, #4]	; (e84 <uhc_enumeration_step12+0x74>)
     e7e:	4798      	blx	r3
		return;
     e80:	e7cf      	b.n	e22 <uhc_enumeration_step12+0x12>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00000c55 	.word	0x00000c55
     e88:	20000160 	.word	0x20000160
     e8c:	00005dd9 	.word	0x00005dd9
     e90:	0000115d 	.word	0x0000115d
     e94:	0000320d 	.word	0x0000320d

00000e98 <uhc_enumeration_step18_lpm>:
{
     e98:	b570      	push	{r4, r5, r6, lr}
	if (status == UHD_TRANS_STALL) {
     e9a:	2904      	cmp	r1, #4
     e9c:	d01c      	beq.n	ed8 <uhc_enumeration_step18_lpm+0x40>
	} else if ((status != UHD_TRANS_NOERROR)
     e9e:	2900      	cmp	r1, #0
     ea0:	d124      	bne.n	eec <uhc_enumeration_step18_lpm+0x54>
			|| (payload_trans < sizeof(usb_dev_lpm_desc_t))
     ea2:	2a0b      	cmp	r2, #11
     ea4:	d929      	bls.n	efa <uhc_enumeration_step18_lpm+0x62>
			|| (uhc_dev_enum->lpm_desc->bos.bDescriptorType != USB_DT_BOS)
     ea6:	4b23      	ldr	r3, [pc, #140]	; (f34 <uhc_enumeration_step18_lpm+0x9c>)
     ea8:	699c      	ldr	r4, [r3, #24]
     eaa:	7863      	ldrb	r3, [r4, #1]
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
     eac:	2003      	movs	r0, #3
			|| (uhc_dev_enum->lpm_desc->bos.bDescriptorType != USB_DT_BOS)
     eae:	2b0f      	cmp	r3, #15
     eb0:	d120      	bne.n	ef4 <uhc_enumeration_step18_lpm+0x5c>
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->lpm_desc->bos.wTotalLength))) {
     eb2:	78a1      	ldrb	r1, [r4, #2]
     eb4:	78e3      	ldrb	r3, [r4, #3]
     eb6:	021b      	lsls	r3, r3, #8
     eb8:	430b      	orrs	r3, r1
     eba:	429a      	cmp	r2, r3
     ebc:	d11a      	bne.n	ef4 <uhc_enumeration_step18_lpm+0x5c>
		for (i = 0; i < uhc_dev_enum->lpm_desc->bos.bNumDeviceCaps; i ++) {
     ebe:	7920      	ldrb	r0, [r4, #4]
     ec0:	0021      	movs	r1, r4
     ec2:	2300      	movs	r3, #0
					&& (ext_desc->bmAttributes & USB_DC_EXT_LPM)) {
     ec4:	2602      	movs	r6, #2
		for (i = 0; i < uhc_dev_enum->lpm_desc->bos.bNumDeviceCaps; i ++) {
     ec6:	2800      	cmp	r0, #0
     ec8:	d11d      	bne.n	f06 <uhc_enumeration_step18_lpm+0x6e>
			free(uhc_dev_enum->lpm_desc);
     eca:	0020      	movs	r0, r4
     ecc:	4b1a      	ldr	r3, [pc, #104]	; (f38 <uhc_enumeration_step18_lpm+0xa0>)
     ece:	4798      	blx	r3
			uhc_dev_enum->lpm_desc = NULL;
     ed0:	2200      	movs	r2, #0
     ed2:	4b18      	ldr	r3, [pc, #96]	; (f34 <uhc_enumeration_step18_lpm+0x9c>)
     ed4:	619a      	str	r2, [r3, #24]
     ed6:	e005      	b.n	ee4 <uhc_enumeration_step18_lpm+0x4c>
		free(uhc_dev_enum->lpm_desc);
     ed8:	4c16      	ldr	r4, [pc, #88]	; (f34 <uhc_enumeration_step18_lpm+0x9c>)
     eda:	69a0      	ldr	r0, [r4, #24]
     edc:	4b16      	ldr	r3, [pc, #88]	; (f38 <uhc_enumeration_step18_lpm+0xa0>)
     ede:	4798      	blx	r3
		uhc_dev_enum->lpm_desc = NULL;
     ee0:	2300      	movs	r3, #0
     ee2:	61a3      	str	r3, [r4, #24]
	uhc_enum_try = 0;
     ee4:	2200      	movs	r2, #0
     ee6:	4b15      	ldr	r3, [pc, #84]	; (f3c <uhc_enumeration_step18_lpm+0xa4>)
     ee8:	701a      	strb	r2, [r3, #0]
     eea:	e005      	b.n	ef8 <uhc_enumeration_step18_lpm+0x60>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
     eec:	2007      	movs	r0, #7
     eee:	2901      	cmp	r1, #1
     ef0:	d000      	beq.n	ef4 <uhc_enumeration_step18_lpm+0x5c>
     ef2:	3804      	subs	r0, #4
     ef4:	4b12      	ldr	r3, [pc, #72]	; (f40 <uhc_enumeration_step18_lpm+0xa8>)
     ef6:	4798      	blx	r3
}
     ef8:	bd70      	pop	{r4, r5, r6, pc}
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
     efa:	2003      	movs	r0, #3
     efc:	e7fa      	b.n	ef4 <uhc_enumeration_step18_lpm+0x5c>
		for (i = 0; i < uhc_dev_enum->lpm_desc->bos.bNumDeviceCaps; i ++) {
     efe:	3301      	adds	r3, #1
     f00:	b2db      	uxtb	r3, r3
     f02:	4283      	cmp	r3, r0
     f04:	d0e1      	beq.n	eca <uhc_enumeration_step18_lpm+0x32>
			desc += desc[0];
     f06:	780a      	ldrb	r2, [r1, #0]
     f08:	1889      	adds	r1, r1, r2
			if (ext_desc->bDescriptorType == USB_DT_DEVICE_CAPABILITY
     f0a:	784a      	ldrb	r2, [r1, #1]
     f0c:	2a10      	cmp	r2, #16
     f0e:	d1f6      	bne.n	efe <uhc_enumeration_step18_lpm+0x66>
					&& ext_desc->bDevCapabilityType == USB_DC_USB20_EXTENSION
     f10:	788a      	ldrb	r2, [r1, #2]
     f12:	2a02      	cmp	r2, #2
     f14:	d1f3      	bne.n	efe <uhc_enumeration_step18_lpm+0x66>
					&& (ext_desc->bmAttributes & USB_DC_EXT_LPM)) {
     f16:	78ca      	ldrb	r2, [r1, #3]
     f18:	790d      	ldrb	r5, [r1, #4]
     f1a:	022d      	lsls	r5, r5, #8
     f1c:	4315      	orrs	r5, r2
     f1e:	794a      	ldrb	r2, [r1, #5]
     f20:	0412      	lsls	r2, r2, #16
     f22:	4315      	orrs	r5, r2
     f24:	798a      	ldrb	r2, [r1, #6]
     f26:	0612      	lsls	r2, r2, #24
     f28:	432a      	orrs	r2, r5
     f2a:	4216      	tst	r6, r2
     f2c:	d0e7      	beq.n	efe <uhc_enumeration_step18_lpm+0x66>
		if (i >= uhc_dev_enum->lpm_desc->bos.bNumDeviceCaps) {
     f2e:	4298      	cmp	r0, r3
     f30:	d8d8      	bhi.n	ee4 <uhc_enumeration_step18_lpm+0x4c>
     f32:	e7ca      	b.n	eca <uhc_enumeration_step18_lpm+0x32>
     f34:	20000160 	.word	0x20000160
     f38:	00005ded 	.word	0x00005ded
     f3c:	2000017c 	.word	0x2000017c
     f40:	00000c55 	.word	0x00000c55

00000f44 <uhc_request_bos_desc>:
{
     f44:	b530      	push	{r4, r5, lr}
     f46:	b085      	sub	sp, #20
     f48:	0004      	movs	r4, r0
     f4a:	000d      	movs	r5, r1
	uhc_dev_enum->lpm_desc = malloc(length);
     f4c:	4b11      	ldr	r3, [pc, #68]	; (f94 <uhc_request_bos_desc+0x50>)
     f4e:	4798      	blx	r3
     f50:	4b11      	ldr	r3, [pc, #68]	; (f98 <uhc_request_bos_desc+0x54>)
     f52:	6198      	str	r0, [r3, #24]
	if (uhc_dev_enum->lpm_desc == NULL) {
     f54:	2800      	cmp	r0, #0
     f56:	d015      	beq.n	f84 <uhc_request_bos_desc+0x40>
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
     f58:	a902      	add	r1, sp, #8
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	700b      	strb	r3, [r1, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
     f5e:	3b7a      	subs	r3, #122	; 0x7a
     f60:	704b      	strb	r3, [r1, #1]
	req.wValue = USB_DT_BOS << 8;
     f62:	23f0      	movs	r3, #240	; 0xf0
     f64:	011b      	lsls	r3, r3, #4
     f66:	804b      	strh	r3, [r1, #2]
	req.wIndex = 0;
     f68:	2300      	movs	r3, #0
     f6a:	808b      	strh	r3, [r1, #4]
	req.wLength = length;
     f6c:	80cc      	strh	r4, [r1, #6]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
     f6e:	9501      	str	r5, [sp, #4]
     f70:	9300      	str	r3, [sp, #0]
     f72:	0023      	movs	r3, r4
     f74:	0002      	movs	r2, r0
     f76:	2001      	movs	r0, #1
     f78:	4c08      	ldr	r4, [pc, #32]	; (f9c <uhc_request_bos_desc+0x58>)
     f7a:	47a0      	blx	r4
     f7c:	2800      	cmp	r0, #0
     f7e:	d005      	beq.n	f8c <uhc_request_bos_desc+0x48>
}
     f80:	b005      	add	sp, #20
     f82:	bd30      	pop	{r4, r5, pc}
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     f84:	3006      	adds	r0, #6
     f86:	4b06      	ldr	r3, [pc, #24]	; (fa0 <uhc_request_bos_desc+0x5c>)
     f88:	4798      	blx	r3
		return;
     f8a:	e7f9      	b.n	f80 <uhc_request_bos_desc+0x3c>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
     f8c:	3006      	adds	r0, #6
     f8e:	4b04      	ldr	r3, [pc, #16]	; (fa0 <uhc_request_bos_desc+0x5c>)
     f90:	4798      	blx	r3
		return;
     f92:	e7f5      	b.n	f80 <uhc_request_bos_desc+0x3c>
     f94:	00005dd9 	.word	0x00005dd9
     f98:	20000160 	.word	0x20000160
     f9c:	0000320d 	.word	0x0000320d
     fa0:	00000c55 	.word	0x00000c55

00000fa4 <uhc_enumeration_step15>:
{
     fa4:	b510      	push	{r4, lr}
     fa6:	1e0c      	subs	r4, r1, #0
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
     fa8:	d117      	bne.n	fda <uhc_enumeration_step15+0x36>
     faa:	2a00      	cmp	r2, #0
     fac:	d11e      	bne.n	fec <uhc_enumeration_step15+0x48>
		uhc_uhis[i].enable(uhc_dev_enum);
     fae:	4c12      	ldr	r4, [pc, #72]	; (ff8 <uhc_enumeration_step15+0x54>)
     fb0:	0020      	movs	r0, r4
     fb2:	4b12      	ldr	r3, [pc, #72]	; (ffc <uhc_enumeration_step15+0x58>)
     fb4:	4798      	blx	r3
	if (g_uhc_device_root.dev_desc.bcdUSB >= LE16(USB_V2_1)) {
     fb6:	2380      	movs	r3, #128	; 0x80
     fb8:	009b      	lsls	r3, r3, #2
     fba:	8862      	ldrh	r2, [r4, #2]
     fbc:	429a      	cmp	r2, r3
     fbe:	d807      	bhi.n	fd0 <uhc_enumeration_step15+0x2c>
	uhc_dev_enum->lpm_desc = NULL;
     fc0:	2300      	movs	r3, #0
     fc2:	4a0d      	ldr	r2, [pc, #52]	; (ff8 <uhc_enumeration_step15+0x54>)
     fc4:	6193      	str	r3, [r2, #24]
	uhc_enum_try = 0;
     fc6:	4a0e      	ldr	r2, [pc, #56]	; (1000 <uhc_enumeration_step15+0x5c>)
     fc8:	7013      	strb	r3, [r2, #0]
     fca:	e00e      	b.n	fea <uhc_enumeration_step15+0x46>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
     fcc:	2007      	movs	r0, #7
     fce:	e00a      	b.n	fe6 <uhc_enumeration_step15+0x42>
	uhc_request_bos_desc(sizeof(usb_dev_bos_desc_t),
     fd0:	490c      	ldr	r1, [pc, #48]	; (1004 <uhc_enumeration_step15+0x60>)
     fd2:	2005      	movs	r0, #5
     fd4:	4b0c      	ldr	r3, [pc, #48]	; (1008 <uhc_enumeration_step15+0x64>)
     fd6:	4798      	blx	r3
     fd8:	e007      	b.n	fea <uhc_enumeration_step15+0x46>
			uhc_uhis[i].uninstall(uhc_dev_enum);
     fda:	4807      	ldr	r0, [pc, #28]	; (ff8 <uhc_enumeration_step15+0x54>)
     fdc:	4b0b      	ldr	r3, [pc, #44]	; (100c <uhc_enumeration_step15+0x68>)
     fde:	4798      	blx	r3
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
     fe0:	2003      	movs	r0, #3
     fe2:	2c01      	cmp	r4, #1
     fe4:	d0f2      	beq.n	fcc <uhc_enumeration_step15+0x28>
     fe6:	4b0a      	ldr	r3, [pc, #40]	; (1010 <uhc_enumeration_step15+0x6c>)
     fe8:	4798      	blx	r3
}
     fea:	bd10      	pop	{r4, pc}
			uhc_uhis[i].uninstall(uhc_dev_enum);
     fec:	4802      	ldr	r0, [pc, #8]	; (ff8 <uhc_enumeration_step15+0x54>)
     fee:	4b07      	ldr	r3, [pc, #28]	; (100c <uhc_enumeration_step15+0x68>)
     ff0:	4798      	blx	r3
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
     ff2:	2003      	movs	r0, #3
     ff4:	e7f7      	b.n	fe6 <uhc_enumeration_step15+0x42>
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	20000160 	.word	0x20000160
     ffc:	00000871 	.word	0x00000871
    1000:	2000017c 	.word	0x2000017c
    1004:	00001015 	.word	0x00001015
    1008:	00000f45 	.word	0x00000f45
    100c:	000008c1 	.word	0x000008c1
    1010:	00000c55 	.word	0x00000c55

00001014 <uhc_enumeration_step17_lpm>:
{
    1014:	b510      	push	{r4, lr}
	if (status == UHD_TRANS_STALL) {
    1016:	2904      	cmp	r1, #4
    1018:	d007      	beq.n	102a <uhc_enumeration_step17_lpm+0x16>
	} else if ((status != UHD_TRANS_NOERROR)
    101a:	2900      	cmp	r1, #0
    101c:	d125      	bne.n	106a <uhc_enumeration_step17_lpm+0x56>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
    101e:	2003      	movs	r0, #3
			|| (payload_trans != sizeof(usb_dev_bos_desc_t))
    1020:	2a05      	cmp	r2, #5
    1022:	d00c      	beq.n	103e <uhc_enumeration_step17_lpm+0x2a>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
    1024:	4b13      	ldr	r3, [pc, #76]	; (1074 <uhc_enumeration_step17_lpm+0x60>)
    1026:	4798      	blx	r3
}
    1028:	bd10      	pop	{r4, pc}
		free(uhc_dev_enum->lpm_desc);
    102a:	4c13      	ldr	r4, [pc, #76]	; (1078 <uhc_enumeration_step17_lpm+0x64>)
    102c:	69a0      	ldr	r0, [r4, #24]
    102e:	4b13      	ldr	r3, [pc, #76]	; (107c <uhc_enumeration_step17_lpm+0x68>)
    1030:	4798      	blx	r3
		uhc_dev_enum->lpm_desc = NULL;
    1032:	2300      	movs	r3, #0
    1034:	61a3      	str	r3, [r4, #24]
	uhc_enum_try = 0;
    1036:	2200      	movs	r2, #0
    1038:	4b11      	ldr	r3, [pc, #68]	; (1080 <uhc_enumeration_step17_lpm+0x6c>)
    103a:	701a      	strb	r2, [r3, #0]
    103c:	e7f4      	b.n	1028 <uhc_enumeration_step17_lpm+0x14>
			|| (uhc_dev_enum->lpm_desc->bos.bDescriptorType != USB_DT_BOS)) {
    103e:	4b0e      	ldr	r3, [pc, #56]	; (1078 <uhc_enumeration_step17_lpm+0x64>)
    1040:	699b      	ldr	r3, [r3, #24]
    1042:	785a      	ldrb	r2, [r3, #1]
    1044:	2a0f      	cmp	r2, #15
    1046:	d1ed      	bne.n	1024 <uhc_enumeration_step17_lpm+0x10>
		uint16_t len = le16_to_cpu(uhc_dev_enum->lpm_desc->bos.wTotalLength);
    1048:	789a      	ldrb	r2, [r3, #2]
    104a:	78dc      	ldrb	r4, [r3, #3]
    104c:	0224      	lsls	r4, r4, #8
    104e:	4314      	orrs	r4, r2
		free(uhc_dev_enum->lpm_desc);
    1050:	0018      	movs	r0, r3
    1052:	4b0a      	ldr	r3, [pc, #40]	; (107c <uhc_enumeration_step17_lpm+0x68>)
    1054:	4798      	blx	r3
		uhc_dev_enum->lpm_desc = NULL;
    1056:	2200      	movs	r2, #0
    1058:	4b07      	ldr	r3, [pc, #28]	; (1078 <uhc_enumeration_step17_lpm+0x64>)
    105a:	619a      	str	r2, [r3, #24]
		if (len > sizeof(usb_dev_lpm_desc_t)) {
    105c:	2c0c      	cmp	r4, #12
    105e:	d9ea      	bls.n	1036 <uhc_enumeration_step17_lpm+0x22>
			uhc_request_bos_desc(len, uhc_enumeration_step18_lpm);
    1060:	4908      	ldr	r1, [pc, #32]	; (1084 <uhc_enumeration_step17_lpm+0x70>)
    1062:	0020      	movs	r0, r4
    1064:	4b08      	ldr	r3, [pc, #32]	; (1088 <uhc_enumeration_step17_lpm+0x74>)
    1066:	4798      	blx	r3
			return;
    1068:	e7de      	b.n	1028 <uhc_enumeration_step17_lpm+0x14>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
    106a:	2007      	movs	r0, #7
    106c:	2901      	cmp	r1, #1
    106e:	d0d9      	beq.n	1024 <uhc_enumeration_step17_lpm+0x10>
    1070:	3804      	subs	r0, #4
    1072:	e7d7      	b.n	1024 <uhc_enumeration_step17_lpm+0x10>
    1074:	00000c55 	.word	0x00000c55
    1078:	20000160 	.word	0x20000160
    107c:	00005ded 	.word	0x00005ded
    1080:	2000017c 	.word	0x2000017c
    1084:	00000e99 	.word	0x00000e99
    1088:	00000f45 	.word	0x00000f45

0000108c <uhc_enumeration_step7>:
{
    108c:	b510      	push	{r4, lr}
		uhd_send_reset(callback);
    108e:	4802      	ldr	r0, [pc, #8]	; (1098 <uhc_enumeration_step7+0xc>)
    1090:	4b02      	ldr	r3, [pc, #8]	; (109c <uhc_enumeration_step7+0x10>)
    1092:	4798      	blx	r3
}
    1094:	bd10      	pop	{r4, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	000012b9 	.word	0x000012b9
    109c:	00002cdd 	.word	0x00002cdd

000010a0 <uhc_enumeration_step3>:
{
    10a0:	b510      	push	{r4, lr}
		uhd_send_reset(callback);
    10a2:	4802      	ldr	r0, [pc, #8]	; (10ac <uhc_enumeration_step3+0xc>)
    10a4:	4b02      	ldr	r3, [pc, #8]	; (10b0 <uhc_enumeration_step3+0x10>)
    10a6:	4798      	blx	r3
}
    10a8:	bd10      	pop	{r4, pc}
    10aa:	46c0      	nop			; (mov r8, r8)
    10ac:	0000128d 	.word	0x0000128d
    10b0:	00002cdd 	.word	0x00002cdd

000010b4 <uhc_enumeration_step14>:
{
    10b4:	b510      	push	{r4, lr}
    10b6:	b084      	sub	sp, #16
	if ((status != UHD_TRANS_NOERROR)
    10b8:	2900      	cmp	r1, #0
    10ba:	d11b      	bne.n	10f4 <uhc_enumeration_step14+0x40>
			|| (payload_trans < sizeof(usb_conf_desc_t))
    10bc:	2a08      	cmp	r2, #8
    10be:	d922      	bls.n	1106 <uhc_enumeration_step14+0x52>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
    10c0:	4b1f      	ldr	r3, [pc, #124]	; (1140 <uhc_enumeration_step14+0x8c>)
    10c2:	695b      	ldr	r3, [r3, #20]
    10c4:	7859      	ldrb	r1, [r3, #1]
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
    10c6:	2003      	movs	r0, #3
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
    10c8:	2902      	cmp	r1, #2
    10ca:	d116      	bne.n	10fa <uhc_enumeration_step14+0x46>
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
    10cc:	7899      	ldrb	r1, [r3, #2]
    10ce:	78db      	ldrb	r3, [r3, #3]
    10d0:	021b      	lsls	r3, r3, #8
    10d2:	430b      	orrs	r3, r1
    10d4:	429a      	cmp	r2, r3
    10d6:	d110      	bne.n	10fa <uhc_enumeration_step14+0x46>
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
    10d8:	4819      	ldr	r0, [pc, #100]	; (1140 <uhc_enumeration_step14+0x8c>)
    10da:	4b1a      	ldr	r3, [pc, #104]	; (1144 <uhc_enumeration_step14+0x90>)
    10dc:	4798      	blx	r3
    10de:	2800      	cmp	r0, #0
    10e0:	d016      	beq.n	1110 <uhc_enumeration_step14+0x5c>
    10e2:	2801      	cmp	r0, #1
    10e4:	d011      	beq.n	110a <uhc_enumeration_step14+0x56>
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
    10e6:	21ff      	movs	r1, #255	; 0xff
    10e8:	2001      	movs	r0, #1
    10ea:	4b17      	ldr	r3, [pc, #92]	; (1148 <uhc_enumeration_step14+0x94>)
    10ec:	4798      	blx	r3
		uhd_suspend();
    10ee:	4b17      	ldr	r3, [pc, #92]	; (114c <uhc_enumeration_step14+0x98>)
    10f0:	4798      	blx	r3
    10f2:	e004      	b.n	10fe <uhc_enumeration_step14+0x4a>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
    10f4:	2007      	movs	r0, #7
    10f6:	2901      	cmp	r1, #1
    10f8:	d103      	bne.n	1102 <uhc_enumeration_step14+0x4e>
    10fa:	4b15      	ldr	r3, [pc, #84]	; (1150 <uhc_enumeration_step14+0x9c>)
    10fc:	4798      	blx	r3
}
    10fe:	b004      	add	sp, #16
    1100:	bd10      	pop	{r4, pc}
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
    1102:	3804      	subs	r0, #4
    1104:	e7f9      	b.n	10fa <uhc_enumeration_step14+0x46>
    1106:	2003      	movs	r0, #3
    1108:	e7f7      	b.n	10fa <uhc_enumeration_step14+0x46>
		uhd_suspend();
    110a:	4b10      	ldr	r3, [pc, #64]	; (114c <uhc_enumeration_step14+0x98>)
    110c:	4798      	blx	r3
    110e:	e7f6      	b.n	10fe <uhc_enumeration_step14+0x4a>
	req.bmRequestType = USB_REQ_RECIP_DEVICE
    1110:	a902      	add	r1, sp, #8
    1112:	2300      	movs	r3, #0
    1114:	700b      	strb	r3, [r1, #0]
	req.bRequest = USB_REQ_SET_CONFIGURATION;
    1116:	2209      	movs	r2, #9
    1118:	704a      	strb	r2, [r1, #1]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
    111a:	4a09      	ldr	r2, [pc, #36]	; (1140 <uhc_enumeration_step14+0x8c>)
    111c:	6952      	ldr	r2, [r2, #20]
    111e:	7952      	ldrb	r2, [r2, #5]
    1120:	804a      	strh	r2, [r1, #2]
	req.wIndex = 0;
    1122:	808b      	strh	r3, [r1, #4]
	req.wLength = 0;
    1124:	80cb      	strh	r3, [r1, #6]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
    1126:	4a0b      	ldr	r2, [pc, #44]	; (1154 <uhc_enumeration_step14+0xa0>)
    1128:	9201      	str	r2, [sp, #4]
    112a:	9300      	str	r3, [sp, #0]
    112c:	2200      	movs	r2, #0
    112e:	2001      	movs	r0, #1
    1130:	4c09      	ldr	r4, [pc, #36]	; (1158 <uhc_enumeration_step14+0xa4>)
    1132:	47a0      	blx	r4
    1134:	2800      	cmp	r0, #0
    1136:	d1e2      	bne.n	10fe <uhc_enumeration_step14+0x4a>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    1138:	3006      	adds	r0, #6
    113a:	4b05      	ldr	r3, [pc, #20]	; (1150 <uhc_enumeration_step14+0x9c>)
    113c:	4798      	blx	r3
		return;
    113e:	e7de      	b.n	10fe <uhc_enumeration_step14+0x4a>
    1140:	20000160 	.word	0x20000160
    1144:	000007bd 	.word	0x000007bd
    1148:	00003425 	.word	0x00003425
    114c:	00002cf9 	.word	0x00002cf9
    1150:	00000c55 	.word	0x00000c55
    1154:	00000fa5 	.word	0x00000fa5
    1158:	0000320d 	.word	0x0000320d

0000115c <uhc_enumeration_step13>:
{
    115c:	b530      	push	{r4, r5, lr}
    115e:	b085      	sub	sp, #20
	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
    1160:	2900      	cmp	r1, #0
    1162:	d114      	bne.n	118e <uhc_enumeration_step13+0x32>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
    1164:	2003      	movs	r0, #3
	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
    1166:	2a09      	cmp	r2, #9
    1168:	d003      	beq.n	1172 <uhc_enumeration_step13+0x16>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
    116a:	4b22      	ldr	r3, [pc, #136]	; (11f4 <uhc_enumeration_step13+0x98>)
    116c:	4798      	blx	r3
}
    116e:	b005      	add	sp, #20
    1170:	bd30      	pop	{r4, r5, pc}
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
    1172:	4b21      	ldr	r3, [pc, #132]	; (11f8 <uhc_enumeration_step13+0x9c>)
    1174:	695a      	ldr	r2, [r3, #20]
    1176:	7853      	ldrb	r3, [r2, #1]
    1178:	2b02      	cmp	r3, #2
    117a:	d1f6      	bne.n	116a <uhc_enumeration_step13+0xe>
	if (!(uhc_dev_enum->conf_desc->bmAttributes
    117c:	79d3      	ldrb	r3, [r2, #7]
    117e:	065b      	lsls	r3, r3, #25
    1180:	d40a      	bmi.n	1198 <uhc_enumeration_step13+0x3c>
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
    1182:	7a13      	ldrb	r3, [r2, #8]
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
    1184:	2bfa      	cmp	r3, #250	; 0xfa
    1186:	dd07      	ble.n	1198 <uhc_enumeration_step13+0x3c>
		uhd_suspend();
    1188:	4b1c      	ldr	r3, [pc, #112]	; (11fc <uhc_enumeration_step13+0xa0>)
    118a:	4798      	blx	r3
    118c:	e7ef      	b.n	116e <uhc_enumeration_step13+0x12>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
    118e:	2007      	movs	r0, #7
    1190:	2901      	cmp	r1, #1
    1192:	d0ea      	beq.n	116a <uhc_enumeration_step13+0xe>
    1194:	3804      	subs	r0, #4
    1196:	e7e8      	b.n	116a <uhc_enumeration_step13+0xe>
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
    1198:	7893      	ldrb	r3, [r2, #2]
    119a:	78d4      	ldrb	r4, [r2, #3]
    119c:	0224      	lsls	r4, r4, #8
    119e:	431c      	orrs	r4, r3
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
    11a0:	7955      	ldrb	r5, [r2, #5]
	free(uhc_dev_enum->conf_desc);
    11a2:	0010      	movs	r0, r2
    11a4:	4b16      	ldr	r3, [pc, #88]	; (1200 <uhc_enumeration_step13+0xa4>)
    11a6:	4798      	blx	r3
	uhc_dev_enum->conf_desc = malloc(conf_size);
    11a8:	0020      	movs	r0, r4
    11aa:	4b16      	ldr	r3, [pc, #88]	; (1204 <uhc_enumeration_step13+0xa8>)
    11ac:	4798      	blx	r3
    11ae:	4b12      	ldr	r3, [pc, #72]	; (11f8 <uhc_enumeration_step13+0x9c>)
    11b0:	6158      	str	r0, [r3, #20]
	if (uhc_dev_enum->conf_desc == NULL) {
    11b2:	2800      	cmp	r0, #0
    11b4:	d01a      	beq.n	11ec <uhc_enumeration_step13+0x90>
	req.bmRequestType =
    11b6:	a902      	add	r1, sp, #8
    11b8:	2380      	movs	r3, #128	; 0x80
    11ba:	700b      	strb	r3, [r1, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
    11bc:	3b7a      	subs	r3, #122	; 0x7a
    11be:	704b      	strb	r3, [r1, #1]
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
    11c0:	3d01      	subs	r5, #1
    11c2:	33fb      	adds	r3, #251	; 0xfb
    11c4:	33ff      	adds	r3, #255	; 0xff
    11c6:	431d      	orrs	r5, r3
    11c8:	804d      	strh	r5, [r1, #2]
	req.wIndex = 0;
    11ca:	2300      	movs	r3, #0
    11cc:	808b      	strh	r3, [r1, #4]
	req.wLength = conf_size;
    11ce:	80cc      	strh	r4, [r1, #6]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
    11d0:	4a0d      	ldr	r2, [pc, #52]	; (1208 <uhc_enumeration_step13+0xac>)
    11d2:	9201      	str	r2, [sp, #4]
    11d4:	9300      	str	r3, [sp, #0]
    11d6:	0023      	movs	r3, r4
    11d8:	0002      	movs	r2, r0
    11da:	2001      	movs	r0, #1
    11dc:	4c0b      	ldr	r4, [pc, #44]	; (120c <uhc_enumeration_step13+0xb0>)
    11de:	47a0      	blx	r4
    11e0:	2800      	cmp	r0, #0
    11e2:	d1c4      	bne.n	116e <uhc_enumeration_step13+0x12>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    11e4:	3006      	adds	r0, #6
    11e6:	4b03      	ldr	r3, [pc, #12]	; (11f4 <uhc_enumeration_step13+0x98>)
    11e8:	4798      	blx	r3
		return;
    11ea:	e7c0      	b.n	116e <uhc_enumeration_step13+0x12>
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    11ec:	3006      	adds	r0, #6
    11ee:	4b01      	ldr	r3, [pc, #4]	; (11f4 <uhc_enumeration_step13+0x98>)
    11f0:	4798      	blx	r3
		return;
    11f2:	e7bc      	b.n	116e <uhc_enumeration_step13+0x12>
    11f4:	00000c55 	.word	0x00000c55
    11f8:	20000160 	.word	0x20000160
    11fc:	00002cf9 	.word	0x00002cf9
    1200:	00005ded 	.word	0x00005ded
    1204:	00005dd9 	.word	0x00005dd9
    1208:	000010b5 	.word	0x000010b5
    120c:	0000320d 	.word	0x0000320d

00001210 <uhc_enumeration_step10>:
{
    1210:	b510      	push	{r4, lr}
	if (status != UHD_TRANS_NOERROR) {
    1212:	2900      	cmp	r1, #0
    1214:	d007      	beq.n	1226 <uhc_enumeration_step10+0x16>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
    1216:	2901      	cmp	r1, #1
    1218:	d003      	beq.n	1222 <uhc_enumeration_step10+0x12>
    121a:	2003      	movs	r0, #3
    121c:	4b05      	ldr	r3, [pc, #20]	; (1234 <uhc_enumeration_step10+0x24>)
    121e:	4798      	blx	r3
}
    1220:	bd10      	pop	{r4, pc}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
    1222:	2007      	movs	r0, #7
    1224:	e7fa      	b.n	121c <uhc_enumeration_step10+0xc>
	uhc_sof_timeout_callback = callback;
    1226:	4a04      	ldr	r2, [pc, #16]	; (1238 <uhc_enumeration_step10+0x28>)
    1228:	4b04      	ldr	r3, [pc, #16]	; (123c <uhc_enumeration_step10+0x2c>)
    122a:	601a      	str	r2, [r3, #0]
	uhc_sof_timeout = timeout;
    122c:	2214      	movs	r2, #20
    122e:	4b04      	ldr	r3, [pc, #16]	; (1240 <uhc_enumeration_step10+0x30>)
    1230:	701a      	strb	r2, [r3, #0]
    1232:	e7f5      	b.n	1220 <uhc_enumeration_step10+0x10>
    1234:	00000c55 	.word	0x00000c55
    1238:	00000da1 	.word	0x00000da1
    123c:	20000180 	.word	0x20000180
    1240:	20000549 	.word	0x20000549

00001244 <uhc_enumeration_step6>:
{
    1244:	b510      	push	{r4, lr}
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
    1246:	2900      	cmp	r1, #0
    1248:	d10d      	bne.n	1266 <uhc_enumeration_step6+0x22>
    124a:	2a07      	cmp	r2, #7
    124c:	d912      	bls.n	1274 <uhc_enumeration_step6+0x30>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
    124e:	4b0a      	ldr	r3, [pc, #40]	; (1278 <uhc_enumeration_step6+0x34>)
    1250:	785b      	ldrb	r3, [r3, #1]
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
    1252:	2003      	movs	r0, #3
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
    1254:	2b01      	cmp	r3, #1
    1256:	d10a      	bne.n	126e <uhc_enumeration_step6+0x2a>
	uhc_sof_timeout_callback = callback;
    1258:	4a08      	ldr	r2, [pc, #32]	; (127c <uhc_enumeration_step6+0x38>)
    125a:	4b09      	ldr	r3, [pc, #36]	; (1280 <uhc_enumeration_step6+0x3c>)
    125c:	601a      	str	r2, [r3, #0]
	uhc_sof_timeout = timeout;
    125e:	2214      	movs	r2, #20
    1260:	4b08      	ldr	r3, [pc, #32]	; (1284 <uhc_enumeration_step6+0x40>)
    1262:	701a      	strb	r2, [r3, #0]
    1264:	e005      	b.n	1272 <uhc_enumeration_step6+0x2e>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
    1266:	2007      	movs	r0, #7
    1268:	2901      	cmp	r1, #1
    126a:	d000      	beq.n	126e <uhc_enumeration_step6+0x2a>
    126c:	3804      	subs	r0, #4
    126e:	4b06      	ldr	r3, [pc, #24]	; (1288 <uhc_enumeration_step6+0x44>)
    1270:	4798      	blx	r3
}
    1272:	bd10      	pop	{r4, pc}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
    1274:	2003      	movs	r0, #3
    1276:	e7fa      	b.n	126e <uhc_enumeration_step6+0x2a>
    1278:	20000160 	.word	0x20000160
    127c:	0000108d 	.word	0x0000108d
    1280:	20000180 	.word	0x20000180
    1284:	20000549 	.word	0x20000549
    1288:	00000c55 	.word	0x00000c55

0000128c <uhc_enumeration_step4>:
{
    128c:	b510      	push	{r4, lr}
	uhc_dev_enum->speed = uhd_get_speed();
    128e:	4b05      	ldr	r3, [pc, #20]	; (12a4 <uhc_enumeration_step4+0x18>)
    1290:	4798      	blx	r3
    1292:	4b05      	ldr	r3, [pc, #20]	; (12a8 <uhc_enumeration_step4+0x1c>)
    1294:	74d8      	strb	r0, [r3, #19]
	uhc_sof_timeout_callback = callback;
    1296:	4a05      	ldr	r2, [pc, #20]	; (12ac <uhc_enumeration_step4+0x20>)
    1298:	4b05      	ldr	r3, [pc, #20]	; (12b0 <uhc_enumeration_step4+0x24>)
    129a:	601a      	str	r2, [r3, #0]
	uhc_sof_timeout = timeout;
    129c:	2264      	movs	r2, #100	; 0x64
    129e:	4b05      	ldr	r3, [pc, #20]	; (12b4 <uhc_enumeration_step4+0x28>)
    12a0:	701a      	strb	r2, [r3, #0]
}
    12a2:	bd10      	pop	{r4, pc}
    12a4:	00002cc9 	.word	0x00002cc9
    12a8:	20000160 	.word	0x20000160
    12ac:	00000cc1 	.word	0x00000cc1
    12b0:	20000180 	.word	0x20000180
    12b4:	20000549 	.word	0x20000549

000012b8 <uhc_enumeration_step8>:
	uhc_sof_timeout_callback = callback;
    12b8:	4a03      	ldr	r2, [pc, #12]	; (12c8 <uhc_enumeration_step8+0x10>)
    12ba:	4b04      	ldr	r3, [pc, #16]	; (12cc <uhc_enumeration_step8+0x14>)
    12bc:	601a      	str	r2, [r3, #0]
	uhc_sof_timeout = timeout;
    12be:	2264      	movs	r2, #100	; 0x64
    12c0:	4b03      	ldr	r3, [pc, #12]	; (12d0 <uhc_enumeration_step8+0x18>)
    12c2:	701a      	strb	r2, [r3, #0]
}
    12c4:	4770      	bx	lr
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	00000d31 	.word	0x00000d31
    12cc:	20000180 	.word	0x20000180
    12d0:	20000549 	.word	0x20000549

000012d4 <uhc_notify_connection>:
/**
 * \name Callbacks used by USB Host Driver (UHD) to notify events
 * @{
 */
void uhc_notify_connection(bool b_plug)
{
    12d4:	b510      	push	{r4, lr}
	if (b_plug) {
    12d6:	2800      	cmp	r0, #0
    12d8:	d11c      	bne.n	1314 <uhc_notify_connection+0x40>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
    12da:	4b15      	ldr	r3, [pc, #84]	; (1330 <uhc_notify_connection+0x5c>)
    12dc:	7c98      	ldrb	r0, [r3, #18]
    12de:	28ff      	cmp	r0, #255	; 0xff
    12e0:	d017      	beq.n	1312 <uhc_notify_connection+0x3e>
			uhc_sof_timeout = 0;
    12e2:	2200      	movs	r2, #0
    12e4:	4b13      	ldr	r3, [pc, #76]	; (1334 <uhc_notify_connection+0x60>)
    12e6:	701a      	strb	r2, [r3, #0]
		uhd_ep_free(dev->address, 0xFF);
    12e8:	21ff      	movs	r1, #255	; 0xff
    12ea:	4b13      	ldr	r3, [pc, #76]	; (1338 <uhc_notify_connection+0x64>)
    12ec:	4798      	blx	r3
			uhc_uhis[i].uninstall(dev);
    12ee:	4c10      	ldr	r4, [pc, #64]	; (1330 <uhc_notify_connection+0x5c>)
    12f0:	0020      	movs	r0, r4
    12f2:	4b12      	ldr	r3, [pc, #72]	; (133c <uhc_notify_connection+0x68>)
    12f4:	4798      	blx	r3
		UHC_CONNECTION_EVENT(dev, false);
    12f6:	2100      	movs	r1, #0
    12f8:	0020      	movs	r0, r4
    12fa:	4b11      	ldr	r3, [pc, #68]	; (1340 <uhc_notify_connection+0x6c>)
    12fc:	4798      	blx	r3
		dev->address = UHC_USB_ADD_NOT_VALID;
    12fe:	23ff      	movs	r3, #255	; 0xff
    1300:	74a3      	strb	r3, [r4, #18]
		if (dev->conf_desc != NULL) {
    1302:	6960      	ldr	r0, [r4, #20]
    1304:	2800      	cmp	r0, #0
    1306:	d004      	beq.n	1312 <uhc_notify_connection+0x3e>
			free(dev->conf_desc);
    1308:	4b0e      	ldr	r3, [pc, #56]	; (1344 <uhc_notify_connection+0x70>)
    130a:	4798      	blx	r3
			dev->conf_desc = NULL;
    130c:	2200      	movs	r2, #0
    130e:	4b08      	ldr	r3, [pc, #32]	; (1330 <uhc_notify_connection+0x5c>)
    1310:	615a      	str	r2, [r3, #20]
			return;
		}
	}
	// Device connection on root
	uhc_connection_tree(b_plug, &g_uhc_device_root);
}
    1312:	bd10      	pop	{r4, pc}
		uhc_enum_try = 1;
    1314:	2201      	movs	r2, #1
    1316:	4b0c      	ldr	r3, [pc, #48]	; (1348 <uhc_notify_connection+0x74>)
    1318:	701a      	strb	r2, [r3, #0]
		uhc_dev_enum->conf_desc = NULL;
    131a:	4805      	ldr	r0, [pc, #20]	; (1330 <uhc_notify_connection+0x5c>)
    131c:	2300      	movs	r3, #0
    131e:	6143      	str	r3, [r0, #20]
		uhc_dev_enum->address = 0;
    1320:	7483      	strb	r3, [r0, #18]
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
    1322:	2101      	movs	r1, #1
    1324:	4b06      	ldr	r3, [pc, #24]	; (1340 <uhc_notify_connection+0x6c>)
    1326:	4798      	blx	r3
		uhd_send_reset(callback);
    1328:	4808      	ldr	r0, [pc, #32]	; (134c <uhc_notify_connection+0x78>)
    132a:	4b09      	ldr	r3, [pc, #36]	; (1350 <uhc_notify_connection+0x7c>)
    132c:	4798      	blx	r3
    132e:	e7f0      	b.n	1312 <uhc_notify_connection+0x3e>
    1330:	20000160 	.word	0x20000160
    1334:	20000549 	.word	0x20000549
    1338:	00003425 	.word	0x00003425
    133c:	000008c1 	.word	0x000008c1
    1340:	00005a15 	.word	0x00005a15
    1344:	00005ded 	.word	0x00005ded
    1348:	2000017c 	.word	0x2000017c
    134c:	00000bed 	.word	0x00000bed
    1350:	00002cdd 	.word	0x00002cdd

00001354 <uhc_notify_sof>:

void uhc_notify_sof(bool b_micro)
{
    1354:	b510      	push	{r4, lr}
		if (uhc_uhis[i].sof_notify != NULL) {
			uhc_uhis[i].sof_notify(b_micro);
		}
	}

	if (!b_micro) {
    1356:	2800      	cmp	r0, #0
    1358:	d109      	bne.n	136e <uhc_notify_sof+0x1a>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
    135a:	4b07      	ldr	r3, [pc, #28]	; (1378 <uhc_notify_sof+0x24>)
    135c:	781b      	ldrb	r3, [r3, #0]
    135e:	2b00      	cmp	r3, #0
    1360:	d005      	beq.n	136e <uhc_notify_sof+0x1a>
			if (--uhc_sof_timeout == 0) {
    1362:	3b01      	subs	r3, #1
    1364:	b2db      	uxtb	r3, r3
    1366:	4a04      	ldr	r2, [pc, #16]	; (1378 <uhc_notify_sof+0x24>)
    1368:	7013      	strb	r3, [r2, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d000      	beq.n	1370 <uhc_notify_sof+0x1c>
				uhc_sof_timeout_callback();
			}
		}
	}
}
    136e:	bd10      	pop	{r4, pc}
				uhc_sof_timeout_callback();
    1370:	4b02      	ldr	r3, [pc, #8]	; (137c <uhc_notify_sof+0x28>)
    1372:	681b      	ldr	r3, [r3, #0]
    1374:	4798      	blx	r3
}
    1376:	e7fa      	b.n	136e <uhc_notify_sof+0x1a>
    1378:	20000549 	.word	0x20000549
    137c:	20000180 	.word	0x20000180

00001380 <uhc_notify_resume>:

void uhc_notify_resume(void)
{
    1380:	b510      	push	{r4, lr}
	uhc_remotewakeup(false);
    1382:	2000      	movs	r0, #0
    1384:	4b01      	ldr	r3, [pc, #4]	; (138c <uhc_notify_resume+0xc>)
    1386:	4798      	blx	r3
	UHC_WAKEUP_EVENT();
}
    1388:	bd10      	pop	{r4, pc}
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	00000c09 	.word	0x00000c09

00001390 <uhc_notify_resume_lpm>:

#ifdef USB_HOST_LPM_SUPPORT
void uhc_notify_resume_lpm(void)
{
	UHC_WAKEUP_EVENT();
}
    1390:	4770      	bx	lr
	...

00001394 <uhc_start>:
 * \name Functions to control the USB host stack
 *
 * @{
 */
void uhc_start(void)
{
    1394:	b510      	push	{r4, lr}
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
    1396:	22ff      	movs	r2, #255	; 0xff
    1398:	4b03      	ldr	r3, [pc, #12]	; (13a8 <uhc_start+0x14>)
    139a:	749a      	strb	r2, [r3, #18]
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
    139c:	2200      	movs	r2, #0
    139e:	4b03      	ldr	r3, [pc, #12]	; (13ac <uhc_start+0x18>)
    13a0:	701a      	strb	r2, [r3, #0]
	uhd_enable();
    13a2:	4b03      	ldr	r3, [pc, #12]	; (13b0 <uhc_start+0x1c>)
    13a4:	4798      	blx	r3
}
    13a6:	bd10      	pop	{r4, pc}
    13a8:	20000160 	.word	0x20000160
    13ac:	20000549 	.word	0x20000549
    13b0:	00002a49 	.word	0x00002a49

000013b4 <uhc_stop>:

void uhc_stop(bool b_id_stop)
{
    13b4:	b510      	push	{r4, lr}
	// Stop UHD
	uhd_disable(b_id_stop);
    13b6:	4b01      	ldr	r3, [pc, #4]	; (13bc <uhc_stop+0x8>)
    13b8:	4798      	blx	r3
}
    13ba:	bd10      	pop	{r4, pc}
    13bc:	00002c2d 	.word	0x00002c2d

000013c0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    13c0:	4b0c      	ldr	r3, [pc, #48]	; (13f4 <cpu_irq_enter_critical+0x34>)
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d106      	bne.n	13d6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    13cc:	2b00      	cmp	r3, #0
    13ce:	d007      	beq.n	13e0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    13d0:	2200      	movs	r2, #0
    13d2:	4b09      	ldr	r3, [pc, #36]	; (13f8 <cpu_irq_enter_critical+0x38>)
    13d4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    13d6:	4a07      	ldr	r2, [pc, #28]	; (13f4 <cpu_irq_enter_critical+0x34>)
    13d8:	6813      	ldr	r3, [r2, #0]
    13da:	3301      	adds	r3, #1
    13dc:	6013      	str	r3, [r2, #0]
}
    13de:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    13e0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    13e2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    13e6:	2200      	movs	r2, #0
    13e8:	4b04      	ldr	r3, [pc, #16]	; (13fc <cpu_irq_enter_critical+0x3c>)
    13ea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    13ec:	3201      	adds	r2, #1
    13ee:	4b02      	ldr	r3, [pc, #8]	; (13f8 <cpu_irq_enter_critical+0x38>)
    13f0:	701a      	strb	r2, [r3, #0]
    13f2:	e7f0      	b.n	13d6 <cpu_irq_enter_critical+0x16>
    13f4:	20000184 	.word	0x20000184
    13f8:	20000188 	.word	0x20000188
    13fc:	20000023 	.word	0x20000023

00001400 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1400:	4b08      	ldr	r3, [pc, #32]	; (1424 <cpu_irq_leave_critical+0x24>)
    1402:	681a      	ldr	r2, [r3, #0]
    1404:	3a01      	subs	r2, #1
    1406:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1408:	681b      	ldr	r3, [r3, #0]
    140a:	2b00      	cmp	r3, #0
    140c:	d109      	bne.n	1422 <cpu_irq_leave_critical+0x22>
    140e:	4b06      	ldr	r3, [pc, #24]	; (1428 <cpu_irq_leave_critical+0x28>)
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	2b00      	cmp	r3, #0
    1414:	d005      	beq.n	1422 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1416:	2201      	movs	r2, #1
    1418:	4b04      	ldr	r3, [pc, #16]	; (142c <cpu_irq_leave_critical+0x2c>)
    141a:	701a      	strb	r2, [r3, #0]
    141c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1420:	b662      	cpsie	i
	}
}
    1422:	4770      	bx	lr
    1424:	20000184 	.word	0x20000184
    1428:	20000188 	.word	0x20000188
    142c:	20000023 	.word	0x20000023

00001430 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1430:	b5f0      	push	{r4, r5, r6, r7, lr}
    1432:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1434:	ac01      	add	r4, sp, #4
    1436:	2501      	movs	r5, #1
    1438:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    143a:	2700      	movs	r7, #0
    143c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    143e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1440:	0021      	movs	r1, r4
    1442:	2007      	movs	r0, #7
    1444:	4e05      	ldr	r6, [pc, #20]	; (145c <system_board_init+0x2c>)
    1446:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1448:	2280      	movs	r2, #128	; 0x80
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <system_board_init+0x30>)
    144c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    144e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1450:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1452:	0021      	movs	r1, r4
    1454:	200f      	movs	r0, #15
    1456:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1458:	b003      	add	sp, #12
    145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    145c:	00001981 	.word	0x00001981
    1460:	41004400 	.word	0x41004400

00001464 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    1464:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1466:	4b26      	ldr	r3, [pc, #152]	; (1500 <DMAC_Handler+0x9c>)
    1468:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    146a:	4926      	ldr	r1, [pc, #152]	; (1504 <DMAC_Handler+0xa0>)
    146c:	8c0b      	ldrh	r3, [r1, #32]
    146e:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    1470:	4013      	ands	r3, r2
    1472:	009b      	lsls	r3, r3, #2
    1474:	4824      	ldr	r0, [pc, #144]	; (1508 <DMAC_Handler+0xa4>)
    1476:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    1478:	7803      	ldrb	r3, [r0, #0]
    147a:	401a      	ands	r2, r3
    147c:	233f      	movs	r3, #63	; 0x3f
    147e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
    1480:	330f      	adds	r3, #15
    1482:	5cca      	ldrb	r2, [r1, r3]
    1484:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    1486:	7803      	ldrb	r3, [r0, #0]
    1488:	011b      	lsls	r3, r3, #4
    148a:	4920      	ldr	r1, [pc, #128]	; (150c <DMAC_Handler+0xa8>)
    148c:	18c9      	adds	r1, r1, r3
    148e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    1490:	4c1f      	ldr	r4, [pc, #124]	; (1510 <DMAC_Handler+0xac>)
    1492:	18e3      	adds	r3, r4, r3
    1494:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    1496:	1acb      	subs	r3, r1, r3
    1498:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    149a:	07d3      	lsls	r3, r2, #31
    149c:	d50f      	bpl.n	14be <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    149e:	2101      	movs	r1, #1
    14a0:	234e      	movs	r3, #78	; 0x4e
    14a2:	4a18      	ldr	r2, [pc, #96]	; (1504 <DMAC_Handler+0xa0>)
    14a4:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    14a6:	3b3e      	subs	r3, #62	; 0x3e
    14a8:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    14aa:	7c03      	ldrb	r3, [r0, #16]
    14ac:	07db      	lsls	r3, r3, #31
    14ae:	d503      	bpl.n	14b8 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    14b0:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    14b2:	2b00      	cmp	r3, #0
    14b4:	d000      	beq.n	14b8 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    14b6:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14b8:	4b16      	ldr	r3, [pc, #88]	; (1514 <DMAC_Handler+0xb0>)
    14ba:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
    14bc:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    14be:	0793      	lsls	r3, r2, #30
    14c0:	d50d      	bpl.n	14de <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    14c2:	2102      	movs	r1, #2
    14c4:	234e      	movs	r3, #78	; 0x4e
    14c6:	4a0f      	ldr	r2, [pc, #60]	; (1504 <DMAC_Handler+0xa0>)
    14c8:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
    14ca:	2300      	movs	r3, #0
    14cc:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    14ce:	7c03      	ldrb	r3, [r0, #16]
    14d0:	079b      	lsls	r3, r3, #30
    14d2:	d5f1      	bpl.n	14b8 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    14d4:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    14d6:	2b00      	cmp	r3, #0
    14d8:	d0ee      	beq.n	14b8 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    14da:	4798      	blx	r3
    14dc:	e7ec      	b.n	14b8 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    14de:	0753      	lsls	r3, r2, #29
    14e0:	d5ea      	bpl.n	14b8 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    14e2:	2104      	movs	r1, #4
    14e4:	234e      	movs	r3, #78	; 0x4e
    14e6:	4a07      	ldr	r2, [pc, #28]	; (1504 <DMAC_Handler+0xa0>)
    14e8:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
    14ea:	3b48      	subs	r3, #72	; 0x48
    14ec:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    14ee:	7c03      	ldrb	r3, [r0, #16]
    14f0:	075b      	lsls	r3, r3, #29
    14f2:	d5e1      	bpl.n	14b8 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    14f4:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    14f6:	2b00      	cmp	r3, #0
    14f8:	d0de      	beq.n	14b8 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    14fa:	4798      	blx	r3
    14fc:	e7dc      	b.n	14b8 <DMAC_Handler+0x54>
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	000013c1 	.word	0x000013c1
    1504:	41004800 	.word	0x41004800
    1508:	2000018c 	.word	0x2000018c
    150c:	20000550 	.word	0x20000550
    1510:	20000190 	.word	0x20000190
    1514:	00001401 	.word	0x00001401

00001518 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1518:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    151a:	2a00      	cmp	r2, #0
    151c:	d001      	beq.n	1522 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    151e:	0018      	movs	r0, r3
    1520:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1522:	008b      	lsls	r3, r1, #2
    1524:	4a06      	ldr	r2, [pc, #24]	; (1540 <extint_register_callback+0x28>)
    1526:	589b      	ldr	r3, [r3, r2]
    1528:	2b00      	cmp	r3, #0
    152a:	d003      	beq.n	1534 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    152c:	4283      	cmp	r3, r0
    152e:	d005      	beq.n	153c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1530:	231d      	movs	r3, #29
    1532:	e7f4      	b.n	151e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1534:	0089      	lsls	r1, r1, #2
    1536:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1538:	2300      	movs	r3, #0
    153a:	e7f0      	b.n	151e <extint_register_callback+0x6>
		return STATUS_OK;
    153c:	2300      	movs	r3, #0
    153e:	e7ee      	b.n	151e <extint_register_callback+0x6>
    1540:	20000564 	.word	0x20000564

00001544 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1544:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1546:	2900      	cmp	r1, #0
    1548:	d001      	beq.n	154e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    154a:	0018      	movs	r0, r3
    154c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    154e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1550:	281f      	cmp	r0, #31
    1552:	d800      	bhi.n	1556 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1554:	4a02      	ldr	r2, [pc, #8]	; (1560 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1556:	2301      	movs	r3, #1
    1558:	4083      	lsls	r3, r0
    155a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    155c:	2300      	movs	r3, #0
    155e:	e7f4      	b.n	154a <extint_chan_enable_callback+0x6>
    1560:	40001800 	.word	0x40001800

00001564 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1564:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1566:	2900      	cmp	r1, #0
    1568:	d001      	beq.n	156e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    156a:	0018      	movs	r0, r3
    156c:	4770      	bx	lr
		return NULL;
    156e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1570:	281f      	cmp	r0, #31
    1572:	d800      	bhi.n	1576 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    1574:	4a02      	ldr	r2, [pc, #8]	; (1580 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    1576:	2301      	movs	r3, #1
    1578:	4083      	lsls	r3, r0
    157a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    157c:	2300      	movs	r3, #0
    157e:	e7f4      	b.n	156a <extint_chan_disable_callback+0x6>
    1580:	40001800 	.word	0x40001800

00001584 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1584:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1586:	2200      	movs	r2, #0
    1588:	4b10      	ldr	r3, [pc, #64]	; (15cc <EIC_Handler+0x48>)
    158a:	701a      	strb	r2, [r3, #0]
    158c:	2300      	movs	r3, #0
    158e:	4910      	ldr	r1, [pc, #64]	; (15d0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1590:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1592:	4e10      	ldr	r6, [pc, #64]	; (15d4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1594:	4c0d      	ldr	r4, [pc, #52]	; (15cc <EIC_Handler+0x48>)
    1596:	e00a      	b.n	15ae <EIC_Handler+0x2a>
		return eics[eic_index];
    1598:	490d      	ldr	r1, [pc, #52]	; (15d0 <EIC_Handler+0x4c>)
    159a:	e008      	b.n	15ae <EIC_Handler+0x2a>
    159c:	7823      	ldrb	r3, [r4, #0]
    159e:	3301      	adds	r3, #1
    15a0:	b2db      	uxtb	r3, r3
    15a2:	7023      	strb	r3, [r4, #0]
    15a4:	2b0f      	cmp	r3, #15
    15a6:	d810      	bhi.n	15ca <EIC_Handler+0x46>
		return NULL;
    15a8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    15aa:	2b1f      	cmp	r3, #31
    15ac:	d9f4      	bls.n	1598 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    15ae:	0028      	movs	r0, r5
    15b0:	4018      	ands	r0, r3
    15b2:	2201      	movs	r2, #1
    15b4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    15b6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    15b8:	4210      	tst	r0, r2
    15ba:	d0ef      	beq.n	159c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    15bc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    15be:	009b      	lsls	r3, r3, #2
    15c0:	599b      	ldr	r3, [r3, r6]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d0ea      	beq.n	159c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    15c6:	4798      	blx	r3
    15c8:	e7e8      	b.n	159c <EIC_Handler+0x18>
			}
		}
	}
}
    15ca:	bd70      	pop	{r4, r5, r6, pc}
    15cc:	20000560 	.word	0x20000560
    15d0:	40001800 	.word	0x40001800
    15d4:	20000564 	.word	0x20000564

000015d8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    15d8:	4a04      	ldr	r2, [pc, #16]	; (15ec <_extint_enable+0x14>)
    15da:	7813      	ldrb	r3, [r2, #0]
    15dc:	2102      	movs	r1, #2
    15de:	430b      	orrs	r3, r1
    15e0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    15e2:	7853      	ldrb	r3, [r2, #1]
    15e4:	b25b      	sxtb	r3, r3
    15e6:	2b00      	cmp	r3, #0
    15e8:	dbfb      	blt.n	15e2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    15ea:	4770      	bx	lr
    15ec:	40001800 	.word	0x40001800

000015f0 <_system_extint_init>:
{
    15f0:	b500      	push	{lr}
    15f2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    15f4:	4a12      	ldr	r2, [pc, #72]	; (1640 <_system_extint_init+0x50>)
    15f6:	6993      	ldr	r3, [r2, #24]
    15f8:	2140      	movs	r1, #64	; 0x40
    15fa:	430b      	orrs	r3, r1
    15fc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    15fe:	a901      	add	r1, sp, #4
    1600:	2300      	movs	r3, #0
    1602:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1604:	2005      	movs	r0, #5
    1606:	4b0f      	ldr	r3, [pc, #60]	; (1644 <_system_extint_init+0x54>)
    1608:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    160a:	2005      	movs	r0, #5
    160c:	4b0e      	ldr	r3, [pc, #56]	; (1648 <_system_extint_init+0x58>)
    160e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1610:	4a0e      	ldr	r2, [pc, #56]	; (164c <_system_extint_init+0x5c>)
    1612:	7813      	ldrb	r3, [r2, #0]
    1614:	2101      	movs	r1, #1
    1616:	430b      	orrs	r3, r1
    1618:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    161a:	7853      	ldrb	r3, [r2, #1]
    161c:	b25b      	sxtb	r3, r3
    161e:	2b00      	cmp	r3, #0
    1620:	dbfb      	blt.n	161a <_system_extint_init+0x2a>
    1622:	4b0b      	ldr	r3, [pc, #44]	; (1650 <_system_extint_init+0x60>)
    1624:	0019      	movs	r1, r3
    1626:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1628:	2200      	movs	r2, #0
    162a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    162c:	4299      	cmp	r1, r3
    162e:	d1fc      	bne.n	162a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1630:	2210      	movs	r2, #16
    1632:	4b08      	ldr	r3, [pc, #32]	; (1654 <_system_extint_init+0x64>)
    1634:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1636:	4b08      	ldr	r3, [pc, #32]	; (1658 <_system_extint_init+0x68>)
    1638:	4798      	blx	r3
}
    163a:	b003      	add	sp, #12
    163c:	bd00      	pop	{pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	40000400 	.word	0x40000400
    1644:	00002055 	.word	0x00002055
    1648:	00001fc9 	.word	0x00001fc9
    164c:	40001800 	.word	0x40001800
    1650:	20000564 	.word	0x20000564
    1654:	e000e100 	.word	0xe000e100
    1658:	000015d9 	.word	0x000015d9

0000165c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    165c:	2300      	movs	r3, #0
    165e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1660:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1662:	2201      	movs	r2, #1
    1664:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1666:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1668:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    166a:	3302      	adds	r3, #2
    166c:	72c3      	strb	r3, [r0, #11]
}
    166e:	4770      	bx	lr

00001670 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1670:	b5f0      	push	{r4, r5, r6, r7, lr}
    1672:	b083      	sub	sp, #12
    1674:	0005      	movs	r5, r0
    1676:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1678:	a901      	add	r1, sp, #4
    167a:	2300      	movs	r3, #0
    167c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    167e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1680:	7923      	ldrb	r3, [r4, #4]
    1682:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1684:	7a23      	ldrb	r3, [r4, #8]
    1686:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1688:	7820      	ldrb	r0, [r4, #0]
    168a:	4b15      	ldr	r3, [pc, #84]	; (16e0 <extint_chan_set_config+0x70>)
    168c:	4798      	blx	r3
		return NULL;
    168e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1690:	2d1f      	cmp	r5, #31
    1692:	d800      	bhi.n	1696 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1694:	4813      	ldr	r0, [pc, #76]	; (16e4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1696:	2207      	movs	r2, #7
    1698:	402a      	ands	r2, r5
    169a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    169c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    169e:	7aa3      	ldrb	r3, [r4, #10]
    16a0:	2b00      	cmp	r3, #0
    16a2:	d001      	beq.n	16a8 <extint_chan_set_config+0x38>
    16a4:	2308      	movs	r3, #8
    16a6:	431f      	orrs	r7, r3
    16a8:	08eb      	lsrs	r3, r5, #3
    16aa:	009b      	lsls	r3, r3, #2
    16ac:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    16ae:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    16b0:	260f      	movs	r6, #15
    16b2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    16b4:	43b1      	bics	r1, r6
			(new_config << config_pos);
    16b6:	4097      	lsls	r7, r2
    16b8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    16ba:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    16bc:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    16be:	7a63      	ldrb	r3, [r4, #9]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d106      	bne.n	16d2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    16c4:	6943      	ldr	r3, [r0, #20]
    16c6:	2201      	movs	r2, #1
    16c8:	40aa      	lsls	r2, r5
    16ca:	4393      	bics	r3, r2
    16cc:	6143      	str	r3, [r0, #20]
	}
}
    16ce:	b003      	add	sp, #12
    16d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    16d2:	6942      	ldr	r2, [r0, #20]
    16d4:	2301      	movs	r3, #1
    16d6:	40ab      	lsls	r3, r5
    16d8:	4313      	orrs	r3, r2
    16da:	6143      	str	r3, [r0, #20]
    16dc:	e7f7      	b.n	16ce <extint_chan_set_config+0x5e>
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	00002119 	.word	0x00002119
    16e4:	40001800 	.word	0x40001800

000016e8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    16e8:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    16ea:	4a1e      	ldr	r2, [pc, #120]	; (1764 <nvm_set_config+0x7c>)
    16ec:	69d3      	ldr	r3, [r2, #28]
    16ee:	2104      	movs	r1, #4
    16f0:	430b      	orrs	r3, r1
    16f2:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    16f4:	4b1c      	ldr	r3, [pc, #112]	; (1768 <nvm_set_config+0x80>)
    16f6:	2220      	movs	r2, #32
    16f8:	32ff      	adds	r2, #255	; 0xff
    16fa:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    16fc:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    16fe:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    1700:	07d2      	lsls	r2, r2, #31
    1702:	d401      	bmi.n	1708 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    1704:	0018      	movs	r0, r3
    1706:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1708:	7803      	ldrb	r3, [r0, #0]
    170a:	021b      	lsls	r3, r3, #8
    170c:	22c0      	movs	r2, #192	; 0xc0
    170e:	0092      	lsls	r2, r2, #2
    1710:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1712:	7841      	ldrb	r1, [r0, #1]
    1714:	01c9      	lsls	r1, r1, #7
    1716:	22ff      	movs	r2, #255	; 0xff
    1718:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    171a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    171c:	7881      	ldrb	r1, [r0, #2]
    171e:	0049      	lsls	r1, r1, #1
    1720:	221e      	movs	r2, #30
    1722:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1724:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1726:	78c2      	ldrb	r2, [r0, #3]
    1728:	0492      	lsls	r2, r2, #18
    172a:	2180      	movs	r1, #128	; 0x80
    172c:	02c9      	lsls	r1, r1, #11
    172e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1730:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1732:	7902      	ldrb	r2, [r0, #4]
    1734:	0412      	lsls	r2, r2, #16
    1736:	21c0      	movs	r1, #192	; 0xc0
    1738:	0289      	lsls	r1, r1, #10
    173a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    173c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    173e:	4a0a      	ldr	r2, [pc, #40]	; (1768 <nvm_set_config+0x80>)
    1740:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1742:	6893      	ldr	r3, [r2, #8]
    1744:	035b      	lsls	r3, r3, #13
    1746:	0f5b      	lsrs	r3, r3, #29
    1748:	4908      	ldr	r1, [pc, #32]	; (176c <nvm_set_config+0x84>)
    174a:	2408      	movs	r4, #8
    174c:	409c      	lsls	r4, r3
    174e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1750:	6893      	ldr	r3, [r2, #8]
    1752:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1754:	7843      	ldrb	r3, [r0, #1]
    1756:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1758:	8b13      	ldrh	r3, [r2, #24]
    175a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    175c:	0fdb      	lsrs	r3, r3, #31
    175e:	011b      	lsls	r3, r3, #4
    1760:	e7d0      	b.n	1704 <nvm_set_config+0x1c>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	40000400 	.word	0x40000400
    1768:	41004000 	.word	0x41004000
    176c:	200001a0 	.word	0x200001a0

00001770 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1770:	b530      	push	{r4, r5, lr}
    1772:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1774:	4a22      	ldr	r2, [pc, #136]	; (1800 <nvm_execute_command+0x90>)
    1776:	8810      	ldrh	r0, [r2, #0]
    1778:	8853      	ldrh	r3, [r2, #2]
    177a:	4343      	muls	r3, r0
    177c:	428b      	cmp	r3, r1
    177e:	d206      	bcs.n	178e <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1780:	2280      	movs	r2, #128	; 0x80
    1782:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1784:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1786:	4b1f      	ldr	r3, [pc, #124]	; (1804 <nvm_execute_command+0x94>)
    1788:	18cb      	adds	r3, r1, r3
    178a:	4293      	cmp	r3, r2
    178c:	d80e      	bhi.n	17ac <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    178e:	4b1e      	ldr	r3, [pc, #120]	; (1808 <nvm_execute_command+0x98>)
    1790:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1792:	2280      	movs	r2, #128	; 0x80
    1794:	02d2      	lsls	r2, r2, #11
    1796:	432a      	orrs	r2, r5
    1798:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    179a:	2220      	movs	r2, #32
    179c:	32ff      	adds	r2, #255	; 0xff
    179e:	831a      	strh	r2, [r3, #24]
    17a0:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    17a2:	07db      	lsls	r3, r3, #31
    17a4:	d403      	bmi.n	17ae <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    17a6:	4b18      	ldr	r3, [pc, #96]	; (1808 <nvm_execute_command+0x98>)
    17a8:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    17aa:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    17ac:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    17ae:	2c45      	cmp	r4, #69	; 0x45
    17b0:	d822      	bhi.n	17f8 <nvm_execute_command+0x88>
    17b2:	00a3      	lsls	r3, r4, #2
    17b4:	4a15      	ldr	r2, [pc, #84]	; (180c <nvm_execute_command+0x9c>)
    17b6:	58d3      	ldr	r3, [r2, r3]
    17b8:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    17ba:	4b13      	ldr	r3, [pc, #76]	; (1808 <nvm_execute_command+0x98>)
    17bc:	8b1b      	ldrh	r3, [r3, #24]
    17be:	05db      	lsls	r3, r3, #23
    17c0:	d503      	bpl.n	17ca <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    17c2:	4b11      	ldr	r3, [pc, #68]	; (1808 <nvm_execute_command+0x98>)
    17c4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    17c6:	2010      	movs	r0, #16
    17c8:	e7f0      	b.n	17ac <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    17ca:	0889      	lsrs	r1, r1, #2
    17cc:	0049      	lsls	r1, r1, #1
    17ce:	4b0e      	ldr	r3, [pc, #56]	; (1808 <nvm_execute_command+0x98>)
    17d0:	61d9      	str	r1, [r3, #28]
			break;
    17d2:	e003      	b.n	17dc <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    17d4:	0889      	lsrs	r1, r1, #2
    17d6:	0049      	lsls	r1, r1, #1
    17d8:	4b0b      	ldr	r3, [pc, #44]	; (1808 <nvm_execute_command+0x98>)
    17da:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    17dc:	20a5      	movs	r0, #165	; 0xa5
    17de:	0200      	lsls	r0, r0, #8
    17e0:	4304      	orrs	r4, r0
    17e2:	4b09      	ldr	r3, [pc, #36]	; (1808 <nvm_execute_command+0x98>)
    17e4:	801c      	strh	r4, [r3, #0]
    17e6:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    17e8:	2201      	movs	r2, #1
    17ea:	7d0b      	ldrb	r3, [r1, #20]
    17ec:	4213      	tst	r3, r2
    17ee:	d0fc      	beq.n	17ea <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    17f0:	4b05      	ldr	r3, [pc, #20]	; (1808 <nvm_execute_command+0x98>)
    17f2:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    17f4:	2000      	movs	r0, #0
    17f6:	e7d9      	b.n	17ac <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    17f8:	4b03      	ldr	r3, [pc, #12]	; (1808 <nvm_execute_command+0x98>)
    17fa:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    17fc:	2017      	movs	r0, #23
    17fe:	e7d5      	b.n	17ac <nvm_execute_command+0x3c>
    1800:	200001a0 	.word	0x200001a0
    1804:	ff7fc000 	.word	0xff7fc000
    1808:	41004000 	.word	0x41004000
    180c:	00005f9c 	.word	0x00005f9c

00001810 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1812:	4b25      	ldr	r3, [pc, #148]	; (18a8 <nvm_write_buffer+0x98>)
    1814:	881d      	ldrh	r5, [r3, #0]
    1816:	885b      	ldrh	r3, [r3, #2]
    1818:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    181a:	2418      	movs	r4, #24
	if (destination_address >
    181c:	4283      	cmp	r3, r0
    181e:	d201      	bcs.n	1824 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    1820:	0020      	movs	r0, r4
    1822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1824:	1e6b      	subs	r3, r5, #1
    1826:	4218      	tst	r0, r3
    1828:	d1fa      	bne.n	1820 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    182a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    182c:	4295      	cmp	r5, r2
    182e:	d3f7      	bcc.n	1820 <nvm_write_buffer+0x10>
    1830:	4b1e      	ldr	r3, [pc, #120]	; (18ac <nvm_write_buffer+0x9c>)
    1832:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    1834:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    1836:	07db      	lsls	r3, r3, #31
    1838:	d5f2      	bpl.n	1820 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    183a:	4c1d      	ldr	r4, [pc, #116]	; (18b0 <nvm_write_buffer+0xa0>)
    183c:	4b1b      	ldr	r3, [pc, #108]	; (18ac <nvm_write_buffer+0x9c>)
    183e:	801c      	strh	r4, [r3, #0]
    1840:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    1842:	2401      	movs	r4, #1
    1844:	7d2b      	ldrb	r3, [r5, #20]
    1846:	4223      	tst	r3, r4
    1848:	d0fc      	beq.n	1844 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    184a:	2420      	movs	r4, #32
    184c:	34ff      	adds	r4, #255	; 0xff
    184e:	4b17      	ldr	r3, [pc, #92]	; (18ac <nvm_write_buffer+0x9c>)
    1850:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    1852:	2a00      	cmp	r2, #0
    1854:	d022      	beq.n	189c <nvm_write_buffer+0x8c>
    1856:	2301      	movs	r3, #1
    1858:	0005      	movs	r5, r0
    185a:	439d      	bics	r5, r3
    185c:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    185e:	1e57      	subs	r7, r2, #1
    1860:	e009      	b.n	1876 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    1862:	18ce      	adds	r6, r1, r3
    1864:	7876      	ldrb	r6, [r6, #1]
    1866:	0236      	lsls	r6, r6, #8
    1868:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    186a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    186c:	3302      	adds	r3, #2
    186e:	b29b      	uxth	r3, r3
    1870:	3502      	adds	r5, #2
    1872:	429a      	cmp	r2, r3
    1874:	d904      	bls.n	1880 <nvm_write_buffer+0x70>
		data = buffer[i];
    1876:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    1878:	42bb      	cmp	r3, r7
    187a:	dbf2      	blt.n	1862 <nvm_write_buffer+0x52>
		data = buffer[i];
    187c:	b2a4      	uxth	r4, r4
    187e:	e7f4      	b.n	186a <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1880:	4b09      	ldr	r3, [pc, #36]	; (18a8 <nvm_write_buffer+0x98>)
    1882:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    1884:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1886:	2b00      	cmp	r3, #0
    1888:	d1ca      	bne.n	1820 <nvm_write_buffer+0x10>
    188a:	2a3f      	cmp	r2, #63	; 0x3f
    188c:	d8c8      	bhi.n	1820 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    188e:	2200      	movs	r2, #0
    1890:	0001      	movs	r1, r0
    1892:	2004      	movs	r0, #4
    1894:	4b07      	ldr	r3, [pc, #28]	; (18b4 <nvm_write_buffer+0xa4>)
    1896:	4798      	blx	r3
    1898:	0004      	movs	r4, r0
    189a:	e7c1      	b.n	1820 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    189c:	4b02      	ldr	r3, [pc, #8]	; (18a8 <nvm_write_buffer+0x98>)
    189e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    18a0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    18a2:	2b00      	cmp	r3, #0
    18a4:	d0f3      	beq.n	188e <nvm_write_buffer+0x7e>
    18a6:	e7bb      	b.n	1820 <nvm_write_buffer+0x10>
    18a8:	200001a0 	.word	0x200001a0
    18ac:	41004000 	.word	0x41004000
    18b0:	ffffa544 	.word	0xffffa544
    18b4:	00001771 	.word	0x00001771

000018b8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    18b8:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    18ba:	4b18      	ldr	r3, [pc, #96]	; (191c <nvm_read_buffer+0x64>)
    18bc:	881d      	ldrh	r5, [r3, #0]
    18be:	885b      	ldrh	r3, [r3, #2]
    18c0:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    18c2:	2418      	movs	r4, #24
	if (source_address >
    18c4:	4283      	cmp	r3, r0
    18c6:	d201      	bcs.n	18cc <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    18c8:	0020      	movs	r0, r4
    18ca:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    18cc:	1e6b      	subs	r3, r5, #1
    18ce:	4218      	tst	r0, r3
    18d0:	d1fa      	bne.n	18c8 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    18d2:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    18d4:	4295      	cmp	r5, r2
    18d6:	d3f7      	bcc.n	18c8 <nvm_read_buffer+0x10>
    18d8:	4b11      	ldr	r3, [pc, #68]	; (1920 <nvm_read_buffer+0x68>)
    18da:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    18dc:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    18de:	07db      	lsls	r3, r3, #31
    18e0:	d5f2      	bpl.n	18c8 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    18e2:	2420      	movs	r4, #32
    18e4:	34ff      	adds	r4, #255	; 0xff
    18e6:	4b0e      	ldr	r3, [pc, #56]	; (1920 <nvm_read_buffer+0x68>)
    18e8:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    18ea:	2a00      	cmp	r2, #0
    18ec:	d014      	beq.n	1918 <nvm_read_buffer+0x60>
    18ee:	2301      	movs	r3, #1
    18f0:	4398      	bics	r0, r3
    18f2:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    18f4:	1e56      	subs	r6, r2, #1
    18f6:	e004      	b.n	1902 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    18f8:	3302      	adds	r3, #2
    18fa:	b29b      	uxth	r3, r3
    18fc:	3002      	adds	r0, #2
    18fe:	429a      	cmp	r2, r3
    1900:	d908      	bls.n	1914 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    1902:	8804      	ldrh	r4, [r0, #0]
    1904:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    1906:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    1908:	42b3      	cmp	r3, r6
    190a:	daf5      	bge.n	18f8 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    190c:	18cd      	adds	r5, r1, r3
    190e:	0a24      	lsrs	r4, r4, #8
    1910:	706c      	strb	r4, [r5, #1]
    1912:	e7f1      	b.n	18f8 <nvm_read_buffer+0x40>
	return STATUS_OK;
    1914:	2400      	movs	r4, #0
    1916:	e7d7      	b.n	18c8 <nvm_read_buffer+0x10>
    1918:	2400      	movs	r4, #0
    191a:	e7d5      	b.n	18c8 <nvm_read_buffer+0x10>
    191c:	200001a0 	.word	0x200001a0
    1920:	41004000 	.word	0x41004000

00001924 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1924:	4b13      	ldr	r3, [pc, #76]	; (1974 <nvm_erase_row+0x50>)
    1926:	881a      	ldrh	r2, [r3, #0]
    1928:	885b      	ldrh	r3, [r3, #2]
    192a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    192c:	2118      	movs	r1, #24
	if (row_address >
    192e:	4283      	cmp	r3, r0
    1930:	d201      	bcs.n	1936 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    1932:	0008      	movs	r0, r1
    1934:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    1936:	0092      	lsls	r2, r2, #2
    1938:	3a01      	subs	r2, #1
    193a:	4210      	tst	r0, r2
    193c:	d1f9      	bne.n	1932 <nvm_erase_row+0xe>
    193e:	4b0e      	ldr	r3, [pc, #56]	; (1978 <nvm_erase_row+0x54>)
    1940:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    1942:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    1944:	07db      	lsls	r3, r3, #31
    1946:	d5f4      	bpl.n	1932 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1948:	4b0b      	ldr	r3, [pc, #44]	; (1978 <nvm_erase_row+0x54>)
    194a:	2220      	movs	r2, #32
    194c:	32ff      	adds	r2, #255	; 0xff
    194e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    1950:	0880      	lsrs	r0, r0, #2
    1952:	0040      	lsls	r0, r0, #1
    1954:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    1956:	4a09      	ldr	r2, [pc, #36]	; (197c <nvm_erase_row+0x58>)
    1958:	801a      	strh	r2, [r3, #0]
    195a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    195c:	2201      	movs	r2, #1
    195e:	7d0b      	ldrb	r3, [r1, #20]
    1960:	4213      	tst	r3, r2
    1962:	d0fc      	beq.n	195e <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    1964:	4b04      	ldr	r3, [pc, #16]	; (1978 <nvm_erase_row+0x54>)
    1966:	8b19      	ldrh	r1, [r3, #24]
    1968:	201c      	movs	r0, #28
    196a:	4001      	ands	r1, r0
	return STATUS_OK;
    196c:	1e48      	subs	r0, r1, #1
    196e:	4181      	sbcs	r1, r0
    1970:	0089      	lsls	r1, r1, #2
    1972:	e7de      	b.n	1932 <nvm_erase_row+0xe>
    1974:	200001a0 	.word	0x200001a0
    1978:	41004000 	.word	0x41004000
    197c:	ffffa502 	.word	0xffffa502

00001980 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1980:	b500      	push	{lr}
    1982:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1984:	ab01      	add	r3, sp, #4
    1986:	2280      	movs	r2, #128	; 0x80
    1988:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    198a:	780a      	ldrb	r2, [r1, #0]
    198c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    198e:	784a      	ldrb	r2, [r1, #1]
    1990:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1992:	788a      	ldrb	r2, [r1, #2]
    1994:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1996:	0019      	movs	r1, r3
    1998:	4b01      	ldr	r3, [pc, #4]	; (19a0 <port_pin_set_config+0x20>)
    199a:	4798      	blx	r3
}
    199c:	b003      	add	sp, #12
    199e:	bd00      	pop	{pc}
    19a0:	00002119 	.word	0x00002119

000019a4 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19a4:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19a6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    19a8:	b25b      	sxtb	r3, r3
    19aa:	2b00      	cmp	r3, #0
    19ac:	dbfb      	blt.n	19a6 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    19ae:	8813      	ldrh	r3, [r2, #0]
    19b0:	2102      	movs	r1, #2
    19b2:	430b      	orrs	r3, r1
    19b4:	8013      	strh	r3, [r2, #0]
}
    19b6:	4770      	bx	lr

000019b8 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19b8:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19ba:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    19bc:	b25b      	sxtb	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	dbfb      	blt.n	19ba <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    19c2:	23c1      	movs	r3, #193	; 0xc1
    19c4:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    19c6:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    19c8:	8813      	ldrh	r3, [r2, #0]
    19ca:	2102      	movs	r1, #2
    19cc:	438b      	bics	r3, r1
    19ce:	8013      	strh	r3, [r2, #0]
}
    19d0:	4770      	bx	lr
	...

000019d4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    19d4:	b570      	push	{r4, r5, r6, lr}
    19d6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19d8:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    19da:	4b06      	ldr	r3, [pc, #24]	; (19f4 <rtc_calendar_reset+0x20>)
    19dc:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    19de:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19e0:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    19e2:	b25b      	sxtb	r3, r3
    19e4:	2b00      	cmp	r3, #0
    19e6:	dbfb      	blt.n	19e0 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    19e8:	882b      	ldrh	r3, [r5, #0]
    19ea:	2201      	movs	r2, #1
    19ec:	4313      	orrs	r3, r2
    19ee:	802b      	strh	r3, [r5, #0]
}
    19f0:	bd70      	pop	{r4, r5, r6, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	000019b9 	.word	0x000019b9

000019f8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    19f8:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    19fa:	88cb      	ldrh	r3, [r1, #6]
    19fc:	88c2      	ldrh	r2, [r0, #6]
    19fe:	1a9a      	subs	r2, r3, r2
    1a00:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1a02:	794b      	ldrb	r3, [r1, #5]
    1a04:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1a06:	790c      	ldrb	r4, [r1, #4]
    1a08:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1a0a:	4323      	orrs	r3, r4
    1a0c:	788c      	ldrb	r4, [r1, #2]
    1a0e:	0324      	lsls	r4, r4, #12
    1a10:	4323      	orrs	r3, r4
    1a12:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1a14:	7902      	ldrb	r2, [r0, #4]
    1a16:	2a00      	cmp	r2, #0
    1a18:	d105      	bne.n	1a26 <rtc_calendar_time_to_register_value+0x2e>
    1a1a:	78ca      	ldrb	r2, [r1, #3]
    1a1c:	2a00      	cmp	r2, #0
    1a1e:	d002      	beq.n	1a26 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1a20:	2280      	movs	r2, #128	; 0x80
    1a22:	0252      	lsls	r2, r2, #9
    1a24:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1a26:	7848      	ldrb	r0, [r1, #1]
    1a28:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1a2a:	780a      	ldrb	r2, [r1, #0]
    1a2c:	4310      	orrs	r0, r2
    1a2e:	4318      	orrs	r0, r3

	return register_value;
}
    1a30:	bd10      	pop	{r4, pc}
	...

00001a34 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
    1a36:	000d      	movs	r5, r1
    1a38:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1a3a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1a3c:	2a01      	cmp	r2, #1
    1a3e:	d901      	bls.n	1a44 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1a40:	0018      	movs	r0, r3
    1a42:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1a44:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <rtc_calendar_set_alarm+0x2c>)
    1a48:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a4a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1a4c:	b25b      	sxtb	r3, r3
    1a4e:	2b00      	cmp	r3, #0
    1a50:	dbfb      	blt.n	1a4a <rtc_calendar_set_alarm+0x16>
    1a52:	00e4      	lsls	r4, r4, #3
    1a54:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1a56:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1a58:	7a2b      	ldrb	r3, [r5, #8]
    1a5a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1a5c:	2300      	movs	r3, #0
    1a5e:	e7ef      	b.n	1a40 <rtc_calendar_set_alarm+0xc>
    1a60:	000019f9 	.word	0x000019f9

00001a64 <rtc_calendar_init>:
{
    1a64:	b530      	push	{r4, r5, lr}
    1a66:	b083      	sub	sp, #12
    1a68:	0005      	movs	r5, r0
    1a6a:	0014      	movs	r4, r2
	module->hw = hw;
    1a6c:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1a6e:	4a1c      	ldr	r2, [pc, #112]	; (1ae0 <rtc_calendar_init+0x7c>)
    1a70:	6993      	ldr	r3, [r2, #24]
    1a72:	2120      	movs	r1, #32
    1a74:	430b      	orrs	r3, r1
    1a76:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1a78:	a901      	add	r1, sp, #4
    1a7a:	2302      	movs	r3, #2
    1a7c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1a7e:	2004      	movs	r0, #4
    1a80:	4b18      	ldr	r3, [pc, #96]	; (1ae4 <rtc_calendar_init+0x80>)
    1a82:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1a84:	2004      	movs	r0, #4
    1a86:	4b18      	ldr	r3, [pc, #96]	; (1ae8 <rtc_calendar_init+0x84>)
    1a88:	4798      	blx	r3
	rtc_calendar_reset(module);
    1a8a:	0028      	movs	r0, r5
    1a8c:	4b17      	ldr	r3, [pc, #92]	; (1aec <rtc_calendar_init+0x88>)
    1a8e:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1a90:	7923      	ldrb	r3, [r4, #4]
    1a92:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1a94:	78e3      	ldrb	r3, [r4, #3]
    1a96:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1a98:	88e3      	ldrh	r3, [r4, #6]
    1a9a:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1a9c:	4b14      	ldr	r3, [pc, #80]	; (1af0 <rtc_calendar_init+0x8c>)
    1a9e:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1aa0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1aa2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1aa4:	7921      	ldrb	r1, [r4, #4]
    1aa6:	2900      	cmp	r1, #0
    1aa8:	d017      	beq.n	1ada <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1aaa:	2108      	movs	r1, #8
    1aac:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1aae:	78a1      	ldrb	r1, [r4, #2]
    1ab0:	2900      	cmp	r1, #0
    1ab2:	d001      	beq.n	1ab8 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1ab4:	2180      	movs	r1, #128	; 0x80
    1ab6:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1ab8:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1aba:	78e3      	ldrb	r3, [r4, #3]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d004      	beq.n	1aca <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1ac0:	8853      	ldrh	r3, [r2, #2]
    1ac2:	2180      	movs	r1, #128	; 0x80
    1ac4:	01c9      	lsls	r1, r1, #7
    1ac6:	430b      	orrs	r3, r1
    1ac8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1aca:	0021      	movs	r1, r4
    1acc:	3108      	adds	r1, #8
    1ace:	2200      	movs	r2, #0
    1ad0:	0028      	movs	r0, r5
    1ad2:	4b08      	ldr	r3, [pc, #32]	; (1af4 <rtc_calendar_init+0x90>)
    1ad4:	4798      	blx	r3
}
    1ad6:	b003      	add	sp, #12
    1ad8:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1ada:	2148      	movs	r1, #72	; 0x48
    1adc:	430b      	orrs	r3, r1
    1ade:	e7e6      	b.n	1aae <rtc_calendar_init+0x4a>
    1ae0:	40000400 	.word	0x40000400
    1ae4:	00002055 	.word	0x00002055
    1ae8:	00001fc9 	.word	0x00001fc9
    1aec:	000019d5 	.word	0x000019d5
    1af0:	200005a4 	.word	0x200005a4
    1af4:	00001a35 	.word	0x00001a35

00001af8 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1af8:	b510      	push	{r4, lr}
    1afa:	4b02      	ldr	r3, [pc, #8]	; (1b04 <SERCOM0_Handler+0xc>)
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	2000      	movs	r0, #0
    1b00:	4798      	blx	r3
    1b02:	bd10      	pop	{r4, pc}
    1b04:	200001a8 	.word	0x200001a8

00001b08 <SERCOM1_Handler>:
    1b08:	b510      	push	{r4, lr}
    1b0a:	4b02      	ldr	r3, [pc, #8]	; (1b14 <SERCOM1_Handler+0xc>)
    1b0c:	685b      	ldr	r3, [r3, #4]
    1b0e:	2001      	movs	r0, #1
    1b10:	4798      	blx	r3
    1b12:	bd10      	pop	{r4, pc}
    1b14:	200001a8 	.word	0x200001a8

00001b18 <SERCOM2_Handler>:
    1b18:	b510      	push	{r4, lr}
    1b1a:	4b02      	ldr	r3, [pc, #8]	; (1b24 <SERCOM2_Handler+0xc>)
    1b1c:	689b      	ldr	r3, [r3, #8]
    1b1e:	2002      	movs	r0, #2
    1b20:	4798      	blx	r3
    1b22:	bd10      	pop	{r4, pc}
    1b24:	200001a8 	.word	0x200001a8

00001b28 <SERCOM3_Handler>:
    1b28:	b510      	push	{r4, lr}
    1b2a:	4b02      	ldr	r3, [pc, #8]	; (1b34 <SERCOM3_Handler+0xc>)
    1b2c:	68db      	ldr	r3, [r3, #12]
    1b2e:	2003      	movs	r0, #3
    1b30:	4798      	blx	r3
    1b32:	bd10      	pop	{r4, pc}
    1b34:	200001a8 	.word	0x200001a8

00001b38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b3a:	490c      	ldr	r1, [pc, #48]	; (1b6c <system_clock_source_osc8m_set_config+0x34>)
    1b3c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b3e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b42:	7840      	ldrb	r0, [r0, #1]
    1b44:	2201      	movs	r2, #1
    1b46:	4010      	ands	r0, r2
    1b48:	0180      	lsls	r0, r0, #6
    1b4a:	2640      	movs	r6, #64	; 0x40
    1b4c:	43b3      	bics	r3, r6
    1b4e:	4303      	orrs	r3, r0
    1b50:	402a      	ands	r2, r5
    1b52:	01d2      	lsls	r2, r2, #7
    1b54:	2080      	movs	r0, #128	; 0x80
    1b56:	4383      	bics	r3, r0
    1b58:	4313      	orrs	r3, r2
    1b5a:	2203      	movs	r2, #3
    1b5c:	4022      	ands	r2, r4
    1b5e:	0212      	lsls	r2, r2, #8
    1b60:	4803      	ldr	r0, [pc, #12]	; (1b70 <system_clock_source_osc8m_set_config+0x38>)
    1b62:	4003      	ands	r3, r0
    1b64:	4313      	orrs	r3, r2
    1b66:	620b      	str	r3, [r1, #32]
}
    1b68:	bd70      	pop	{r4, r5, r6, pc}
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	40000800 	.word	0x40000800
    1b70:	fffffcff 	.word	0xfffffcff

00001b74 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b76:	46de      	mov	lr, fp
    1b78:	4657      	mov	r7, sl
    1b7a:	464e      	mov	r6, r9
    1b7c:	4645      	mov	r5, r8
    1b7e:	b5e0      	push	{r5, r6, r7, lr}
    1b80:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1b82:	4b26      	ldr	r3, [pc, #152]	; (1c1c <system_clock_source_xosc32k_set_config+0xa8>)
    1b84:	469b      	mov	fp, r3
    1b86:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1b88:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1b8a:	7800      	ldrb	r0, [r0, #0]
    1b8c:	4242      	negs	r2, r0
    1b8e:	4142      	adcs	r2, r0
    1b90:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1b92:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1b94:	78ca      	ldrb	r2, [r1, #3]
    1b96:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1b98:	790a      	ldrb	r2, [r1, #4]
    1b9a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1b9c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b9e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1ba0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1ba2:	688a      	ldr	r2, [r1, #8]
    1ba4:	491e      	ldr	r1, [pc, #120]	; (1c20 <system_clock_source_xosc32k_set_config+0xac>)
    1ba6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1ba8:	2101      	movs	r1, #1
    1baa:	464a      	mov	r2, r9
    1bac:	0092      	lsls	r2, r2, #2
    1bae:	4691      	mov	r9, r2
    1bb0:	2204      	movs	r2, #4
    1bb2:	4393      	bics	r3, r2
    1bb4:	464a      	mov	r2, r9
    1bb6:	4313      	orrs	r3, r2
    1bb8:	4642      	mov	r2, r8
    1bba:	400a      	ands	r2, r1
    1bbc:	00d2      	lsls	r2, r2, #3
    1bbe:	4690      	mov	r8, r2
    1bc0:	2208      	movs	r2, #8
    1bc2:	4393      	bics	r3, r2
    1bc4:	4642      	mov	r2, r8
    1bc6:	4313      	orrs	r3, r2
    1bc8:	4662      	mov	r2, ip
    1bca:	400a      	ands	r2, r1
    1bcc:	0112      	lsls	r2, r2, #4
    1bce:	4694      	mov	ip, r2
    1bd0:	2210      	movs	r2, #16
    1bd2:	4393      	bics	r3, r2
    1bd4:	4662      	mov	r2, ip
    1bd6:	4313      	orrs	r3, r2
    1bd8:	4008      	ands	r0, r1
    1bda:	0140      	lsls	r0, r0, #5
    1bdc:	2220      	movs	r2, #32
    1bde:	4393      	bics	r3, r2
    1be0:	4303      	orrs	r3, r0
    1be2:	400f      	ands	r7, r1
    1be4:	01bf      	lsls	r7, r7, #6
    1be6:	2040      	movs	r0, #64	; 0x40
    1be8:	4383      	bics	r3, r0
    1bea:	433b      	orrs	r3, r7
    1bec:	400e      	ands	r6, r1
    1bee:	01f6      	lsls	r6, r6, #7
    1bf0:	3040      	adds	r0, #64	; 0x40
    1bf2:	4383      	bics	r3, r0
    1bf4:	4333      	orrs	r3, r6
    1bf6:	3879      	subs	r0, #121	; 0x79
    1bf8:	4005      	ands	r5, r0
    1bfa:	022d      	lsls	r5, r5, #8
    1bfc:	4809      	ldr	r0, [pc, #36]	; (1c24 <system_clock_source_xosc32k_set_config+0xb0>)
    1bfe:	4003      	ands	r3, r0
    1c00:	432b      	orrs	r3, r5
    1c02:	4021      	ands	r1, r4
    1c04:	0309      	lsls	r1, r1, #12
    1c06:	4808      	ldr	r0, [pc, #32]	; (1c28 <system_clock_source_xosc32k_set_config+0xb4>)
    1c08:	4003      	ands	r3, r0
    1c0a:	430b      	orrs	r3, r1
    1c0c:	465a      	mov	r2, fp
    1c0e:	8293      	strh	r3, [r2, #20]
}
    1c10:	bc3c      	pop	{r2, r3, r4, r5}
    1c12:	4690      	mov	r8, r2
    1c14:	4699      	mov	r9, r3
    1c16:	46a2      	mov	sl, r4
    1c18:	46ab      	mov	fp, r5
    1c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c1c:	40000800 	.word	0x40000800
    1c20:	200001b8 	.word	0x200001b8
    1c24:	fffff8ff 	.word	0xfffff8ff
    1c28:	ffffefff 	.word	0xffffefff

00001c2c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c2c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c2e:	7a03      	ldrb	r3, [r0, #8]
    1c30:	069b      	lsls	r3, r3, #26
    1c32:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c34:	8942      	ldrh	r2, [r0, #10]
    1c36:	0592      	lsls	r2, r2, #22
    1c38:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c3a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1c3c:	4918      	ldr	r1, [pc, #96]	; (1ca0 <system_clock_source_dfll_set_config+0x74>)
    1c3e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1c40:	7983      	ldrb	r3, [r0, #6]
    1c42:	79c2      	ldrb	r2, [r0, #7]
    1c44:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1c46:	8842      	ldrh	r2, [r0, #2]
    1c48:	8884      	ldrh	r4, [r0, #4]
    1c4a:	4322      	orrs	r2, r4
    1c4c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1c4e:	7842      	ldrb	r2, [r0, #1]
    1c50:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1c52:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1c54:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1c56:	7803      	ldrb	r3, [r0, #0]
    1c58:	2b04      	cmp	r3, #4
    1c5a:	d011      	beq.n	1c80 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1c5c:	2b20      	cmp	r3, #32
    1c5e:	d10e      	bne.n	1c7e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c60:	7b03      	ldrb	r3, [r0, #12]
    1c62:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c64:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c66:	4313      	orrs	r3, r2
    1c68:	89c2      	ldrh	r2, [r0, #14]
    1c6a:	0412      	lsls	r2, r2, #16
    1c6c:	490d      	ldr	r1, [pc, #52]	; (1ca4 <system_clock_source_dfll_set_config+0x78>)
    1c6e:	400a      	ands	r2, r1
    1c70:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c72:	4a0b      	ldr	r2, [pc, #44]	; (1ca0 <system_clock_source_dfll_set_config+0x74>)
    1c74:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1c76:	6811      	ldr	r1, [r2, #0]
    1c78:	4b0b      	ldr	r3, [pc, #44]	; (1ca8 <system_clock_source_dfll_set_config+0x7c>)
    1c7a:	430b      	orrs	r3, r1
    1c7c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1c7e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c80:	7b03      	ldrb	r3, [r0, #12]
    1c82:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c84:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c86:	4313      	orrs	r3, r2
    1c88:	89c2      	ldrh	r2, [r0, #14]
    1c8a:	0412      	lsls	r2, r2, #16
    1c8c:	4905      	ldr	r1, [pc, #20]	; (1ca4 <system_clock_source_dfll_set_config+0x78>)
    1c8e:	400a      	ands	r2, r1
    1c90:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c92:	4a03      	ldr	r2, [pc, #12]	; (1ca0 <system_clock_source_dfll_set_config+0x74>)
    1c94:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c96:	6813      	ldr	r3, [r2, #0]
    1c98:	2104      	movs	r1, #4
    1c9a:	430b      	orrs	r3, r1
    1c9c:	6013      	str	r3, [r2, #0]
    1c9e:	e7ee      	b.n	1c7e <system_clock_source_dfll_set_config+0x52>
    1ca0:	200001b8 	.word	0x200001b8
    1ca4:	03ff0000 	.word	0x03ff0000
    1ca8:	00000424 	.word	0x00000424

00001cac <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1cac:	2808      	cmp	r0, #8
    1cae:	d803      	bhi.n	1cb8 <system_clock_source_enable+0xc>
    1cb0:	0080      	lsls	r0, r0, #2
    1cb2:	4b25      	ldr	r3, [pc, #148]	; (1d48 <system_clock_source_enable+0x9c>)
    1cb4:	581b      	ldr	r3, [r3, r0]
    1cb6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1cb8:	2017      	movs	r0, #23
    1cba:	e044      	b.n	1d46 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1cbc:	4a23      	ldr	r2, [pc, #140]	; (1d4c <system_clock_source_enable+0xa0>)
    1cbe:	6a13      	ldr	r3, [r2, #32]
    1cc0:	2102      	movs	r1, #2
    1cc2:	430b      	orrs	r3, r1
    1cc4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1cc6:	2000      	movs	r0, #0
    1cc8:	e03d      	b.n	1d46 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1cca:	4a20      	ldr	r2, [pc, #128]	; (1d4c <system_clock_source_enable+0xa0>)
    1ccc:	6993      	ldr	r3, [r2, #24]
    1cce:	2102      	movs	r1, #2
    1cd0:	430b      	orrs	r3, r1
    1cd2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1cd4:	2000      	movs	r0, #0
		break;
    1cd6:	e036      	b.n	1d46 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1cd8:	4a1c      	ldr	r2, [pc, #112]	; (1d4c <system_clock_source_enable+0xa0>)
    1cda:	8a13      	ldrh	r3, [r2, #16]
    1cdc:	2102      	movs	r1, #2
    1cde:	430b      	orrs	r3, r1
    1ce0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1ce2:	2000      	movs	r0, #0
		break;
    1ce4:	e02f      	b.n	1d46 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1ce6:	4a19      	ldr	r2, [pc, #100]	; (1d4c <system_clock_source_enable+0xa0>)
    1ce8:	8a93      	ldrh	r3, [r2, #20]
    1cea:	2102      	movs	r1, #2
    1cec:	430b      	orrs	r3, r1
    1cee:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1cf0:	2000      	movs	r0, #0
		break;
    1cf2:	e028      	b.n	1d46 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1cf4:	4916      	ldr	r1, [pc, #88]	; (1d50 <system_clock_source_enable+0xa4>)
    1cf6:	680b      	ldr	r3, [r1, #0]
    1cf8:	2202      	movs	r2, #2
    1cfa:	4313      	orrs	r3, r2
    1cfc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1cfe:	4b13      	ldr	r3, [pc, #76]	; (1d4c <system_clock_source_enable+0xa0>)
    1d00:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d02:	0019      	movs	r1, r3
    1d04:	320e      	adds	r2, #14
    1d06:	68cb      	ldr	r3, [r1, #12]
    1d08:	421a      	tst	r2, r3
    1d0a:	d0fc      	beq.n	1d06 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d0c:	4a10      	ldr	r2, [pc, #64]	; (1d50 <system_clock_source_enable+0xa4>)
    1d0e:	6891      	ldr	r1, [r2, #8]
    1d10:	4b0e      	ldr	r3, [pc, #56]	; (1d4c <system_clock_source_enable+0xa0>)
    1d12:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d14:	6852      	ldr	r2, [r2, #4]
    1d16:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1d18:	2200      	movs	r2, #0
    1d1a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d1c:	0019      	movs	r1, r3
    1d1e:	3210      	adds	r2, #16
    1d20:	68cb      	ldr	r3, [r1, #12]
    1d22:	421a      	tst	r2, r3
    1d24:	d0fc      	beq.n	1d20 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d26:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <system_clock_source_enable+0xa4>)
    1d28:	681b      	ldr	r3, [r3, #0]
    1d2a:	b29b      	uxth	r3, r3
    1d2c:	4a07      	ldr	r2, [pc, #28]	; (1d4c <system_clock_source_enable+0xa0>)
    1d2e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d30:	2000      	movs	r0, #0
    1d32:	e008      	b.n	1d46 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d34:	4905      	ldr	r1, [pc, #20]	; (1d4c <system_clock_source_enable+0xa0>)
    1d36:	2244      	movs	r2, #68	; 0x44
    1d38:	5c8b      	ldrb	r3, [r1, r2]
    1d3a:	2002      	movs	r0, #2
    1d3c:	4303      	orrs	r3, r0
    1d3e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1d40:	2000      	movs	r0, #0
		break;
    1d42:	e000      	b.n	1d46 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1d44:	2000      	movs	r0, #0
}
    1d46:	4770      	bx	lr
    1d48:	000060b4 	.word	0x000060b4
    1d4c:	40000800 	.word	0x40000800
    1d50:	200001b8 	.word	0x200001b8

00001d54 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d56:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1d58:	22c2      	movs	r2, #194	; 0xc2
    1d5a:	00d2      	lsls	r2, r2, #3
    1d5c:	4b45      	ldr	r3, [pc, #276]	; (1e74 <system_clock_init+0x120>)
    1d5e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d60:	4a45      	ldr	r2, [pc, #276]	; (1e78 <system_clock_init+0x124>)
    1d62:	6853      	ldr	r3, [r2, #4]
    1d64:	211e      	movs	r1, #30
    1d66:	438b      	bics	r3, r1
    1d68:	391a      	subs	r1, #26
    1d6a:	430b      	orrs	r3, r1
    1d6c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1d6e:	2202      	movs	r2, #2
    1d70:	ab01      	add	r3, sp, #4
    1d72:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d74:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1d76:	4d41      	ldr	r5, [pc, #260]	; (1e7c <system_clock_init+0x128>)
    1d78:	b2e0      	uxtb	r0, r4
    1d7a:	a901      	add	r1, sp, #4
    1d7c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d7e:	3401      	adds	r4, #1
    1d80:	2c25      	cmp	r4, #37	; 0x25
    1d82:	d1f9      	bne.n	1d78 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1d84:	a80a      	add	r0, sp, #40	; 0x28
    1d86:	2300      	movs	r3, #0
    1d88:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1d8a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1d8c:	2280      	movs	r2, #128	; 0x80
    1d8e:	0212      	lsls	r2, r2, #8
    1d90:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1d92:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1d94:	2201      	movs	r2, #1
    1d96:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    1d98:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1d9a:	2106      	movs	r1, #6
    1d9c:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1d9e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    1da0:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1da2:	4b37      	ldr	r3, [pc, #220]	; (1e80 <system_clock_init+0x12c>)
    1da4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1da6:	2005      	movs	r0, #5
    1da8:	4b36      	ldr	r3, [pc, #216]	; (1e84 <system_clock_init+0x130>)
    1daa:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1dac:	4931      	ldr	r1, [pc, #196]	; (1e74 <system_clock_init+0x120>)
    1dae:	2202      	movs	r2, #2
    1db0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1db2:	421a      	tst	r2, r3
    1db4:	d0fc      	beq.n	1db0 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1db6:	ab05      	add	r3, sp, #20
    1db8:	2100      	movs	r1, #0
    1dba:	2200      	movs	r2, #0
    1dbc:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1dbe:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1dc0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1dc2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1dc4:	313f      	adds	r1, #63	; 0x3f
    1dc6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1dc8:	393b      	subs	r1, #59	; 0x3b
    1dca:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1dcc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1dce:	4b2e      	ldr	r3, [pc, #184]	; (1e88 <system_clock_init+0x134>)
    1dd0:	681b      	ldr	r3, [r3, #0]
    1dd2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1dd4:	2b3f      	cmp	r3, #63	; 0x3f
    1dd6:	d04b      	beq.n	1e70 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1dd8:	a805      	add	r0, sp, #20
    1dda:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1ddc:	23b7      	movs	r3, #183	; 0xb7
    1dde:	00db      	lsls	r3, r3, #3
    1de0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1de2:	2303      	movs	r3, #3
    1de4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1de6:	331c      	adds	r3, #28
    1de8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1dea:	4b28      	ldr	r3, [pc, #160]	; (1e8c <system_clock_init+0x138>)
    1dec:	4798      	blx	r3
	config->on_demand       = true;
    1dee:	a804      	add	r0, sp, #16
    1df0:	2501      	movs	r5, #1
    1df2:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1df4:	2600      	movs	r6, #0
    1df6:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1df8:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1dfa:	4b25      	ldr	r3, [pc, #148]	; (1e90 <system_clock_init+0x13c>)
    1dfc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1dfe:	2006      	movs	r0, #6
    1e00:	4f20      	ldr	r7, [pc, #128]	; (1e84 <system_clock_init+0x130>)
    1e02:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e04:	4b23      	ldr	r3, [pc, #140]	; (1e94 <system_clock_init+0x140>)
    1e06:	4798      	blx	r3
	config->division_factor    = 1;
    1e08:	ac01      	add	r4, sp, #4
    1e0a:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    1e0c:	7066      	strb	r6, [r4, #1]
	config->run_in_standby     = false;
    1e0e:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    1e10:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e12:	2305      	movs	r3, #5
    1e14:	7023      	strb	r3, [r4, #0]
    1e16:	0021      	movs	r1, r4
    1e18:	2001      	movs	r0, #1
    1e1a:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <system_clock_init+0x144>)
    1e1c:	4798      	blx	r3
    1e1e:	2001      	movs	r0, #1
    1e20:	4b1e      	ldr	r3, [pc, #120]	; (1e9c <system_clock_init+0x148>)
    1e22:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1e24:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1e26:	0021      	movs	r1, r4
    1e28:	2000      	movs	r0, #0
    1e2a:	4b14      	ldr	r3, [pc, #80]	; (1e7c <system_clock_init+0x128>)
    1e2c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1e2e:	2000      	movs	r0, #0
    1e30:	4b1b      	ldr	r3, [pc, #108]	; (1ea0 <system_clock_init+0x14c>)
    1e32:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1e34:	2007      	movs	r0, #7
    1e36:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e38:	490e      	ldr	r1, [pc, #56]	; (1e74 <system_clock_init+0x120>)
    1e3a:	22d0      	movs	r2, #208	; 0xd0
    1e3c:	68cb      	ldr	r3, [r1, #12]
    1e3e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1e40:	2bd0      	cmp	r3, #208	; 0xd0
    1e42:	d1fb      	bne.n	1e3c <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    1e44:	4a17      	ldr	r2, [pc, #92]	; (1ea4 <system_clock_init+0x150>)
    1e46:	2300      	movs	r3, #0
    1e48:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1e4a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1e4c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1e4e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1e50:	a901      	add	r1, sp, #4
    1e52:	2201      	movs	r2, #1
    1e54:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1e56:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    1e58:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e5a:	3307      	adds	r3, #7
    1e5c:	700b      	strb	r3, [r1, #0]
    1e5e:	720a      	strb	r2, [r1, #8]
    1e60:	2000      	movs	r0, #0
    1e62:	4b0d      	ldr	r3, [pc, #52]	; (1e98 <system_clock_init+0x144>)
    1e64:	4798      	blx	r3
    1e66:	2000      	movs	r0, #0
    1e68:	4b0c      	ldr	r3, [pc, #48]	; (1e9c <system_clock_init+0x148>)
    1e6a:	4798      	blx	r3
#endif
}
    1e6c:	b00f      	add	sp, #60	; 0x3c
    1e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1e70:	3b20      	subs	r3, #32
    1e72:	e7b1      	b.n	1dd8 <system_clock_init+0x84>
    1e74:	40000800 	.word	0x40000800
    1e78:	41004000 	.word	0x41004000
    1e7c:	00002055 	.word	0x00002055
    1e80:	00001b75 	.word	0x00001b75
    1e84:	00001cad 	.word	0x00001cad
    1e88:	00806024 	.word	0x00806024
    1e8c:	00001c2d 	.word	0x00001c2d
    1e90:	00001b39 	.word	0x00001b39
    1e94:	00001ea9 	.word	0x00001ea9
    1e98:	00001ecd 	.word	0x00001ecd
    1e9c:	00001f85 	.word	0x00001f85
    1ea0:	00001fc9 	.word	0x00001fc9
    1ea4:	40000400 	.word	0x40000400

00001ea8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1ea8:	4a06      	ldr	r2, [pc, #24]	; (1ec4 <system_gclk_init+0x1c>)
    1eaa:	6993      	ldr	r3, [r2, #24]
    1eac:	2108      	movs	r1, #8
    1eae:	430b      	orrs	r3, r1
    1eb0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1eb2:	2201      	movs	r2, #1
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <system_gclk_init+0x20>)
    1eb6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1eb8:	0019      	movs	r1, r3
    1eba:	780b      	ldrb	r3, [r1, #0]
    1ebc:	4213      	tst	r3, r2
    1ebe:	d1fc      	bne.n	1eba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1ec0:	4770      	bx	lr
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	40000400 	.word	0x40000400
    1ec8:	40000c00 	.word	0x40000c00

00001ecc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1ecc:	b570      	push	{r4, r5, r6, lr}
    1ece:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ed0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ed2:	780d      	ldrb	r5, [r1, #0]
    1ed4:	022d      	lsls	r5, r5, #8
    1ed6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ed8:	784b      	ldrb	r3, [r1, #1]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d002      	beq.n	1ee4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1ede:	2380      	movs	r3, #128	; 0x80
    1ee0:	02db      	lsls	r3, r3, #11
    1ee2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1ee4:	7a4b      	ldrb	r3, [r1, #9]
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d002      	beq.n	1ef0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1eea:	2380      	movs	r3, #128	; 0x80
    1eec:	031b      	lsls	r3, r3, #12
    1eee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ef0:	6848      	ldr	r0, [r1, #4]
    1ef2:	2801      	cmp	r0, #1
    1ef4:	d910      	bls.n	1f18 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ef6:	1e43      	subs	r3, r0, #1
    1ef8:	4218      	tst	r0, r3
    1efa:	d134      	bne.n	1f66 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1efc:	2802      	cmp	r0, #2
    1efe:	d930      	bls.n	1f62 <system_gclk_gen_set_config+0x96>
    1f00:	2302      	movs	r3, #2
    1f02:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1f04:	3201      	adds	r2, #1
						mask <<= 1) {
    1f06:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1f08:	4298      	cmp	r0, r3
    1f0a:	d8fb      	bhi.n	1f04 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1f0c:	0212      	lsls	r2, r2, #8
    1f0e:	4332      	orrs	r2, r6
    1f10:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1f12:	2380      	movs	r3, #128	; 0x80
    1f14:	035b      	lsls	r3, r3, #13
    1f16:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f18:	7a0b      	ldrb	r3, [r1, #8]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d002      	beq.n	1f24 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f1e:	2380      	movs	r3, #128	; 0x80
    1f20:	039b      	lsls	r3, r3, #14
    1f22:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f24:	4a13      	ldr	r2, [pc, #76]	; (1f74 <system_gclk_gen_set_config+0xa8>)
    1f26:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1f28:	b25b      	sxtb	r3, r3
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	dbfb      	blt.n	1f26 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1f2e:	4b12      	ldr	r3, [pc, #72]	; (1f78 <system_gclk_gen_set_config+0xac>)
    1f30:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f32:	4b12      	ldr	r3, [pc, #72]	; (1f7c <system_gclk_gen_set_config+0xb0>)
    1f34:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f36:	4a0f      	ldr	r2, [pc, #60]	; (1f74 <system_gclk_gen_set_config+0xa8>)
    1f38:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1f3a:	b25b      	sxtb	r3, r3
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	dbfb      	blt.n	1f38 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f40:	4b0c      	ldr	r3, [pc, #48]	; (1f74 <system_gclk_gen_set_config+0xa8>)
    1f42:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f44:	001a      	movs	r2, r3
    1f46:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1f48:	b25b      	sxtb	r3, r3
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	dbfb      	blt.n	1f46 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f4e:	4a09      	ldr	r2, [pc, #36]	; (1f74 <system_gclk_gen_set_config+0xa8>)
    1f50:	6853      	ldr	r3, [r2, #4]
    1f52:	2180      	movs	r1, #128	; 0x80
    1f54:	0249      	lsls	r1, r1, #9
    1f56:	400b      	ands	r3, r1
    1f58:	431d      	orrs	r5, r3
    1f5a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1f5c:	4b08      	ldr	r3, [pc, #32]	; (1f80 <system_gclk_gen_set_config+0xb4>)
    1f5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f60:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1f62:	2200      	movs	r2, #0
    1f64:	e7d2      	b.n	1f0c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1f66:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1f68:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1f6a:	2380      	movs	r3, #128	; 0x80
    1f6c:	029b      	lsls	r3, r3, #10
    1f6e:	431d      	orrs	r5, r3
    1f70:	e7d2      	b.n	1f18 <system_gclk_gen_set_config+0x4c>
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	40000c00 	.word	0x40000c00
    1f78:	000013c1 	.word	0x000013c1
    1f7c:	40000c08 	.word	0x40000c08
    1f80:	00001401 	.word	0x00001401

00001f84 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f84:	b510      	push	{r4, lr}
    1f86:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f88:	4a0b      	ldr	r2, [pc, #44]	; (1fb8 <system_gclk_gen_enable+0x34>)
    1f8a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f8c:	b25b      	sxtb	r3, r3
    1f8e:	2b00      	cmp	r3, #0
    1f90:	dbfb      	blt.n	1f8a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1f92:	4b0a      	ldr	r3, [pc, #40]	; (1fbc <system_gclk_gen_enable+0x38>)
    1f94:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f96:	4b0a      	ldr	r3, [pc, #40]	; (1fc0 <system_gclk_gen_enable+0x3c>)
    1f98:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f9a:	4a07      	ldr	r2, [pc, #28]	; (1fb8 <system_gclk_gen_enable+0x34>)
    1f9c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f9e:	b25b      	sxtb	r3, r3
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	dbfb      	blt.n	1f9c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1fa4:	4a04      	ldr	r2, [pc, #16]	; (1fb8 <system_gclk_gen_enable+0x34>)
    1fa6:	6851      	ldr	r1, [r2, #4]
    1fa8:	2380      	movs	r3, #128	; 0x80
    1faa:	025b      	lsls	r3, r3, #9
    1fac:	430b      	orrs	r3, r1
    1fae:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1fb0:	4b04      	ldr	r3, [pc, #16]	; (1fc4 <system_gclk_gen_enable+0x40>)
    1fb2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	40000c00 	.word	0x40000c00
    1fbc:	000013c1 	.word	0x000013c1
    1fc0:	40000c04 	.word	0x40000c04
    1fc4:	00001401 	.word	0x00001401

00001fc8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1fc8:	b510      	push	{r4, lr}
    1fca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1fcc:	4b06      	ldr	r3, [pc, #24]	; (1fe8 <system_gclk_chan_enable+0x20>)
    1fce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <system_gclk_chan_enable+0x24>)
    1fd2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1fd4:	4a06      	ldr	r2, [pc, #24]	; (1ff0 <system_gclk_chan_enable+0x28>)
    1fd6:	8853      	ldrh	r3, [r2, #2]
    1fd8:	2180      	movs	r1, #128	; 0x80
    1fda:	01c9      	lsls	r1, r1, #7
    1fdc:	430b      	orrs	r3, r1
    1fde:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <system_gclk_chan_enable+0x2c>)
    1fe2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fe4:	bd10      	pop	{r4, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	000013c1 	.word	0x000013c1
    1fec:	40000c02 	.word	0x40000c02
    1ff0:	40000c00 	.word	0x40000c00
    1ff4:	00001401 	.word	0x00001401

00001ff8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ff8:	b510      	push	{r4, lr}
    1ffa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ffc:	4b0f      	ldr	r3, [pc, #60]	; (203c <system_gclk_chan_disable+0x44>)
    1ffe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2000:	4b0f      	ldr	r3, [pc, #60]	; (2040 <system_gclk_chan_disable+0x48>)
    2002:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2004:	4a0f      	ldr	r2, [pc, #60]	; (2044 <system_gclk_chan_disable+0x4c>)
    2006:	8853      	ldrh	r3, [r2, #2]
    2008:	051b      	lsls	r3, r3, #20
    200a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    200c:	8853      	ldrh	r3, [r2, #2]
    200e:	490e      	ldr	r1, [pc, #56]	; (2048 <system_gclk_chan_disable+0x50>)
    2010:	400b      	ands	r3, r1
    2012:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2014:	8853      	ldrh	r3, [r2, #2]
    2016:	490d      	ldr	r1, [pc, #52]	; (204c <system_gclk_chan_disable+0x54>)
    2018:	400b      	ands	r3, r1
    201a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    201c:	0011      	movs	r1, r2
    201e:	2280      	movs	r2, #128	; 0x80
    2020:	01d2      	lsls	r2, r2, #7
    2022:	884b      	ldrh	r3, [r1, #2]
    2024:	4213      	tst	r3, r2
    2026:	d1fc      	bne.n	2022 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2028:	4906      	ldr	r1, [pc, #24]	; (2044 <system_gclk_chan_disable+0x4c>)
    202a:	884a      	ldrh	r2, [r1, #2]
    202c:	0203      	lsls	r3, r0, #8
    202e:	4806      	ldr	r0, [pc, #24]	; (2048 <system_gclk_chan_disable+0x50>)
    2030:	4002      	ands	r2, r0
    2032:	4313      	orrs	r3, r2
    2034:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2036:	4b06      	ldr	r3, [pc, #24]	; (2050 <system_gclk_chan_disable+0x58>)
    2038:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    203a:	bd10      	pop	{r4, pc}
    203c:	000013c1 	.word	0x000013c1
    2040:	40000c02 	.word	0x40000c02
    2044:	40000c00 	.word	0x40000c00
    2048:	fffff0ff 	.word	0xfffff0ff
    204c:	ffffbfff 	.word	0xffffbfff
    2050:	00001401 	.word	0x00001401

00002054 <system_gclk_chan_set_config>:
{
    2054:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2056:	780c      	ldrb	r4, [r1, #0]
    2058:	0224      	lsls	r4, r4, #8
    205a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    205c:	4b02      	ldr	r3, [pc, #8]	; (2068 <system_gclk_chan_set_config+0x14>)
    205e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2060:	b2a4      	uxth	r4, r4
    2062:	4b02      	ldr	r3, [pc, #8]	; (206c <system_gclk_chan_set_config+0x18>)
    2064:	805c      	strh	r4, [r3, #2]
}
    2066:	bd10      	pop	{r4, pc}
    2068:	00001ff9 	.word	0x00001ff9
    206c:	40000c00 	.word	0x40000c00

00002070 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2070:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2072:	78d3      	ldrb	r3, [r2, #3]
    2074:	2b00      	cmp	r3, #0
    2076:	d135      	bne.n	20e4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2078:	7813      	ldrb	r3, [r2, #0]
    207a:	2b80      	cmp	r3, #128	; 0x80
    207c:	d029      	beq.n	20d2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    207e:	061b      	lsls	r3, r3, #24
    2080:	2480      	movs	r4, #128	; 0x80
    2082:	0264      	lsls	r4, r4, #9
    2084:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2086:	7854      	ldrb	r4, [r2, #1]
    2088:	2502      	movs	r5, #2
    208a:	43ac      	bics	r4, r5
    208c:	d106      	bne.n	209c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    208e:	7894      	ldrb	r4, [r2, #2]
    2090:	2c00      	cmp	r4, #0
    2092:	d120      	bne.n	20d6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2094:	2480      	movs	r4, #128	; 0x80
    2096:	02a4      	lsls	r4, r4, #10
    2098:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    209a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    209c:	7854      	ldrb	r4, [r2, #1]
    209e:	3c01      	subs	r4, #1
    20a0:	2c01      	cmp	r4, #1
    20a2:	d91c      	bls.n	20de <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    20a4:	040d      	lsls	r5, r1, #16
    20a6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    20a8:	24a0      	movs	r4, #160	; 0xa0
    20aa:	05e4      	lsls	r4, r4, #23
    20ac:	432c      	orrs	r4, r5
    20ae:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20b0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    20b2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    20b4:	24d0      	movs	r4, #208	; 0xd0
    20b6:	0624      	lsls	r4, r4, #24
    20b8:	432c      	orrs	r4, r5
    20ba:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20bc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    20be:	78d4      	ldrb	r4, [r2, #3]
    20c0:	2c00      	cmp	r4, #0
    20c2:	d122      	bne.n	210a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    20c4:	035b      	lsls	r3, r3, #13
    20c6:	d51c      	bpl.n	2102 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    20c8:	7893      	ldrb	r3, [r2, #2]
    20ca:	2b01      	cmp	r3, #1
    20cc:	d01e      	beq.n	210c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    20ce:	6141      	str	r1, [r0, #20]
    20d0:	e017      	b.n	2102 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    20d2:	2300      	movs	r3, #0
    20d4:	e7d7      	b.n	2086 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    20d6:	24c0      	movs	r4, #192	; 0xc0
    20d8:	02e4      	lsls	r4, r4, #11
    20da:	4323      	orrs	r3, r4
    20dc:	e7dd      	b.n	209a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    20de:	4c0d      	ldr	r4, [pc, #52]	; (2114 <_system_pinmux_config+0xa4>)
    20e0:	4023      	ands	r3, r4
    20e2:	e7df      	b.n	20a4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    20e4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    20e6:	040c      	lsls	r4, r1, #16
    20e8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    20ea:	23a0      	movs	r3, #160	; 0xa0
    20ec:	05db      	lsls	r3, r3, #23
    20ee:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20f0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    20f2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    20f4:	23d0      	movs	r3, #208	; 0xd0
    20f6:	061b      	lsls	r3, r3, #24
    20f8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20fa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    20fc:	78d3      	ldrb	r3, [r2, #3]
    20fe:	2b00      	cmp	r3, #0
    2100:	d103      	bne.n	210a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2102:	7853      	ldrb	r3, [r2, #1]
    2104:	3b01      	subs	r3, #1
    2106:	2b01      	cmp	r3, #1
    2108:	d902      	bls.n	2110 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    210a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    210c:	6181      	str	r1, [r0, #24]
    210e:	e7f8      	b.n	2102 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2110:	6081      	str	r1, [r0, #8]
}
    2112:	e7fa      	b.n	210a <_system_pinmux_config+0x9a>
    2114:	fffbffff 	.word	0xfffbffff

00002118 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2118:	b510      	push	{r4, lr}
    211a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    211c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    211e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2120:	2900      	cmp	r1, #0
    2122:	d104      	bne.n	212e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2124:	0943      	lsrs	r3, r0, #5
    2126:	01db      	lsls	r3, r3, #7
    2128:	4905      	ldr	r1, [pc, #20]	; (2140 <system_pinmux_pin_set_config+0x28>)
    212a:	468c      	mov	ip, r1
    212c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    212e:	241f      	movs	r4, #31
    2130:	4020      	ands	r0, r4
    2132:	2101      	movs	r1, #1
    2134:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2136:	0018      	movs	r0, r3
    2138:	4b02      	ldr	r3, [pc, #8]	; (2144 <system_pinmux_pin_set_config+0x2c>)
    213a:	4798      	blx	r3
}
    213c:	bd10      	pop	{r4, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	41004400 	.word	0x41004400
    2144:	00002071 	.word	0x00002071

00002148 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2148:	4770      	bx	lr
	...

0000214c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    214c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    214e:	4b05      	ldr	r3, [pc, #20]	; (2164 <system_init+0x18>)
    2150:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2152:	4b05      	ldr	r3, [pc, #20]	; (2168 <system_init+0x1c>)
    2154:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2156:	4b05      	ldr	r3, [pc, #20]	; (216c <system_init+0x20>)
    2158:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    215a:	4b05      	ldr	r3, [pc, #20]	; (2170 <system_init+0x24>)
    215c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <system_init+0x28>)
    2160:	4798      	blx	r3
}
    2162:	bd10      	pop	{r4, pc}
    2164:	00001d55 	.word	0x00001d55
    2168:	00001431 	.word	0x00001431
    216c:	00002149 	.word	0x00002149
    2170:	000015f1 	.word	0x000015f1
    2174:	00002149 	.word	0x00002149

00002178 <usb_id_handler>:

/**
 * USB ID pin change handler
 */
static void usb_id_handler(void)
{
    2178:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_ID_EIC_LINE,
    217a:	2100      	movs	r1, #0
    217c:	2003      	movs	r0, #3
    217e:	4b08      	ldr	r3, [pc, #32]	; (21a0 <usb_id_handler+0x28>)
    2180:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    2182:	4b08      	ldr	r3, [pc, #32]	; (21a4 <usb_id_handler+0x2c>)
    2184:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
	if (_usb_is_id_device()) {
    2186:	071b      	lsls	r3, r3, #28
    2188:	d406      	bmi.n	2198 <usb_id_handler+0x20>
		UHC_MODE_CHANGE(false);
		udc_start();
	} else {
		udc_stop();
		UHC_MODE_CHANGE(true);
		uhc_start();
    218a:	4b07      	ldr	r3, [pc, #28]	; (21a8 <usb_id_handler+0x30>)
    218c:	4798      	blx	r3
	}
	extint_chan_enable_callback(USB_ID_EIC_LINE,
    218e:	2100      	movs	r1, #0
    2190:	2003      	movs	r0, #3
    2192:	4b06      	ldr	r3, [pc, #24]	; (21ac <usb_id_handler+0x34>)
    2194:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    2196:	bd10      	pop	{r4, pc}
		uhc_stop(false);
    2198:	2000      	movs	r0, #0
    219a:	4b05      	ldr	r3, [pc, #20]	; (21b0 <usb_id_handler+0x38>)
    219c:	4798      	blx	r3
    219e:	e7f6      	b.n	218e <usb_id_handler+0x16>
    21a0:	00001565 	.word	0x00001565
    21a4:	41004400 	.word	0x41004400
    21a8:	00001395 	.word	0x00001395
    21ac:	00001545 	.word	0x00001545
    21b0:	000013b5 	.word	0x000013b5

000021b4 <usb_dual_enable>:
 * \brief Initialize the USB peripheral and set right role according to ID pin
 *
 * \return \c true if the ID pin management has been started, otherwise \c false.
 */
bool usb_dual_enable(void)
{
    21b4:	b530      	push	{r4, r5, lr}
    21b6:	b085      	sub	sp, #20
	if (_initialized) {
    21b8:	4b1a      	ldr	r3, [pc, #104]	; (2224 <usb_dual_enable+0x70>)
    21ba:	781b      	ldrb	r3, [r3, #0]
		return false; // Dual role already initialized
    21bc:	2000      	movs	r0, #0
	if (_initialized) {
    21be:	2b00      	cmp	r3, #0
    21c0:	d001      	beq.n	21c6 <usb_dual_enable+0x12>
	 */
	return true; // ID pin management has been enabled
#else
	return false; // ID pin management has not been enabled
#endif
}
    21c2:	b005      	add	sp, #20
    21c4:	bd30      	pop	{r4, r5, pc}
	_initialized = true;
    21c6:	2401      	movs	r4, #1
    21c8:	4b16      	ldr	r3, [pc, #88]	; (2224 <usb_dual_enable+0x70>)
    21ca:	701c      	strb	r4, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    21cc:	a903      	add	r1, sp, #12
    21ce:	2500      	movs	r5, #0
    21d0:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    21d2:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    21d4:	708d      	strb	r5, [r1, #2]
	port_pin_set_config(USB_ID_PIN, &pin_conf);
    21d6:	3003      	adds	r0, #3
    21d8:	4b13      	ldr	r3, [pc, #76]	; (2228 <usb_dual_enable+0x74>)
    21da:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    21dc:	4668      	mov	r0, sp
    21de:	4b13      	ldr	r3, [pc, #76]	; (222c <usb_dual_enable+0x78>)
    21e0:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_ID_PIN;
    21e2:	2303      	movs	r3, #3
    21e4:	9300      	str	r3, [sp, #0]
	eint_chan_conf.gpio_pin_mux       = USB_ID_EIC_MUX;
    21e6:	9501      	str	r5, [sp, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    21e8:	466a      	mov	r2, sp
    21ea:	72d3      	strb	r3, [r2, #11]
	eint_chan_conf.filter_input_signal = true;
    21ec:	7294      	strb	r4, [r2, #10]
	extint_chan_disable_callback(USB_ID_EIC_LINE,
    21ee:	2100      	movs	r1, #0
    21f0:	2003      	movs	r0, #3
    21f2:	4b0f      	ldr	r3, [pc, #60]	; (2230 <usb_dual_enable+0x7c>)
    21f4:	4798      	blx	r3
	extint_chan_set_config(USB_ID_EIC_LINE, &eint_chan_conf);
    21f6:	4669      	mov	r1, sp
    21f8:	2003      	movs	r0, #3
    21fa:	4b0e      	ldr	r3, [pc, #56]	; (2234 <usb_dual_enable+0x80>)
    21fc:	4798      	blx	r3
	extint_register_callback(usb_id_handler,
    21fe:	2200      	movs	r2, #0
    2200:	2103      	movs	r1, #3
    2202:	480d      	ldr	r0, [pc, #52]	; (2238 <usb_dual_enable+0x84>)
    2204:	4b0d      	ldr	r3, [pc, #52]	; (223c <usb_dual_enable+0x88>)
    2206:	4798      	blx	r3
	extint_chan_enable_callback(USB_ID_EIC_LINE,
    2208:	2100      	movs	r1, #0
    220a:	2003      	movs	r0, #3
    220c:	4b0c      	ldr	r3, [pc, #48]	; (2240 <usb_dual_enable+0x8c>)
    220e:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    2210:	4b0c      	ldr	r3, [pc, #48]	; (2244 <usb_dual_enable+0x90>)
    2212:	6a1b      	ldr	r3, [r3, #32]
	return true; // ID pin management has been enabled
    2214:	2001      	movs	r0, #1
	if (_usb_is_id_device()) {
    2216:	071b      	lsls	r3, r3, #28
    2218:	d4d3      	bmi.n	21c2 <usb_dual_enable+0xe>
		uhc_start();
    221a:	4b0b      	ldr	r3, [pc, #44]	; (2248 <usb_dual_enable+0x94>)
    221c:	4798      	blx	r3
	return true; // ID pin management has been enabled
    221e:	2001      	movs	r0, #1
    2220:	e7cf      	b.n	21c2 <usb_dual_enable+0xe>
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	200001d0 	.word	0x200001d0
    2228:	00001981 	.word	0x00001981
    222c:	0000165d 	.word	0x0000165d
    2230:	00001565 	.word	0x00001565
    2234:	00001671 	.word	0x00001671
    2238:	00002179 	.word	0x00002179
    223c:	00001519 	.word	0x00001519
    2240:	00001545 	.word	0x00001545
    2244:	41004400 	.word	0x41004400
    2248:	00001395 	.word	0x00001395

0000224c <usb_dual_disable>:

/**
 * \brief Deinitialize the dual role driver
 */
void usb_dual_disable(void)
{
    224c:	b510      	push	{r4, lr}
	if (!_initialized) {
    224e:	4b06      	ldr	r3, [pc, #24]	; (2268 <usb_dual_disable+0x1c>)
    2250:	781b      	ldrb	r3, [r3, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d100      	bne.n	2258 <usb_dual_disable+0xc>

#if USB_ID_EIC
	extint_chan_disable_callback(USB_ID_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
#endif
}
    2256:	bd10      	pop	{r4, pc}
	_initialized = false;
    2258:	2200      	movs	r2, #0
    225a:	4b03      	ldr	r3, [pc, #12]	; (2268 <usb_dual_disable+0x1c>)
    225c:	701a      	strb	r2, [r3, #0]
	extint_chan_disable_callback(USB_ID_EIC_LINE,
    225e:	2100      	movs	r1, #0
    2260:	2003      	movs	r0, #3
    2262:	4b02      	ldr	r3, [pc, #8]	; (226c <usb_dual_disable+0x20>)
    2264:	4798      	blx	r3
    2266:	e7f6      	b.n	2256 <usb_dual_disable+0xa>
    2268:	200001d0 	.word	0x200001d0
    226c:	00001565 	.word	0x00001565

00002270 <uhd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void uhd_sleep_mode(enum uhd_usb_state_enum new_state)
{
    2270:	b510      	push	{r4, lr}
    2272:	b082      	sub	sp, #8
	if (uhd_state == new_state) {
    2274:	4b26      	ldr	r3, [pc, #152]	; (2310 <uhd_sleep_mode+0xa0>)
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	4283      	cmp	r3, r0
    227a:	d007      	beq.n	228c <uhd_sleep_mode+0x1c>
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
    227c:	2800      	cmp	r0, #0
    227e:	d107      	bne.n	2290 <uhd_sleep_mode+0x20>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (uhd_state != UHD_STATE_OFF) {
    2280:	4b23      	ldr	r3, [pc, #140]	; (2310 <uhd_sleep_mode+0xa0>)
    2282:	781b      	ldrb	r3, [r3, #0]
    2284:	2b00      	cmp	r3, #0
    2286:	d123      	bne.n	22d0 <uhd_sleep_mode+0x60>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
	}
	uhd_state = new_state;
    2288:	4b21      	ldr	r3, [pc, #132]	; (2310 <uhd_sleep_mode+0xa0>)
    228a:	7018      	strb	r0, [r3, #0]
}
    228c:	b002      	add	sp, #8
    228e:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2290:	4b20      	ldr	r3, [pc, #128]	; (2314 <uhd_sleep_mode+0xa4>)
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2292:	5c1b      	ldrb	r3, [r3, r0]
    2294:	4a20      	ldr	r2, [pc, #128]	; (2318 <uhd_sleep_mode+0xa8>)
    2296:	5cd2      	ldrb	r2, [r2, r3]
    2298:	2aff      	cmp	r2, #255	; 0xff
    229a:	d100      	bne.n	229e <uhd_sleep_mode+0x2e>
    229c:	e7fe      	b.n	229c <uhd_sleep_mode+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    229e:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    22a2:	4251      	negs	r1, r2
    22a4:	414a      	adcs	r2, r1
    22a6:	9200      	str	r2, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    22a8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    22aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    22ae:	2100      	movs	r1, #0
    22b0:	4a1a      	ldr	r2, [pc, #104]	; (231c <uhd_sleep_mode+0xac>)
    22b2:	7011      	strb	r1, [r2, #0]
	return flags;
    22b4:	9c00      	ldr	r4, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    22b6:	4918      	ldr	r1, [pc, #96]	; (2318 <uhd_sleep_mode+0xa8>)
    22b8:	5cca      	ldrb	r2, [r1, r3]
    22ba:	3201      	adds	r2, #1
    22bc:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    22be:	2c00      	cmp	r4, #0
    22c0:	d0de      	beq.n	2280 <uhd_sleep_mode+0x10>
		cpu_irq_enable();
    22c2:	2201      	movs	r2, #1
    22c4:	4b15      	ldr	r3, [pc, #84]	; (231c <uhd_sleep_mode+0xac>)
    22c6:	701a      	strb	r2, [r3, #0]
    22c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    22cc:	b662      	cpsie	i
    22ce:	e7d7      	b.n	2280 <uhd_sleep_mode+0x10>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
    22d0:	4a10      	ldr	r2, [pc, #64]	; (2314 <uhd_sleep_mode+0xa4>)
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    22d2:	5cd3      	ldrb	r3, [r2, r3]
    22d4:	4a10      	ldr	r2, [pc, #64]	; (2318 <uhd_sleep_mode+0xa8>)
    22d6:	5cd2      	ldrb	r2, [r2, r3]
    22d8:	2a00      	cmp	r2, #0
    22da:	d100      	bne.n	22de <uhd_sleep_mode+0x6e>
    22dc:	e7fe      	b.n	22dc <uhd_sleep_mode+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    22de:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    22e2:	4251      	negs	r1, r2
    22e4:	414a      	adcs	r2, r1
    22e6:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    22e8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    22ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    22ee:	2100      	movs	r1, #0
    22f0:	4a0a      	ldr	r2, [pc, #40]	; (231c <uhd_sleep_mode+0xac>)
    22f2:	7011      	strb	r1, [r2, #0]
	return flags;
    22f4:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    22f6:	4908      	ldr	r1, [pc, #32]	; (2318 <uhd_sleep_mode+0xa8>)
    22f8:	5cca      	ldrb	r2, [r1, r3]
    22fa:	3a01      	subs	r2, #1
    22fc:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    22fe:	2c00      	cmp	r4, #0
    2300:	d0c2      	beq.n	2288 <uhd_sleep_mode+0x18>
		cpu_irq_enable();
    2302:	2201      	movs	r2, #1
    2304:	4b05      	ldr	r3, [pc, #20]	; (231c <uhd_sleep_mode+0xac>)
    2306:	701a      	strb	r2, [r3, #0]
    2308:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    230c:	b662      	cpsie	i
    230e:	e7bb      	b.n	2288 <uhd_sleep_mode+0x18>
    2310:	20000285 	.word	0x20000285
    2314:	20000024 	.word	0x20000024
    2318:	20000544 	.word	0x20000544
    231c:	20000023 	.word	0x20000023

00002320 <_uhd_reset>:
 * \brief Manages bus reset interrupt
 *
 * \param module_inst Pointer to USB module instance
 */
static void _uhd_reset(struct usb_module *module_inst)
{
    2320:	b510      	push	{r4, lr}
	if (uhd_reset_callback != NULL) {
    2322:	4b03      	ldr	r3, [pc, #12]	; (2330 <_uhd_reset+0x10>)
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	2b00      	cmp	r3, #0
    2328:	d000      	beq.n	232c <_uhd_reset+0xc>
		uhd_reset_callback();
    232a:	4798      	blx	r3
	}
}
    232c:	bd10      	pop	{r4, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	20000280 	.word	0x20000280

00002334 <_uhd_ram_error>:
{
#ifdef UHC_RAM_ACCESS_ERR_EVENT
	UHC_RAM_ACCESS_ERR_EVENT();
#endif
	dbg_print("!!!! RAM ERR !!!!\n");
}
    2334:	4770      	bx	lr
	...

00002338 <_uhd_disconnect>:
 * \brief Manages disconnection interrupt
 *
 * \param module_inst Pointer to USB module instance
 */
static void _uhd_disconnect(struct usb_module *module_inst)
{
    2338:	b570      	push	{r4, r5, r6, lr}
	/* This should be the normal way to handle this event. */
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_DISCONNECT);
    233a:	4c0d      	ldr	r4, [pc, #52]	; (2370 <_uhd_disconnect+0x38>)
    233c:	2107      	movs	r1, #7
    233e:	0020      	movs	r0, r4
    2340:	4d0c      	ldr	r5, [pc, #48]	; (2374 <_uhd_disconnect+0x3c>)
    2342:	47a8      	blx	r5
	dbg_print("DISC\n");
	/* Disable wakeup/resumes interrupts,
	 * in case of disconnection during suspend mode
	 */
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    2344:	2102      	movs	r1, #2
    2346:	0020      	movs	r0, r4
    2348:	47a8      	blx	r5
	/* Enable asynchronous wakeup interrupt to allow a CPU wakeup
	 * when a connection occurs.
	 */
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_CONNECT);
    234a:	2106      	movs	r1, #6
    234c:	0020      	movs	r0, r4
    234e:	4d0a      	ldr	r5, [pc, #40]	; (2378 <_uhd_disconnect+0x40>)
    2350:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    2352:	2102      	movs	r1, #2
    2354:	0020      	movs	r0, r4
    2356:	47a8      	blx	r5
	uhd_suspend_start = 0;
    2358:	2300      	movs	r3, #0
    235a:	4a08      	ldr	r2, [pc, #32]	; (237c <_uhd_disconnect+0x44>)
    235c:	7013      	strb	r3, [r2, #0]
	uhd_resume_start = 0;
    235e:	4a08      	ldr	r2, [pc, #32]	; (2380 <_uhd_disconnect+0x48>)
    2360:	7013      	strb	r3, [r2, #0]
	uhd_sleep_mode(UHD_STATE_DISCONNECT);
    2362:	2003      	movs	r0, #3
    2364:	4b07      	ldr	r3, [pc, #28]	; (2384 <_uhd_disconnect+0x4c>)
    2366:	4798      	blx	r3
	uhc_notify_connection(false);
    2368:	2000      	movs	r0, #0
    236a:	4b07      	ldr	r3, [pc, #28]	; (2388 <_uhd_disconnect+0x50>)
    236c:	4798      	blx	r3
}
    236e:	bd70      	pop	{r4, r5, r6, pc}
    2370:	200005a8 	.word	0x200005a8
    2374:	0000366f 	.word	0x0000366f
    2378:	00003605 	.word	0x00003605
    237c:	20000286 	.word	0x20000286
    2380:	20000284 	.word	0x20000284
    2384:	00002271 	.word	0x00002271
    2388:	000012d5 	.word	0x000012d5

0000238c <_uhd_connect>:
{
    238c:	b570      	push	{r4, r5, r6, lr}
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_CONNECT);
    238e:	4c0f      	ldr	r4, [pc, #60]	; (23cc <_uhd_connect+0x40>)
    2390:	2106      	movs	r1, #6
    2392:	0020      	movs	r0, r4
    2394:	4d0e      	ldr	r5, [pc, #56]	; (23d0 <_uhd_connect+0x44>)
    2396:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_DISCONNECT);
    2398:	2107      	movs	r1, #7
    239a:	0020      	movs	r0, r4
    239c:	4b0d      	ldr	r3, [pc, #52]	; (23d4 <_uhd_connect+0x48>)
    239e:	4798      	blx	r3
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    23a0:	2102      	movs	r1, #2
    23a2:	0020      	movs	r0, r4
    23a4:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->HOST.CTRLB.bit.SOFE = 1;
    23a6:	6822      	ldr	r2, [r4, #0]
    23a8:	8911      	ldrh	r1, [r2, #8]
    23aa:	2380      	movs	r3, #128	; 0x80
    23ac:	005b      	lsls	r3, r3, #1
    23ae:	430b      	orrs	r3, r1
    23b0:	8113      	strh	r3, [r2, #8]
	uhd_sleep_mode(UHD_STATE_IDLE);
    23b2:	2006      	movs	r0, #6
    23b4:	4b08      	ldr	r3, [pc, #32]	; (23d8 <_uhd_connect+0x4c>)
    23b6:	4798      	blx	r3
	uhd_suspend_start = 0;
    23b8:	2300      	movs	r3, #0
    23ba:	4a08      	ldr	r2, [pc, #32]	; (23dc <_uhd_connect+0x50>)
    23bc:	7013      	strb	r3, [r2, #0]
	uhd_resume_start = 0;
    23be:	4a08      	ldr	r2, [pc, #32]	; (23e0 <_uhd_connect+0x54>)
    23c0:	7013      	strb	r3, [r2, #0]
	uhc_notify_connection(true);
    23c2:	2001      	movs	r0, #1
    23c4:	4b07      	ldr	r3, [pc, #28]	; (23e4 <_uhd_connect+0x58>)
    23c6:	4798      	blx	r3
}
    23c8:	bd70      	pop	{r4, r5, r6, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	200005a8 	.word	0x200005a8
    23d0:	0000366f 	.word	0x0000366f
    23d4:	00003605 	.word	0x00003605
    23d8:	00002271 	.word	0x00002271
    23dc:	20000286 	.word	0x20000286
    23e0:	20000284 	.word	0x20000284
    23e4:	000012d5 	.word	0x000012d5

000023e8 <_uhd_upstream_resume>:
{
    23e8:	b570      	push	{r4, r5, r6, lr}
	if (uhd_lpm_suspend) {
    23ea:	4b14      	ldr	r3, [pc, #80]	; (243c <_uhd_upstream_resume+0x54>)
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d117      	bne.n	2422 <_uhd_upstream_resume+0x3a>
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->HOST.CTRLB.bit.RESUME= 1;
    23f2:	4b13      	ldr	r3, [pc, #76]	; (2440 <_uhd_upstream_resume+0x58>)
    23f4:	681a      	ldr	r2, [r3, #0]
    23f6:	8913      	ldrh	r3, [r2, #8]
    23f8:	2102      	movs	r1, #2
    23fa:	430b      	orrs	r3, r1
    23fc:	8113      	strh	r3, [r2, #8]
		uhd_resume_start = 50;
    23fe:	2232      	movs	r2, #50	; 0x32
    2400:	4b10      	ldr	r3, [pc, #64]	; (2444 <_uhd_upstream_resume+0x5c>)
    2402:	701a      	strb	r2, [r3, #0]
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    2404:	4d0e      	ldr	r5, [pc, #56]	; (2440 <_uhd_upstream_resume+0x58>)
    2406:	2102      	movs	r1, #2
    2408:	0028      	movs	r0, r5
    240a:	4c0f      	ldr	r4, [pc, #60]	; (2448 <_uhd_upstream_resume+0x60>)
    240c:	47a0      	blx	r4
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_DNRSM);
    240e:	2103      	movs	r1, #3
    2410:	0028      	movs	r0, r5
    2412:	47a0      	blx	r4
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_UPRSM);
    2414:	2104      	movs	r1, #4
    2416:	0028      	movs	r0, r5
    2418:	47a0      	blx	r4
	uhd_sleep_mode(UHD_STATE_IDLE);
    241a:	2006      	movs	r0, #6
    241c:	4b0b      	ldr	r3, [pc, #44]	; (244c <_uhd_upstream_resume+0x64>)
    241e:	4798      	blx	r3
}
    2420:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->HOST.CTRLB.bit.L1RESUME = 1;
    2422:	4b07      	ldr	r3, [pc, #28]	; (2440 <_uhd_upstream_resume+0x58>)
    2424:	681a      	ldr	r2, [r3, #0]
    2426:	8911      	ldrh	r1, [r2, #8]
    2428:	2380      	movs	r3, #128	; 0x80
    242a:	011b      	lsls	r3, r3, #4
    242c:	430b      	orrs	r3, r1
    242e:	8113      	strh	r3, [r2, #8]
		uhd_lpm_suspend = false;
    2430:	2200      	movs	r2, #0
    2432:	4b02      	ldr	r3, [pc, #8]	; (243c <_uhd_upstream_resume+0x54>)
    2434:	701a      	strb	r2, [r3, #0]
		uhc_notify_resume_lpm();
    2436:	4b06      	ldr	r3, [pc, #24]	; (2450 <_uhd_upstream_resume+0x68>)
    2438:	4798      	blx	r3
    243a:	e7e3      	b.n	2404 <_uhd_upstream_resume+0x1c>
    243c:	200001d2 	.word	0x200001d2
    2440:	200005a8 	.word	0x200005a8
    2444:	20000284 	.word	0x20000284
    2448:	0000366f 	.word	0x0000366f
    244c:	00002271 	.word	0x00002271
    2450:	00001391 	.word	0x00001391

00002454 <_uhd_downstream_resume>:
{
    2454:	b570      	push	{r4, r5, r6, lr}
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    2456:	4d0e      	ldr	r5, [pc, #56]	; (2490 <_uhd_downstream_resume+0x3c>)
    2458:	2102      	movs	r1, #2
    245a:	0028      	movs	r0, r5
    245c:	4c0d      	ldr	r4, [pc, #52]	; (2494 <_uhd_downstream_resume+0x40>)
    245e:	47a0      	blx	r4
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_DNRSM);
    2460:	2103      	movs	r1, #3
    2462:	0028      	movs	r0, r5
    2464:	47a0      	blx	r4
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_UPRSM);
    2466:	2104      	movs	r1, #4
    2468:	0028      	movs	r0, r5
    246a:	47a0      	blx	r4
	if (uhd_lpm_suspend) {
    246c:	4b0a      	ldr	r3, [pc, #40]	; (2498 <_uhd_downstream_resume+0x44>)
    246e:	781b      	ldrb	r3, [r3, #0]
    2470:	2b00      	cmp	r3, #0
    2472:	d106      	bne.n	2482 <_uhd_downstream_resume+0x2e>
		uhd_resume_start = 50;
    2474:	2232      	movs	r2, #50	; 0x32
    2476:	4b09      	ldr	r3, [pc, #36]	; (249c <_uhd_downstream_resume+0x48>)
    2478:	701a      	strb	r2, [r3, #0]
	uhd_sleep_mode(UHD_STATE_IDLE);
    247a:	2006      	movs	r0, #6
    247c:	4b08      	ldr	r3, [pc, #32]	; (24a0 <_uhd_downstream_resume+0x4c>)
    247e:	4798      	blx	r3
}
    2480:	bd70      	pop	{r4, r5, r6, pc}
		uhd_lpm_suspend = false;
    2482:	2200      	movs	r2, #0
    2484:	4b04      	ldr	r3, [pc, #16]	; (2498 <_uhd_downstream_resume+0x44>)
    2486:	701a      	strb	r2, [r3, #0]
		uhc_notify_resume_lpm();
    2488:	4b06      	ldr	r3, [pc, #24]	; (24a4 <_uhd_downstream_resume+0x50>)
    248a:	4798      	blx	r3
    248c:	e7f5      	b.n	247a <_uhd_downstream_resume+0x26>
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	200005a8 	.word	0x200005a8
    2494:	0000366f 	.word	0x0000366f
    2498:	200001d2 	.word	0x200001d2
    249c:	20000284 	.word	0x20000284
    24a0:	00002271 	.word	0x00002271
    24a4:	00001391 	.word	0x00001391

000024a8 <_uhd_wakeup>:
{
    24a8:	b570      	push	{r4, r5, r6, lr}
	if (uhd_lpm_suspend) {
    24aa:	4b14      	ldr	r3, [pc, #80]	; (24fc <_uhd_wakeup+0x54>)
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d117      	bne.n	24e2 <_uhd_wakeup+0x3a>
	module_inst->hw->HOST.CTRLB.bit.RESUME= 1;
    24b2:	4b13      	ldr	r3, [pc, #76]	; (2500 <_uhd_wakeup+0x58>)
    24b4:	681a      	ldr	r2, [r3, #0]
    24b6:	8913      	ldrh	r3, [r2, #8]
    24b8:	2102      	movs	r1, #2
    24ba:	430b      	orrs	r3, r1
    24bc:	8113      	strh	r3, [r2, #8]
		uhd_resume_start = 50;
    24be:	2232      	movs	r2, #50	; 0x32
    24c0:	4b10      	ldr	r3, [pc, #64]	; (2504 <_uhd_wakeup+0x5c>)
    24c2:	701a      	strb	r2, [r3, #0]
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    24c4:	4d0e      	ldr	r5, [pc, #56]	; (2500 <_uhd_wakeup+0x58>)
    24c6:	2102      	movs	r1, #2
    24c8:	0028      	movs	r0, r5
    24ca:	4c0f      	ldr	r4, [pc, #60]	; (2508 <_uhd_wakeup+0x60>)
    24cc:	47a0      	blx	r4
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_DNRSM);
    24ce:	2103      	movs	r1, #3
    24d0:	0028      	movs	r0, r5
    24d2:	47a0      	blx	r4
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_UPRSM);
    24d4:	2104      	movs	r1, #4
    24d6:	0028      	movs	r0, r5
    24d8:	47a0      	blx	r4
	uhd_sleep_mode(UHD_STATE_IDLE);
    24da:	2006      	movs	r0, #6
    24dc:	4b0b      	ldr	r3, [pc, #44]	; (250c <_uhd_wakeup+0x64>)
    24de:	4798      	blx	r3
}
    24e0:	bd70      	pop	{r4, r5, r6, pc}
	module_inst->hw->HOST.CTRLB.bit.L1RESUME = 1;
    24e2:	4b07      	ldr	r3, [pc, #28]	; (2500 <_uhd_wakeup+0x58>)
    24e4:	681a      	ldr	r2, [r3, #0]
    24e6:	8911      	ldrh	r1, [r2, #8]
    24e8:	2380      	movs	r3, #128	; 0x80
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	430b      	orrs	r3, r1
    24ee:	8113      	strh	r3, [r2, #8]
		uhd_lpm_suspend = false;
    24f0:	2200      	movs	r2, #0
    24f2:	4b02      	ldr	r3, [pc, #8]	; (24fc <_uhd_wakeup+0x54>)
    24f4:	701a      	strb	r2, [r3, #0]
		uhc_notify_resume_lpm();
    24f6:	4b06      	ldr	r3, [pc, #24]	; (2510 <_uhd_wakeup+0x68>)
    24f8:	4798      	blx	r3
    24fa:	e7e3      	b.n	24c4 <_uhd_wakeup+0x1c>
    24fc:	200001d2 	.word	0x200001d2
    2500:	200005a8 	.word	0x200005a8
    2504:	20000284 	.word	0x20000284
    2508:	0000366f 	.word	0x0000366f
    250c:	00002271 	.word	0x00002271
    2510:	00001391 	.word	0x00001391

00002514 <_uhd_get_pipe>:
 * \param endp  Endpoint Address
 *
 * \return Pipe number
 */
static uint8_t _uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
    2514:	b5f0      	push	{r4, r5, r6, r7, lr}
    2516:	46c6      	mov	lr, r8
    2518:	b500      	push	{lr}
    251a:	b082      	sub	sp, #8
    251c:	0007      	movs	r7, r0
    251e:	4688      	mov	r8, r1
	struct usb_host_pipe_config cfg;
	uint8_t usb_pipe = 1;
    2520:	2401      	movs	r4, #1
	for (;usb_pipe < USB_PIPE_NUM;usb_pipe ++) {
		usb_host_pipe_get_config(&dev, usb_pipe, &cfg);
    2522:	4d0d      	ldr	r5, [pc, #52]	; (2558 <_uhd_get_pipe+0x44>)
    2524:	4e0d      	ldr	r6, [pc, #52]	; (255c <_uhd_get_pipe+0x48>)
    2526:	e003      	b.n	2530 <_uhd_get_pipe+0x1c>
	for (;usb_pipe < USB_PIPE_NUM;usb_pipe ++) {
    2528:	3401      	adds	r4, #1
    252a:	b2e4      	uxtb	r4, r4
    252c:	2c08      	cmp	r4, #8
    252e:	d00c      	beq.n	254a <_uhd_get_pipe+0x36>
		usb_host_pipe_get_config(&dev, usb_pipe, &cfg);
    2530:	466a      	mov	r2, sp
    2532:	0021      	movs	r1, r4
    2534:	0028      	movs	r0, r5
    2536:	47b0      	blx	r6
		if ((add == cfg.device_address) && (endp == cfg.endpoint_address)) {
    2538:	466b      	mov	r3, sp
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	42bb      	cmp	r3, r7
    253e:	d1f3      	bne.n	2528 <_uhd_get_pipe+0x14>
    2540:	466b      	mov	r3, sp
    2542:	785b      	ldrb	r3, [r3, #1]
    2544:	4543      	cmp	r3, r8
    2546:	d1ef      	bne.n	2528 <_uhd_get_pipe+0x14>
    2548:	e000      	b.n	254c <_uhd_get_pipe+0x38>
			return usb_pipe;
		}
	}
	return 0;
    254a:	2400      	movs	r4, #0
}
    254c:	0020      	movs	r0, r4
    254e:	b002      	add	sp, #8
    2550:	bc04      	pop	{r2}
    2552:	4690      	mov	r8, r2
    2554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	200005a8 	.word	0x200005a8
    255c:	00003875 	.word	0x00003875

00002560 <_uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void _uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
    2560:	b570      	push	{r4, r5, r6, lr}
    2562:	b082      	sub	sp, #8
    2564:	0004      	movs	r4, r0
    2566:	000d      	movs	r5, r1
	uhd_pipe_job_t *ptr_job;

	struct usb_host_pipe_config cfg;
	usb_host_pipe_get_config(&dev, pipe, &cfg);
    2568:	466a      	mov	r2, sp
    256a:	0001      	movs	r1, r0
    256c:	481a      	ldr	r0, [pc, #104]	; (25d8 <_uhd_pipe_finish_job+0x78>)
    256e:	4b1b      	ldr	r3, [pc, #108]	; (25dc <_uhd_pipe_finish_job+0x7c>)
    2570:	4798      	blx	r3

	/* Get job corresponding at endpoint */
	ptr_job = &uhd_pipe_job[pipe - 1];
    2572:	3c01      	subs	r4, #1
	if (ptr_job->busy == false) {
    2574:	0063      	lsls	r3, r4, #1
    2576:	191b      	adds	r3, r3, r4
    2578:	00db      	lsls	r3, r3, #3
    257a:	4a19      	ldr	r2, [pc, #100]	; (25e0 <_uhd_pipe_finish_job+0x80>)
    257c:	18d3      	adds	r3, r2, r3
    257e:	7d9b      	ldrb	r3, [r3, #22]
    2580:	07db      	lsls	r3, r3, #31
    2582:	d526      	bpl.n	25d2 <_uhd_pipe_finish_job+0x72>
		return; // No job running
	}
	/* In case of abort, free the internal buffer */
	if (ptr_job->buf_internal != NULL) {
    2584:	0063      	lsls	r3, r4, #1
    2586:	191b      	adds	r3, r3, r4
    2588:	00db      	lsls	r3, r3, #3
    258a:	18d3      	adds	r3, r2, r3
    258c:	6858      	ldr	r0, [r3, #4]
    258e:	2800      	cmp	r0, #0
    2590:	d008      	beq.n	25a4 <_uhd_pipe_finish_job+0x44>
		free(ptr_job->buf_internal);
    2592:	4b14      	ldr	r3, [pc, #80]	; (25e4 <_uhd_pipe_finish_job+0x84>)
    2594:	4798      	blx	r3
		ptr_job->buf_internal = NULL;
    2596:	0063      	lsls	r3, r4, #1
    2598:	191b      	adds	r3, r3, r4
    259a:	00db      	lsls	r3, r3, #3
    259c:	4a10      	ldr	r2, [pc, #64]	; (25e0 <_uhd_pipe_finish_job+0x80>)
    259e:	18d3      	adds	r3, r2, r3
    25a0:	2200      	movs	r2, #0
    25a2:	605a      	str	r2, [r3, #4]
	}
	ptr_job->busy = false;
    25a4:	0063      	lsls	r3, r4, #1
    25a6:	191b      	adds	r3, r3, r4
    25a8:	00db      	lsls	r3, r3, #3
    25aa:	4a0d      	ldr	r2, [pc, #52]	; (25e0 <_uhd_pipe_finish_job+0x80>)
    25ac:	18d3      	adds	r3, r2, r3
    25ae:	7d9a      	ldrb	r2, [r3, #22]
    25b0:	2001      	movs	r0, #1
    25b2:	4382      	bics	r2, r0
    25b4:	759a      	strb	r2, [r3, #22]
	if (NULL == ptr_job->call_end) {
    25b6:	691e      	ldr	r6, [r3, #16]
    25b8:	2e00      	cmp	r6, #0
    25ba:	d00a      	beq.n	25d2 <_uhd_pipe_finish_job+0x72>
		return; // No callback linked to job
	}
	ptr_job->call_end(cfg.device_address,
    25bc:	0063      	lsls	r3, r4, #1
    25be:	191c      	adds	r4, r3, r4
    25c0:	00e4      	lsls	r4, r4, #3
    25c2:	4b07      	ldr	r3, [pc, #28]	; (25e0 <_uhd_pipe_finish_job+0x80>)
    25c4:	191c      	adds	r4, r3, r4
    25c6:	68e3      	ldr	r3, [r4, #12]
    25c8:	466a      	mov	r2, sp
    25ca:	7851      	ldrb	r1, [r2, #1]
    25cc:	7810      	ldrb	r0, [r2, #0]
    25ce:	002a      	movs	r2, r5
    25d0:	47b0      	blx	r6
			cfg.endpoint_address,
			status, ptr_job->nb_trans);
}
    25d2:	b002      	add	sp, #8
    25d4:	bd70      	pop	{r4, r5, r6, pc}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	200005a8 	.word	0x200005a8
    25dc:	00003875 	.word	0x00003875
    25e0:	200001d4 	.word	0x200001d4
    25e4:	00005ded 	.word	0x00005ded

000025e8 <_uhd_ep_stall>:
 *
 * \param module_inst Pointer to USB module instance
 * \param pointer     Pointer to USB pipe transfer callback status parameters
 */
static void _uhd_ep_stall(struct usb_module *module_inst, void *pointer)
{
    25e8:	b510      	push	{r4, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg = USB_HOST_PSTATUSCLR_DTGL;
    25ea:	4b09      	ldr	r3, [pc, #36]	; (2610 <_uhd_ep_stall+0x28>)
    25ec:	681a      	ldr	r2, [r3, #0]
    25ee:	780b      	ldrb	r3, [r1, #0]
    25f0:	3308      	adds	r3, #8
    25f2:	015b      	lsls	r3, r3, #5
    25f4:	18d3      	adds	r3, r2, r3
    25f6:	2001      	movs	r0, #1
    25f8:	7118      	strb	r0, [r3, #4]
	struct usb_pipe_callback_parameter *p_callback_para;
	p_callback_para = (struct usb_pipe_callback_parameter *)pointer;

	dbg_print("Tr Stall %x\n", p_callback_para->pipe_num);
	usb_host_pipe_clear_toggle(&dev, p_callback_para->pipe_num);
	_uhd_ep_abort_pipe(p_callback_para->pipe_num, UHD_TRANS_STALL);
    25fa:	7808      	ldrb	r0, [r1, #0]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_PFREEZE;
    25fc:	0003      	movs	r3, r0
    25fe:	3308      	adds	r3, #8
    2600:	015b      	lsls	r3, r3, #5
    2602:	18d2      	adds	r2, r2, r3
    2604:	2310      	movs	r3, #16
    2606:	7153      	strb	r3, [r2, #5]
	_uhd_pipe_finish_job(pipe, status);
    2608:	2104      	movs	r1, #4
    260a:	4b02      	ldr	r3, [pc, #8]	; (2614 <_uhd_ep_stall+0x2c>)
    260c:	4798      	blx	r3
}
    260e:	bd10      	pop	{r4, pc}
    2610:	200005a8 	.word	0x200005a8
    2614:	00002561 	.word	0x00002561

00002618 <_uhd_vbus_handler>:
{
    2618:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    261a:	2100      	movs	r1, #0
    261c:	200e      	movs	r0, #14
    261e:	4b08      	ldr	r3, [pc, #32]	; (2640 <_uhd_vbus_handler+0x28>)
    2620:	4798      	blx	r3
    2622:	4b08      	ldr	r3, [pc, #32]	; (2644 <_uhd_vbus_handler+0x2c>)
    2624:	6a1a      	ldr	r2, [r3, #32]
    2626:	6a1b      	ldr	r3, [r3, #32]
	if (!is_usb_vbus_high()) {
    2628:	045b      	lsls	r3, r3, #17
    262a:	d504      	bpl.n	2636 <_uhd_vbus_handler+0x1e>
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    262c:	2100      	movs	r1, #0
    262e:	200e      	movs	r0, #14
    2630:	4b05      	ldr	r3, [pc, #20]	; (2648 <_uhd_vbus_handler+0x30>)
    2632:	4798      	blx	r3
}
    2634:	bd10      	pop	{r4, pc}
		uhd_sleep_mode(UHD_STATE_NO_VBUS);
    2636:	2002      	movs	r0, #2
    2638:	4b04      	ldr	r3, [pc, #16]	; (264c <_uhd_vbus_handler+0x34>)
    263a:	4798      	blx	r3
    263c:	e7f6      	b.n	262c <_uhd_vbus_handler+0x14>
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	00001565 	.word	0x00001565
    2644:	41004400 	.word	0x41004400
    2648:	00001545 	.word	0x00001545
    264c:	00002271 	.word	0x00002271

00002650 <_uhd_ctrl_phase_zlp_in>:
{
    2650:	b510      	push	{r4, lr}
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
    2652:	2203      	movs	r2, #3
    2654:	4b06      	ldr	r3, [pc, #24]	; (2670 <_uhd_ctrl_phase_zlp_in+0x20>)
    2656:	701a      	strb	r2, [r3, #0]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_DTGL;
    2658:	4806      	ldr	r0, [pc, #24]	; (2674 <_uhd_ctrl_phase_zlp_in+0x24>)
    265a:	3a02      	subs	r2, #2
    265c:	2306      	movs	r3, #6
    265e:	33ff      	adds	r3, #255	; 0xff
    2660:	6801      	ldr	r1, [r0, #0]
    2662:	54ca      	strb	r2, [r1, r3]
	usb_host_pipe_read_job(&dev, 0, uhd_ctrl_buffer, 0);
    2664:	2300      	movs	r3, #0
    2666:	4a04      	ldr	r2, [pc, #16]	; (2678 <_uhd_ctrl_phase_zlp_in+0x28>)
    2668:	2100      	movs	r1, #0
    266a:	4c04      	ldr	r4, [pc, #16]	; (267c <_uhd_ctrl_phase_zlp_in+0x2c>)
    266c:	47a0      	blx	r4
}
    266e:	bd10      	pop	{r4, pc}
    2670:	20000710 	.word	0x20000710
    2674:	200005a8 	.word	0x200005a8
    2678:	20000714 	.word	0x20000714
    267c:	000039e9 	.word	0x000039e9

00002680 <_uhd_ctrl_phase_data_out>:
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	b082      	sub	sp, #8
	usb_host_pipe_get_config(&dev, 0, &cfg);
    2684:	466a      	mov	r2, sp
    2686:	2100      	movs	r1, #0
    2688:	4822      	ldr	r0, [pc, #136]	; (2714 <_uhd_ctrl_phase_data_out+0x94>)
    268a:	4b23      	ldr	r3, [pc, #140]	; (2718 <_uhd_ctrl_phase_data_out+0x98>)
    268c:	4798      	blx	r3
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
    268e:	2201      	movs	r2, #1
    2690:	4b22      	ldr	r3, [pc, #136]	; (271c <_uhd_ctrl_phase_data_out+0x9c>)
    2692:	701a      	strb	r2, [r3, #0]
	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
    2694:	4b22      	ldr	r3, [pc, #136]	; (2720 <_uhd_ctrl_phase_data_out+0xa0>)
    2696:	6819      	ldr	r1, [r3, #0]
    2698:	8aca      	ldrh	r2, [r1, #22]
    269a:	4b22      	ldr	r3, [pc, #136]	; (2724 <_uhd_ctrl_phase_data_out+0xa4>)
    269c:	881b      	ldrh	r3, [r3, #0]
    269e:	429a      	cmp	r2, r3
    26a0:	d00f      	beq.n	26c2 <_uhd_ctrl_phase_data_out+0x42>
	if (!uhd_ctrl_request_first->payload_size) {
    26a2:	8b0b      	ldrh	r3, [r1, #24]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d10f      	bne.n	26c8 <_uhd_ctrl_phase_data_out+0x48>
		if (uhd_ctrl_request_first->callback_run==NULL
    26a8:	684b      	ldr	r3, [r1, #4]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d006      	beq.n	26bc <_uhd_ctrl_phase_data_out+0x3c>
				|| !uhd_ctrl_request_first->callback_run(
    26ae:	000a      	movs	r2, r1
    26b0:	3218      	adds	r2, #24
    26b2:	4668      	mov	r0, sp
    26b4:	7800      	ldrb	r0, [r0, #0]
    26b6:	4798      	blx	r3
    26b8:	2800      	cmp	r0, #0
    26ba:	d105      	bne.n	26c8 <_uhd_ctrl_phase_data_out+0x48>
			_uhd_ctrl_phase_zlp_in();
    26bc:	4b1a      	ldr	r3, [pc, #104]	; (2728 <_uhd_ctrl_phase_data_out+0xa8>)
    26be:	4798      	blx	r3
			return;
    26c0:	e025      	b.n	270e <_uhd_ctrl_phase_data_out+0x8e>
		_uhd_ctrl_phase_zlp_in();
    26c2:	4b19      	ldr	r3, [pc, #100]	; (2728 <_uhd_ctrl_phase_data_out+0xa8>)
    26c4:	4798      	blx	r3
		return;
    26c6:	e022      	b.n	270e <_uhd_ctrl_phase_data_out+0x8e>
	nb_trans = uhd_ctrl_request_first->payload_size;
    26c8:	4b15      	ldr	r3, [pc, #84]	; (2720 <_uhd_ctrl_phase_data_out+0xa0>)
    26ca:	681d      	ldr	r5, [r3, #0]
    26cc:	8b2a      	ldrh	r2, [r5, #24]
    26ce:	466b      	mov	r3, sp
    26d0:	889b      	ldrh	r3, [r3, #4]
    26d2:	1c1c      	adds	r4, r3, #0
    26d4:	b29b      	uxth	r3, r3
    26d6:	4293      	cmp	r3, r2
    26d8:	d900      	bls.n	26dc <_uhd_ctrl_phase_data_out+0x5c>
    26da:	1c14      	adds	r4, r2, #0
    26dc:	b2a4      	uxth	r4, r4
	memcpy(uhd_ctrl_buffer, uhd_ctrl_request_first->payload, nb_trans);
    26de:	4e13      	ldr	r6, [pc, #76]	; (272c <_uhd_ctrl_phase_data_out+0xac>)
    26e0:	0022      	movs	r2, r4
    26e2:	6829      	ldr	r1, [r5, #0]
    26e4:	0030      	movs	r0, r6
    26e6:	4b12      	ldr	r3, [pc, #72]	; (2730 <_uhd_ctrl_phase_data_out+0xb0>)
    26e8:	4798      	blx	r3
	uhd_ctrl_request_first->payload += nb_trans;
    26ea:	682b      	ldr	r3, [r5, #0]
    26ec:	191b      	adds	r3, r3, r4
    26ee:	602b      	str	r3, [r5, #0]
	uhd_ctrl_nb_trans += nb_trans;
    26f0:	4a0c      	ldr	r2, [pc, #48]	; (2724 <_uhd_ctrl_phase_data_out+0xa4>)
    26f2:	8813      	ldrh	r3, [r2, #0]
    26f4:	18e3      	adds	r3, r4, r3
    26f6:	8013      	strh	r3, [r2, #0]
	uhd_ctrl_request_first->payload_size -= nb_trans;
    26f8:	4b09      	ldr	r3, [pc, #36]	; (2720 <_uhd_ctrl_phase_data_out+0xa0>)
    26fa:	681a      	ldr	r2, [r3, #0]
    26fc:	8b13      	ldrh	r3, [r2, #24]
    26fe:	1b1b      	subs	r3, r3, r4
    2700:	8313      	strh	r3, [r2, #24]
	usb_host_pipe_write_job(&dev, 0, uhd_ctrl_buffer, nb_trans);
    2702:	0023      	movs	r3, r4
    2704:	0032      	movs	r2, r6
    2706:	2100      	movs	r1, #0
    2708:	4802      	ldr	r0, [pc, #8]	; (2714 <_uhd_ctrl_phase_data_out+0x94>)
    270a:	4c0a      	ldr	r4, [pc, #40]	; (2734 <_uhd_ctrl_phase_data_out+0xb4>)
    270c:	47a0      	blx	r4
}
    270e:	b002      	add	sp, #8
    2710:	bd70      	pop	{r4, r5, r6, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	200005a8 	.word	0x200005a8
    2718:	00003875 	.word	0x00003875
    271c:	20000710 	.word	0x20000710
    2720:	20000754 	.word	0x20000754
    2724:	20000758 	.word	0x20000758
    2728:	00002651 	.word	0x00002651
    272c:	20000714 	.word	0x20000714
    2730:	00005e01 	.word	0x00005e01
    2734:	00003a69 	.word	0x00003a69

00002738 <_uhd_ep0_setup>:
{
    2738:	b510      	push	{r4, lr}
    273a:	b082      	sub	sp, #8
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_PFREEZE;
    273c:	4b12      	ldr	r3, [pc, #72]	; (2788 <_uhd_ep0_setup+0x50>)
    273e:	681a      	ldr	r2, [r3, #0]
    2740:	2110      	movs	r1, #16
    2742:	2306      	movs	r3, #6
    2744:	33ff      	adds	r3, #255	; 0xff
    2746:	54d1      	strb	r1, [r2, r3]
	if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
    2748:	4b10      	ldr	r3, [pc, #64]	; (278c <_uhd_ep0_setup+0x54>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	7c1a      	ldrb	r2, [r3, #16]
    274e:	2a7f      	cmp	r2, #127	; 0x7f
    2750:	d806      	bhi.n	2760 <_uhd_ep0_setup+0x28>
		if (uhd_ctrl_request_first->req.wLength) {
    2752:	8adb      	ldrh	r3, [r3, #22]
    2754:	2b00      	cmp	r3, #0
    2756:	d114      	bne.n	2782 <_uhd_ep0_setup+0x4a>
			_uhd_ctrl_phase_zlp_in();
    2758:	4b0d      	ldr	r3, [pc, #52]	; (2790 <_uhd_ep0_setup+0x58>)
    275a:	4798      	blx	r3
}
    275c:	b002      	add	sp, #8
    275e:	bd10      	pop	{r4, pc}
	usb_host_pipe_get_config(&dev, 0, &cfg);
    2760:	4c09      	ldr	r4, [pc, #36]	; (2788 <_uhd_ep0_setup+0x50>)
    2762:	466a      	mov	r2, sp
    2764:	2100      	movs	r1, #0
    2766:	0020      	movs	r0, r4
    2768:	4b0a      	ldr	r3, [pc, #40]	; (2794 <_uhd_ep0_setup+0x5c>)
    276a:	4798      	blx	r3
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
    276c:	2202      	movs	r2, #2
    276e:	4b0a      	ldr	r3, [pc, #40]	; (2798 <_uhd_ep0_setup+0x60>)
    2770:	701a      	strb	r2, [r3, #0]
	usb_host_pipe_read_job(&dev, 0, uhd_ctrl_buffer, cfg.size);
    2772:	466b      	mov	r3, sp
    2774:	889b      	ldrh	r3, [r3, #4]
    2776:	4a09      	ldr	r2, [pc, #36]	; (279c <_uhd_ep0_setup+0x64>)
    2778:	2100      	movs	r1, #0
    277a:	0020      	movs	r0, r4
    277c:	4c08      	ldr	r4, [pc, #32]	; (27a0 <_uhd_ep0_setup+0x68>)
    277e:	47a0      	blx	r4
    2780:	e7ec      	b.n	275c <_uhd_ep0_setup+0x24>
			_uhd_ctrl_phase_data_out();
    2782:	4b08      	ldr	r3, [pc, #32]	; (27a4 <_uhd_ep0_setup+0x6c>)
    2784:	4798      	blx	r3
    2786:	e7e9      	b.n	275c <_uhd_ep0_setup+0x24>
    2788:	200005a8 	.word	0x200005a8
    278c:	20000754 	.word	0x20000754
    2790:	00002651 	.word	0x00002651
    2794:	00003875 	.word	0x00003875
    2798:	20000710 	.word	0x20000710
    279c:	20000714 	.word	0x20000714
    27a0:	000039e9 	.word	0x000039e9
    27a4:	00002681 	.word	0x00002681

000027a8 <_uhd_pipe_trans_complete>:
{
    27a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27aa:	46d6      	mov	lr, sl
    27ac:	464f      	mov	r7, r9
    27ae:	4646      	mov	r6, r8
    27b0:	b5c0      	push	{r6, r7, lr}
    27b2:	b084      	sub	sp, #16
    27b4:	000d      	movs	r5, r1
	usb_host_pipe_get_config(&dev, p_callback_para->pipe_num, &cfg);
    27b6:	7809      	ldrb	r1, [r1, #0]
    27b8:	aa02      	add	r2, sp, #8
    27ba:	4881      	ldr	r0, [pc, #516]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    27bc:	4b81      	ldr	r3, [pc, #516]	; (29c4 <_uhd_pipe_trans_complete+0x21c>)
    27be:	4798      	blx	r3
	ptr_job = &uhd_pipe_job[p_callback_para->pipe_num - 1];
    27c0:	782a      	ldrb	r2, [r5, #0]
    27c2:	1e54      	subs	r4, r2, #1
	if (!ptr_job->busy) {
    27c4:	0063      	lsls	r3, r4, #1
    27c6:	191b      	adds	r3, r3, r4
    27c8:	00db      	lsls	r3, r3, #3
    27ca:	497f      	ldr	r1, [pc, #508]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    27cc:	18cb      	adds	r3, r1, r3
    27ce:	7d9b      	ldrb	r3, [r3, #22]
    27d0:	07db      	lsls	r3, r3, #31
    27d2:	d400      	bmi.n	27d6 <_uhd_pipe_trans_complete+0x2e>
    27d4:	e0a1      	b.n	291a <_uhd_pipe_trans_complete+0x172>
	pipe_size = cfg.size;
    27d6:	ab02      	add	r3, sp, #8
    27d8:	889f      	ldrh	r7, [r3, #4]
	if (!(cfg.endpoint_address & USB_EP_DIR_IN)) {
    27da:	785b      	ldrb	r3, [r3, #1]
    27dc:	2b7f      	cmp	r3, #127	; 0x7f
    27de:	d862      	bhi.n	28a6 <_uhd_pipe_trans_complete+0xfe>
    27e0:	4b77      	ldr	r3, [pc, #476]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    27e2:	681b      	ldr	r3, [r3, #0]
    27e4:	3208      	adds	r2, #8
    27e6:	0152      	lsls	r2, r2, #5
    27e8:	189a      	adds	r2, r3, r2
    27ea:	2310      	movs	r3, #16
    27ec:	7153      	strb	r3, [r2, #5]
		ptr_job->nb_trans += nb_trans;
    27ee:	0063      	lsls	r3, r4, #1
    27f0:	191b      	adds	r3, r3, r4
    27f2:	00da      	lsls	r2, r3, #3
    27f4:	188b      	adds	r3, r1, r2
    27f6:	886e      	ldrh	r6, [r5, #2]
    27f8:	68da      	ldr	r2, [r3, #12]
    27fa:	4694      	mov	ip, r2
    27fc:	4466      	add	r6, ip
    27fe:	60de      	str	r6, [r3, #12]
		if ((ptr_job->nb_trans != ptr_job->buf_size)
    2800:	6899      	ldr	r1, [r3, #8]
    2802:	428e      	cmp	r6, r1
    2804:	d035      	beq.n	2872 <_uhd_pipe_trans_complete+0xca>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2806:	1b8e      	subs	r6, r1, r6
			if (UHD_ENDPOINT_MAX_TRANS < next_trans) {
    2808:	4b70      	ldr	r3, [pc, #448]	; (29cc <_uhd_pipe_trans_complete+0x224>)
    280a:	429e      	cmp	r6, r3
    280c:	d93a      	bls.n	2884 <_uhd_pipe_trans_complete+0xdc>
					(UHD_ENDPOINT_MAX_TRANS % pipe_size);
    280e:	001e      	movs	r6, r3
    2810:	0039      	movs	r1, r7
    2812:	0018      	movs	r0, r3
    2814:	4b6e      	ldr	r3, [pc, #440]	; (29d0 <_uhd_pipe_trans_complete+0x228>)
    2816:	4798      	blx	r3
				next_trans = UHD_ENDPOINT_MAX_TRANS -
    2818:	1a76      	subs	r6, r6, r1
				usb_host_pipe_set_auto_zlp(&dev, p_callback_para->pipe_num, false);
    281a:	7829      	ldrb	r1, [r5, #0]
    281c:	2200      	movs	r2, #0
    281e:	4868      	ldr	r0, [pc, #416]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    2820:	4b6c      	ldr	r3, [pc, #432]	; (29d4 <_uhd_pipe_trans_complete+0x22c>)
    2822:	4798      	blx	r3
			usb_host_pipe_write_job(&dev, p_callback_para->pipe_num, &ptr_job->buf[ptr_job->nb_trans], next_trans);
    2824:	4968      	ldr	r1, [pc, #416]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    2826:	0063      	lsls	r3, r4, #1
    2828:	191a      	adds	r2, r3, r4
    282a:	00d2      	lsls	r2, r2, #3
    282c:	188c      	adds	r4, r1, r2
    282e:	5852      	ldr	r2, [r2, r1]
    2830:	68e3      	ldr	r3, [r4, #12]
    2832:	18d2      	adds	r2, r2, r3
    2834:	7829      	ldrb	r1, [r5, #0]
    2836:	4c62      	ldr	r4, [pc, #392]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    2838:	0033      	movs	r3, r6
    283a:	0020      	movs	r0, r4
    283c:	4e66      	ldr	r6, [pc, #408]	; (29d8 <_uhd_pipe_trans_complete+0x230>)
    283e:	47b0      	blx	r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2840:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2844:	4253      	negs	r3, r2
    2846:	4153      	adcs	r3, r2
    2848:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    284a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    284c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2850:	2200      	movs	r2, #0
    2852:	4b62      	ldr	r3, [pc, #392]	; (29dc <_uhd_pipe_trans_complete+0x234>)
    2854:	701a      	strb	r2, [r3, #0]
	return flags;
    2856:	9e00      	ldr	r6, [sp, #0]
			usb_host_pipe_enable_callback(&dev,p_callback_para->pipe_num,USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE);
    2858:	7829      	ldrb	r1, [r5, #0]
    285a:	0020      	movs	r0, r4
    285c:	4b60      	ldr	r3, [pc, #384]	; (29e0 <_uhd_pipe_trans_complete+0x238>)
    285e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2860:	2e00      	cmp	r6, #0
    2862:	d05a      	beq.n	291a <_uhd_pipe_trans_complete+0x172>
		cpu_irq_enable();
    2864:	2201      	movs	r2, #1
    2866:	4b5d      	ldr	r3, [pc, #372]	; (29dc <_uhd_pipe_trans_complete+0x234>)
    2868:	701a      	strb	r2, [r3, #0]
    286a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    286e:	b662      	cpsie	i
    2870:	e053      	b.n	291a <_uhd_pipe_trans_complete+0x172>
				|| ptr_job->b_shortpacket) {
    2872:	0063      	lsls	r3, r4, #1
    2874:	191b      	adds	r3, r3, r4
    2876:	00db      	lsls	r3, r3, #3
    2878:	4a53      	ldr	r2, [pc, #332]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    287a:	18d3      	adds	r3, r2, r3
    287c:	7d9b      	ldrb	r3, [r3, #22]
    287e:	079b      	lsls	r3, r3, #30
    2880:	d547      	bpl.n	2912 <_uhd_pipe_trans_complete+0x16a>
    2882:	e7c0      	b.n	2806 <_uhd_pipe_trans_complete+0x5e>
				usb_host_pipe_set_auto_zlp(&dev, p_callback_para->pipe_num, ptr_job->b_shortpacket);
    2884:	0067      	lsls	r7, r4, #1
    2886:	193f      	adds	r7, r7, r4
    2888:	00ff      	lsls	r7, r7, #3
    288a:	4b4f      	ldr	r3, [pc, #316]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    288c:	19df      	adds	r7, r3, r7
    288e:	7dba      	ldrb	r2, [r7, #22]
    2890:	0792      	lsls	r2, r2, #30
    2892:	0fd2      	lsrs	r2, r2, #31
    2894:	7829      	ldrb	r1, [r5, #0]
    2896:	484a      	ldr	r0, [pc, #296]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    2898:	4b4e      	ldr	r3, [pc, #312]	; (29d4 <_uhd_pipe_trans_complete+0x22c>)
    289a:	4798      	blx	r3
				ptr_job->b_shortpacket = false; // No need to request another ZLP
    289c:	7dbb      	ldrb	r3, [r7, #22]
    289e:	2202      	movs	r2, #2
    28a0:	4393      	bics	r3, r2
    28a2:	75bb      	strb	r3, [r7, #22]
    28a4:	e7be      	b.n	2824 <_uhd_pipe_trans_complete+0x7c>
		nb_trans = p_callback_para->transfered_size;
    28a6:	886e      	ldrh	r6, [r5, #2]
		if (ptr_job->buf_internal != NULL) {
    28a8:	0063      	lsls	r3, r4, #1
    28aa:	191b      	adds	r3, r3, r4
    28ac:	00db      	lsls	r3, r3, #3
    28ae:	4a46      	ldr	r2, [pc, #280]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    28b0:	18d3      	adds	r3, r2, r3
    28b2:	685b      	ldr	r3, [r3, #4]
    28b4:	4698      	mov	r8, r3
    28b6:	2b00      	cmp	r3, #0
    28b8:	d018      	beq.n	28ec <_uhd_pipe_trans_complete+0x144>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
    28ba:	0063      	lsls	r3, r4, #1
    28bc:	191b      	adds	r3, r3, r4
    28be:	00db      	lsls	r3, r3, #3
    28c0:	18d1      	adds	r1, r2, r3
    28c2:	4689      	mov	r9, r1
    28c4:	589b      	ldr	r3, [r3, r2]
    28c6:	68ca      	ldr	r2, [r1, #12]
    28c8:	4692      	mov	sl, r2
    28ca:	449a      	add	sl, r3
					ptr_job->buf_size % pipe_size);
    28cc:	0039      	movs	r1, r7
    28ce:	464b      	mov	r3, r9
    28d0:	6898      	ldr	r0, [r3, #8]
    28d2:	4b44      	ldr	r3, [pc, #272]	; (29e4 <_uhd_pipe_trans_complete+0x23c>)
    28d4:	4798      	blx	r3
    28d6:	000a      	movs	r2, r1
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
    28d8:	4641      	mov	r1, r8
    28da:	4650      	mov	r0, sl
    28dc:	4b42      	ldr	r3, [pc, #264]	; (29e8 <_uhd_pipe_trans_complete+0x240>)
    28de:	4798      	blx	r3
			free(ptr_job->buf_internal);
    28e0:	4640      	mov	r0, r8
    28e2:	4b42      	ldr	r3, [pc, #264]	; (29ec <_uhd_pipe_trans_complete+0x244>)
    28e4:	4798      	blx	r3
			ptr_job->buf_internal = NULL;
    28e6:	2300      	movs	r3, #0
    28e8:	464a      	mov	r2, r9
    28ea:	6053      	str	r3, [r2, #4]
		ptr_job->nb_trans += nb_trans;
    28ec:	0063      	lsls	r3, r4, #1
    28ee:	191b      	adds	r3, r3, r4
    28f0:	00da      	lsls	r2, r3, #3
    28f2:	4b35      	ldr	r3, [pc, #212]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    28f4:	189b      	adds	r3, r3, r2
    28f6:	68da      	ldr	r2, [r3, #12]
    28f8:	4690      	mov	r8, r2
    28fa:	44b0      	add	r8, r6
    28fc:	4642      	mov	r2, r8
    28fe:	60da      	str	r2, [r3, #12]
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    2900:	689b      	ldr	r3, [r3, #8]
    2902:	4598      	cmp	r8, r3
    2904:	d90f      	bls.n	2926 <_uhd_pipe_trans_complete+0x17e>
			ptr_job->nb_trans = ptr_job->buf_size;
    2906:	0062      	lsls	r2, r4, #1
    2908:	1914      	adds	r4, r2, r4
    290a:	00e4      	lsls	r4, r4, #3
    290c:	4a2e      	ldr	r2, [pc, #184]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    290e:	1914      	adds	r4, r2, r4
    2910:	60e3      	str	r3, [r4, #12]
	_uhd_pipe_finish_job(p_callback_para->pipe_num, UHD_TRANS_NOERROR);
    2912:	7828      	ldrb	r0, [r5, #0]
    2914:	2100      	movs	r1, #0
    2916:	4b36      	ldr	r3, [pc, #216]	; (29f0 <_uhd_pipe_trans_complete+0x248>)
    2918:	4798      	blx	r3
}
    291a:	b004      	add	sp, #16
    291c:	bc1c      	pop	{r2, r3, r4}
    291e:	4690      	mov	r8, r2
    2920:	4699      	mov	r9, r3
    2922:	46a2      	mov	sl, r4
    2924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((nb_trans == p_callback_para->required_size)
    2926:	88aa      	ldrh	r2, [r5, #4]
    2928:	42b2      	cmp	r2, r6
    292a:	d1f2      	bne.n	2912 <_uhd_pipe_trans_complete+0x16a>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    292c:	4598      	cmp	r8, r3
    292e:	d0f0      	beq.n	2912 <_uhd_pipe_trans_complete+0x16a>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2930:	4642      	mov	r2, r8
    2932:	1a9b      	subs	r3, r3, r2
			if ((256L * pipe_size) < UHD_ENDPOINT_MAX_TRANS) {
    2934:	023a      	lsls	r2, r7, #8
    2936:	492f      	ldr	r1, [pc, #188]	; (29f4 <_uhd_pipe_trans_complete+0x24c>)
    2938:	428a      	cmp	r2, r1
    293a:	dc17      	bgt.n	296c <_uhd_pipe_trans_complete+0x1c4>
				max_trans = 256L * pipe_size;
    293c:	b296      	uxth	r6, r2
    293e:	429e      	cmp	r6, r3
    2940:	d900      	bls.n	2944 <_uhd_pipe_trans_complete+0x19c>
    2942:	001e      	movs	r6, r3
			if (next_trans < pipe_size) {
    2944:	42be      	cmp	r6, r7
    2946:	d213      	bcs.n	2970 <_uhd_pipe_trans_complete+0x1c8>
				ptr_job->buf_internal = malloc(pipe_size);
    2948:	0038      	movs	r0, r7
    294a:	4b2b      	ldr	r3, [pc, #172]	; (29f8 <_uhd_pipe_trans_complete+0x250>)
    294c:	4798      	blx	r3
    294e:	0063      	lsls	r3, r4, #1
    2950:	191c      	adds	r4, r3, r4
    2952:	00e4      	lsls	r4, r4, #3
    2954:	4b1c      	ldr	r3, [pc, #112]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    2956:	191c      	adds	r4, r3, r4
    2958:	6060      	str	r0, [r4, #4]
				if (ptr_job->buf_internal == NULL) {
    295a:	2800      	cmp	r0, #0
    295c:	d0d9      	beq.n	2912 <_uhd_pipe_trans_complete+0x16a>
				usb_host_pipe_read_job(&dev, p_callback_para->pipe_num, ptr_job->buf_internal, pipe_size);
    295e:	7829      	ldrb	r1, [r5, #0]
    2960:	003b      	movs	r3, r7
    2962:	0002      	movs	r2, r0
    2964:	4816      	ldr	r0, [pc, #88]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    2966:	4c25      	ldr	r4, [pc, #148]	; (29fc <_uhd_pipe_trans_complete+0x254>)
    2968:	47a0      	blx	r4
    296a:	e010      	b.n	298e <_uhd_pipe_trans_complete+0x1e6>
			max_trans = UHD_ENDPOINT_MAX_TRANS;
    296c:	4e17      	ldr	r6, [pc, #92]	; (29cc <_uhd_pipe_trans_complete+0x224>)
    296e:	e7e6      	b.n	293e <_uhd_pipe_trans_complete+0x196>
				next_trans -= next_trans % pipe_size;
    2970:	0039      	movs	r1, r7
    2972:	0030      	movs	r0, r6
    2974:	4b1b      	ldr	r3, [pc, #108]	; (29e4 <_uhd_pipe_trans_complete+0x23c>)
    2976:	4798      	blx	r3
    2978:	1a73      	subs	r3, r6, r1
				usb_host_pipe_read_job(&dev, p_callback_para->pipe_num, &ptr_job->buf[ptr_job->nb_trans], next_trans);
    297a:	0062      	lsls	r2, r4, #1
    297c:	1914      	adds	r4, r2, r4
    297e:	00e4      	lsls	r4, r4, #3
    2980:	4a11      	ldr	r2, [pc, #68]	; (29c8 <_uhd_pipe_trans_complete+0x220>)
    2982:	58a2      	ldr	r2, [r4, r2]
    2984:	4442      	add	r2, r8
    2986:	7829      	ldrb	r1, [r5, #0]
    2988:	480d      	ldr	r0, [pc, #52]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    298a:	4c1c      	ldr	r4, [pc, #112]	; (29fc <_uhd_pipe_trans_complete+0x254>)
    298c:	47a0      	blx	r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    298e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2992:	4253      	negs	r3, r2
    2994:	4153      	adcs	r3, r2
    2996:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2998:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    299a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    299e:	2200      	movs	r2, #0
    29a0:	4b0e      	ldr	r3, [pc, #56]	; (29dc <_uhd_pipe_trans_complete+0x234>)
    29a2:	701a      	strb	r2, [r3, #0]
	return flags;
    29a4:	9c01      	ldr	r4, [sp, #4]
			usb_host_pipe_enable_callback(&dev,p_callback_para->pipe_num,USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE);
    29a6:	7829      	ldrb	r1, [r5, #0]
    29a8:	4805      	ldr	r0, [pc, #20]	; (29c0 <_uhd_pipe_trans_complete+0x218>)
    29aa:	4b0d      	ldr	r3, [pc, #52]	; (29e0 <_uhd_pipe_trans_complete+0x238>)
    29ac:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    29ae:	2c00      	cmp	r4, #0
    29b0:	d0b3      	beq.n	291a <_uhd_pipe_trans_complete+0x172>
		cpu_irq_enable();
    29b2:	2201      	movs	r2, #1
    29b4:	4b09      	ldr	r3, [pc, #36]	; (29dc <_uhd_pipe_trans_complete+0x234>)
    29b6:	701a      	strb	r2, [r3, #0]
    29b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    29bc:	b662      	cpsie	i
    29be:	e7ac      	b.n	291a <_uhd_pipe_trans_complete+0x172>
    29c0:	200005a8 	.word	0x200005a8
    29c4:	00003875 	.word	0x00003875
    29c8:	200001d4 	.word	0x200001d4
    29cc:	00001fff 	.word	0x00001fff
    29d0:	00005d09 	.word	0x00005d09
    29d4:	00003ae9 	.word	0x00003ae9
    29d8:	00003a69 	.word	0x00003a69
    29dc:	20000023 	.word	0x20000023
    29e0:	0000390f 	.word	0x0000390f
    29e4:	00005b35 	.word	0x00005b35
    29e8:	00005e01 	.word	0x00005e01
    29ec:	00005ded 	.word	0x00005ded
    29f0:	00002561 	.word	0x00002561
    29f4:	00001ffe 	.word	0x00001ffe
    29f8:	00005dd9 	.word	0x00005dd9
    29fc:	000039e9 	.word	0x000039e9

00002a00 <_uhd_ep_error>:
{
    2a00:	b510      	push	{r4, lr}
	switch(p_callback_para->pipe_error_status) {
    2a02:	784b      	ldrb	r3, [r1, #1]
    2a04:	2b10      	cmp	r3, #16
    2a06:	d809      	bhi.n	2a1c <_uhd_ep_error+0x1c>
    2a08:	009b      	lsls	r3, r3, #2
    2a0a:	4a0c      	ldr	r2, [pc, #48]	; (2a3c <_uhd_ep_error+0x3c>)
    2a0c:	58d3      	ldr	r3, [r2, r3]
    2a0e:	469f      	mov	pc, r3
		uhd_error = UHD_TRANS_NOTRESPONDING;
    2a10:	2405      	movs	r4, #5
    2a12:	e006      	b.n	2a22 <_uhd_ep_error+0x22>
		uhd_error = UHD_TRANS_CRC;
    2a14:	2402      	movs	r4, #2
		break;
    2a16:	e004      	b.n	2a22 <_uhd_ep_error+0x22>
		uhd_error = UHD_TRANS_PIDFAILURE;
    2a18:	2406      	movs	r4, #6
		break;
    2a1a:	e002      	b.n	2a22 <_uhd_ep_error+0x22>
		uhd_error = UHD_TRANS_TIMEOUT;
    2a1c:	2407      	movs	r4, #7
		break;
    2a1e:	e000      	b.n	2a22 <_uhd_ep_error+0x22>
		uhd_error = UHD_TRANS_DT_MISMATCH;
    2a20:	2403      	movs	r4, #3
	_uhd_ep_abort_pipe(p_callback_para->pipe_num, uhd_error);
    2a22:	7808      	ldrb	r0, [r1, #0]
    2a24:	4b06      	ldr	r3, [pc, #24]	; (2a40 <_uhd_ep_error+0x40>)
    2a26:	681b      	ldr	r3, [r3, #0]
    2a28:	0002      	movs	r2, r0
    2a2a:	3208      	adds	r2, #8
    2a2c:	0152      	lsls	r2, r2, #5
    2a2e:	189b      	adds	r3, r3, r2
    2a30:	2210      	movs	r2, #16
    2a32:	715a      	strb	r2, [r3, #5]
	_uhd_pipe_finish_job(pipe, status);
    2a34:	0021      	movs	r1, r4
    2a36:	4b03      	ldr	r3, [pc, #12]	; (2a44 <_uhd_ep_error+0x44>)
    2a38:	4798      	blx	r3
}
    2a3a:	bd10      	pop	{r4, pc}
    2a3c:	000060d8 	.word	0x000060d8
    2a40:	200005a8 	.word	0x200005a8
    2a44:	00002561 	.word	0x00002561

00002a48 <uhd_enable>:
{
    2a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a4a:	46ce      	mov	lr, r9
    2a4c:	b500      	push	{lr}
    2a4e:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2a50:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2a54:	425a      	negs	r2, r3
    2a56:	4153      	adcs	r3, r2
    2a58:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2a5a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2a5c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2a60:	2200      	movs	r2, #0
    2a62:	4b52      	ldr	r3, [pc, #328]	; (2bac <uhd_enable+0x164>)
    2a64:	701a      	strb	r2, [r3, #0]
	return flags;
    2a66:	9e01      	ldr	r6, [sp, #4]
	if (usb_dual_enable()) {
    2a68:	4b51      	ldr	r3, [pc, #324]	; (2bb0 <uhd_enable+0x168>)
    2a6a:	4798      	blx	r3
    2a6c:	2800      	cmp	r0, #0
    2a6e:	d00b      	beq.n	2a88 <uhd_enable+0x40>
	if (cpu_irq_is_enabled_flags(flags))
    2a70:	2e00      	cmp	r6, #0
    2a72:	d005      	beq.n	2a80 <uhd_enable+0x38>
		cpu_irq_enable();
    2a74:	2201      	movs	r2, #1
    2a76:	4b4d      	ldr	r3, [pc, #308]	; (2bac <uhd_enable+0x164>)
    2a78:	701a      	strb	r2, [r3, #0]
    2a7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a7e:	b662      	cpsie	i
}
    2a80:	b006      	add	sp, #24
    2a82:	bc04      	pop	{r2}
    2a84:	4691      	mov	r9, r2
    2a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uhd_ctrl_request_first = NULL;
    2a88:	2500      	movs	r5, #0
    2a8a:	4b4a      	ldr	r3, [pc, #296]	; (2bb4 <uhd_enable+0x16c>)
    2a8c:	601d      	str	r5, [r3, #0]
	uhd_ctrl_request_last = NULL;
    2a8e:	4b4a      	ldr	r3, [pc, #296]	; (2bb8 <uhd_enable+0x170>)
    2a90:	601d      	str	r5, [r3, #0]
	uhd_ctrl_request_timeout = 0;
    2a92:	4b4a      	ldr	r3, [pc, #296]	; (2bbc <uhd_enable+0x174>)
    2a94:	801d      	strh	r5, [r3, #0]
	uhd_suspend_start = 0;
    2a96:	2400      	movs	r4, #0
    2a98:	4b49      	ldr	r3, [pc, #292]	; (2bc0 <uhd_enable+0x178>)
    2a9a:	2200      	movs	r2, #0
    2a9c:	701a      	strb	r2, [r3, #0]
	uhd_resume_start = 0;
    2a9e:	4b49      	ldr	r3, [pc, #292]	; (2bc4 <uhd_enable+0x17c>)
    2aa0:	701c      	strb	r4, [r3, #0]
	uhd_b_suspend_requested = false;
    2aa2:	4b49      	ldr	r3, [pc, #292]	; (2bc8 <uhd_enable+0x180>)
    2aa4:	701c      	strb	r4, [r3, #0]
	usb_get_config_defaults(&cfg);
    2aa6:	ab05      	add	r3, sp, #20
    2aa8:	4699      	mov	r9, r3
    2aaa:	0018      	movs	r0, r3
    2aac:	4b47      	ldr	r3, [pc, #284]	; (2bcc <uhd_enable+0x184>)
    2aae:	4798      	blx	r3
	cfg.select_host_mode = 1;
    2ab0:	2701      	movs	r7, #1
    2ab2:	464b      	mov	r3, r9
    2ab4:	701f      	strb	r7, [r3, #0]
	usb_init(&dev,USB, &cfg);
    2ab6:	464a      	mov	r2, r9
    2ab8:	4945      	ldr	r1, [pc, #276]	; (2bd0 <uhd_enable+0x188>)
    2aba:	4846      	ldr	r0, [pc, #280]	; (2bd4 <uhd_enable+0x18c>)
    2abc:	4b46      	ldr	r3, [pc, #280]	; (2bd8 <uhd_enable+0x190>)
    2abe:	4798      	blx	r3
	usb_enable(&dev);
    2ac0:	4844      	ldr	r0, [pc, #272]	; (2bd4 <uhd_enable+0x18c>)
    2ac2:	4b46      	ldr	r3, [pc, #280]	; (2bdc <uhd_enable+0x194>)
    2ac4:	4798      	blx	r3
	uhd_sleep_mode(UHD_STATE_NO_VBUS);
    2ac6:	2002      	movs	r0, #2
    2ac8:	4b45      	ldr	r3, [pc, #276]	; (2be0 <uhd_enable+0x198>)
    2aca:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    2acc:	466b      	mov	r3, sp
    2ace:	701c      	strb	r4, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2ad0:	705f      	strb	r7, [r3, #1]
	config->powersave  = false;
    2ad2:	709c      	strb	r4, [r3, #2]
	port_pin_set_config(USB_VBUS_PIN, &pin_conf);
    2ad4:	4669      	mov	r1, sp
    2ad6:	200e      	movs	r0, #14
    2ad8:	4b42      	ldr	r3, [pc, #264]	; (2be4 <uhd_enable+0x19c>)
    2ada:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    2adc:	ac02      	add	r4, sp, #8
    2ade:	0020      	movs	r0, r4
    2ae0:	4b41      	ldr	r3, [pc, #260]	; (2be8 <uhd_enable+0x1a0>)
    2ae2:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    2ae4:	230e      	movs	r3, #14
    2ae6:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    2ae8:	6065      	str	r5, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_LOW;
    2aea:	3b09      	subs	r3, #9
    2aec:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    2aee:	72a7      	strb	r7, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    2af0:	2100      	movs	r1, #0
    2af2:	200e      	movs	r0, #14
    2af4:	4b3d      	ldr	r3, [pc, #244]	; (2bec <uhd_enable+0x1a4>)
    2af6:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    2af8:	0021      	movs	r1, r4
    2afa:	200e      	movs	r0, #14
    2afc:	4b3c      	ldr	r3, [pc, #240]	; (2bf0 <uhd_enable+0x1a8>)
    2afe:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    2b00:	2200      	movs	r2, #0
    2b02:	210e      	movs	r1, #14
    2b04:	483b      	ldr	r0, [pc, #236]	; (2bf4 <uhd_enable+0x1ac>)
    2b06:	4b3c      	ldr	r3, [pc, #240]	; (2bf8 <uhd_enable+0x1b0>)
    2b08:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    2b0a:	2100      	movs	r1, #0
    2b0c:	200e      	movs	r0, #14
    2b0e:	4b3b      	ldr	r3, [pc, #236]	; (2bfc <uhd_enable+0x1b4>)
    2b10:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    2b12:	4b3b      	ldr	r3, [pc, #236]	; (2c00 <uhd_enable+0x1b8>)
    2b14:	6a1b      	ldr	r3, [r3, #32]
	if (is_usb_vbus_high()) {
    2b16:	045b      	lsls	r3, r3, #17
    2b18:	d43b      	bmi.n	2b92 <uhd_enable+0x14a>
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_SOF, _uhd_sof_interrupt);
    2b1a:	4c2e      	ldr	r4, [pc, #184]	; (2bd4 <uhd_enable+0x18c>)
    2b1c:	4a39      	ldr	r2, [pc, #228]	; (2c04 <uhd_enable+0x1bc>)
    2b1e:	2100      	movs	r1, #0
    2b20:	0020      	movs	r0, r4
    2b22:	4d39      	ldr	r5, [pc, #228]	; (2c08 <uhd_enable+0x1c0>)
    2b24:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_RESET, _uhd_reset);
    2b26:	4a39      	ldr	r2, [pc, #228]	; (2c0c <uhd_enable+0x1c4>)
    2b28:	2101      	movs	r1, #1
    2b2a:	0020      	movs	r0, r4
    2b2c:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_WAKEUP, _uhd_wakeup);
    2b2e:	4a38      	ldr	r2, [pc, #224]	; (2c10 <uhd_enable+0x1c8>)
    2b30:	2102      	movs	r1, #2
    2b32:	0020      	movs	r0, r4
    2b34:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_DNRSM, _uhd_downstream_resume);
    2b36:	4a37      	ldr	r2, [pc, #220]	; (2c14 <uhd_enable+0x1cc>)
    2b38:	2103      	movs	r1, #3
    2b3a:	0020      	movs	r0, r4
    2b3c:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_UPRSM, _uhd_upstream_resume);
    2b3e:	4a36      	ldr	r2, [pc, #216]	; (2c18 <uhd_enable+0x1d0>)
    2b40:	2104      	movs	r1, #4
    2b42:	0020      	movs	r0, r4
    2b44:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_RAMACER, _uhd_ram_error);
    2b46:	4a35      	ldr	r2, [pc, #212]	; (2c1c <uhd_enable+0x1d4>)
    2b48:	2105      	movs	r1, #5
    2b4a:	0020      	movs	r0, r4
    2b4c:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_CONNECT, _uhd_connect);
    2b4e:	4a34      	ldr	r2, [pc, #208]	; (2c20 <uhd_enable+0x1d8>)
    2b50:	2106      	movs	r1, #6
    2b52:	0020      	movs	r0, r4
    2b54:	47a8      	blx	r5
	usb_host_register_callback(&dev, USB_HOST_CALLBACK_DISCONNECT, _uhd_disconnect);
    2b56:	4a33      	ldr	r2, [pc, #204]	; (2c24 <uhd_enable+0x1dc>)
    2b58:	2107      	movs	r1, #7
    2b5a:	0020      	movs	r0, r4
    2b5c:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_SOF);
    2b5e:	2100      	movs	r1, #0
    2b60:	0020      	movs	r0, r4
    2b62:	4d31      	ldr	r5, [pc, #196]	; (2c28 <uhd_enable+0x1e0>)
    2b64:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_RESET);
    2b66:	2101      	movs	r1, #1
    2b68:	0020      	movs	r0, r4
    2b6a:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_RAMACER);
    2b6c:	2105      	movs	r1, #5
    2b6e:	0020      	movs	r0, r4
    2b70:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_CONNECT);
    2b72:	2106      	movs	r1, #6
    2b74:	0020      	movs	r0, r4
    2b76:	47a8      	blx	r5
	usb_host_enable_callback(&dev, USB_HOST_CALLBACK_DISCONNECT);
    2b78:	2107      	movs	r1, #7
    2b7a:	0020      	movs	r0, r4
    2b7c:	47a8      	blx	r5
	if (cpu_irq_is_enabled_flags(flags))
    2b7e:	2e00      	cmp	r6, #0
    2b80:	d100      	bne.n	2b84 <uhd_enable+0x13c>
    2b82:	e77d      	b.n	2a80 <uhd_enable+0x38>
		cpu_irq_enable();
    2b84:	2201      	movs	r2, #1
    2b86:	4b09      	ldr	r3, [pc, #36]	; (2bac <uhd_enable+0x164>)
    2b88:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2b8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2b8e:	b662      	cpsie	i
    2b90:	e776      	b.n	2a80 <uhd_enable+0x38>
		_uhd_vbus_handler();
    2b92:	4b18      	ldr	r3, [pc, #96]	; (2bf4 <uhd_enable+0x1ac>)
    2b94:	4798      	blx	r3
	module_inst->hw->HOST.CTRLB.bit.VBUSOK = 1;
    2b96:	4b0f      	ldr	r3, [pc, #60]	; (2bd4 <uhd_enable+0x18c>)
    2b98:	681a      	ldr	r2, [r3, #0]
    2b9a:	8911      	ldrh	r1, [r2, #8]
    2b9c:	2380      	movs	r3, #128	; 0x80
    2b9e:	00db      	lsls	r3, r3, #3
    2ba0:	430b      	orrs	r3, r1
    2ba2:	8113      	strh	r3, [r2, #8]
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
    2ba4:	2003      	movs	r0, #3
    2ba6:	4b0e      	ldr	r3, [pc, #56]	; (2be0 <uhd_enable+0x198>)
    2ba8:	4798      	blx	r3
    2baa:	e7b6      	b.n	2b1a <uhd_enable+0xd2>
    2bac:	20000023 	.word	0x20000023
    2bb0:	000021b5 	.word	0x000021b5
    2bb4:	20000754 	.word	0x20000754
    2bb8:	2000075c 	.word	0x2000075c
    2bbc:	20000760 	.word	0x20000760
    2bc0:	20000286 	.word	0x20000286
    2bc4:	20000284 	.word	0x20000284
    2bc8:	200001d1 	.word	0x200001d1
    2bcc:	000041f5 	.word	0x000041f5
    2bd0:	41005000 	.word	0x41005000
    2bd4:	200005a8 	.word	0x200005a8
    2bd8:	00004205 	.word	0x00004205
    2bdc:	00003b01 	.word	0x00003b01
    2be0:	00002271 	.word	0x00002271
    2be4:	00001981 	.word	0x00001981
    2be8:	0000165d 	.word	0x0000165d
    2bec:	00001565 	.word	0x00001565
    2bf0:	00001671 	.word	0x00001671
    2bf4:	00002619 	.word	0x00002619
    2bf8:	00001519 	.word	0x00001519
    2bfc:	00001545 	.word	0x00001545
    2c00:	41004400 	.word	0x41004400
    2c04:	00002e01 	.word	0x00002e01
    2c08:	000035ed 	.word	0x000035ed
    2c0c:	00002321 	.word	0x00002321
    2c10:	000024a9 	.word	0x000024a9
    2c14:	00002455 	.word	0x00002455
    2c18:	000023e9 	.word	0x000023e9
    2c1c:	00002335 	.word	0x00002335
    2c20:	0000238d 	.word	0x0000238d
    2c24:	00002339 	.word	0x00002339
    2c28:	00003605 	.word	0x00003605

00002c2c <uhd_disable>:
{
    2c2c:	b570      	push	{r4, r5, r6, lr}
    2c2e:	b082      	sub	sp, #8
    2c30:	0006      	movs	r6, r0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    2c32:	2100      	movs	r1, #0
    2c34:	200e      	movs	r0, #14
    2c36:	4b1c      	ldr	r3, [pc, #112]	; (2ca8 <uhd_disable+0x7c>)
    2c38:	4798      	blx	r3
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_SOF);
    2c3a:	4c1c      	ldr	r4, [pc, #112]	; (2cac <uhd_disable+0x80>)
    2c3c:	2100      	movs	r1, #0
    2c3e:	0020      	movs	r0, r4
    2c40:	4d1b      	ldr	r5, [pc, #108]	; (2cb0 <uhd_disable+0x84>)
    2c42:	47a8      	blx	r5
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_RESET);
    2c44:	2101      	movs	r1, #1
    2c46:	0020      	movs	r0, r4
    2c48:	47a8      	blx	r5
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_RAMACER);
    2c4a:	2105      	movs	r1, #5
    2c4c:	0020      	movs	r0, r4
    2c4e:	47a8      	blx	r5
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_CONNECT);
    2c50:	2106      	movs	r1, #6
    2c52:	0020      	movs	r0, r4
    2c54:	47a8      	blx	r5
	usb_host_disable_callback(&dev, USB_HOST_CALLBACK_DISCONNECT);
    2c56:	2107      	movs	r1, #7
    2c58:	0020      	movs	r0, r4
    2c5a:	47a8      	blx	r5
	module_inst->hw->HOST.CTRLB.bit.SOFE = 0;
    2c5c:	6822      	ldr	r2, [r4, #0]
    2c5e:	8913      	ldrh	r3, [r2, #8]
    2c60:	4914      	ldr	r1, [pc, #80]	; (2cb4 <uhd_disable+0x88>)
    2c62:	400b      	ands	r3, r1
    2c64:	8113      	strh	r3, [r2, #8]
	uhc_notify_connection(false);
    2c66:	2000      	movs	r0, #0
    2c68:	4b13      	ldr	r3, [pc, #76]	; (2cb8 <uhd_disable+0x8c>)
    2c6a:	4798      	blx	r3
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
    2c6c:	2001      	movs	r0, #1
    2c6e:	4b13      	ldr	r3, [pc, #76]	; (2cbc <uhd_disable+0x90>)
    2c70:	4798      	blx	r3
	if (!b_id_stop) {
    2c72:	2e00      	cmp	r6, #0
    2c74:	d101      	bne.n	2c7a <uhd_disable+0x4e>
}
    2c76:	b002      	add	sp, #8
    2c78:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2c7a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2c7e:	425a      	negs	r2, r3
    2c80:	4153      	adcs	r3, r2
    2c82:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2c84:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2c86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2c8a:	2200      	movs	r2, #0
    2c8c:	4b0c      	ldr	r3, [pc, #48]	; (2cc0 <uhd_disable+0x94>)
    2c8e:	701a      	strb	r2, [r3, #0]
	return flags;
    2c90:	9c01      	ldr	r4, [sp, #4]
	usb_dual_disable();
    2c92:	4b0c      	ldr	r3, [pc, #48]	; (2cc4 <uhd_disable+0x98>)
    2c94:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2c96:	2c00      	cmp	r4, #0
    2c98:	d0ed      	beq.n	2c76 <uhd_disable+0x4a>
		cpu_irq_enable();
    2c9a:	2201      	movs	r2, #1
    2c9c:	4b08      	ldr	r3, [pc, #32]	; (2cc0 <uhd_disable+0x94>)
    2c9e:	701a      	strb	r2, [r3, #0]
    2ca0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ca4:	b662      	cpsie	i
    2ca6:	e7e6      	b.n	2c76 <uhd_disable+0x4a>
    2ca8:	00001565 	.word	0x00001565
    2cac:	200005a8 	.word	0x200005a8
    2cb0:	0000366f 	.word	0x0000366f
    2cb4:	fffffeff 	.word	0xfffffeff
    2cb8:	000012d5 	.word	0x000012d5
    2cbc:	00002271 	.word	0x00002271
    2cc0:	20000023 	.word	0x20000023
    2cc4:	0000224d 	.word	0x0000224d

00002cc8 <uhd_get_speed>:
	if (module_inst->hw->HOST.STATUS.bit.SPEED == 0) {
    2cc8:	4b03      	ldr	r3, [pc, #12]	; (2cd8 <uhd_get_speed+0x10>)
    2cca:	681b      	ldr	r3, [r3, #0]
    2ccc:	7b18      	ldrb	r0, [r3, #12]
    2cce:	0700      	lsls	r0, r0, #28
    2cd0:	0f80      	lsrs	r0, r0, #30
		return UHD_SPEED_LOW;
    2cd2:	4243      	negs	r3, r0
    2cd4:	4158      	adcs	r0, r3
}
    2cd6:	4770      	bx	lr
    2cd8:	200005a8 	.word	0x200005a8

00002cdc <uhd_send_reset>:
	uhd_reset_callback = callback;
    2cdc:	4b04      	ldr	r3, [pc, #16]	; (2cf0 <uhd_send_reset+0x14>)
    2cde:	6018      	str	r0, [r3, #0]
	module_inst->hw->HOST.CTRLB.bit.BUSRESET = 1;
    2ce0:	4b04      	ldr	r3, [pc, #16]	; (2cf4 <uhd_send_reset+0x18>)
    2ce2:	681a      	ldr	r2, [r3, #0]
    2ce4:	8911      	ldrh	r1, [r2, #8]
    2ce6:	2380      	movs	r3, #128	; 0x80
    2ce8:	009b      	lsls	r3, r3, #2
    2cea:	430b      	orrs	r3, r1
    2cec:	8113      	strh	r3, [r2, #8]
}
    2cee:	4770      	bx	lr
    2cf0:	20000280 	.word	0x20000280
    2cf4:	200005a8 	.word	0x200005a8

00002cf8 <uhd_suspend>:
{
    2cf8:	b570      	push	{r4, r5, r6, lr}
	if (uhd_ctrl_request_timeout) {
    2cfa:	4b12      	ldr	r3, [pc, #72]	; (2d44 <uhd_suspend+0x4c>)
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	b29b      	uxth	r3, r3
    2d00:	2b00      	cmp	r3, #0
    2d02:	d11b      	bne.n	2d3c <uhd_suspend+0x44>
	return (module_inst->hw->HOST.HostPipe[pipe_num].PSTATUS.bit.PFREEZE == 1);
    2d04:	4b10      	ldr	r3, [pc, #64]	; (2d48 <uhd_suspend+0x50>)
    2d06:	681d      	ldr	r5, [r3, #0]
    2d08:	2101      	movs	r1, #1
    2d0a:	2600      	movs	r6, #0
		uhd_pipes_unfreeze |= (!usb_host_pipe_is_frozen(&dev, pipe)) << pipe;
    2d0c:	2401      	movs	r4, #1
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_PFREEZE;
    2d0e:	2010      	movs	r0, #16
	return (module_inst->hw->HOST.HostPipe[pipe_num].PSTATUS.bit.PFREEZE == 1);
    2d10:	000a      	movs	r2, r1
    2d12:	3208      	adds	r2, #8
    2d14:	0152      	lsls	r2, r2, #5
    2d16:	18aa      	adds	r2, r5, r2
    2d18:	7993      	ldrb	r3, [r2, #6]
    2d1a:	06db      	lsls	r3, r3, #27
    2d1c:	0fdb      	lsrs	r3, r3, #31
    2d1e:	4063      	eors	r3, r4
    2d20:	b2db      	uxtb	r3, r3
    2d22:	408b      	lsls	r3, r1
    2d24:	431e      	orrs	r6, r3
    2d26:	b2f6      	uxtb	r6, r6
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_PFREEZE;
    2d28:	7150      	strb	r0, [r2, #5]
    2d2a:	3101      	adds	r1, #1
	for (uint8_t pipe = 1; pipe < USB_PIPE_NUM; pipe++) {
    2d2c:	2908      	cmp	r1, #8
    2d2e:	d1ef      	bne.n	2d10 <uhd_suspend+0x18>
    2d30:	4b06      	ldr	r3, [pc, #24]	; (2d4c <uhd_suspend+0x54>)
    2d32:	701e      	strb	r6, [r3, #0]
	uhd_suspend_start = 3;
    2d34:	2203      	movs	r2, #3
    2d36:	4b06      	ldr	r3, [pc, #24]	; (2d50 <uhd_suspend+0x58>)
    2d38:	701a      	strb	r2, [r3, #0]
}
    2d3a:	bd70      	pop	{r4, r5, r6, pc}
		uhd_b_suspend_requested = true;
    2d3c:	2201      	movs	r2, #1
    2d3e:	4b05      	ldr	r3, [pc, #20]	; (2d54 <uhd_suspend+0x5c>)
    2d40:	701a      	strb	r2, [r3, #0]
		return;
    2d42:	e7fa      	b.n	2d3a <uhd_suspend+0x42>
    2d44:	20000760 	.word	0x20000760
    2d48:	200005a8 	.word	0x200005a8
    2d4c:	2000027c 	.word	0x2000027c
    2d50:	20000286 	.word	0x20000286
    2d54:	200001d1 	.word	0x200001d1

00002d58 <_uhd_ctrl_request_end>:
{
    2d58:	b570      	push	{r4, r5, r6, lr}
    2d5a:	b084      	sub	sp, #16
    2d5c:	0004      	movs	r4, r0
	usb_host_pipe_get_config(&dev, 0, &cfg);
    2d5e:	aa02      	add	r2, sp, #8
    2d60:	2100      	movs	r1, #0
    2d62:	481d      	ldr	r0, [pc, #116]	; (2dd8 <_uhd_ctrl_request_end+0x80>)
    2d64:	4b1d      	ldr	r3, [pc, #116]	; (2ddc <_uhd_ctrl_request_end+0x84>)
    2d66:	4798      	blx	r3
	uhd_ctrl_request_timeout = 0;
    2d68:	2200      	movs	r2, #0
    2d6a:	4b1d      	ldr	r3, [pc, #116]	; (2de0 <_uhd_ctrl_request_end+0x88>)
    2d6c:	801a      	strh	r2, [r3, #0]
	callback_end = uhd_ctrl_request_first->callback_end;
    2d6e:	4b1d      	ldr	r3, [pc, #116]	; (2de4 <_uhd_ctrl_request_end+0x8c>)
    2d70:	6818      	ldr	r0, [r3, #0]
    2d72:	6886      	ldr	r6, [r0, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2d74:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d78:	4251      	negs	r1, r2
    2d7a:	414a      	adcs	r2, r1
    2d7c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2d7e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2d80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d84:	4a18      	ldr	r2, [pc, #96]	; (2de8 <_uhd_ctrl_request_end+0x90>)
    2d86:	2100      	movs	r1, #0
    2d88:	7011      	strb	r1, [r2, #0]
	return flags;
    2d8a:	9a01      	ldr	r2, [sp, #4]
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
    2d8c:	6819      	ldr	r1, [r3, #0]
    2d8e:	68cd      	ldr	r5, [r1, #12]
    2d90:	601d      	str	r5, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
    2d92:	2a00      	cmp	r2, #0
    2d94:	d005      	beq.n	2da2 <_uhd_ctrl_request_end+0x4a>
		cpu_irq_enable();
    2d96:	2201      	movs	r2, #1
    2d98:	4b13      	ldr	r3, [pc, #76]	; (2de8 <_uhd_ctrl_request_end+0x90>)
    2d9a:	701a      	strb	r2, [r3, #0]
    2d9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2da0:	b662      	cpsie	i
	free(request_to_free);
    2da2:	4b12      	ldr	r3, [pc, #72]	; (2dec <_uhd_ctrl_request_end+0x94>)
    2da4:	4798      	blx	r3
	if (callback_end != NULL) {
    2da6:	2e00      	cmp	r6, #0
    2da8:	d005      	beq.n	2db6 <_uhd_ctrl_request_end+0x5e>
		callback_end(cfg.device_address, status, uhd_ctrl_nb_trans);
    2daa:	4b11      	ldr	r3, [pc, #68]	; (2df0 <_uhd_ctrl_request_end+0x98>)
    2dac:	881a      	ldrh	r2, [r3, #0]
    2dae:	ab02      	add	r3, sp, #8
    2db0:	7818      	ldrb	r0, [r3, #0]
    2db2:	0021      	movs	r1, r4
    2db4:	47b0      	blx	r6
	if (b_new_request) {
    2db6:	2d00      	cmp	r5, #0
    2db8:	d001      	beq.n	2dbe <_uhd_ctrl_request_end+0x66>
		_uhd_ctrl_phase_setup();
    2dba:	4b0e      	ldr	r3, [pc, #56]	; (2df4 <_uhd_ctrl_request_end+0x9c>)
    2dbc:	4798      	blx	r3
	if (uhd_b_suspend_requested) {
    2dbe:	4b0e      	ldr	r3, [pc, #56]	; (2df8 <_uhd_ctrl_request_end+0xa0>)
    2dc0:	781b      	ldrb	r3, [r3, #0]
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d101      	bne.n	2dca <_uhd_ctrl_request_end+0x72>
}
    2dc6:	b004      	add	sp, #16
    2dc8:	bd70      	pop	{r4, r5, r6, pc}
		uhd_b_suspend_requested = false;
    2dca:	2200      	movs	r2, #0
    2dcc:	4b0a      	ldr	r3, [pc, #40]	; (2df8 <_uhd_ctrl_request_end+0xa0>)
    2dce:	701a      	strb	r2, [r3, #0]
		uhd_suspend();
    2dd0:	4b0a      	ldr	r3, [pc, #40]	; (2dfc <_uhd_ctrl_request_end+0xa4>)
    2dd2:	4798      	blx	r3
}
    2dd4:	e7f7      	b.n	2dc6 <_uhd_ctrl_request_end+0x6e>
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	200005a8 	.word	0x200005a8
    2ddc:	00003875 	.word	0x00003875
    2de0:	20000760 	.word	0x20000760
    2de4:	20000754 	.word	0x20000754
    2de8:	20000023 	.word	0x20000023
    2dec:	00005ded 	.word	0x00005ded
    2df0:	20000758 	.word	0x20000758
    2df4:	00002f4d 	.word	0x00002f4d
    2df8:	200001d1 	.word	0x200001d1
    2dfc:	00002cf9 	.word	0x00002cf9

00002e00 <_uhd_sof_interrupt>:
{
    2e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uhd_suspend_start) {
    2e02:	4b44      	ldr	r3, [pc, #272]	; (2f14 <_uhd_sof_interrupt+0x114>)
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d01f      	beq.n	2e4a <_uhd_sof_interrupt+0x4a>
		if (--uhd_suspend_start == 0) {
    2e0a:	3b01      	subs	r3, #1
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	4a41      	ldr	r2, [pc, #260]	; (2f14 <_uhd_sof_interrupt+0x114>)
    2e10:	7013      	strb	r3, [r2, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d000      	beq.n	2e18 <_uhd_sof_interrupt+0x18>
}
    2e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module_inst->hw->HOST.CTRLB.bit.SOFE = 0;
    2e18:	4c3f      	ldr	r4, [pc, #252]	; (2f18 <_uhd_sof_interrupt+0x118>)
    2e1a:	6822      	ldr	r2, [r4, #0]
    2e1c:	8913      	ldrh	r3, [r2, #8]
    2e1e:	493f      	ldr	r1, [pc, #252]	; (2f1c <_uhd_sof_interrupt+0x11c>)
    2e20:	400b      	ands	r3, r1
    2e22:	8113      	strh	r3, [r2, #8]
			usb_host_enable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    2e24:	3104      	adds	r1, #4
    2e26:	31ff      	adds	r1, #255	; 0xff
    2e28:	0020      	movs	r0, r4
    2e2a:	4d3d      	ldr	r5, [pc, #244]	; (2f20 <_uhd_sof_interrupt+0x120>)
    2e2c:	47a8      	blx	r5
			usb_host_enable_callback(&dev, USB_HOST_CALLBACK_DNRSM);
    2e2e:	2103      	movs	r1, #3
    2e30:	0020      	movs	r0, r4
    2e32:	47a8      	blx	r5
			usb_host_enable_callback(&dev, USB_HOST_CALLBACK_UPRSM);
    2e34:	2104      	movs	r1, #4
    2e36:	0020      	movs	r0, r4
    2e38:	47a8      	blx	r5
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    2e3a:	6822      	ldr	r2, [r4, #0]
    2e3c:	7b53      	ldrb	r3, [r2, #13]
			while (2==usb_get_state_machine_status(&dev));
    2e3e:	2b02      	cmp	r3, #2
    2e40:	d0fc      	beq.n	2e3c <_uhd_sof_interrupt+0x3c>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
    2e42:	2004      	movs	r0, #4
    2e44:	4b37      	ldr	r3, [pc, #220]	; (2f24 <_uhd_sof_interrupt+0x124>)
    2e46:	4798      	blx	r3
    2e48:	e7e5      	b.n	2e16 <_uhd_sof_interrupt+0x16>
	if (uhd_resume_start) {
    2e4a:	4b37      	ldr	r3, [pc, #220]	; (2f28 <_uhd_sof_interrupt+0x128>)
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d01d      	beq.n	2e8e <_uhd_sof_interrupt+0x8e>
		if (--uhd_resume_start == 0) {
    2e52:	3b01      	subs	r3, #1
    2e54:	b2db      	uxtb	r3, r3
    2e56:	4a34      	ldr	r2, [pc, #208]	; (2f28 <_uhd_sof_interrupt+0x128>)
    2e58:	7013      	strb	r3, [r2, #0]
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d1db      	bne.n	2e16 <_uhd_sof_interrupt+0x16>
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
    2e5e:	4b33      	ldr	r3, [pc, #204]	; (2f2c <_uhd_sof_interrupt+0x12c>)
    2e60:	7818      	ldrb	r0, [r3, #0]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg = USB_HOST_PSTATUSCLR_PFREEZE;
    2e62:	4b2d      	ldr	r3, [pc, #180]	; (2f18 <_uhd_sof_interrupt+0x118>)
    2e64:	681d      	ldr	r5, [r3, #0]
    2e66:	2301      	movs	r3, #1
    2e68:	2101      	movs	r1, #1
    2e6a:	2410      	movs	r4, #16
    2e6c:	e002      	b.n	2e74 <_uhd_sof_interrupt+0x74>
    2e6e:	3301      	adds	r3, #1
			for (uint8_t pipe = 1; pipe < USB_PIPE_NUM; pipe++) {
    2e70:	2b08      	cmp	r3, #8
    2e72:	d009      	beq.n	2e88 <_uhd_sof_interrupt+0x88>
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
    2e74:	0002      	movs	r2, r0
    2e76:	411a      	asrs	r2, r3
    2e78:	4211      	tst	r1, r2
    2e7a:	d0f8      	beq.n	2e6e <_uhd_sof_interrupt+0x6e>
    2e7c:	001a      	movs	r2, r3
    2e7e:	3208      	adds	r2, #8
    2e80:	0152      	lsls	r2, r2, #5
    2e82:	18aa      	adds	r2, r5, r2
    2e84:	7114      	strb	r4, [r2, #4]
    2e86:	e7f2      	b.n	2e6e <_uhd_sof_interrupt+0x6e>
			uhc_notify_resume();
    2e88:	4b29      	ldr	r3, [pc, #164]	; (2f30 <_uhd_sof_interrupt+0x130>)
    2e8a:	4798      	blx	r3
    2e8c:	e7c3      	b.n	2e16 <_uhd_sof_interrupt+0x16>
	if (uhd_ctrl_request_timeout) {
    2e8e:	4b29      	ldr	r3, [pc, #164]	; (2f34 <_uhd_sof_interrupt+0x134>)
    2e90:	881b      	ldrh	r3, [r3, #0]
    2e92:	b29b      	uxth	r3, r3
    2e94:	2b00      	cmp	r3, #0
    2e96:	d006      	beq.n	2ea6 <_uhd_sof_interrupt+0xa6>
		if (--uhd_ctrl_request_timeout == 0) {
    2e98:	4a26      	ldr	r2, [pc, #152]	; (2f34 <_uhd_sof_interrupt+0x134>)
    2e9a:	8813      	ldrh	r3, [r2, #0]
    2e9c:	3b01      	subs	r3, #1
    2e9e:	b29b      	uxth	r3, r3
    2ea0:	8013      	strh	r3, [r2, #0]
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	d004      	beq.n	2eb0 <_uhd_sof_interrupt+0xb0>
    2ea6:	4e24      	ldr	r6, [pc, #144]	; (2f38 <_uhd_sof_interrupt+0x138>)
    2ea8:	2501      	movs	r5, #1
		if (ptr_job->busy == true) {
    2eaa:	0037      	movs	r7, r6
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_PFREEZE;
    2eac:	4c1a      	ldr	r4, [pc, #104]	; (2f18 <_uhd_sof_interrupt+0x118>)
    2eae:	e00d      	b.n	2ecc <_uhd_sof_interrupt+0xcc>
    2eb0:	4b19      	ldr	r3, [pc, #100]	; (2f18 <_uhd_sof_interrupt+0x118>)
    2eb2:	681a      	ldr	r2, [r3, #0]
    2eb4:	2110      	movs	r1, #16
    2eb6:	2306      	movs	r3, #6
    2eb8:	33ff      	adds	r3, #255	; 0xff
    2eba:	54d1      	strb	r1, [r2, r3]
			_uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
    2ebc:	2007      	movs	r0, #7
    2ebe:	4b1f      	ldr	r3, [pc, #124]	; (2f3c <_uhd_sof_interrupt+0x13c>)
    2ec0:	4798      	blx	r3
    2ec2:	e7f0      	b.n	2ea6 <_uhd_sof_interrupt+0xa6>
    2ec4:	3618      	adds	r6, #24
    2ec6:	3501      	adds	r5, #1
	for (uint8_t pipe = 1; pipe < USB_PIPE_NUM; pipe++) {
    2ec8:	2d08      	cmp	r5, #8
    2eca:	d01c      	beq.n	2f06 <_uhd_sof_interrupt+0x106>
    2ecc:	b2e8      	uxtb	r0, r5
		ptr_job = &uhd_pipe_job[pipe - 1];
    2ece:	002a      	movs	r2, r5
		if (ptr_job->busy == true) {
    2ed0:	1e69      	subs	r1, r5, #1
    2ed2:	004b      	lsls	r3, r1, #1
    2ed4:	185b      	adds	r3, r3, r1
    2ed6:	00db      	lsls	r3, r3, #3
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	7d9b      	ldrb	r3, [r3, #22]
    2edc:	07db      	lsls	r3, r3, #31
    2ede:	d5f1      	bpl.n	2ec4 <_uhd_sof_interrupt+0xc4>
			if (ptr_job->timeout) {
    2ee0:	8ab3      	ldrh	r3, [r6, #20]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d0ee      	beq.n	2ec4 <_uhd_sof_interrupt+0xc4>
				if (--ptr_job->timeout == 0) {
    2ee6:	3b01      	subs	r3, #1
    2ee8:	b29b      	uxth	r3, r3
    2eea:	82b3      	strh	r3, [r6, #20]
    2eec:	2b00      	cmp	r3, #0
    2eee:	d1e9      	bne.n	2ec4 <_uhd_sof_interrupt+0xc4>
    2ef0:	3208      	adds	r2, #8
    2ef2:	0152      	lsls	r2, r2, #5
    2ef4:	6823      	ldr	r3, [r4, #0]
    2ef6:	469c      	mov	ip, r3
    2ef8:	4462      	add	r2, ip
    2efa:	2310      	movs	r3, #16
    2efc:	7153      	strb	r3, [r2, #5]
	_uhd_pipe_finish_job(pipe, status);
    2efe:	2107      	movs	r1, #7
    2f00:	4b0f      	ldr	r3, [pc, #60]	; (2f40 <_uhd_sof_interrupt+0x140>)
    2f02:	4798      	blx	r3
    2f04:	e7de      	b.n	2ec4 <_uhd_sof_interrupt+0xc4>
	uhc_notify_sof(false);
    2f06:	2000      	movs	r0, #0
    2f08:	4b0e      	ldr	r3, [pc, #56]	; (2f44 <_uhd_sof_interrupt+0x144>)
    2f0a:	4798      	blx	r3
	UHC_SOF_EVENT();
    2f0c:	4b0e      	ldr	r3, [pc, #56]	; (2f48 <_uhd_sof_interrupt+0x148>)
    2f0e:	4798      	blx	r3
    2f10:	e781      	b.n	2e16 <_uhd_sof_interrupt+0x16>
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	20000286 	.word	0x20000286
    2f18:	200005a8 	.word	0x200005a8
    2f1c:	fffffeff 	.word	0xfffffeff
    2f20:	00003605 	.word	0x00003605
    2f24:	00002271 	.word	0x00002271
    2f28:	20000284 	.word	0x20000284
    2f2c:	2000027c 	.word	0x2000027c
    2f30:	00001381 	.word	0x00001381
    2f34:	20000760 	.word	0x20000760
    2f38:	200001d4 	.word	0x200001d4
    2f3c:	00002d59 	.word	0x00002d59
    2f40:	00002561 	.word	0x00002561
    2f44:	00001355 	.word	0x00001355
    2f48:	00005a05 	.word	0x00005a05

00002f4c <_uhd_ctrl_phase_setup>:
{
    2f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f4e:	b083      	sub	sp, #12
	usb_host_pipe_get_config(&dev, 0, &cfg);
    2f50:	466a      	mov	r2, sp
    2f52:	2100      	movs	r1, #0
    2f54:	481d      	ldr	r0, [pc, #116]	; (2fcc <_uhd_ctrl_phase_setup+0x80>)
    2f56:	4b1e      	ldr	r3, [pc, #120]	; (2fd0 <_uhd_ctrl_phase_setup+0x84>)
    2f58:	4798      	blx	r3
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
    2f5a:	2400      	movs	r4, #0
    2f5c:	4b1d      	ldr	r3, [pc, #116]	; (2fd4 <_uhd_ctrl_phase_setup+0x88>)
    2f5e:	701c      	strb	r4, [r3, #0]
	memcpy( &setup_req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
    2f60:	4b1d      	ldr	r3, [pc, #116]	; (2fd8 <_uhd_ctrl_phase_setup+0x8c>)
    2f62:	681b      	ldr	r3, [r3, #0]
    2f64:	7c1e      	ldrb	r6, [r3, #16]
    2f66:	7c5d      	ldrb	r5, [r3, #17]
    2f68:	7c98      	ldrb	r0, [r3, #18]
    2f6a:	7cda      	ldrb	r2, [r3, #19]
    2f6c:	0212      	lsls	r2, r2, #8
    2f6e:	4310      	orrs	r0, r2
    2f70:	7d19      	ldrb	r1, [r3, #20]
    2f72:	7d5a      	ldrb	r2, [r3, #21]
    2f74:	0212      	lsls	r2, r2, #8
    2f76:	4311      	orrs	r1, r2
    2f78:	7d9f      	ldrb	r7, [r3, #22]
    2f7a:	7dda      	ldrb	r2, [r3, #23]
    2f7c:	0212      	lsls	r2, r2, #8
    2f7e:	433a      	orrs	r2, r7
	uhd_ctrl_nb_trans = 0;
    2f80:	4f16      	ldr	r7, [pc, #88]	; (2fdc <_uhd_ctrl_phase_setup+0x90>)
    2f82:	803c      	strh	r4, [r7, #0]
	if ((cfg.pipe_type == USB_HOST_PIPE_TYPE_DISABLE) ||
    2f84:	466c      	mov	r4, sp
    2f86:	78a4      	ldrb	r4, [r4, #2]
    2f88:	2c00      	cmp	r4, #0
    2f8a:	d004      	beq.n	2f96 <_uhd_ctrl_phase_setup+0x4a>
    2f8c:	7e9c      	ldrb	r4, [r3, #26]
    2f8e:	466b      	mov	r3, sp
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	429c      	cmp	r4, r3
    2f94:	d004      	beq.n	2fa0 <_uhd_ctrl_phase_setup+0x54>
		_uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
    2f96:	2001      	movs	r0, #1
    2f98:	4b11      	ldr	r3, [pc, #68]	; (2fe0 <_uhd_ctrl_phase_setup+0x94>)
    2f9a:	4798      	blx	r3
}
    2f9c:	b003      	add	sp, #12
    2f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(uhd_ctrl_buffer, &setup_req, sizeof(setup_req));
    2fa0:	4b10      	ldr	r3, [pc, #64]	; (2fe4 <_uhd_ctrl_phase_setup+0x98>)
    2fa2:	701e      	strb	r6, [r3, #0]
    2fa4:	705d      	strb	r5, [r3, #1]
    2fa6:	8058      	strh	r0, [r3, #2]
    2fa8:	8099      	strh	r1, [r3, #4]
    2faa:	80da      	strh	r2, [r3, #6]
	uhd_ctrl_request_timeout = 5000;
    2fac:	490e      	ldr	r1, [pc, #56]	; (2fe8 <_uhd_ctrl_phase_setup+0x9c>)
    2fae:	4a0f      	ldr	r2, [pc, #60]	; (2fec <_uhd_ctrl_phase_setup+0xa0>)
    2fb0:	8011      	strh	r1, [r2, #0]
	usb_host_pipe_setup_job(&dev, 0, uhd_ctrl_buffer);
    2fb2:	4c06      	ldr	r4, [pc, #24]	; (2fcc <_uhd_ctrl_phase_setup+0x80>)
    2fb4:	001a      	movs	r2, r3
    2fb6:	2100      	movs	r1, #0
    2fb8:	0020      	movs	r0, r4
    2fba:	4b0d      	ldr	r3, [pc, #52]	; (2ff0 <_uhd_ctrl_phase_setup+0xa4>)
    2fbc:	4798      	blx	r3
	usb_host_pipe_enable_callback(&dev, 0, USB_HOST_PIPE_CALLBACK_SETUP);
    2fbe:	2202      	movs	r2, #2
    2fc0:	2100      	movs	r1, #0
    2fc2:	0020      	movs	r0, r4
    2fc4:	4b0b      	ldr	r3, [pc, #44]	; (2ff4 <_uhd_ctrl_phase_setup+0xa8>)
    2fc6:	4798      	blx	r3
    2fc8:	e7e8      	b.n	2f9c <_uhd_ctrl_phase_setup+0x50>
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	200005a8 	.word	0x200005a8
    2fd0:	00003875 	.word	0x00003875
    2fd4:	20000710 	.word	0x20000710
    2fd8:	20000754 	.word	0x20000754
    2fdc:	20000758 	.word	0x20000758
    2fe0:	00002d59 	.word	0x00002d59
    2fe4:	20000714 	.word	0x20000714
    2fe8:	00001388 	.word	0x00001388
    2fec:	20000760 	.word	0x20000760
    2ff0:	00003971 	.word	0x00003971
    2ff4:	0000390f 	.word	0x0000390f

00002ff8 <_uhd_ep0_stall>:
{
    2ff8:	b500      	push	{lr}
    2ffa:	b083      	sub	sp, #12
	usb_host_pipe_get_config(&dev, 0, &cfg);
    2ffc:	466a      	mov	r2, sp
    2ffe:	2100      	movs	r1, #0
    3000:	4809      	ldr	r0, [pc, #36]	; (3028 <STACK_SIZE+0x28>)
    3002:	4b0a      	ldr	r3, [pc, #40]	; (302c <STACK_SIZE+0x2c>)
    3004:	4798      	blx	r3
	if (cfg.pipe_type == USB_HOST_PIPE_TYPE_EXTENDED) {
    3006:	466b      	mov	r3, sp
    3008:	789b      	ldrb	r3, [r3, #2]
    300a:	2b05      	cmp	r3, #5
    300c:	d004      	beq.n	3018 <STACK_SIZE+0x18>
	_uhd_ctrl_request_end(UHD_TRANS_STALL);
    300e:	2004      	movs	r0, #4
    3010:	4b07      	ldr	r3, [pc, #28]	; (3030 <STACK_SIZE+0x30>)
    3012:	4798      	blx	r3
}
    3014:	b003      	add	sp, #12
    3016:	bd00      	pop	{pc}
		cfg.pipe_type = USB_HOST_PIPE_TYPE_CONTROL;
    3018:	3b04      	subs	r3, #4
    301a:	466a      	mov	r2, sp
    301c:	7093      	strb	r3, [r2, #2]
		usb_host_pipe_set_config(&dev, 0, &cfg);
    301e:	2100      	movs	r1, #0
    3020:	4801      	ldr	r0, [pc, #4]	; (3028 <STACK_SIZE+0x28>)
    3022:	4b04      	ldr	r3, [pc, #16]	; (3034 <STACK_SIZE+0x34>)
    3024:	4798      	blx	r3
    3026:	e7f5      	b.n	3014 <STACK_SIZE+0x14>
    3028:	200005a8 	.word	0x200005a8
    302c:	00003875 	.word	0x00003875
    3030:	00002d59 	.word	0x00002d59
    3034:	000036ed 	.word	0x000036ed

00003038 <_uhd_ep0_error>:
{
    3038:	b510      	push	{r4, lr}
    303a:	b082      	sub	sp, #8
    303c:	000c      	movs	r4, r1
	usb_host_pipe_get_config(&dev, 0, &cfg);
    303e:	466a      	mov	r2, sp
    3040:	2100      	movs	r1, #0
    3042:	4811      	ldr	r0, [pc, #68]	; (3088 <_uhd_ep0_error+0x50>)
    3044:	4b11      	ldr	r3, [pc, #68]	; (308c <_uhd_ep0_error+0x54>)
    3046:	4798      	blx	r3
	if (cfg.pipe_type == USB_HOST_PIPE_TYPE_EXTENDED) {
    3048:	466b      	mov	r3, sp
    304a:	789b      	ldrb	r3, [r3, #2]
    304c:	2b05      	cmp	r3, #5
    304e:	d006      	beq.n	305e <_uhd_ep0_error+0x26>
	switch(p_callback_para->pipe_error_status) {
    3050:	7863      	ldrb	r3, [r4, #1]
    3052:	2b10      	cmp	r3, #16
    3054:	d811      	bhi.n	307a <_uhd_ep0_error+0x42>
    3056:	009b      	lsls	r3, r3, #2
    3058:	4a0d      	ldr	r2, [pc, #52]	; (3090 <_uhd_ep0_error+0x58>)
    305a:	58d3      	ldr	r3, [r2, r3]
    305c:	469f      	mov	pc, r3
		cfg.pipe_type = USB_HOST_PIPE_TYPE_CONTROL;
    305e:	3b04      	subs	r3, #4
    3060:	466a      	mov	r2, sp
    3062:	7093      	strb	r3, [r2, #2]
		usb_host_pipe_set_config(&dev, 0, &cfg);
    3064:	2100      	movs	r1, #0
    3066:	4808      	ldr	r0, [pc, #32]	; (3088 <_uhd_ep0_error+0x50>)
    3068:	4b0a      	ldr	r3, [pc, #40]	; (3094 <_uhd_ep0_error+0x5c>)
    306a:	4798      	blx	r3
    306c:	e00a      	b.n	3084 <_uhd_ep0_error+0x4c>
		uhd_error = UHD_TRANS_NOTRESPONDING;
    306e:	2005      	movs	r0, #5
    3070:	e006      	b.n	3080 <_uhd_ep0_error+0x48>
		uhd_error = UHD_TRANS_CRC;
    3072:	2002      	movs	r0, #2
		break;
    3074:	e004      	b.n	3080 <_uhd_ep0_error+0x48>
		uhd_error = UHD_TRANS_PIDFAILURE;
    3076:	2006      	movs	r0, #6
		break;
    3078:	e002      	b.n	3080 <_uhd_ep0_error+0x48>
		uhd_error = UHD_TRANS_TIMEOUT;
    307a:	2007      	movs	r0, #7
		break;
    307c:	e000      	b.n	3080 <_uhd_ep0_error+0x48>
		uhd_error = UHD_TRANS_DT_MISMATCH;
    307e:	2003      	movs	r0, #3
	_uhd_ctrl_request_end(uhd_error);
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <_uhd_ep0_error+0x60>)
    3082:	4798      	blx	r3
}
    3084:	b002      	add	sp, #8
    3086:	bd10      	pop	{r4, pc}
    3088:	200005a8 	.word	0x200005a8
    308c:	00003875 	.word	0x00003875
    3090:	0000611c 	.word	0x0000611c
    3094:	000036ed 	.word	0x000036ed
    3098:	00002d59 	.word	0x00002d59

0000309c <_uhd_ep0_transfer_complete>:
{
    309c:	b5f0      	push	{r4, r5, r6, r7, lr}
    309e:	46d6      	mov	lr, sl
    30a0:	464f      	mov	r7, r9
    30a2:	4646      	mov	r6, r8
    30a4:	b5c0      	push	{r6, r7, lr}
    30a6:	b084      	sub	sp, #16
    30a8:	000d      	movs	r5, r1
	usb_host_pipe_get_config(&dev, 0, &cfg);
    30aa:	ac02      	add	r4, sp, #8
    30ac:	0022      	movs	r2, r4
    30ae:	2100      	movs	r1, #0
    30b0:	4848      	ldr	r0, [pc, #288]	; (31d4 <_uhd_ep0_transfer_complete+0x138>)
    30b2:	4b49      	ldr	r3, [pc, #292]	; (31d8 <_uhd_ep0_transfer_complete+0x13c>)
    30b4:	4798      	blx	r3
	if (cfg.pipe_type == USB_HOST_PIPE_TYPE_EXTENDED) {
    30b6:	78a3      	ldrb	r3, [r4, #2]
    30b8:	2b05      	cmp	r3, #5
    30ba:	d014      	beq.n	30e6 <_uhd_ep0_transfer_complete+0x4a>
    30bc:	4b45      	ldr	r3, [pc, #276]	; (31d4 <_uhd_ep0_transfer_complete+0x138>)
    30be:	681a      	ldr	r2, [r3, #0]
    30c0:	2110      	movs	r1, #16
    30c2:	2306      	movs	r3, #6
    30c4:	33ff      	adds	r3, #255	; 0xff
    30c6:	54d1      	strb	r1, [r2, r3]
	switch(uhd_ctrl_request_phase) {
    30c8:	4b44      	ldr	r3, [pc, #272]	; (31dc <_uhd_ep0_transfer_complete+0x140>)
    30ca:	781b      	ldrb	r3, [r3, #0]
    30cc:	2b02      	cmp	r3, #2
    30ce:	d027      	beq.n	3120 <_uhd_ep0_transfer_complete+0x84>
    30d0:	b2da      	uxtb	r2, r3
    30d2:	2a02      	cmp	r2, #2
    30d4:	d91f      	bls.n	3116 <_uhd_ep0_transfer_complete+0x7a>
    30d6:	2b03      	cmp	r3, #3
    30d8:	d073      	beq.n	31c2 <_uhd_ep0_transfer_complete+0x126>
    30da:	2b04      	cmp	r3, #4
    30dc:	d174      	bne.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
		_uhd_ctrl_request_end(UHD_TRANS_NOERROR);
    30de:	2000      	movs	r0, #0
    30e0:	4b3f      	ldr	r3, [pc, #252]	; (31e0 <_uhd_ep0_transfer_complete+0x144>)
    30e2:	4798      	blx	r3
		break;
    30e4:	e070      	b.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
		cfg.pipe_type = USB_HOST_PIPE_TYPE_CONTROL;
    30e6:	aa02      	add	r2, sp, #8
    30e8:	2601      	movs	r6, #1
    30ea:	7096      	strb	r6, [r2, #2]
		usb_host_pipe_set_config(&dev, 0, &cfg);
    30ec:	4c39      	ldr	r4, [pc, #228]	; (31d4 <_uhd_ep0_transfer_complete+0x138>)
    30ee:	2100      	movs	r1, #0
    30f0:	0020      	movs	r0, r4
    30f2:	4b3c      	ldr	r3, [pc, #240]	; (31e4 <_uhd_ep0_transfer_complete+0x148>)
    30f4:	4798      	blx	r3
		usb_host_enable_callback(&dev, USB_HOST_CALLBACK_WAKEUP);
    30f6:	2102      	movs	r1, #2
    30f8:	0020      	movs	r0, r4
    30fa:	4d3b      	ldr	r5, [pc, #236]	; (31e8 <_uhd_ep0_transfer_complete+0x14c>)
    30fc:	47a8      	blx	r5
		usb_host_enable_callback(&dev, USB_HOST_CALLBACK_DNRSM);
    30fe:	2103      	movs	r1, #3
    3100:	0020      	movs	r0, r4
    3102:	47a8      	blx	r5
		usb_host_enable_callback(&dev, USB_HOST_CALLBACK_UPRSM);
    3104:	2104      	movs	r1, #4
    3106:	0020      	movs	r0, r4
    3108:	47a8      	blx	r5
		uhd_lpm_suspend = true;
    310a:	4b38      	ldr	r3, [pc, #224]	; (31ec <_uhd_ep0_transfer_complete+0x150>)
    310c:	701e      	strb	r6, [r3, #0]
		uhd_sleep_mode(UHD_STATE_SUSPEND_LPM);
    310e:	2005      	movs	r0, #5
    3110:	4b37      	ldr	r3, [pc, #220]	; (31f0 <_uhd_ep0_transfer_complete+0x154>)
    3112:	4798      	blx	r3
    3114:	e058      	b.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
	switch(uhd_ctrl_request_phase) {
    3116:	2b01      	cmp	r3, #1
    3118:	d156      	bne.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
		_uhd_ctrl_phase_data_out();
    311a:	4b36      	ldr	r3, [pc, #216]	; (31f4 <_uhd_ep0_transfer_complete+0x158>)
    311c:	4798      	blx	r3
		break;
    311e:	e053      	b.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
		_uhd_ctrl_phase_data_in(p_callback_para->transfered_size);
    3120:	886b      	ldrh	r3, [r5, #2]
    3122:	4699      	mov	r9, r3
	usb_host_pipe_get_config(&dev, 0, &cfg);
    3124:	466a      	mov	r2, sp
    3126:	2100      	movs	r1, #0
    3128:	482a      	ldr	r0, [pc, #168]	; (31d4 <_uhd_ep0_transfer_complete+0x138>)
    312a:	4b2b      	ldr	r3, [pc, #172]	; (31d8 <_uhd_ep0_transfer_complete+0x13c>)
    312c:	4798      	blx	r3
	b_short_packet = (nb_byte_received != cfg.size);
    312e:	466b      	mov	r3, sp
    3130:	889b      	ldrh	r3, [r3, #4]
    3132:	469a      	mov	sl, r3
    3134:	464c      	mov	r4, r9
	ptr_ep_data = uhd_ctrl_buffer;
    3136:	4e30      	ldr	r6, [pc, #192]	; (31f8 <_uhd_ep0_transfer_complete+0x15c>)
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
    3138:	4d30      	ldr	r5, [pc, #192]	; (31fc <_uhd_ep0_transfer_complete+0x160>)
		uhd_ctrl_nb_trans++;
    313a:	4f31      	ldr	r7, [pc, #196]	; (3200 <_uhd_ep0_transfer_complete+0x164>)
		uhd_ctrl_request_first->payload_size--;
    313c:	46a8      	mov	r8, r5
    313e:	e01c      	b.n	317a <_uhd_ep0_transfer_complete+0xde>
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
    3140:	680b      	ldr	r3, [r1, #0]
    3142:	1c5a      	adds	r2, r3, #1
    3144:	600a      	str	r2, [r1, #0]
    3146:	7832      	ldrb	r2, [r6, #0]
    3148:	701a      	strb	r2, [r3, #0]
		uhd_ctrl_nb_trans++;
    314a:	883b      	ldrh	r3, [r7, #0]
    314c:	3301      	adds	r3, #1
    314e:	803b      	strh	r3, [r7, #0]
		uhd_ctrl_request_first->payload_size--;
    3150:	4643      	mov	r3, r8
    3152:	681a      	ldr	r2, [r3, #0]
    3154:	8b13      	ldrh	r3, [r2, #24]
    3156:	3b01      	subs	r3, #1
    3158:	8313      	strh	r3, [r2, #24]
		nb_byte_received--;
    315a:	3c01      	subs	r4, #1
    315c:	b2a4      	uxth	r4, r4
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
    315e:	3601      	adds	r6, #1
    3160:	e00b      	b.n	317a <_uhd_ep0_transfer_complete+0xde>
	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
    3162:	2c00      	cmp	r4, #0
    3164:	d00f      	beq.n	3186 <_uhd_ep0_transfer_complete+0xea>
		if (uhd_ctrl_request_first->callback_run == NULL
    3166:	684b      	ldr	r3, [r1, #4]
    3168:	2b00      	cmp	r3, #0
    316a:	d013      	beq.n	3194 <_uhd_ep0_transfer_complete+0xf8>
				|| !uhd_ctrl_request_first->callback_run(
    316c:	000a      	movs	r2, r1
    316e:	3218      	adds	r2, #24
    3170:	4668      	mov	r0, sp
    3172:	7800      	ldrb	r0, [r0, #0]
    3174:	4798      	blx	r3
    3176:	2800      	cmp	r0, #0
    3178:	d00c      	beq.n	3194 <_uhd_ep0_transfer_complete+0xf8>
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
    317a:	6829      	ldr	r1, [r5, #0]
    317c:	8b0b      	ldrh	r3, [r1, #24]
    317e:	2b00      	cmp	r3, #0
    3180:	d0ef      	beq.n	3162 <_uhd_ep0_transfer_complete+0xc6>
    3182:	2c00      	cmp	r4, #0
    3184:	d1dc      	bne.n	3140 <_uhd_ep0_transfer_complete+0xa4>
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
    3186:	8aca      	ldrh	r2, [r1, #22]
    3188:	4b1d      	ldr	r3, [pc, #116]	; (3200 <_uhd_ep0_transfer_complete+0x164>)
    318a:	881b      	ldrh	r3, [r3, #0]
    318c:	429a      	cmp	r2, r3
    318e:	d001      	beq.n	3194 <_uhd_ep0_transfer_complete+0xf8>
			|| b_short_packet) {
    3190:	45d1      	cmp	r9, sl
    3192:	d00e      	beq.n	31b2 <_uhd_ep0_transfer_complete+0x116>
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
    3194:	2204      	movs	r2, #4
    3196:	4b11      	ldr	r3, [pc, #68]	; (31dc <_uhd_ep0_transfer_complete+0x140>)
    3198:	701a      	strb	r2, [r3, #0]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_DTGL;
    319a:	480e      	ldr	r0, [pc, #56]	; (31d4 <_uhd_ep0_transfer_complete+0x138>)
    319c:	3a03      	subs	r2, #3
    319e:	2306      	movs	r3, #6
    31a0:	33ff      	adds	r3, #255	; 0xff
    31a2:	6801      	ldr	r1, [r0, #0]
    31a4:	54ca      	strb	r2, [r1, r3]
	usb_host_pipe_write_job(&dev, 0, uhd_ctrl_buffer, 0);
    31a6:	2300      	movs	r3, #0
    31a8:	4a13      	ldr	r2, [pc, #76]	; (31f8 <_uhd_ep0_transfer_complete+0x15c>)
    31aa:	2100      	movs	r1, #0
    31ac:	4c15      	ldr	r4, [pc, #84]	; (3204 <_uhd_ep0_transfer_complete+0x168>)
    31ae:	47a0      	blx	r4
    31b0:	e00a      	b.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
	usb_host_pipe_read_job(&dev, 0, uhd_ctrl_buffer, cfg.size);
    31b2:	466b      	mov	r3, sp
    31b4:	889b      	ldrh	r3, [r3, #4]
    31b6:	4a10      	ldr	r2, [pc, #64]	; (31f8 <_uhd_ep0_transfer_complete+0x15c>)
    31b8:	2100      	movs	r1, #0
    31ba:	4806      	ldr	r0, [pc, #24]	; (31d4 <_uhd_ep0_transfer_complete+0x138>)
    31bc:	4c12      	ldr	r4, [pc, #72]	; (3208 <_uhd_ep0_transfer_complete+0x16c>)
    31be:	47a0      	blx	r4
    31c0:	e002      	b.n	31c8 <_uhd_ep0_transfer_complete+0x12c>
		_uhd_ctrl_request_end(UHD_TRANS_NOERROR);
    31c2:	2000      	movs	r0, #0
    31c4:	4b06      	ldr	r3, [pc, #24]	; (31e0 <_uhd_ep0_transfer_complete+0x144>)
    31c6:	4798      	blx	r3
}
    31c8:	b004      	add	sp, #16
    31ca:	bc1c      	pop	{r2, r3, r4}
    31cc:	4690      	mov	r8, r2
    31ce:	4699      	mov	r9, r3
    31d0:	46a2      	mov	sl, r4
    31d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31d4:	200005a8 	.word	0x200005a8
    31d8:	00003875 	.word	0x00003875
    31dc:	20000710 	.word	0x20000710
    31e0:	00002d59 	.word	0x00002d59
    31e4:	000036ed 	.word	0x000036ed
    31e8:	00003605 	.word	0x00003605
    31ec:	200001d2 	.word	0x200001d2
    31f0:	00002271 	.word	0x00002271
    31f4:	00002681 	.word	0x00002681
    31f8:	20000714 	.word	0x20000714
    31fc:	20000754 	.word	0x20000754
    3200:	20000758 	.word	0x20000758
    3204:	00003a69 	.word	0x00003a69
    3208:	000039e9 	.word	0x000039e9

0000320c <uhd_setup_request>:
{
    320c:	b5f0      	push	{r4, r5, r6, r7, lr}
    320e:	b085      	sub	sp, #20
    3210:	0005      	movs	r5, r0
    3212:	9101      	str	r1, [sp, #4]
    3214:	0017      	movs	r7, r2
    3216:	001e      	movs	r6, r3
	request = malloc(sizeof(struct uhd_ctrl_request_t));
    3218:	201c      	movs	r0, #28
    321a:	4b21      	ldr	r3, [pc, #132]	; (32a0 <uhd_setup_request+0x94>)
    321c:	4798      	blx	r3
    321e:	1e04      	subs	r4, r0, #0
	if (request == NULL) {
    3220:	d03a      	beq.n	3298 <uhd_setup_request+0x8c>
	request->add = (uint8_t) add;
    3222:	7685      	strb	r5, [r0, #26]
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
    3224:	3010      	adds	r0, #16
    3226:	2208      	movs	r2, #8
    3228:	9901      	ldr	r1, [sp, #4]
    322a:	4b1e      	ldr	r3, [pc, #120]	; (32a4 <uhd_setup_request+0x98>)
    322c:	4798      	blx	r3
	request->payload = payload;
    322e:	6027      	str	r7, [r4, #0]
	request->payload_size = payload_size;
    3230:	8326      	strh	r6, [r4, #24]
	request->callback_run = callback_run;
    3232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3234:	6063      	str	r3, [r4, #4]
	request->callback_end = callback_end;
    3236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3238:	60a3      	str	r3, [r4, #8]
	request->next_request = NULL;
    323a:	2200      	movs	r2, #0
    323c:	60e2      	str	r2, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    323e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3242:	4259      	negs	r1, r3
    3244:	414b      	adcs	r3, r1
    3246:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    3248:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    324a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    324e:	4b16      	ldr	r3, [pc, #88]	; (32a8 <uhd_setup_request+0x9c>)
    3250:	701a      	strb	r2, [r3, #0]
	return flags;
    3252:	9a03      	ldr	r2, [sp, #12]
	if (uhd_ctrl_request_first == NULL) {
    3254:	4b15      	ldr	r3, [pc, #84]	; (32ac <uhd_setup_request+0xa0>)
    3256:	681b      	ldr	r3, [r3, #0]
    3258:	2b00      	cmp	r3, #0
    325a:	d008      	beq.n	326e <uhd_setup_request+0x62>
		uhd_ctrl_request_last->next_request = request;
    325c:	4b14      	ldr	r3, [pc, #80]	; (32b0 <uhd_setup_request+0xa4>)
    325e:	6819      	ldr	r1, [r3, #0]
    3260:	60cc      	str	r4, [r1, #12]
	uhd_ctrl_request_last = request;
    3262:	601c      	str	r4, [r3, #0]
	return true;
    3264:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
    3266:	2a00      	cmp	r2, #0
    3268:	d109      	bne.n	327e <uhd_setup_request+0x72>
}
    326a:	b005      	add	sp, #20
    326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uhd_ctrl_request_first = request;
    326e:	4b0f      	ldr	r3, [pc, #60]	; (32ac <uhd_setup_request+0xa0>)
    3270:	601c      	str	r4, [r3, #0]
	uhd_ctrl_request_last = request;
    3272:	4b0f      	ldr	r3, [pc, #60]	; (32b0 <uhd_setup_request+0xa4>)
    3274:	601c      	str	r4, [r3, #0]
		b_start_request = true;
    3276:	2301      	movs	r3, #1
    3278:	2a00      	cmp	r2, #0
    327a:	d101      	bne.n	3280 <uhd_setup_request+0x74>
    327c:	e008      	b.n	3290 <uhd_setup_request+0x84>
	bool b_start_request = false;
    327e:	2300      	movs	r3, #0
		cpu_irq_enable();
    3280:	2101      	movs	r1, #1
    3282:	4a09      	ldr	r2, [pc, #36]	; (32a8 <uhd_setup_request+0x9c>)
    3284:	7011      	strb	r1, [r2, #0]
    3286:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    328a:	b662      	cpsie	i
	if (b_start_request) {
    328c:	2b00      	cmp	r3, #0
    328e:	d005      	beq.n	329c <uhd_setup_request+0x90>
		_uhd_ctrl_phase_setup();
    3290:	4b08      	ldr	r3, [pc, #32]	; (32b4 <uhd_setup_request+0xa8>)
    3292:	4798      	blx	r3
	return true;
    3294:	2001      	movs	r0, #1
    3296:	e7e8      	b.n	326a <uhd_setup_request+0x5e>
		return false;
    3298:	2000      	movs	r0, #0
    329a:	e7e6      	b.n	326a <uhd_setup_request+0x5e>
	return true;
    329c:	2001      	movs	r0, #1
    329e:	e7e4      	b.n	326a <uhd_setup_request+0x5e>
    32a0:	00005dd9 	.word	0x00005dd9
    32a4:	00005e01 	.word	0x00005e01
    32a8:	20000023 	.word	0x20000023
    32ac:	20000754 	.word	0x20000754
    32b0:	2000075c 	.word	0x2000075c
    32b4:	00002f4d 	.word	0x00002f4d

000032b8 <uhd_ep0_alloc>:

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
    32b8:	b530      	push	{r4, r5, lr}
    32ba:	b083      	sub	sp, #12
    32bc:	0005      	movs	r5, r0
    32be:	000c      	movs	r4, r1
	struct usb_host_pipe_config cfg;

	if (ep_size < 8) {
		return false;
    32c0:	2000      	movs	r0, #0
	if (ep_size < 8) {
    32c2:	2907      	cmp	r1, #7
    32c4:	d801      	bhi.n	32ca <uhd_ep0_alloc+0x12>
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE);
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_ERROR);
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_SETUP);
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_STALL);
	return true;
}
    32c6:	b003      	add	sp, #12
    32c8:	bd30      	pop	{r4, r5, pc}
	usb_host_pipe_get_config_defaults(&cfg);
    32ca:	4668      	mov	r0, sp
    32cc:	4b1a      	ldr	r3, [pc, #104]	; (3338 <uhd_ep0_alloc+0x80>)
    32ce:	4798      	blx	r3
	cfg.device_address = add;
    32d0:	466b      	mov	r3, sp
    32d2:	701d      	strb	r5, [r3, #0]
	cfg.size = ep_size;
    32d4:	809c      	strh	r4, [r3, #4]
	cfg.binterval = 0;
    32d6:	2300      	movs	r3, #0
    32d8:	466a      	mov	r2, sp
    32da:	70d3      	strb	r3, [r2, #3]
	usb_host_pipe_set_config(&dev,0,&cfg);
    32dc:	4c17      	ldr	r4, [pc, #92]	; (333c <uhd_ep0_alloc+0x84>)
    32de:	2100      	movs	r1, #0
    32e0:	0020      	movs	r0, r4
    32e2:	4b17      	ldr	r3, [pc, #92]	; (3340 <uhd_ep0_alloc+0x88>)
    32e4:	4798      	blx	r3
	usb_host_pipe_register_callback(&dev, 0,
    32e6:	4b17      	ldr	r3, [pc, #92]	; (3344 <uhd_ep0_alloc+0x8c>)
    32e8:	2200      	movs	r2, #0
    32ea:	2100      	movs	r1, #0
    32ec:	0020      	movs	r0, r4
    32ee:	4d16      	ldr	r5, [pc, #88]	; (3348 <uhd_ep0_alloc+0x90>)
    32f0:	47a8      	blx	r5
	usb_host_pipe_register_callback(&dev, 0,
    32f2:	4b16      	ldr	r3, [pc, #88]	; (334c <uhd_ep0_alloc+0x94>)
    32f4:	2201      	movs	r2, #1
    32f6:	2100      	movs	r1, #0
    32f8:	0020      	movs	r0, r4
    32fa:	47a8      	blx	r5
	usb_host_pipe_register_callback(&dev, 0,
    32fc:	4b14      	ldr	r3, [pc, #80]	; (3350 <uhd_ep0_alloc+0x98>)
    32fe:	2202      	movs	r2, #2
    3300:	2100      	movs	r1, #0
    3302:	0020      	movs	r0, r4
    3304:	47a8      	blx	r5
	usb_host_pipe_register_callback(&dev, 0,
    3306:	4b13      	ldr	r3, [pc, #76]	; (3354 <uhd_ep0_alloc+0x9c>)
    3308:	2203      	movs	r2, #3
    330a:	2100      	movs	r1, #0
    330c:	0020      	movs	r0, r4
    330e:	47a8      	blx	r5
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE);
    3310:	2200      	movs	r2, #0
    3312:	2100      	movs	r1, #0
    3314:	0020      	movs	r0, r4
    3316:	4d10      	ldr	r5, [pc, #64]	; (3358 <uhd_ep0_alloc+0xa0>)
    3318:	47a8      	blx	r5
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_ERROR);
    331a:	2201      	movs	r2, #1
    331c:	2100      	movs	r1, #0
    331e:	0020      	movs	r0, r4
    3320:	47a8      	blx	r5
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_SETUP);
    3322:	2202      	movs	r2, #2
    3324:	2100      	movs	r1, #0
    3326:	0020      	movs	r0, r4
    3328:	47a8      	blx	r5
	usb_host_pipe_enable_callback(&dev,0,USB_HOST_PIPE_CALLBACK_STALL);
    332a:	2203      	movs	r2, #3
    332c:	2100      	movs	r1, #0
    332e:	0020      	movs	r0, r4
    3330:	47a8      	blx	r5
	return true;
    3332:	2001      	movs	r0, #1
    3334:	e7c7      	b.n	32c6 <uhd_ep0_alloc+0xe>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	000036d9 	.word	0x000036d9
    333c:	200005a8 	.word	0x200005a8
    3340:	000036ed 	.word	0x000036ed
    3344:	0000309d 	.word	0x0000309d
    3348:	000038ed 	.word	0x000038ed
    334c:	00003039 	.word	0x00003039
    3350:	00002739 	.word	0x00002739
    3354:	00002ff9 	.word	0x00002ff9
    3358:	0000390f 	.word	0x0000390f

0000335c <uhd_ep_alloc>:

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t *ep_desc, uhd_speed_t speed)
{
    335c:	b5f0      	push	{r4, r5, r6, r7, lr}
    335e:	b085      	sub	sp, #20
    3360:	9001      	str	r0, [sp, #4]
    3362:	000f      	movs	r7, r1
	struct usb_host_pipe_config cfg;
	uint8_t ep_type;
	uint8_t ep_interval;
	(void)speed; // No high speed currently

	for (pipe = 1; pipe < USB_PIPE_NUM; pipe++) {
    3364:	2401      	movs	r4, #1
		usb_host_pipe_get_config(&dev, pipe, &cfg);
    3366:	4d26      	ldr	r5, [pc, #152]	; (3400 <uhd_ep_alloc+0xa4>)
    3368:	4e26      	ldr	r6, [pc, #152]	; (3404 <uhd_ep_alloc+0xa8>)
    336a:	aa02      	add	r2, sp, #8
    336c:	0021      	movs	r1, r4
    336e:	0028      	movs	r0, r5
    3370:	47b0      	blx	r6
		if (cfg.pipe_type != USB_HOST_PIPE_TYPE_DISABLE) {
    3372:	ab02      	add	r3, sp, #8
    3374:	789b      	ldrb	r3, [r3, #2]
    3376:	2b00      	cmp	r3, #0
    3378:	d005      	beq.n	3386 <uhd_ep_alloc+0x2a>
	for (pipe = 1; pipe < USB_PIPE_NUM; pipe++) {
    337a:	3401      	adds	r4, #1
    337c:	b2e4      	uxtb	r4, r4
    337e:	2c08      	cmp	r4, #8
    3380:	d1f3      	bne.n	336a <uhd_ep_alloc+0xe>
		usb_host_pipe_enable_callback(&dev,pipe,USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE);
		usb_host_pipe_enable_callback(&dev,pipe,USB_HOST_PIPE_CALLBACK_ERROR);
		usb_host_pipe_enable_callback(&dev,pipe,USB_HOST_PIPE_CALLBACK_STALL);
		return true;
	}
	return false;
    3382:	2000      	movs	r0, #0
    3384:	e039      	b.n	33fa <uhd_ep_alloc+0x9e>
		usb_host_pipe_get_config_defaults(&cfg);
    3386:	a802      	add	r0, sp, #8
    3388:	4b1f      	ldr	r3, [pc, #124]	; (3408 <uhd_ep_alloc+0xac>)
    338a:	4798      	blx	r3
		ep_type = (ep_desc->bmAttributes & USB_EP_TYPE_MASK) + 1;
    338c:	78fa      	ldrb	r2, [r7, #3]
    338e:	2303      	movs	r3, #3
    3390:	4013      	ands	r3, r2
    3392:	3301      	adds	r3, #1
		ep_interval = ep_desc->bInterval;
    3394:	79ba      	ldrb	r2, [r7, #6]
		cfg.device_address = add;
    3396:	a902      	add	r1, sp, #8
    3398:	4668      	mov	r0, sp
    339a:	7900      	ldrb	r0, [r0, #4]
    339c:	7008      	strb	r0, [r1, #0]
		cfg.endpoint_address = ep_desc->bEndpointAddress;
    339e:	78b9      	ldrb	r1, [r7, #2]
    33a0:	a802      	add	r0, sp, #8
    33a2:	7041      	strb	r1, [r0, #1]
		cfg.pipe_type = (enum usb_host_pipe_type)ep_type;
    33a4:	7083      	strb	r3, [r0, #2]
		cfg.binterval = ep_interval;
    33a6:	70c2      	strb	r2, [r0, #3]
		cfg.size = le16_to_cpu(ep_desc->wMaxPacketSize);
    33a8:	793a      	ldrb	r2, [r7, #4]
    33aa:	797b      	ldrb	r3, [r7, #5]
    33ac:	021b      	lsls	r3, r3, #8
    33ae:	4313      	orrs	r3, r2
    33b0:	0002      	movs	r2, r0
    33b2:	8083      	strh	r3, [r0, #4]
		usb_host_pipe_set_config(&dev,pipe,&cfg);
    33b4:	4d12      	ldr	r5, [pc, #72]	; (3400 <uhd_ep_alloc+0xa4>)
    33b6:	0021      	movs	r1, r4
    33b8:	0028      	movs	r0, r5
    33ba:	4b14      	ldr	r3, [pc, #80]	; (340c <uhd_ep_alloc+0xb0>)
    33bc:	4798      	blx	r3
		usb_host_pipe_register_callback(&dev, pipe,
    33be:	4b14      	ldr	r3, [pc, #80]	; (3410 <uhd_ep_alloc+0xb4>)
    33c0:	2200      	movs	r2, #0
    33c2:	0021      	movs	r1, r4
    33c4:	0028      	movs	r0, r5
    33c6:	4e13      	ldr	r6, [pc, #76]	; (3414 <uhd_ep_alloc+0xb8>)
    33c8:	47b0      	blx	r6
		usb_host_pipe_register_callback(&dev,pipe,
    33ca:	4b13      	ldr	r3, [pc, #76]	; (3418 <uhd_ep_alloc+0xbc>)
    33cc:	2201      	movs	r2, #1
    33ce:	0021      	movs	r1, r4
    33d0:	0028      	movs	r0, r5
    33d2:	47b0      	blx	r6
		usb_host_pipe_register_callback(&dev,pipe,
    33d4:	4b11      	ldr	r3, [pc, #68]	; (341c <uhd_ep_alloc+0xc0>)
    33d6:	2203      	movs	r2, #3
    33d8:	0021      	movs	r1, r4
    33da:	0028      	movs	r0, r5
    33dc:	47b0      	blx	r6
		usb_host_pipe_enable_callback(&dev,pipe,USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE);
    33de:	2200      	movs	r2, #0
    33e0:	0021      	movs	r1, r4
    33e2:	0028      	movs	r0, r5
    33e4:	4e0e      	ldr	r6, [pc, #56]	; (3420 <uhd_ep_alloc+0xc4>)
    33e6:	47b0      	blx	r6
		usb_host_pipe_enable_callback(&dev,pipe,USB_HOST_PIPE_CALLBACK_ERROR);
    33e8:	2201      	movs	r2, #1
    33ea:	0021      	movs	r1, r4
    33ec:	0028      	movs	r0, r5
    33ee:	47b0      	blx	r6
		usb_host_pipe_enable_callback(&dev,pipe,USB_HOST_PIPE_CALLBACK_STALL);
    33f0:	2203      	movs	r2, #3
    33f2:	0021      	movs	r1, r4
    33f4:	0028      	movs	r0, r5
    33f6:	47b0      	blx	r6
		return true;
    33f8:	2001      	movs	r0, #1
}
    33fa:	b005      	add	sp, #20
    33fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	200005a8 	.word	0x200005a8
    3404:	00003875 	.word	0x00003875
    3408:	000036d9 	.word	0x000036d9
    340c:	000036ed 	.word	0x000036ed
    3410:	000027a9 	.word	0x000027a9
    3414:	000038ed 	.word	0x000038ed
    3418:	00002a01 	.word	0x00002a01
    341c:	000025e9 	.word	0x000025e9
    3420:	0000390f 	.word	0x0000390f

00003424 <uhd_ep_free>:


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
    3424:	b5f0      	push	{r4, r5, r6, r7, lr}
    3426:	46ce      	mov	lr, r9
    3428:	4647      	mov	r7, r8
    342a:	b580      	push	{r7, lr}
    342c:	b085      	sub	sp, #20
    342e:	4680      	mov	r8, r0
    3430:	4689      	mov	r9, r1
    3432:	2401      	movs	r4, #1
    3434:	2600      	movs	r6, #0
	uint8_t usb_pipe = 0;
	struct usb_host_pipe_config cfg;

	/* Search endpoint(s) in all pipes */
	for (usb_pipe = 0; usb_pipe < USB_PIPE_NUM; usb_pipe++) {
		usb_host_pipe_get_config(&dev, usb_pipe, &cfg);
    3436:	4f25      	ldr	r7, [pc, #148]	; (34cc <uhd_ep_free+0xa8>)
    3438:	e008      	b.n	344c <uhd_ep_free+0x28>

		if (endp != 0xFF) {
			/* Disable specific endpoint number */
			if (!((endp == 0) && (0 == cfg.endpoint_address))) {
				/* It is not the control endpoint */
				if (endp != cfg.endpoint_address) {
    343a:	ab02      	add	r3, sp, #8
    343c:	785b      	ldrb	r3, [r3, #1]
    343e:	454b      	cmp	r3, r9
    3440:	d01a      	beq.n	3478 <uhd_ep_free+0x54>
	for (usb_pipe = 0; usb_pipe < USB_PIPE_NUM; usb_pipe++) {
    3442:	2c07      	cmp	r4, #7
    3444:	d83c      	bhi.n	34c0 <uhd_ep_free+0x9c>
    3446:	3601      	adds	r6, #1
    3448:	3401      	adds	r4, #1
    344a:	b2e4      	uxtb	r4, r4
    344c:	b2f5      	uxtb	r5, r6
		usb_host_pipe_get_config(&dev, usb_pipe, &cfg);
    344e:	aa02      	add	r2, sp, #8
    3450:	0029      	movs	r1, r5
    3452:	481f      	ldr	r0, [pc, #124]	; (34d0 <uhd_ep_free+0xac>)
    3454:	47b8      	blx	r7
		if (cfg.pipe_type == USB_HOST_PIPE_TYPE_DISABLE) {
    3456:	ab02      	add	r3, sp, #8
    3458:	789b      	ldrb	r3, [r3, #2]
    345a:	2b00      	cmp	r3, #0
    345c:	d0f1      	beq.n	3442 <uhd_ep_free+0x1e>
		if (add != cfg.device_address) {
    345e:	ab02      	add	r3, sp, #8
    3460:	781b      	ldrb	r3, [r3, #0]
    3462:	4543      	cmp	r3, r8
    3464:	d1ed      	bne.n	3442 <uhd_ep_free+0x1e>
		if (endp != 0xFF) {
    3466:	464b      	mov	r3, r9
    3468:	2bff      	cmp	r3, #255	; 0xff
    346a:	d005      	beq.n	3478 <uhd_ep_free+0x54>
			if (!((endp == 0) && (0 == cfg.endpoint_address))) {
    346c:	2b00      	cmp	r3, #0
    346e:	d1e4      	bne.n	343a <uhd_ep_free+0x16>
    3470:	ab02      	add	r3, sp, #8
    3472:	785b      	ldrb	r3, [r3, #1]
    3474:	2b00      	cmp	r3, #0
    3476:	d1e4      	bne.n	3442 <uhd_ep_free+0x1e>
					continue; // Mismatch
				}
			}
		}

		if (usb_pipe == 0) {
    3478:	2d00      	cmp	r5, #0
    347a:	d112      	bne.n	34a2 <uhd_ep_free+0x7e>
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_PFREEZE;
    347c:	4b14      	ldr	r3, [pc, #80]	; (34d0 <uhd_ep_free+0xac>)
    347e:	681a      	ldr	r2, [r3, #0]
    3480:	2110      	movs	r1, #16
    3482:	2306      	movs	r3, #6
    3484:	33ff      	adds	r3, #255	; 0xff
    3486:	54d1      	strb	r1, [r2, r3]
			/* Disable and stop transfer on control endpoint */
			if (cfg.device_address == add) {
				usb_host_pipe_freeze(&dev, 0);
				if (uhd_ctrl_request_timeout ||
    3488:	4b12      	ldr	r3, [pc, #72]	; (34d4 <uhd_ep_free+0xb0>)
    348a:	881b      	ldrh	r3, [r3, #0]
    348c:	b29b      	uxth	r3, r3
    348e:	2b00      	cmp	r3, #0
    3490:	d103      	bne.n	349a <uhd_ep_free+0x76>
						(uhd_ctrl_request_first != NULL)) {
    3492:	4b11      	ldr	r3, [pc, #68]	; (34d8 <uhd_ep_free+0xb4>)
				if (uhd_ctrl_request_timeout ||
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	2b00      	cmp	r3, #0
    3498:	d0d5      	beq.n	3446 <uhd_ep_free+0x22>
					_uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
    349a:	2001      	movs	r0, #1
    349c:	4b0f      	ldr	r3, [pc, #60]	; (34dc <uhd_ep_free+0xb8>)
    349e:	4798      	blx	r3
    34a0:	e7d1      	b.n	3446 <uhd_ep_free+0x22>
    34a2:	0033      	movs	r3, r6
    34a4:	3308      	adds	r3, #8
    34a6:	015b      	lsls	r3, r3, #5
    34a8:	4a09      	ldr	r2, [pc, #36]	; (34d0 <uhd_ep_free+0xac>)
    34aa:	6812      	ldr	r2, [r2, #0]
    34ac:	9201      	str	r2, [sp, #4]
    34ae:	4694      	mov	ip, r2
    34b0:	4463      	add	r3, ip
    34b2:	2210      	movs	r2, #16
    34b4:	715a      	strb	r2, [r3, #5]
		}

		/* Endpoint interrupt, bulk or isochronous */
		/* Disable and stop transfer on this pipe */
		usb_host_pipe_freeze(&dev, usb_pipe);
		_uhd_pipe_finish_job(usb_pipe, UHD_TRANS_DISCONNECT);
    34b6:	2101      	movs	r1, #1
    34b8:	0028      	movs	r0, r5
    34ba:	4b09      	ldr	r3, [pc, #36]	; (34e0 <uhd_ep_free+0xbc>)
    34bc:	4798      	blx	r3
    34be:	e7c0      	b.n	3442 <uhd_ep_free+0x1e>
	}
}
    34c0:	b005      	add	sp, #20
    34c2:	bc0c      	pop	{r2, r3}
    34c4:	4690      	mov	r8, r2
    34c6:	4699      	mov	r9, r3
    34c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	00003875 	.word	0x00003875
    34d0:	200005a8 	.word	0x200005a8
    34d4:	20000760 	.word	0x20000760
    34d8:	20000754 	.word	0x20000754
    34dc:	00002d59 	.word	0x00002d59
    34e0:	00002561 	.word	0x00002561

000034e4 <uhd_ep_run>:
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	46de      	mov	lr, fp
    34e8:	4657      	mov	r7, sl
    34ea:	464e      	mov	r6, r9
    34ec:	4645      	mov	r5, r8
    34ee:	b5e0      	push	{r5, r6, r7, lr}
    34f0:	b087      	sub	sp, #28
    34f2:	9200      	str	r2, [sp, #0]
    34f4:	001d      	movs	r5, r3
    34f6:	ab10      	add	r3, sp, #64	; 0x40
    34f8:	cb40      	ldmia	r3!, {r6}
    34fa:	881f      	ldrh	r7, [r3, #0]
	uhd_pipe_job_t *ptr_job;
	uint8_t pipe = 0;

	struct usb_pipe_callback_parameter callback_para;

	pipe = _uhd_get_pipe(add,endp);
    34fc:	4b36      	ldr	r3, [pc, #216]	; (35d8 <uhd_ep_run+0xf4>)
    34fe:	4798      	blx	r3
	if (!pipe) {
		return false;
    3500:	2300      	movs	r3, #0
	if (!pipe) {
    3502:	2800      	cmp	r0, #0
    3504:	d060      	beq.n	35c8 <uhd_ep_run+0xe4>
	}
	/* Get job about pipe */
	ptr_job = &uhd_pipe_job[pipe - 1];
    3506:	1e42      	subs	r2, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3508:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    350c:	4259      	negs	r1, r3
    350e:	414b      	adcs	r3, r1
    3510:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    3512:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3514:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3518:	2100      	movs	r1, #0
    351a:	4b30      	ldr	r3, [pc, #192]	; (35dc <uhd_ep_run+0xf8>)
    351c:	7019      	strb	r1, [r3, #0]
	return flags;
    351e:	9b03      	ldr	r3, [sp, #12]
    3520:	469c      	mov	ip, r3
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    3522:	0053      	lsls	r3, r2, #1
    3524:	189b      	adds	r3, r3, r2
    3526:	00db      	lsls	r3, r3, #3
    3528:	492d      	ldr	r1, [pc, #180]	; (35e0 <uhd_ep_run+0xfc>)
    352a:	18cb      	adds	r3, r1, r3
    352c:	7d9b      	ldrb	r3, [r3, #22]
    352e:	07db      	lsls	r3, r3, #31
    3530:	d50b      	bpl.n	354a <uhd_ep_run+0x66>
		cpu_irq_restore(flags);
		return false; // Job already on going
    3532:	2300      	movs	r3, #0
	if (cpu_irq_is_enabled_flags(flags))
    3534:	4662      	mov	r2, ip
    3536:	2a00      	cmp	r2, #0
    3538:	d046      	beq.n	35c8 <uhd_ep_run+0xe4>
		cpu_irq_enable();
    353a:	2201      	movs	r2, #1
    353c:	4b27      	ldr	r3, [pc, #156]	; (35dc <uhd_ep_run+0xf8>)
    353e:	701a      	strb	r2, [r3, #0]
    3540:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3544:	b662      	cpsie	i
    3546:	2300      	movs	r3, #0
    3548:	e03e      	b.n	35c8 <uhd_ep_run+0xe4>
	}
	ptr_job->busy = true;
    354a:	4b25      	ldr	r3, [pc, #148]	; (35e0 <uhd_ep_run+0xfc>)
    354c:	4698      	mov	r8, r3
    354e:	0053      	lsls	r3, r2, #1
    3550:	9301      	str	r3, [sp, #4]
    3552:	189b      	adds	r3, r3, r2
    3554:	00db      	lsls	r3, r3, #3
    3556:	4443      	add	r3, r8
    3558:	2110      	movs	r1, #16
    355a:	4689      	mov	r9, r1
    355c:	4499      	add	r9, r3
    355e:	4649      	mov	r1, r9
    3560:	7989      	ldrb	r1, [r1, #6]
    3562:	468b      	mov	fp, r1
    3564:	2101      	movs	r1, #1
    3566:	468a      	mov	sl, r1
    3568:	4659      	mov	r1, fp
    356a:	4654      	mov	r4, sl
    356c:	4321      	orrs	r1, r4
    356e:	468a      	mov	sl, r1

	/* No job running. Let's setup a new one. */
	ptr_job->buf = buf;
    3570:	9901      	ldr	r1, [sp, #4]
    3572:	1889      	adds	r1, r1, r2
    3574:	00c9      	lsls	r1, r1, #3
    3576:	468b      	mov	fp, r1
    3578:	4641      	mov	r1, r8
    357a:	465c      	mov	r4, fp
    357c:	5065      	str	r5, [r4, r1]
	ptr_job->buf_size = buf_size;
    357e:	609e      	str	r6, [r3, #8]
	ptr_job->nb_trans = 0;
    3580:	2500      	movs	r5, #0
    3582:	60dd      	str	r5, [r3, #12]
	ptr_job->timeout = timeout;
    3584:	829f      	strh	r7, [r3, #20]
	ptr_job->b_shortpacket = b_shortpacket;
    3586:	2301      	movs	r3, #1
    3588:	9c00      	ldr	r4, [sp, #0]
    358a:	4023      	ands	r3, r4
    358c:	005b      	lsls	r3, r3, #1
    358e:	24fd      	movs	r4, #253	; 0xfd
    3590:	4651      	mov	r1, sl
    3592:	4021      	ands	r1, r4
    3594:	000c      	movs	r4, r1
    3596:	431c      	orrs	r4, r3
    3598:	464b      	mov	r3, r9
    359a:	719c      	strb	r4, [r3, #6]
	ptr_job->call_end = callback;
    359c:	4659      	mov	r1, fp
    359e:	4441      	add	r1, r8
    35a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    35a2:	610b      	str	r3, [r1, #16]
	if (cpu_irq_is_enabled_flags(flags))
    35a4:	4663      	mov	r3, ip
    35a6:	2b00      	cmp	r3, #0
    35a8:	d005      	beq.n	35b6 <uhd_ep_run+0xd2>
		cpu_irq_enable();
    35aa:	2201      	movs	r2, #1
    35ac:	4b0b      	ldr	r3, [pc, #44]	; (35dc <uhd_ep_run+0xf8>)
    35ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    35b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    35b4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	/* Request first transfer */
	callback_para.pipe_num = pipe;
    35b6:	a904      	add	r1, sp, #16
    35b8:	7008      	strb	r0, [r1, #0]
	callback_para.transfered_size = 0;
    35ba:	2300      	movs	r3, #0
    35bc:	804b      	strh	r3, [r1, #2]
	callback_para.required_size = 0;
    35be:	808b      	strh	r3, [r1, #4]
	_uhd_pipe_trans_complete(&dev, &callback_para);
    35c0:	4808      	ldr	r0, [pc, #32]	; (35e4 <uhd_ep_run+0x100>)
    35c2:	4b09      	ldr	r3, [pc, #36]	; (35e8 <uhd_ep_run+0x104>)
    35c4:	4798      	blx	r3
	return true;
    35c6:	2301      	movs	r3, #1
}
    35c8:	0018      	movs	r0, r3
    35ca:	b007      	add	sp, #28
    35cc:	bc3c      	pop	{r2, r3, r4, r5}
    35ce:	4690      	mov	r8, r2
    35d0:	4699      	mov	r9, r3
    35d2:	46a2      	mov	sl, r4
    35d4:	46ab      	mov	fp, r5
    35d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35d8:	00002515 	.word	0x00002515
    35dc:	20000023 	.word	0x20000023
    35e0:	200001d4 	.word	0x200001d4
    35e4:	200005a8 	.word	0x200005a8
    35e8:	000027a9 	.word	0x000027a9

000035ec <usb_host_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_host_register_callback(struct usb_module *module_inst,
		enum usb_host_callback callback_type,
		usb_host_callback_t callback_func)
{
    35ec:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->host_callback[callback_type] = callback_func;
    35ee:	008b      	lsls	r3, r1, #2
    35f0:	18c3      	adds	r3, r0, r3
    35f2:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->host_registered_callback_mask |= (1 << callback_type);
    35f4:	24a4      	movs	r4, #164	; 0xa4
    35f6:	2201      	movs	r2, #1
    35f8:	408a      	lsls	r2, r1
    35fa:	5d03      	ldrb	r3, [r0, r4]
    35fc:	4313      	orrs	r3, r2
    35fe:	5503      	strb	r3, [r0, r4]

	return STATUS_OK;
}
    3600:	2000      	movs	r0, #0
    3602:	bd10      	pop	{r4, pc}

00003604 <usb_host_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_host_enable_callback(struct usb_module *module_inst,
		enum usb_host_callback callback_type)
{
    3604:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Enable callback */
	module_inst->host_enabled_callback_mask |= (1 << callback_type);
    3606:	24a5      	movs	r4, #165	; 0xa5
    3608:	2201      	movs	r2, #1
    360a:	408a      	lsls	r2, r1
    360c:	5d03      	ldrb	r3, [r0, r4]
    360e:	4313      	orrs	r3, r2
    3610:	5503      	strb	r3, [r0, r4]

	if (callback_type == USB_HOST_CALLBACK_SOF) {
    3612:	2900      	cmp	r1, #0
    3614:	d10e      	bne.n	3634 <usb_host_enable_callback+0x30>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_HSOF;
    3616:	2304      	movs	r3, #4
    3618:	6802      	ldr	r2, [r0, #0]
    361a:	8313      	strh	r3, [r2, #24]
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_RST;
	}
	if (callback_type == USB_HOST_CALLBACK_WAKEUP) {
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_WAKEUP;
	}
	if (callback_type == USB_HOST_CALLBACK_DNRSM) {
    361c:	2903      	cmp	r1, #3
    361e:	d10e      	bne.n	363e <usb_host_enable_callback+0x3a>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_DNRSM;
    3620:	2320      	movs	r3, #32
    3622:	6802      	ldr	r2, [r0, #0]
    3624:	8313      	strh	r3, [r2, #24]
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_UPRSM;
	}
	if (callback_type == USB_HOST_CALLBACK_RAMACER) {
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_RAMACER;
	}
	if (callback_type == USB_HOST_CALLBACK_CONNECT) {
    3626:	2906      	cmp	r1, #6
    3628:	d10e      	bne.n	3648 <usb_host_enable_callback+0x44>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_DCONN;
    362a:	6803      	ldr	r3, [r0, #0]
    362c:	2280      	movs	r2, #128	; 0x80
    362e:	0052      	lsls	r2, r2, #1
    3630:	831a      	strh	r2, [r3, #24]
    3632:	e00f      	b.n	3654 <usb_host_enable_callback+0x50>
	if (callback_type == USB_HOST_CALLBACK_RESET) {
    3634:	2901      	cmp	r1, #1
    3636:	d10f      	bne.n	3658 <usb_host_enable_callback+0x54>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_RST;
    3638:	2308      	movs	r3, #8
    363a:	6802      	ldr	r2, [r0, #0]
    363c:	8313      	strh	r3, [r2, #24]
	if (callback_type == USB_HOST_CALLBACK_UPRSM) {
    363e:	2904      	cmp	r1, #4
    3640:	d10f      	bne.n	3662 <usb_host_enable_callback+0x5e>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_UPRSM;
    3642:	2340      	movs	r3, #64	; 0x40
    3644:	6802      	ldr	r2, [r0, #0]
    3646:	8313      	strh	r3, [r2, #24]
	}
	if (callback_type == USB_HOST_CALLBACK_DISCONNECT) {
    3648:	2907      	cmp	r1, #7
    364a:	d103      	bne.n	3654 <usb_host_enable_callback+0x50>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_DDISC;
    364c:	6803      	ldr	r3, [r0, #0]
    364e:	2280      	movs	r2, #128	; 0x80
    3650:	0092      	lsls	r2, r2, #2
    3652:	831a      	strh	r2, [r3, #24]
	}

	return STATUS_OK;
}
    3654:	2000      	movs	r0, #0
    3656:	bd10      	pop	{r4, pc}
	if (callback_type == USB_HOST_CALLBACK_WAKEUP) {
    3658:	2902      	cmp	r1, #2
    365a:	d1df      	bne.n	361c <usb_host_enable_callback+0x18>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_WAKEUP;
    365c:	2310      	movs	r3, #16
    365e:	6802      	ldr	r2, [r0, #0]
    3660:	8313      	strh	r3, [r2, #24]
	if (callback_type == USB_HOST_CALLBACK_RAMACER) {
    3662:	2905      	cmp	r1, #5
    3664:	d1df      	bne.n	3626 <usb_host_enable_callback+0x22>
		module_inst->hw->HOST.INTENSET.reg = USB_HOST_INTENSET_RAMACER;
    3666:	6803      	ldr	r3, [r0, #0]
    3668:	2280      	movs	r2, #128	; 0x80
    366a:	831a      	strh	r2, [r3, #24]
    366c:	e7f2      	b.n	3654 <usb_host_enable_callback+0x50>

0000366e <usb_host_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_host_disable_callback(struct usb_module *module_inst,
		enum usb_host_callback callback_type)
{
    366e:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->host_enabled_callback_mask &= ~(1 << callback_type);
    3670:	2201      	movs	r2, #1
    3672:	408a      	lsls	r2, r1
    3674:	24a5      	movs	r4, #165	; 0xa5
    3676:	5d03      	ldrb	r3, [r0, r4]
    3678:	4393      	bics	r3, r2
    367a:	5503      	strb	r3, [r0, r4]

	if (callback_type == USB_HOST_CALLBACK_SOF) {
    367c:	2900      	cmp	r1, #0
    367e:	d10e      	bne.n	369e <usb_host_disable_callback+0x30>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_HSOF;
    3680:	2304      	movs	r3, #4
    3682:	6802      	ldr	r2, [r0, #0]
    3684:	8293      	strh	r3, [r2, #20]
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_RST;
	}
	if (callback_type == USB_HOST_CALLBACK_WAKEUP) {
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_WAKEUP;
	}
	if (callback_type == USB_HOST_CALLBACK_DNRSM) {
    3686:	2903      	cmp	r1, #3
    3688:	d10e      	bne.n	36a8 <usb_host_disable_callback+0x3a>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_DNRSM;
    368a:	2320      	movs	r3, #32
    368c:	6802      	ldr	r2, [r0, #0]
    368e:	8293      	strh	r3, [r2, #20]
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_UPRSM;
	}
	if (callback_type == USB_HOST_CALLBACK_RAMACER) {
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_RAMACER;
	}
	if (callback_type == USB_HOST_CALLBACK_CONNECT) {
    3690:	2906      	cmp	r1, #6
    3692:	d10e      	bne.n	36b2 <usb_host_disable_callback+0x44>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_DCONN;
    3694:	6803      	ldr	r3, [r0, #0]
    3696:	2280      	movs	r2, #128	; 0x80
    3698:	0052      	lsls	r2, r2, #1
    369a:	829a      	strh	r2, [r3, #20]
    369c:	e00f      	b.n	36be <usb_host_disable_callback+0x50>
	if (callback_type == USB_HOST_CALLBACK_RESET) {
    369e:	2901      	cmp	r1, #1
    36a0:	d10f      	bne.n	36c2 <usb_host_disable_callback+0x54>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_RST;
    36a2:	2308      	movs	r3, #8
    36a4:	6802      	ldr	r2, [r0, #0]
    36a6:	8293      	strh	r3, [r2, #20]
	if (callback_type == USB_HOST_CALLBACK_UPRSM) {
    36a8:	2904      	cmp	r1, #4
    36aa:	d10f      	bne.n	36cc <usb_host_disable_callback+0x5e>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_UPRSM;
    36ac:	2340      	movs	r3, #64	; 0x40
    36ae:	6802      	ldr	r2, [r0, #0]
    36b0:	8293      	strh	r3, [r2, #20]
	}
	if (callback_type == USB_HOST_CALLBACK_DISCONNECT) {
    36b2:	2907      	cmp	r1, #7
    36b4:	d103      	bne.n	36be <usb_host_disable_callback+0x50>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_DDISC;
    36b6:	6803      	ldr	r3, [r0, #0]
    36b8:	2280      	movs	r2, #128	; 0x80
    36ba:	0092      	lsls	r2, r2, #2
    36bc:	829a      	strh	r2, [r3, #20]
	}

	return STATUS_OK;
}
    36be:	2000      	movs	r0, #0
    36c0:	bd10      	pop	{r4, pc}
	if (callback_type == USB_HOST_CALLBACK_WAKEUP) {
    36c2:	2902      	cmp	r1, #2
    36c4:	d1df      	bne.n	3686 <usb_host_disable_callback+0x18>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_WAKEUP;
    36c6:	2310      	movs	r3, #16
    36c8:	6802      	ldr	r2, [r0, #0]
    36ca:	8293      	strh	r3, [r2, #20]
	if (callback_type == USB_HOST_CALLBACK_RAMACER) {
    36cc:	2905      	cmp	r1, #5
    36ce:	d1df      	bne.n	3690 <usb_host_disable_callback+0x22>
		module_inst->hw->HOST.INTENCLR.reg = USB_HOST_INTENCLR_RAMACER;
    36d0:	6803      	ldr	r3, [r0, #0]
    36d2:	2280      	movs	r2, #128	; 0x80
    36d4:	829a      	strh	r2, [r3, #20]
    36d6:	e7f2      	b.n	36be <usb_host_disable_callback+0x50>

000036d8 <usb_host_pipe_get_config_defaults>:
void usb_host_pipe_get_config_defaults(struct usb_host_pipe_config *ep_config)
{
	/* Sanity check arguments */
	Assert(ep_config);
	/* Write default config to config struct */
	ep_config->device_address = 0;
    36d8:	2300      	movs	r3, #0
    36da:	7003      	strb	r3, [r0, #0]
	ep_config->endpoint_address = 0;
    36dc:	7043      	strb	r3, [r0, #1]
	ep_config->pipe_type = USB_HOST_PIPE_TYPE_CONTROL;
    36de:	2201      	movs	r2, #1
    36e0:	7082      	strb	r2, [r0, #2]
	ep_config->binterval = 0;
    36e2:	70c3      	strb	r3, [r0, #3]
	ep_config->size = 8;
    36e4:	3308      	adds	r3, #8
    36e6:	8083      	strh	r3, [r0, #4]
}
    36e8:	4770      	bx	lr
	...

000036ec <usb_host_pipe_set_config>:
 * \return Status of the host pipe configuration operation.
 * \retval STATUS_OK    The host pipe was configured successfully.
 */
enum status_code usb_host_pipe_set_config(struct usb_module *module_inst, uint8_t pipe_num,
		struct usb_host_pipe_config *ep_config)
{
    36ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ee:	000d      	movs	r5, r1
    36f0:	0014      	movs	r4, r2
	Assert(module_inst->hw);
	Assert(pipe_num < USB_PIPE_NUM);
	Assert(ep_config);

	/* set pipe config */
	module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.BK = 0;
    36f2:	6801      	ldr	r1, [r0, #0]
    36f4:	002b      	movs	r3, r5
    36f6:	3308      	adds	r3, #8
    36f8:	015b      	lsls	r3, r3, #5
    36fa:	5c5a      	ldrb	r2, [r3, r1]
    36fc:	2604      	movs	r6, #4
    36fe:	43b2      	bics	r2, r6
    3700:	545a      	strb	r2, [r3, r1]
	module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE = ep_config->pipe_type;
    3702:	6806      	ldr	r6, [r0, #0]
    3704:	78a7      	ldrb	r7, [r4, #2]
    3706:	5d9a      	ldrb	r2, [r3, r6]
    3708:	2107      	movs	r1, #7
    370a:	4039      	ands	r1, r7
    370c:	00c9      	lsls	r1, r1, #3
    370e:	2738      	movs	r7, #56	; 0x38
    3710:	43ba      	bics	r2, r7
    3712:	430a      	orrs	r2, r1
    3714:	559a      	strb	r2, [r3, r6]
#if UHD_BULK_INTERVAL_MIN
	if (ep_config->pipe_type == USB_HOST_PIPE_TYPE_BULK &&
    3716:	78a3      	ldrb	r3, [r4, #2]
    3718:	2b03      	cmp	r3, #3
    371a:	d03c      	beq.n	3796 <usb_host_pipe_set_config+0xaa>
			max(ep_config->binterval, UHD_BULK_INTERVAL_MIN);
	} else if (ep_config->pipe_type == USB_HOST_PIPE_TYPE_BULK) {
		module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg = 0;
	} else {
		module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg =
			ep_config->binterval;
    371c:	78e2      	ldrb	r2, [r4, #3]
		module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg =
    371e:	002b      	movs	r3, r5
    3720:	3308      	adds	r3, #8
    3722:	015b      	lsls	r3, r3, #5
    3724:	6801      	ldr	r1, [r0, #0]
    3726:	468c      	mov	ip, r1
    3728:	4463      	add	r3, ip
    372a:	70da      	strb	r2, [r3, #3]
	}
#else
	module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg =
			ep_config->binterval;
#endif
	if (ep_config->endpoint_address == 0) {
    372c:	7863      	ldrb	r3, [r4, #1]
    372e:	2b00      	cmp	r3, #0
    3730:	d149      	bne.n	37c6 <usb_host_pipe_set_config+0xda>
		module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN =
    3732:	6801      	ldr	r1, [r0, #0]
    3734:	002b      	movs	r3, r5
    3736:	3308      	adds	r3, #8
    3738:	015b      	lsls	r3, r3, #5
    373a:	5c5a      	ldrb	r2, [r3, r1]
    373c:	2003      	movs	r0, #3
    373e:	4382      	bics	r2, r0
    3740:	545a      	strb	r2, [r3, r1]
				USB_HOST_PIPE_TOKEN_OUT;
		module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg =
				USB_HOST_PSTATUSCLR_BK0RDY;
	}

	memset((uint8_t *)&usb_descriptor_table.usb_pipe_table[pipe_num], 0,
    3742:	0168      	lsls	r0, r5, #5
    3744:	4e41      	ldr	r6, [pc, #260]	; (384c <usb_host_pipe_set_config+0x160>)
    3746:	1980      	adds	r0, r0, r6
    3748:	2220      	movs	r2, #32
    374a:	2100      	movs	r1, #0
    374c:	4b40      	ldr	r3, [pc, #256]	; (3850 <usb_host_pipe_set_config+0x164>)
    374e:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_pipe_table[0]));
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].CTRL_PIPE.bit.PDADDR =
			ep_config->device_address;
    3750:	7820      	ldrb	r0, [r4, #0]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].CTRL_PIPE.bit.PDADDR =
    3752:	016b      	lsls	r3, r5, #5
    3754:	18f6      	adds	r6, r6, r3
    3756:	89b2      	ldrh	r2, [r6, #12]
    3758:	217f      	movs	r1, #127	; 0x7f
    375a:	4001      	ands	r1, r0
    375c:	207f      	movs	r0, #127	; 0x7f
    375e:	4382      	bics	r2, r0
    3760:	430a      	orrs	r2, r1
    3762:	81b2      	strh	r2, [r6, #12]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].CTRL_PIPE.bit.PEPNUM =
			ep_config->endpoint_address & USB_EP_ADDR_MASK;
    3764:	7860      	ldrb	r0, [r4, #1]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].CTRL_PIPE.bit.PEPNUM =
    3766:	89b2      	ldrh	r2, [r6, #12]
    3768:	210f      	movs	r1, #15
    376a:	4001      	ands	r1, r0
    376c:	0209      	lsls	r1, r1, #8
    376e:	4839      	ldr	r0, [pc, #228]	; (3854 <usb_host_pipe_set_config+0x168>)
    3770:	4002      	ands	r2, r0
    3772:	430a      	orrs	r2, r1
    3774:	81b2      	strh	r2, [r6, #12]
	if (ep_config->size == 1023) {
    3776:	88a3      	ldrh	r3, [r4, #4]
    3778:	4a37      	ldr	r2, [pc, #220]	; (3858 <usb_host_pipe_set_config+0x16c>)
    377a:	4293      	cmp	r3, r2
    377c:	d044      	beq.n	3808 <usb_host_pipe_set_config+0x11c>
		usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.SIZE = 0x07;
	} else {
		usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.SIZE =
				(32 - clz(((uint32_t)min(max(ep_config->size, 8), 1024) << 1) - 1) - 1 - 3);
    377e:	4a37      	ldr	r2, [pc, #220]	; (385c <usb_host_pipe_set_config+0x170>)
    3780:	189a      	adds	r2, r3, r2
    3782:	b292      	uxth	r2, r2
    3784:	4936      	ldr	r1, [pc, #216]	; (3860 <usb_host_pipe_set_config+0x174>)
    3786:	428a      	cmp	r2, r1
    3788:	d947      	bls.n	381a <usb_host_pipe_set_config+0x12e>
    378a:	200f      	movs	r0, #15
    378c:	2b08      	cmp	r3, #8
    378e:	d945      	bls.n	381c <usb_host_pipe_set_config+0x130>
    3790:	005b      	lsls	r3, r3, #1
    3792:	1e58      	subs	r0, r3, #1
    3794:	e042      	b.n	381c <usb_host_pipe_set_config+0x130>
	if (ep_config->pipe_type == USB_HOST_PIPE_TYPE_BULK &&
    3796:	7863      	ldrb	r3, [r4, #1]
    3798:	2b7f      	cmp	r3, #127	; 0x7f
    379a:	d80b      	bhi.n	37b4 <usb_host_pipe_set_config+0xc8>
		module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg =
    379c:	6803      	ldr	r3, [r0, #0]
    379e:	78e2      	ldrb	r2, [r4, #3]
    37a0:	1c11      	adds	r1, r2, #0
    37a2:	2a00      	cmp	r2, #0
    37a4:	d100      	bne.n	37a8 <usb_host_pipe_set_config+0xbc>
    37a6:	2101      	movs	r1, #1
    37a8:	002a      	movs	r2, r5
    37aa:	3208      	adds	r2, #8
    37ac:	0152      	lsls	r2, r2, #5
    37ae:	189b      	adds	r3, r3, r2
    37b0:	70d9      	strb	r1, [r3, #3]
    37b2:	e7bb      	b.n	372c <usb_host_pipe_set_config+0x40>
		module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg = 0;
    37b4:	002b      	movs	r3, r5
    37b6:	3308      	adds	r3, #8
    37b8:	015b      	lsls	r3, r3, #5
    37ba:	6802      	ldr	r2, [r0, #0]
    37bc:	4694      	mov	ip, r2
    37be:	4463      	add	r3, ip
    37c0:	2200      	movs	r2, #0
    37c2:	70da      	strb	r2, [r3, #3]
    37c4:	e7b2      	b.n	372c <usb_host_pipe_set_config+0x40>
	} else if (ep_config->endpoint_address & USB_EP_DIR_IN) {
    37c6:	b25b      	sxtb	r3, r3
    37c8:	2b00      	cmp	r3, #0
    37ca:	db0e      	blt.n	37ea <usb_host_pipe_set_config+0xfe>
		module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN =
    37cc:	6801      	ldr	r1, [r0, #0]
    37ce:	002b      	movs	r3, r5
    37d0:	3308      	adds	r3, #8
    37d2:	015b      	lsls	r3, r3, #5
    37d4:	5c5a      	ldrb	r2, [r3, r1]
    37d6:	2603      	movs	r6, #3
    37d8:	43b2      	bics	r2, r6
    37da:	2602      	movs	r6, #2
    37dc:	4332      	orrs	r2, r6
    37de:	545a      	strb	r2, [r3, r1]
		module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg =
    37e0:	6802      	ldr	r2, [r0, #0]
    37e2:	18d3      	adds	r3, r2, r3
    37e4:	2240      	movs	r2, #64	; 0x40
    37e6:	711a      	strb	r2, [r3, #4]
    37e8:	e7ab      	b.n	3742 <usb_host_pipe_set_config+0x56>
		module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN =
    37ea:	6801      	ldr	r1, [r0, #0]
    37ec:	002b      	movs	r3, r5
    37ee:	3308      	adds	r3, #8
    37f0:	015b      	lsls	r3, r3, #5
    37f2:	5c5a      	ldrb	r2, [r3, r1]
    37f4:	2603      	movs	r6, #3
    37f6:	43b2      	bics	r2, r6
    37f8:	2601      	movs	r6, #1
    37fa:	4332      	orrs	r2, r6
    37fc:	545a      	strb	r2, [r3, r1]
		module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg =
    37fe:	6802      	ldr	r2, [r0, #0]
    3800:	18d3      	adds	r3, r2, r3
    3802:	2240      	movs	r2, #64	; 0x40
    3804:	715a      	strb	r2, [r3, #5]
    3806:	e79c      	b.n	3742 <usb_host_pipe_set_config+0x56>
		usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.SIZE = 0x07;
    3808:	016a      	lsls	r2, r5, #5
    380a:	4b10      	ldr	r3, [pc, #64]	; (384c <usb_host_pipe_set_config+0x160>)
    380c:	189b      	adds	r3, r3, r2
    380e:	6859      	ldr	r1, [r3, #4]
    3810:	22e0      	movs	r2, #224	; 0xe0
    3812:	05d2      	lsls	r2, r2, #23
    3814:	430a      	orrs	r2, r1
    3816:	605a      	str	r2, [r3, #4]
    3818:	e00f      	b.n	383a <usb_host_pipe_set_config+0x14e>
				(32 - clz(((uint32_t)min(max(ep_config->size, 8), 1024) << 1) - 1) - 1 - 3);
    381a:	4812      	ldr	r0, [pc, #72]	; (3864 <usb_host_pipe_set_config+0x178>)
    381c:	4b12      	ldr	r3, [pc, #72]	; (3868 <usb_host_pipe_set_config+0x17c>)
    381e:	4798      	blx	r3
    3820:	211c      	movs	r1, #28
    3822:	1a09      	subs	r1, r1, r0
		usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.SIZE =
    3824:	016b      	lsls	r3, r5, #5
    3826:	4a09      	ldr	r2, [pc, #36]	; (384c <usb_host_pipe_set_config+0x160>)
    3828:	18d2      	adds	r2, r2, r3
    382a:	6850      	ldr	r0, [r2, #4]
    382c:	2307      	movs	r3, #7
    382e:	400b      	ands	r3, r1
    3830:	071b      	lsls	r3, r3, #28
    3832:	490e      	ldr	r1, [pc, #56]	; (386c <usb_host_pipe_set_config+0x180>)
    3834:	4008      	ands	r0, r1
    3836:	4318      	orrs	r0, r3
    3838:	6050      	str	r0, [r2, #4]
	}

	/* Clear busy status */
	host_pipe_job_busy_status &= ~(1 << pipe_num);
    383a:	4a0d      	ldr	r2, [pc, #52]	; (3870 <usb_host_pipe_set_config+0x184>)
    383c:	2301      	movs	r3, #1
    383e:	40ab      	lsls	r3, r5
    3840:	6811      	ldr	r1, [r2, #0]
    3842:	4399      	bics	r1, r3
    3844:	6011      	str	r1, [r2, #0]

	return STATUS_OK;
}
    3846:	2000      	movs	r0, #0
    3848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	20000764 	.word	0x20000764
    3850:	00005e13 	.word	0x00005e13
    3854:	fffff0ff 	.word	0xfffff0ff
    3858:	000003ff 	.word	0x000003ff
    385c:	fffffc00 	.word	0xfffffc00
    3860:	0000fbff 	.word	0x0000fbff
    3864:	000007ff 	.word	0x000007ff
    3868:	00005d15 	.word	0x00005d15
    386c:	8fffffff 	.word	0x8fffffff
    3870:	20000298 	.word	0x20000298

00003874 <usb_host_pipe_get_config>:
 * \return Status of the get host pipe configuration operation.
 * \retval STATUS_OK    The host pipe configuration was read successfully.
 */
enum status_code usb_host_pipe_get_config(struct usb_module *module_inst, uint8_t pipe_num,
		struct usb_host_pipe_config *ep_config)
{
    3874:	b530      	push	{r4, r5, lr}
	Assert(module_inst->hw);
	Assert(pipe_num < USB_PIPE_NUM);
	Assert(ep_config);
	/* get pipe config from setting register */
	ep_config->device_address =
			usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].CTRL_PIPE.bit.PDADDR;
    3876:	014c      	lsls	r4, r1, #5
    3878:	4b1a      	ldr	r3, [pc, #104]	; (38e4 <usb_host_pipe_get_config+0x70>)
    387a:	191b      	adds	r3, r3, r4
    387c:	899c      	ldrh	r4, [r3, #12]
    387e:	3308      	adds	r3, #8
    3880:	0664      	lsls	r4, r4, #25
    3882:	0e64      	lsrs	r4, r4, #25
	ep_config->device_address =
    3884:	7014      	strb	r4, [r2, #0]
	ep_config->endpoint_address =
			usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].CTRL_PIPE.bit.PEPNUM;
    3886:	889b      	ldrh	r3, [r3, #4]
    3888:	051b      	lsls	r3, r3, #20
    388a:	0f1b      	lsrs	r3, r3, #28
    388c:	b2dc      	uxtb	r4, r3
	ep_config->endpoint_address =
    388e:	7053      	strb	r3, [r2, #1]

	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN ==
    3890:	000b      	movs	r3, r1
    3892:	3308      	adds	r3, #8
    3894:	015b      	lsls	r3, r3, #5
    3896:	6805      	ldr	r5, [r0, #0]
    3898:	5d5b      	ldrb	r3, [r3, r5]
    389a:	079b      	lsls	r3, r3, #30
    389c:	0f9b      	lsrs	r3, r3, #30
    389e:	2b01      	cmp	r3, #1
    38a0:	d018      	beq.n	38d4 <usb_host_pipe_get_config+0x60>
				USB_HOST_PIPE_TOKEN_IN) {
		ep_config->endpoint_address |= USB_EP_DIR_IN;
	}

	ep_config->pipe_type = (enum usb_host_pipe_type)module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE;
    38a2:	000c      	movs	r4, r1
    38a4:	3408      	adds	r4, #8
    38a6:	0164      	lsls	r4, r4, #5
    38a8:	6803      	ldr	r3, [r0, #0]
    38aa:	5ce3      	ldrb	r3, [r4, r3]
    38ac:	069b      	lsls	r3, r3, #26
    38ae:	0f5b      	lsrs	r3, r3, #29
    38b0:	7093      	strb	r3, [r2, #2]
	ep_config->binterval =
			module_inst->hw->HOST.HostPipe[pipe_num].BINTERVAL.reg;
    38b2:	6803      	ldr	r3, [r0, #0]
    38b4:	191c      	adds	r4, r3, r4
    38b6:	78e3      	ldrb	r3, [r4, #3]
	ep_config->binterval =
    38b8:	70d3      	strb	r3, [r2, #3]
	size = usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.SIZE;
    38ba:	0149      	lsls	r1, r1, #5
    38bc:	4b09      	ldr	r3, [pc, #36]	; (38e4 <usb_host_pipe_get_config+0x70>)
    38be:	1859      	adds	r1, r3, r1
    38c0:	684b      	ldr	r3, [r1, #4]
    38c2:	005b      	lsls	r3, r3, #1
    38c4:	0f5b      	lsrs	r3, r3, #29
	if (size == 0x07) {
    38c6:	2b07      	cmp	r3, #7
    38c8:	d008      	beq.n	38dc <usb_host_pipe_get_config+0x68>
		ep_config->size = 1023;
	} else {
		ep_config->size = (8 << size);
    38ca:	2108      	movs	r1, #8
    38cc:	4099      	lsls	r1, r3
    38ce:	8091      	strh	r1, [r2, #4]
	}

	return STATUS_OK;
}
    38d0:	2000      	movs	r0, #0
    38d2:	bd30      	pop	{r4, r5, pc}
		ep_config->endpoint_address |= USB_EP_DIR_IN;
    38d4:	3b81      	subs	r3, #129	; 0x81
    38d6:	431c      	orrs	r4, r3
    38d8:	7054      	strb	r4, [r2, #1]
    38da:	e7e2      	b.n	38a2 <usb_host_pipe_get_config+0x2e>
		ep_config->size = 1023;
    38dc:	4b02      	ldr	r3, [pc, #8]	; (38e8 <usb_host_pipe_get_config+0x74>)
    38de:	8093      	strh	r3, [r2, #4]
    38e0:	e7f6      	b.n	38d0 <usb_host_pipe_get_config+0x5c>
    38e2:	46c0      	nop			; (mov r8, r8)
    38e4:	20000764 	.word	0x20000764
    38e8:	000003ff 	.word	0x000003ff

000038ec <usb_host_pipe_register_callback>:
 */
enum status_code usb_host_pipe_register_callback(
		struct usb_module *module_inst, uint8_t pipe_num,
		enum usb_host_pipe_callback callback_type,
		usb_host_pipe_callback_t callback_func)
{
    38ec:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(pipe_num < USB_PIPE_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->host_pipe_callback[pipe_num][callback_type] = callback_func;
    38ee:	008c      	lsls	r4, r1, #2
    38f0:	18a4      	adds	r4, r4, r2
    38f2:	3408      	adds	r4, #8
    38f4:	00a4      	lsls	r4, r4, #2
    38f6:	1904      	adds	r4, r0, r4
    38f8:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->host_pipe_registered_callback_mask[pipe_num] |= (1 << callback_type);
    38fa:	1840      	adds	r0, r0, r1
    38fc:	30a6      	adds	r0, #166	; 0xa6
    38fe:	2301      	movs	r3, #1
    3900:	4093      	lsls	r3, r2
    3902:	001a      	movs	r2, r3
    3904:	7803      	ldrb	r3, [r0, #0]
    3906:	4313      	orrs	r3, r2
    3908:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    390a:	2000      	movs	r0, #0
    390c:	bd10      	pop	{r4, pc}

0000390e <usb_host_pipe_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_host_pipe_enable_callback(
		struct usb_module *module_inst, uint8_t pipe_num,
		enum usb_host_pipe_callback callback_type)
{
    390e:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(pipe_num < USB_PIPE_NUM);

	/* Enable callback */
	module_inst->host_pipe_enabled_callback_mask[pipe_num] |= (1 << callback_type);
    3910:	1843      	adds	r3, r0, r1
    3912:	33ae      	adds	r3, #174	; 0xae
    3914:	2501      	movs	r5, #1
    3916:	4095      	lsls	r5, r2
    3918:	781c      	ldrb	r4, [r3, #0]
    391a:	432c      	orrs	r4, r5
    391c:	701c      	strb	r4, [r3, #0]

	if (callback_type == USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE) {
    391e:	2a00      	cmp	r2, #0
    3920:	d112      	bne.n	3948 <usb_host_pipe_enable_callback+0x3a>
		module_inst->hw->HOST.HostPipe[pipe_num].PINTENSET.reg = USB_HOST_PINTENSET_TRCPT_Msk;
    3922:	014b      	lsls	r3, r1, #5
    3924:	6804      	ldr	r4, [r0, #0]
    3926:	46a4      	mov	ip, r4
    3928:	4463      	add	r3, ip
    392a:	330a      	adds	r3, #10
    392c:	33ff      	adds	r3, #255	; 0xff
    392e:	2403      	movs	r4, #3
    3930:	701c      	strb	r4, [r3, #0]
				USB_HOST_PINTENSET_TRFAIL | USB_HOST_PINTENSET_PERR;
	}
	if (callback_type == USB_HOST_PIPE_CALLBACK_SETUP) {
		module_inst->hw->HOST.HostPipe[pipe_num].PINTENSET.reg = USB_HOST_PINTENSET_TXSTP;
	}
	if (callback_type == USB_HOST_PIPE_CALLBACK_STALL) {
    3932:	2a03      	cmp	r2, #3
    3934:	d106      	bne.n	3944 <usb_host_pipe_enable_callback+0x36>
		module_inst->hw->HOST.HostPipe[pipe_num].PINTENSET.reg = USB_HOST_PINTENSET_STALL;
    3936:	6803      	ldr	r3, [r0, #0]
    3938:	0149      	lsls	r1, r1, #5
    393a:	1859      	adds	r1, r3, r1
    393c:	310a      	adds	r1, #10
    393e:	31ff      	adds	r1, #255	; 0xff
    3940:	2320      	movs	r3, #32
    3942:	700b      	strb	r3, [r1, #0]
	}

	return STATUS_OK;
}
    3944:	2000      	movs	r0, #0
    3946:	bd30      	pop	{r4, r5, pc}
	if (callback_type == USB_HOST_PIPE_CALLBACK_ERROR) {
    3948:	2a01      	cmp	r2, #1
    394a:	d107      	bne.n	395c <usb_host_pipe_enable_callback+0x4e>
		module_inst->hw->HOST.HostPipe[pipe_num].PINTENSET.reg =
    394c:	6803      	ldr	r3, [r0, #0]
    394e:	0149      	lsls	r1, r1, #5
    3950:	1859      	adds	r1, r3, r1
    3952:	310a      	adds	r1, #10
    3954:	31ff      	adds	r1, #255	; 0xff
    3956:	230c      	movs	r3, #12
    3958:	700b      	strb	r3, [r1, #0]
    395a:	e7f3      	b.n	3944 <usb_host_pipe_enable_callback+0x36>
	if (callback_type == USB_HOST_PIPE_CALLBACK_SETUP) {
    395c:	2a02      	cmp	r2, #2
    395e:	d1e8      	bne.n	3932 <usb_host_pipe_enable_callback+0x24>
		module_inst->hw->HOST.HostPipe[pipe_num].PINTENSET.reg = USB_HOST_PINTENSET_TXSTP;
    3960:	6803      	ldr	r3, [r0, #0]
    3962:	0149      	lsls	r1, r1, #5
    3964:	1859      	adds	r1, r3, r1
    3966:	310a      	adds	r1, #10
    3968:	31ff      	adds	r1, #255	; 0xff
    396a:	2310      	movs	r3, #16
    396c:	700b      	strb	r3, [r1, #0]
    396e:	e7e9      	b.n	3944 <usb_host_pipe_enable_callback+0x36>

00003970 <usb_host_pipe_setup_job>:
 * \retval STATUS_BUSY    The pipe is busy.
 * \retval STATUS_ERR_NOT_INITIALIZED    The pipe has not been configured.
 */
enum status_code usb_host_pipe_setup_job(struct usb_module *module_inst,
		uint8_t pipe_num, uint8_t *buf)
{
    3970:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(pipe_num < USB_PIPE_NUM);

	if (host_pipe_job_busy_status & (1 << pipe_num)) {
    3972:	2301      	movs	r3, #1
    3974:	408b      	lsls	r3, r1
    3976:	4c19      	ldr	r4, [pc, #100]	; (39dc <usb_host_pipe_setup_job+0x6c>)
    3978:	6825      	ldr	r5, [r4, #0]
		return STATUS_BUSY;
    397a:	2405      	movs	r4, #5
	if (host_pipe_job_busy_status & (1 << pipe_num)) {
    397c:	421d      	tst	r5, r3
    397e:	d001      	beq.n	3984 <usb_host_pipe_setup_job+0x14>

	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_BK0RDY;
	usb_host_pipe_unfreeze(module_inst, pipe_num);

	return STATUS_OK;
}
    3980:	0020      	movs	r0, r4
    3982:	bd30      	pop	{r4, r5, pc}
	host_pipe_job_busy_status |= 1 << pipe_num;
    3984:	432b      	orrs	r3, r5
    3986:	4c15      	ldr	r4, [pc, #84]	; (39dc <usb_host_pipe_setup_job+0x6c>)
    3988:	6023      	str	r3, [r4, #0]
	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE ==
    398a:	000b      	movs	r3, r1
    398c:	3308      	adds	r3, #8
    398e:	015b      	lsls	r3, r3, #5
    3990:	6804      	ldr	r4, [r0, #0]
    3992:	5d1b      	ldrb	r3, [r3, r4]
    3994:	069b      	lsls	r3, r3, #26
    3996:	0f5b      	lsrs	r3, r3, #29
		return STATUS_ERR_NOT_INITIALIZED;
    3998:	241f      	movs	r4, #31
	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE ==
    399a:	2b00      	cmp	r3, #0
    399c:	d0f0      	beq.n	3980 <usb_host_pipe_setup_job+0x10>
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].ADDR.reg = (uint32_t)buf;
    399e:	4b10      	ldr	r3, [pc, #64]	; (39e0 <usb_host_pipe_setup_job+0x70>)
    39a0:	014c      	lsls	r4, r1, #5
    39a2:	50e2      	str	r2, [r4, r3]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT =
    39a4:	191b      	adds	r3, r3, r4
    39a6:	685a      	ldr	r2, [r3, #4]
    39a8:	0b92      	lsrs	r2, r2, #14
    39aa:	0392      	lsls	r2, r2, #14
    39ac:	2408      	movs	r4, #8
    39ae:	4322      	orrs	r2, r4
    39b0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE =
    39b2:	685a      	ldr	r2, [r3, #4]
    39b4:	4c0b      	ldr	r4, [pc, #44]	; (39e4 <usb_host_pipe_setup_job+0x74>)
    39b6:	4022      	ands	r2, r4
    39b8:	605a      	str	r2, [r3, #4]
	module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN =
    39ba:	6802      	ldr	r2, [r0, #0]
    39bc:	3108      	adds	r1, #8
    39be:	0149      	lsls	r1, r1, #5
    39c0:	5c8b      	ldrb	r3, [r1, r2]
    39c2:	2403      	movs	r4, #3
    39c4:	43a3      	bics	r3, r4
    39c6:	548b      	strb	r3, [r1, r2]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_BK0RDY;
    39c8:	6803      	ldr	r3, [r0, #0]
    39ca:	185b      	adds	r3, r3, r1
    39cc:	2240      	movs	r2, #64	; 0x40
    39ce:	715a      	strb	r2, [r3, #5]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg = USB_HOST_PSTATUSCLR_PFREEZE;
    39d0:	6803      	ldr	r3, [r0, #0]
    39d2:	1859      	adds	r1, r3, r1
    39d4:	2310      	movs	r3, #16
    39d6:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    39d8:	2400      	movs	r4, #0
    39da:	e7d1      	b.n	3980 <usb_host_pipe_setup_job+0x10>
    39dc:	20000298 	.word	0x20000298
    39e0:	20000764 	.word	0x20000764
    39e4:	f0003fff 	.word	0xf0003fff

000039e8 <usb_host_pipe_read_job>:
 * \retval STATUS_BUSY    The pipe is busy.
 * \retval STATUS_ERR_NOT_INITIALIZED    The pipe has not been configured.
 */
enum status_code usb_host_pipe_read_job(struct usb_module *module_inst,
		uint8_t pipe_num, uint8_t *buf, uint32_t buf_size)
{
    39e8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(pipe_num < USB_PIPE_NUM);

	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE ==
    39ea:	000c      	movs	r4, r1
    39ec:	3408      	adds	r4, #8
    39ee:	0164      	lsls	r4, r4, #5
    39f0:	6805      	ldr	r5, [r0, #0]
    39f2:	5d64      	ldrb	r4, [r4, r5]
    39f4:	06a4      	lsls	r4, r4, #26
    39f6:	0f64      	lsrs	r4, r4, #29
			USB_HOST_PIPE_TYPE_DISABLE) {
		return STATUS_ERR_NOT_INITIALIZED;
    39f8:	251f      	movs	r5, #31
	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE ==
    39fa:	2c00      	cmp	r4, #0
    39fc:	d101      	bne.n	3a02 <usb_host_pipe_read_job+0x1a>
	/* Start transfer */
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg = USB_HOST_PSTATUSCLR_BK0RDY;
	usb_host_pipe_unfreeze(module_inst, pipe_num);

	return STATUS_OK;
}
    39fe:	0028      	movs	r0, r5
    3a00:	bd70      	pop	{r4, r5, r6, pc}
	if (host_pipe_job_busy_status & (1 << pipe_num)) {
    3a02:	2401      	movs	r4, #1
    3a04:	408c      	lsls	r4, r1
    3a06:	4d15      	ldr	r5, [pc, #84]	; (3a5c <usb_host_pipe_read_job+0x74>)
    3a08:	682e      	ldr	r6, [r5, #0]
		return STATUS_BUSY;
    3a0a:	2505      	movs	r5, #5
	if (host_pipe_job_busy_status & (1 << pipe_num)) {
    3a0c:	4226      	tst	r6, r4
    3a0e:	d1f6      	bne.n	39fe <usb_host_pipe_read_job+0x16>
	host_pipe_job_busy_status |= 1 << pipe_num;
    3a10:	4334      	orrs	r4, r6
    3a12:	4d12      	ldr	r5, [pc, #72]	; (3a5c <usb_host_pipe_read_job+0x74>)
    3a14:	602c      	str	r4, [r5, #0]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].ADDR.reg = (uint32_t)buf;
    3a16:	4c12      	ldr	r4, [pc, #72]	; (3a60 <usb_host_pipe_read_job+0x78>)
    3a18:	014d      	lsls	r5, r1, #5
    3a1a:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT =
    3a1c:	1962      	adds	r2, r4, r5
    3a1e:	6854      	ldr	r4, [r2, #4]
    3a20:	0ba4      	lsrs	r4, r4, #14
    3a22:	03a4      	lsls	r4, r4, #14
    3a24:	6054      	str	r4, [r2, #4]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE =
    3a26:	6854      	ldr	r4, [r2, #4]
    3a28:	049b      	lsls	r3, r3, #18
    3a2a:	091b      	lsrs	r3, r3, #4
    3a2c:	4d0d      	ldr	r5, [pc, #52]	; (3a64 <usb_host_pipe_read_job+0x7c>)
    3a2e:	402c      	ands	r4, r5
    3a30:	4323      	orrs	r3, r4
    3a32:	6053      	str	r3, [r2, #4]
	module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN =
    3a34:	6802      	ldr	r2, [r0, #0]
    3a36:	3108      	adds	r1, #8
    3a38:	0149      	lsls	r1, r1, #5
    3a3a:	5c8b      	ldrb	r3, [r1, r2]
    3a3c:	2403      	movs	r4, #3
    3a3e:	43a3      	bics	r3, r4
    3a40:	2401      	movs	r4, #1
    3a42:	4323      	orrs	r3, r4
    3a44:	548b      	strb	r3, [r1, r2]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSCLR.reg = USB_HOST_PSTATUSCLR_BK0RDY;
    3a46:	6803      	ldr	r3, [r0, #0]
    3a48:	185b      	adds	r3, r3, r1
    3a4a:	2240      	movs	r2, #64	; 0x40
    3a4c:	711a      	strb	r2, [r3, #4]
    3a4e:	6803      	ldr	r3, [r0, #0]
    3a50:	1859      	adds	r1, r3, r1
    3a52:	2310      	movs	r3, #16
    3a54:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    3a56:	2500      	movs	r5, #0
    3a58:	e7d1      	b.n	39fe <usb_host_pipe_read_job+0x16>
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	20000298 	.word	0x20000298
    3a60:	20000764 	.word	0x20000764
    3a64:	f0003fff 	.word	0xf0003fff

00003a68 <usb_host_pipe_write_job>:
 * \retval STATUS_BUSY    The pipe is busy.
 * \retval STATUS_ERR_NOT_INITIALIZED    The pipe has not been configured.
 */
enum status_code usb_host_pipe_write_job(struct usb_module *module_inst,
		uint8_t pipe_num, uint8_t *buf, uint32_t buf_size)
{
    3a68:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(pipe_num < USB_PIPE_NUM);

	if (host_pipe_job_busy_status & (1 << pipe_num)) {
    3a6a:	2401      	movs	r4, #1
    3a6c:	408c      	lsls	r4, r1
    3a6e:	4d1b      	ldr	r5, [pc, #108]	; (3adc <usb_host_pipe_write_job+0x74>)
    3a70:	682e      	ldr	r6, [r5, #0]
		return STATUS_BUSY;
    3a72:	2505      	movs	r5, #5
	if (host_pipe_job_busy_status & (1 << pipe_num)) {
    3a74:	4226      	tst	r6, r4
    3a76:	d001      	beq.n	3a7c <usb_host_pipe_write_job+0x14>
	/* Start transfer */
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_BK0RDY;
	usb_host_pipe_unfreeze(module_inst, pipe_num);

	return STATUS_OK;
}
    3a78:	0028      	movs	r0, r5
    3a7a:	bd70      	pop	{r4, r5, r6, pc}
	host_pipe_job_busy_status |= 1 << pipe_num;
    3a7c:	4334      	orrs	r4, r6
    3a7e:	4d17      	ldr	r5, [pc, #92]	; (3adc <usb_host_pipe_write_job+0x74>)
    3a80:	602c      	str	r4, [r5, #0]
	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE ==
    3a82:	000c      	movs	r4, r1
    3a84:	3408      	adds	r4, #8
    3a86:	0164      	lsls	r4, r4, #5
    3a88:	6805      	ldr	r5, [r0, #0]
    3a8a:	5d64      	ldrb	r4, [r4, r5]
    3a8c:	06a4      	lsls	r4, r4, #26
    3a8e:	0f64      	lsrs	r4, r4, #29
		return STATUS_ERR_NOT_INITIALIZED;
    3a90:	251f      	movs	r5, #31
	if (module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTYPE ==
    3a92:	2c00      	cmp	r4, #0
    3a94:	d0f0      	beq.n	3a78 <usb_host_pipe_write_job+0x10>
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].ADDR.reg = (uint32_t)buf;
    3a96:	4c12      	ldr	r4, [pc, #72]	; (3ae0 <usb_host_pipe_write_job+0x78>)
    3a98:	014d      	lsls	r5, r1, #5
    3a9a:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT =
    3a9c:	1965      	adds	r5, r4, r5
    3a9e:	686c      	ldr	r4, [r5, #4]
    3aa0:	049b      	lsls	r3, r3, #18
    3aa2:	0c9b      	lsrs	r3, r3, #18
    3aa4:	0ba4      	lsrs	r4, r4, #14
    3aa6:	03a4      	lsls	r4, r4, #14
    3aa8:	4323      	orrs	r3, r4
    3aaa:	606b      	str	r3, [r5, #4]
	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE =
    3aac:	686b      	ldr	r3, [r5, #4]
    3aae:	4c0d      	ldr	r4, [pc, #52]	; (3ae4 <usb_host_pipe_write_job+0x7c>)
    3ab0:	4023      	ands	r3, r4
    3ab2:	606b      	str	r3, [r5, #4]
	module_inst->hw->HOST.HostPipe[pipe_num].PCFG.bit.PTOKEN =
    3ab4:	6802      	ldr	r2, [r0, #0]
    3ab6:	3108      	adds	r1, #8
    3ab8:	0149      	lsls	r1, r1, #5
    3aba:	5c8b      	ldrb	r3, [r1, r2]
    3abc:	2403      	movs	r4, #3
    3abe:	43a3      	bics	r3, r4
    3ac0:	2402      	movs	r4, #2
    3ac2:	4323      	orrs	r3, r4
    3ac4:	548b      	strb	r3, [r1, r2]
	module_inst->hw->HOST.HostPipe[pipe_num].PSTATUSSET.reg = USB_HOST_PSTATUSSET_BK0RDY;
    3ac6:	6803      	ldr	r3, [r0, #0]
    3ac8:	185b      	adds	r3, r3, r1
    3aca:	2240      	movs	r2, #64	; 0x40
    3acc:	715a      	strb	r2, [r3, #5]
    3ace:	6803      	ldr	r3, [r0, #0]
    3ad0:	1859      	adds	r1, r3, r1
    3ad2:	2310      	movs	r3, #16
    3ad4:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    3ad6:	2500      	movs	r5, #0
    3ad8:	e7ce      	b.n	3a78 <usb_host_pipe_write_job+0x10>
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	20000298 	.word	0x20000298
    3ae0:	20000764 	.word	0x20000764
    3ae4:	f0003fff 	.word	0xf0003fff

00003ae8 <usb_host_pipe_set_auto_zlp>:
 */
void usb_host_pipe_set_auto_zlp(struct usb_module *module_inst, uint8_t pipe_num, bool value)
{
	Assert(module_inst);

	usb_descriptor_table.usb_pipe_table[pipe_num].HostDescBank[0].PCKSIZE.bit.AUTO_ZLP = value;
    3ae8:	014b      	lsls	r3, r1, #5
    3aea:	4904      	ldr	r1, [pc, #16]	; (3afc <usb_host_pipe_set_auto_zlp+0x14>)
    3aec:	18c9      	adds	r1, r1, r3
    3aee:	684b      	ldr	r3, [r1, #4]
    3af0:	07d0      	lsls	r0, r2, #31
    3af2:	005a      	lsls	r2, r3, #1
    3af4:	0852      	lsrs	r2, r2, #1
    3af6:	4302      	orrs	r2, r0
    3af8:	604a      	str	r2, [r1, #4]
}
    3afa:	4770      	bx	lr
    3afc:	20000764 	.word	0x20000764

00003b00 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3b00:	6802      	ldr	r2, [r0, #0]
    3b02:	7813      	ldrb	r3, [r2, #0]
    3b04:	2102      	movs	r1, #2
    3b06:	430b      	orrs	r3, r1
    3b08:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3b0a:	6802      	ldr	r2, [r0, #0]
    3b0c:	7893      	ldrb	r3, [r2, #2]
    3b0e:	2b02      	cmp	r3, #2
    3b10:	d0fc      	beq.n	3b0c <usb_enable+0xc>
}
    3b12:	4770      	bx	lr

00003b14 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b16:	46de      	mov	lr, fp
    3b18:	4657      	mov	r7, sl
    3b1a:	464e      	mov	r6, r9
    3b1c:	4645      	mov	r5, r8
    3b1e:	b5e0      	push	{r5, r6, r7, lr}
    3b20:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3b22:	4bc4      	ldr	r3, [pc, #784]	; (3e34 <USB_Handler+0x320>)
    3b24:	681f      	ldr	r7, [r3, #0]
    3b26:	683d      	ldr	r5, [r7, #0]
    3b28:	782b      	ldrb	r3, [r5, #0]
    3b2a:	09db      	lsrs	r3, r3, #7
    3b2c:	d114      	bne.n	3b58 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3b2e:	8c2e      	ldrh	r6, [r5, #32]
    3b30:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3b32:	2e00      	cmp	r6, #0
    3b34:	d000      	beq.n	3b38 <USB_Handler+0x24>
    3b36:	e22d      	b.n	3f94 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3b38:	8bae      	ldrh	r6, [r5, #28]
    3b3a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3b3c:	23ab      	movs	r3, #171	; 0xab
    3b3e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3b40:	5afb      	ldrh	r3, [r7, r3]
    3b42:	22aa      	movs	r2, #170	; 0xaa
    3b44:	0052      	lsls	r2, r2, #1
    3b46:	5abd      	ldrh	r5, [r7, r2]
    3b48:	401d      	ands	r5, r3
    3b4a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3b4c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3b4e:	4fba      	ldr	r7, [pc, #744]	; (3e38 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3b50:	4bb8      	ldr	r3, [pc, #736]	; (3e34 <USB_Handler+0x320>)
    3b52:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3b54:	4698      	mov	r8, r3
    3b56:	e208      	b.n	3f6a <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3b58:	8c2b      	ldrh	r3, [r5, #32]
    3b5a:	b29b      	uxth	r3, r3
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d100      	bne.n	3b62 <USB_Handler+0x4e>
    3b60:	e13d      	b.n	3dde <USB_Handler+0x2ca>
    3b62:	8c28      	ldrh	r0, [r5, #32]
    3b64:	b280      	uxth	r0, r0
    3b66:	4bb5      	ldr	r3, [pc, #724]	; (3e3c <USB_Handler+0x328>)
    3b68:	4798      	blx	r3
    3b6a:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3b6c:	281f      	cmp	r0, #31
    3b6e:	d900      	bls.n	3b72 <USB_Handler+0x5e>
    3b70:	e135      	b.n	3dde <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3b72:	0003      	movs	r3, r0
    3b74:	3308      	adds	r3, #8
    3b76:	015b      	lsls	r3, r3, #5
    3b78:	18ed      	adds	r5, r5, r3
    3b7a:	79ed      	ldrb	r5, [r5, #7]
    3b7c:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3b7e:	07ab      	lsls	r3, r5, #30
    3b80:	d041      	beq.n	3c06 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3b82:	4aaf      	ldr	r2, [pc, #700]	; (3e40 <USB_Handler+0x32c>)
    3b84:	2301      	movs	r3, #1
    3b86:	4083      	lsls	r3, r0
    3b88:	6811      	ldr	r1, [r2, #0]
    3b8a:	4399      	bics	r1, r3
    3b8c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b8e:	0003      	movs	r3, r0
    3b90:	3308      	adds	r3, #8
    3b92:	015b      	lsls	r3, r3, #5
    3b94:	683a      	ldr	r2, [r7, #0]
    3b96:	4694      	mov	ip, r2
    3b98:	4463      	add	r3, ip
    3b9a:	2203      	movs	r2, #3
    3b9c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3b9e:	183b      	adds	r3, r7, r0
    3ba0:	33ae      	adds	r3, #174	; 0xae
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	07db      	lsls	r3, r3, #31
    3ba6:	d52e      	bpl.n	3c06 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3ba8:	4ba6      	ldr	r3, [pc, #664]	; (3e44 <USB_Handler+0x330>)
    3baa:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3bac:	683a      	ldr	r2, [r7, #0]
    3bae:	0003      	movs	r3, r0
    3bb0:	3308      	adds	r3, #8
    3bb2:	015b      	lsls	r3, r3, #5
    3bb4:	5c9b      	ldrb	r3, [r3, r2]
    3bb6:	079b      	lsls	r3, r3, #30
    3bb8:	0f9b      	lsrs	r3, r3, #30
    3bba:	2b01      	cmp	r3, #1
    3bbc:	d100      	bne.n	3bc0 <USB_Handler+0xac>
    3bbe:	e094      	b.n	3cea <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3bc0:	0142      	lsls	r2, r0, #5
    3bc2:	4ba1      	ldr	r3, [pc, #644]	; (3e48 <USB_Handler+0x334>)
    3bc4:	189b      	adds	r3, r3, r2
    3bc6:	685a      	ldr	r2, [r3, #4]
    3bc8:	0112      	lsls	r2, r2, #4
    3bca:	0c92      	lsrs	r2, r2, #18
    3bcc:	b290      	uxth	r0, r2
    3bce:	499d      	ldr	r1, [pc, #628]	; (3e44 <USB_Handler+0x330>)
    3bd0:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3bd2:	685a      	ldr	r2, [r3, #4]
    3bd4:	0492      	lsls	r2, r2, #18
    3bd6:	0c92      	lsrs	r2, r2, #18
    3bd8:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3bda:	685a      	ldr	r2, [r3, #4]
    3bdc:	499b      	ldr	r1, [pc, #620]	; (3e4c <USB_Handler+0x338>)
    3bde:	400a      	ands	r2, r1
    3be0:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3be2:	2800      	cmp	r0, #0
    3be4:	d107      	bne.n	3bf6 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3be6:	0162      	lsls	r2, r4, #5
    3be8:	4b97      	ldr	r3, [pc, #604]	; (3e48 <USB_Handler+0x334>)
    3bea:	189b      	adds	r3, r3, r2
    3bec:	685b      	ldr	r3, [r3, #4]
    3bee:	049b      	lsls	r3, r3, #18
    3bf0:	0c9b      	lsrs	r3, r3, #18
    3bf2:	4a94      	ldr	r2, [pc, #592]	; (3e44 <USB_Handler+0x330>)
    3bf4:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3bf6:	4b8f      	ldr	r3, [pc, #572]	; (3e34 <USB_Handler+0x320>)
    3bf8:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3bfa:	1ca3      	adds	r3, r4, #2
    3bfc:	011b      	lsls	r3, r3, #4
    3bfe:	18c3      	adds	r3, r0, r3
    3c00:	685b      	ldr	r3, [r3, #4]
    3c02:	4990      	ldr	r1, [pc, #576]	; (3e44 <USB_Handler+0x330>)
    3c04:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3c06:	076b      	lsls	r3, r5, #29
    3c08:	d51f      	bpl.n	3c4a <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3c0a:	4b8a      	ldr	r3, [pc, #552]	; (3e34 <USB_Handler+0x320>)
    3c0c:	6818      	ldr	r0, [r3, #0]
    3c0e:	6802      	ldr	r2, [r0, #0]
    3c10:	0023      	movs	r3, r4
    3c12:	3308      	adds	r3, #8
    3c14:	015b      	lsls	r3, r3, #5
    3c16:	5c9b      	ldrb	r3, [r3, r2]
    3c18:	069b      	lsls	r3, r3, #26
    3c1a:	0f5b      	lsrs	r3, r3, #29
    3c1c:	2b02      	cmp	r3, #2
    3c1e:	d075      	beq.n	3d0c <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3c20:	0023      	movs	r3, r4
    3c22:	3308      	adds	r3, #8
    3c24:	015b      	lsls	r3, r3, #5
    3c26:	5c9b      	ldrb	r3, [r3, r2]
    3c28:	069b      	lsls	r3, r3, #26
    3c2a:	0f5b      	lsrs	r3, r3, #29
    3c2c:	2b03      	cmp	r3, #3
    3c2e:	d100      	bne.n	3c32 <USB_Handler+0x11e>
    3c30:	e09e      	b.n	3d70 <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3c32:	0162      	lsls	r2, r4, #5
    3c34:	4b84      	ldr	r3, [pc, #528]	; (3e48 <USB_Handler+0x334>)
    3c36:	189b      	adds	r3, r3, r2
    3c38:	2200      	movs	r2, #0
    3c3a:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3c3c:	6803      	ldr	r3, [r0, #0]
    3c3e:	0022      	movs	r2, r4
    3c40:	3208      	adds	r2, #8
    3c42:	0152      	lsls	r2, r2, #5
    3c44:	189b      	adds	r3, r3, r2
    3c46:	2204      	movs	r2, #4
    3c48:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3c4a:	072b      	lsls	r3, r5, #28
    3c4c:	d515      	bpl.n	3c7a <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3c4e:	4a7c      	ldr	r2, [pc, #496]	; (3e40 <USB_Handler+0x32c>)
    3c50:	2301      	movs	r3, #1
    3c52:	40a3      	lsls	r3, r4
    3c54:	6811      	ldr	r1, [r2, #0]
    3c56:	4399      	bics	r1, r3
    3c58:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3c5a:	4b76      	ldr	r3, [pc, #472]	; (3e34 <USB_Handler+0x320>)
    3c5c:	6818      	ldr	r0, [r3, #0]
    3c5e:	0023      	movs	r3, r4
    3c60:	3308      	adds	r3, #8
    3c62:	015b      	lsls	r3, r3, #5
    3c64:	6802      	ldr	r2, [r0, #0]
    3c66:	4694      	mov	ip, r2
    3c68:	4463      	add	r3, ip
    3c6a:	2208      	movs	r2, #8
    3c6c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3c6e:	1903      	adds	r3, r0, r4
    3c70:	33ae      	adds	r3, #174	; 0xae
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	079b      	lsls	r3, r3, #30
    3c76:	d500      	bpl.n	3c7a <USB_Handler+0x166>
    3c78:	e094      	b.n	3da4 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3c7a:	06eb      	lsls	r3, r5, #27
    3c7c:	d515      	bpl.n	3caa <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3c7e:	4a70      	ldr	r2, [pc, #448]	; (3e40 <USB_Handler+0x32c>)
    3c80:	2301      	movs	r3, #1
    3c82:	40a3      	lsls	r3, r4
    3c84:	6811      	ldr	r1, [r2, #0]
    3c86:	4399      	bics	r1, r3
    3c88:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3c8a:	4b6a      	ldr	r3, [pc, #424]	; (3e34 <USB_Handler+0x320>)
    3c8c:	6818      	ldr	r0, [r3, #0]
    3c8e:	0023      	movs	r3, r4
    3c90:	3308      	adds	r3, #8
    3c92:	015b      	lsls	r3, r3, #5
    3c94:	6802      	ldr	r2, [r0, #0]
    3c96:	4694      	mov	ip, r2
    3c98:	4463      	add	r3, ip
    3c9a:	2210      	movs	r2, #16
    3c9c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3c9e:	1903      	adds	r3, r0, r4
    3ca0:	33ae      	adds	r3, #174	; 0xae
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	075b      	lsls	r3, r3, #29
    3ca6:	d500      	bpl.n	3caa <USB_Handler+0x196>
    3ca8:	e08a      	b.n	3dc0 <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3caa:	06ab      	lsls	r3, r5, #26
    3cac:	d400      	bmi.n	3cb0 <USB_Handler+0x19c>
    3cae:	e12f      	b.n	3f10 <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3cb0:	4a63      	ldr	r2, [pc, #396]	; (3e40 <USB_Handler+0x32c>)
    3cb2:	2301      	movs	r3, #1
    3cb4:	40a3      	lsls	r3, r4
    3cb6:	6811      	ldr	r1, [r2, #0]
    3cb8:	4399      	bics	r1, r3
    3cba:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3cbc:	4b5d      	ldr	r3, [pc, #372]	; (3e34 <USB_Handler+0x320>)
    3cbe:	6818      	ldr	r0, [r3, #0]
    3cc0:	0023      	movs	r3, r4
    3cc2:	3308      	adds	r3, #8
    3cc4:	015b      	lsls	r3, r3, #5
    3cc6:	6802      	ldr	r2, [r0, #0]
    3cc8:	4694      	mov	ip, r2
    3cca:	4463      	add	r3, ip
    3ccc:	2220      	movs	r2, #32
    3cce:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3cd0:	1903      	adds	r3, r0, r4
    3cd2:	33ae      	adds	r3, #174	; 0xae
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	071b      	lsls	r3, r3, #28
    3cd8:	d400      	bmi.n	3cdc <USB_Handler+0x1c8>
    3cda:	e119      	b.n	3f10 <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3cdc:	4959      	ldr	r1, [pc, #356]	; (3e44 <USB_Handler+0x330>)
    3cde:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3ce0:	0124      	lsls	r4, r4, #4
    3ce2:	1904      	adds	r4, r0, r4
    3ce4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3ce6:	4798      	blx	r3
    3ce8:	e112      	b.n	3f10 <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3cea:	0142      	lsls	r2, r0, #5
    3cec:	4b56      	ldr	r3, [pc, #344]	; (3e48 <USB_Handler+0x334>)
    3cee:	189b      	adds	r3, r3, r2
    3cf0:	685a      	ldr	r2, [r3, #4]
    3cf2:	0492      	lsls	r2, r2, #18
    3cf4:	0c92      	lsrs	r2, r2, #18
    3cf6:	4953      	ldr	r1, [pc, #332]	; (3e44 <USB_Handler+0x330>)
    3cf8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3cfa:	685a      	ldr	r2, [r3, #4]
    3cfc:	0112      	lsls	r2, r2, #4
    3cfe:	0c92      	lsrs	r2, r2, #18
    3d00:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3d02:	685a      	ldr	r2, [r3, #4]
    3d04:	0b92      	lsrs	r2, r2, #14
    3d06:	0392      	lsls	r2, r2, #14
    3d08:	605a      	str	r2, [r3, #4]
    3d0a:	e774      	b.n	3bf6 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3d0c:	0023      	movs	r3, r4
    3d0e:	3308      	adds	r3, #8
    3d10:	015b      	lsls	r3, r3, #5
    3d12:	5c9b      	ldrb	r3, [r3, r2]
    3d14:	079b      	lsls	r3, r3, #30
    3d16:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3d18:	2b01      	cmp	r3, #1
    3d1a:	d181      	bne.n	3c20 <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3d1c:	0161      	lsls	r1, r4, #5
    3d1e:	4b4a      	ldr	r3, [pc, #296]	; (3e48 <USB_Handler+0x334>)
    3d20:	185b      	adds	r3, r3, r1
    3d22:	3308      	adds	r3, #8
    3d24:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3d26:	07db      	lsls	r3, r3, #31
    3d28:	d400      	bmi.n	3d2c <USB_Handler+0x218>
    3d2a:	e779      	b.n	3c20 <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3d2c:	4a44      	ldr	r2, [pc, #272]	; (3e40 <USB_Handler+0x32c>)
    3d2e:	2301      	movs	r3, #1
    3d30:	40a3      	lsls	r3, r4
    3d32:	6811      	ldr	r1, [r2, #0]
    3d34:	4399      	bics	r1, r3
    3d36:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3d38:	0162      	lsls	r2, r4, #5
    3d3a:	4b43      	ldr	r3, [pc, #268]	; (3e48 <USB_Handler+0x334>)
    3d3c:	189b      	adds	r3, r3, r2
    3d3e:	2200      	movs	r2, #0
    3d40:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3d42:	0023      	movs	r3, r4
    3d44:	3308      	adds	r3, #8
    3d46:	015b      	lsls	r3, r3, #5
    3d48:	6802      	ldr	r2, [r0, #0]
    3d4a:	4694      	mov	ip, r2
    3d4c:	4463      	add	r3, ip
    3d4e:	2204      	movs	r2, #4
    3d50:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3d52:	1903      	adds	r3, r0, r4
    3d54:	33ae      	adds	r3, #174	; 0xae
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	079b      	lsls	r3, r3, #30
    3d5a:	d400      	bmi.n	3d5e <USB_Handler+0x24a>
    3d5c:	e775      	b.n	3c4a <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    3d5e:	4939      	ldr	r1, [pc, #228]	; (3e44 <USB_Handler+0x330>)
    3d60:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    3d62:	2310      	movs	r3, #16
    3d64:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3d66:	0123      	lsls	r3, r4, #4
    3d68:	18c3      	adds	r3, r0, r3
    3d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d6c:	4798      	blx	r3
    3d6e:	e76c      	b.n	3c4a <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    3d70:	0023      	movs	r3, r4
    3d72:	3308      	adds	r3, #8
    3d74:	015b      	lsls	r3, r3, #5
    3d76:	5c9b      	ldrb	r3, [r3, r2]
    3d78:	079b      	lsls	r3, r3, #30
    3d7a:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3d7c:	2b01      	cmp	r3, #1
    3d7e:	d000      	beq.n	3d82 <USB_Handler+0x26e>
    3d80:	e757      	b.n	3c32 <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3d82:	0162      	lsls	r2, r4, #5
    3d84:	4b30      	ldr	r3, [pc, #192]	; (3e48 <USB_Handler+0x334>)
    3d86:	189b      	adds	r3, r3, r2
    3d88:	2200      	movs	r2, #0
    3d8a:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3d8c:	0023      	movs	r3, r4
    3d8e:	3308      	adds	r3, #8
    3d90:	015b      	lsls	r3, r3, #5
    3d92:	6802      	ldr	r2, [r0, #0]
    3d94:	18d2      	adds	r2, r2, r3
    3d96:	2104      	movs	r1, #4
    3d98:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    3d9a:	6802      	ldr	r2, [r0, #0]
    3d9c:	18d3      	adds	r3, r2, r3
    3d9e:	2210      	movs	r2, #16
    3da0:	715a      	strb	r2, [r3, #5]
    3da2:	e752      	b.n	3c4a <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    3da4:	4927      	ldr	r1, [pc, #156]	; (3e44 <USB_Handler+0x330>)
    3da6:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3da8:	0162      	lsls	r2, r4, #5
    3daa:	4b27      	ldr	r3, [pc, #156]	; (3e48 <USB_Handler+0x334>)
    3dac:	189b      	adds	r3, r3, r2
    3dae:	89db      	ldrh	r3, [r3, #14]
    3db0:	221f      	movs	r2, #31
    3db2:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3db4:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3db6:	0123      	lsls	r3, r4, #4
    3db8:	18c3      	adds	r3, r0, r3
    3dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3dbc:	4798      	blx	r3
    3dbe:	e75c      	b.n	3c7a <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    3dc0:	4920      	ldr	r1, [pc, #128]	; (3e44 <USB_Handler+0x330>)
    3dc2:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3dc4:	0162      	lsls	r2, r4, #5
    3dc6:	4b20      	ldr	r3, [pc, #128]	; (3e48 <USB_Handler+0x334>)
    3dc8:	189b      	adds	r3, r3, r2
    3dca:	685b      	ldr	r3, [r3, #4]
    3dcc:	011b      	lsls	r3, r3, #4
    3dce:	0c9b      	lsrs	r3, r3, #18
    3dd0:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3dd2:	0123      	lsls	r3, r4, #4
    3dd4:	18c3      	adds	r3, r0, r3
    3dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3dd8:	2100      	movs	r1, #0
    3dda:	4798      	blx	r3
    3ddc:	e765      	b.n	3caa <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3dde:	8bac      	ldrh	r4, [r5, #28]
    3de0:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3de2:	0763      	lsls	r3, r4, #29
    3de4:	d538      	bpl.n	3e58 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3de6:	2304      	movs	r3, #4
    3de8:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3dea:	4b15      	ldr	r3, [pc, #84]	; (3e40 <USB_Handler+0x32c>)
    3dec:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3dee:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3df0:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3df2:	2610      	movs	r6, #16
    3df4:	e002      	b.n	3dfc <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3df6:	3301      	adds	r3, #1
    3df8:	2b08      	cmp	r3, #8
    3dfa:	d029      	beq.n	3e50 <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3dfc:	0002      	movs	r2, r0
    3dfe:	409a      	lsls	r2, r3
    3e00:	4215      	tst	r5, r2
    3e02:	d0f8      	beq.n	3df6 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3e04:	6839      	ldr	r1, [r7, #0]
    3e06:	001a      	movs	r2, r3
    3e08:	3208      	adds	r2, #8
    3e0a:	0152      	lsls	r2, r2, #5
    3e0c:	5c52      	ldrb	r2, [r2, r1]
    3e0e:	0692      	lsls	r2, r2, #26
    3e10:	0f52      	lsrs	r2, r2, #29
    3e12:	2a03      	cmp	r2, #3
    3e14:	d1ef      	bne.n	3df6 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3e16:	001a      	movs	r2, r3
    3e18:	3208      	adds	r2, #8
    3e1a:	0152      	lsls	r2, r2, #5
    3e1c:	5c52      	ldrb	r2, [r2, r1]
    3e1e:	0792      	lsls	r2, r2, #30
    3e20:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3e22:	2a01      	cmp	r2, #1
    3e24:	d1e7      	bne.n	3df6 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3e26:	001a      	movs	r2, r3
    3e28:	3208      	adds	r2, #8
    3e2a:	0152      	lsls	r2, r2, #5
    3e2c:	1889      	adds	r1, r1, r2
    3e2e:	710e      	strb	r6, [r1, #4]
    3e30:	e7e1      	b.n	3df6 <USB_Handler+0x2e2>
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	20000288 	.word	0x20000288
    3e38:	00006160 	.word	0x00006160
    3e3c:	00005d51 	.word	0x00005d51
    3e40:	20000298 	.word	0x20000298
    3e44:	2000029c 	.word	0x2000029c
    3e48:	20000764 	.word	0x20000764
    3e4c:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3e50:	339d      	adds	r3, #157	; 0x9d
    3e52:	5cfb      	ldrb	r3, [r7, r3]
    3e54:	07db      	lsls	r3, r3, #31
    3e56:	d462      	bmi.n	3f1e <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    3e58:	0723      	lsls	r3, r4, #28
    3e5a:	d50b      	bpl.n	3e74 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    3e5c:	2200      	movs	r2, #0
    3e5e:	4baf      	ldr	r3, [pc, #700]	; (411c <USB_Handler+0x608>)
    3e60:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3e62:	4baf      	ldr	r3, [pc, #700]	; (4120 <USB_Handler+0x60c>)
    3e64:	6818      	ldr	r0, [r3, #0]
    3e66:	2308      	movs	r3, #8
    3e68:	6802      	ldr	r2, [r0, #0]
    3e6a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3e6c:	339d      	adds	r3, #157	; 0x9d
    3e6e:	5cc3      	ldrb	r3, [r0, r3]
    3e70:	079b      	lsls	r3, r3, #30
    3e72:	d458      	bmi.n	3f26 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3e74:	0663      	lsls	r3, r4, #25
    3e76:	d508      	bpl.n	3e8a <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3e78:	4ba9      	ldr	r3, [pc, #676]	; (4120 <USB_Handler+0x60c>)
    3e7a:	6818      	ldr	r0, [r3, #0]
    3e7c:	2340      	movs	r3, #64	; 0x40
    3e7e:	6802      	ldr	r2, [r0, #0]
    3e80:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3e82:	3365      	adds	r3, #101	; 0x65
    3e84:	5cc3      	ldrb	r3, [r0, r3]
    3e86:	06db      	lsls	r3, r3, #27
    3e88:	d450      	bmi.n	3f2c <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3e8a:	06a3      	lsls	r3, r4, #26
    3e8c:	d508      	bpl.n	3ea0 <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3e8e:	4ba4      	ldr	r3, [pc, #656]	; (4120 <USB_Handler+0x60c>)
    3e90:	6818      	ldr	r0, [r3, #0]
    3e92:	2320      	movs	r3, #32
    3e94:	6802      	ldr	r2, [r0, #0]
    3e96:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3e98:	3385      	adds	r3, #133	; 0x85
    3e9a:	5cc3      	ldrb	r3, [r0, r3]
    3e9c:	071b      	lsls	r3, r3, #28
    3e9e:	d448      	bmi.n	3f32 <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3ea0:	06e3      	lsls	r3, r4, #27
    3ea2:	d508      	bpl.n	3eb6 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3ea4:	4b9e      	ldr	r3, [pc, #632]	; (4120 <USB_Handler+0x60c>)
    3ea6:	6818      	ldr	r0, [r3, #0]
    3ea8:	2310      	movs	r3, #16
    3eaa:	6802      	ldr	r2, [r0, #0]
    3eac:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3eae:	3395      	adds	r3, #149	; 0x95
    3eb0:	5cc3      	ldrb	r3, [r0, r3]
    3eb2:	075b      	lsls	r3, r3, #29
    3eb4:	d440      	bmi.n	3f38 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3eb6:	0623      	lsls	r3, r4, #24
    3eb8:	d50b      	bpl.n	3ed2 <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    3eba:	2200      	movs	r2, #0
    3ebc:	4b97      	ldr	r3, [pc, #604]	; (411c <USB_Handler+0x608>)
    3ebe:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3ec0:	4b97      	ldr	r3, [pc, #604]	; (4120 <USB_Handler+0x60c>)
    3ec2:	6818      	ldr	r0, [r3, #0]
    3ec4:	2380      	movs	r3, #128	; 0x80
    3ec6:	6802      	ldr	r2, [r0, #0]
    3ec8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3eca:	3325      	adds	r3, #37	; 0x25
    3ecc:	5cc3      	ldrb	r3, [r0, r3]
    3ece:	069b      	lsls	r3, r3, #26
    3ed0:	d435      	bmi.n	3f3e <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3ed2:	05e3      	lsls	r3, r4, #23
    3ed4:	d50c      	bpl.n	3ef0 <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3ed6:	2200      	movs	r2, #0
    3ed8:	4b90      	ldr	r3, [pc, #576]	; (411c <USB_Handler+0x608>)
    3eda:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3edc:	4b90      	ldr	r3, [pc, #576]	; (4120 <USB_Handler+0x60c>)
    3ede:	6818      	ldr	r0, [r3, #0]
    3ee0:	2380      	movs	r3, #128	; 0x80
    3ee2:	005b      	lsls	r3, r3, #1
    3ee4:	6802      	ldr	r2, [r0, #0]
    3ee6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3ee8:	3b5b      	subs	r3, #91	; 0x5b
    3eea:	5cc3      	ldrb	r3, [r0, r3]
    3eec:	065b      	lsls	r3, r3, #25
    3eee:	d429      	bmi.n	3f44 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3ef0:	05a3      	lsls	r3, r4, #22
    3ef2:	d50d      	bpl.n	3f10 <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3ef4:	2200      	movs	r2, #0
    3ef6:	4b89      	ldr	r3, [pc, #548]	; (411c <USB_Handler+0x608>)
    3ef8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3efa:	4b89      	ldr	r3, [pc, #548]	; (4120 <USB_Handler+0x60c>)
    3efc:	6818      	ldr	r0, [r3, #0]
    3efe:	2380      	movs	r3, #128	; 0x80
    3f00:	009b      	lsls	r3, r3, #2
    3f02:	6802      	ldr	r2, [r0, #0]
    3f04:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3f06:	3b5c      	subs	r3, #92	; 0x5c
    3f08:	3bff      	subs	r3, #255	; 0xff
    3f0a:	5cc3      	ldrb	r3, [r0, r3]
    3f0c:	2b7f      	cmp	r3, #127	; 0x7f
    3f0e:	d81c      	bhi.n	3f4a <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3f10:	b003      	add	sp, #12
    3f12:	bc3c      	pop	{r2, r3, r4, r5}
    3f14:	4690      	mov	r8, r2
    3f16:	4699      	mov	r9, r3
    3f18:	46a2      	mov	sl, r4
    3f1a:	46ab      	mov	fp, r5
    3f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	0038      	movs	r0, r7
    3f22:	4798      	blx	r3
    3f24:	e798      	b.n	3e58 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3f26:	6883      	ldr	r3, [r0, #8]
    3f28:	4798      	blx	r3
    3f2a:	e7a3      	b.n	3e74 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3f2c:	6943      	ldr	r3, [r0, #20]
    3f2e:	4798      	blx	r3
    3f30:	e7ab      	b.n	3e8a <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3f32:	6903      	ldr	r3, [r0, #16]
    3f34:	4798      	blx	r3
    3f36:	e7b3      	b.n	3ea0 <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3f38:	68c3      	ldr	r3, [r0, #12]
    3f3a:	4798      	blx	r3
    3f3c:	e7bb      	b.n	3eb6 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3f3e:	6983      	ldr	r3, [r0, #24]
    3f40:	4798      	blx	r3
    3f42:	e7c6      	b.n	3ed2 <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3f44:	69c3      	ldr	r3, [r0, #28]
    3f46:	4798      	blx	r3
    3f48:	e7d2      	b.n	3ef0 <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3f4a:	6a03      	ldr	r3, [r0, #32]
    3f4c:	4798      	blx	r3
    3f4e:	e7df      	b.n	3f10 <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3f50:	0023      	movs	r3, r4
    3f52:	332e      	adds	r3, #46	; 0x2e
    3f54:	009b      	lsls	r3, r3, #2
    3f56:	4642      	mov	r2, r8
    3f58:	6812      	ldr	r2, [r2, #0]
    3f5a:	589b      	ldr	r3, [r3, r2]
    3f5c:	4971      	ldr	r1, [pc, #452]	; (4124 <USB_Handler+0x610>)
    3f5e:	4642      	mov	r2, r8
    3f60:	6810      	ldr	r0, [r2, #0]
    3f62:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3f64:	3401      	adds	r4, #1
    3f66:	2c07      	cmp	r4, #7
    3f68:	d0d2      	beq.n	3f10 <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    3f6a:	0063      	lsls	r3, r4, #1
    3f6c:	5bdb      	ldrh	r3, [r3, r7]
    3f6e:	4233      	tst	r3, r6
    3f70:	d003      	beq.n	3f7a <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3f72:	464a      	mov	r2, r9
    3f74:	6812      	ldr	r2, [r2, #0]
    3f76:	6812      	ldr	r2, [r2, #0]
    3f78:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3f7a:	422b      	tst	r3, r5
    3f7c:	d0f2      	beq.n	3f64 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3f7e:	2c06      	cmp	r4, #6
    3f80:	d1e6      	bne.n	3f50 <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3f82:	4b69      	ldr	r3, [pc, #420]	; (4128 <USB_Handler+0x614>)
    3f84:	891b      	ldrh	r3, [r3, #8]
    3f86:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3f88:	2280      	movs	r2, #128	; 0x80
    3f8a:	0052      	lsls	r2, r2, #1
    3f8c:	4013      	ands	r3, r2
    3f8e:	4a65      	ldr	r2, [pc, #404]	; (4124 <USB_Handler+0x610>)
    3f90:	6013      	str	r3, [r2, #0]
    3f92:	e7dd      	b.n	3f50 <USB_Handler+0x43c>
    3f94:	003c      	movs	r4, r7
    3f96:	3459      	adds	r4, #89	; 0x59
    3f98:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    3f9a:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    3f9c:	2201      	movs	r2, #1
    3f9e:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3fa0:	325f      	adds	r2, #95	; 0x5f
    3fa2:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3fa4:	3a50      	subs	r2, #80	; 0x50
    3fa6:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3fa8:	3a0d      	subs	r2, #13
    3faa:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3fac:	46b8      	mov	r8, r7
    3fae:	002f      	movs	r7, r5
    3fb0:	e0c3      	b.n	413a <USB_Handler+0x626>
    3fb2:	002a      	movs	r2, r5
    3fb4:	003d      	movs	r5, r7
    3fb6:	4647      	mov	r7, r8
    3fb8:	4690      	mov	r8, r2
    3fba:	015b      	lsls	r3, r3, #5
    3fbc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3fbe:	2308      	movs	r3, #8
    3fc0:	33ff      	adds	r3, #255	; 0xff
    3fc2:	5ceb      	ldrb	r3, [r5, r3]
    3fc4:	065b      	lsls	r3, r3, #25
    3fc6:	d515      	bpl.n	3ff4 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3fc8:	2240      	movs	r2, #64	; 0x40
    3fca:	2308      	movs	r3, #8
    3fcc:	33ff      	adds	r3, #255	; 0xff
    3fce:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3fd0:	3b88      	subs	r3, #136	; 0x88
    3fd2:	3bff      	subs	r3, #255	; 0xff
    3fd4:	4642      	mov	r2, r8
    3fd6:	4313      	orrs	r3, r2
    3fd8:	4a54      	ldr	r2, [pc, #336]	; (412c <USB_Handler+0x618>)
    3fda:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3fdc:	2360      	movs	r3, #96	; 0x60
    3fde:	420b      	tst	r3, r1
    3fe0:	d096      	beq.n	3f10 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3fe2:	9b01      	ldr	r3, [sp, #4]
    3fe4:	011b      	lsls	r3, r3, #4
    3fe6:	18fb      	adds	r3, r7, r3
    3fe8:	33e0      	adds	r3, #224	; 0xe0
    3fea:	681b      	ldr	r3, [r3, #0]
    3fec:	494f      	ldr	r1, [pc, #316]	; (412c <USB_Handler+0x618>)
    3fee:	0038      	movs	r0, r7
    3ff0:	4798      	blx	r3
    3ff2:	e78d      	b.n	3f10 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3ff4:	2308      	movs	r3, #8
    3ff6:	33ff      	adds	r3, #255	; 0xff
    3ff8:	5ceb      	ldrb	r3, [r5, r3]
    3ffa:	069b      	lsls	r3, r3, #26
    3ffc:	d5ee      	bpl.n	3fdc <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3ffe:	2220      	movs	r2, #32
    4000:	2308      	movs	r3, #8
    4002:	33ff      	adds	r3, #255	; 0xff
    4004:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4006:	4b49      	ldr	r3, [pc, #292]	; (412c <USB_Handler+0x618>)
    4008:	4642      	mov	r2, r8
    400a:	719a      	strb	r2, [r3, #6]
    400c:	e7e6      	b.n	3fdc <USB_Handler+0x4c8>
    400e:	003d      	movs	r5, r7
    4010:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4012:	9a01      	ldr	r2, [sp, #4]
    4014:	0013      	movs	r3, r2
    4016:	3308      	adds	r3, #8
    4018:	015b      	lsls	r3, r3, #5
    401a:	18ed      	adds	r5, r5, r3
    401c:	2310      	movs	r3, #16
    401e:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4020:	18bb      	adds	r3, r7, r2
    4022:	3361      	adds	r3, #97	; 0x61
    4024:	33ff      	adds	r3, #255	; 0xff
    4026:	781b      	ldrb	r3, [r3, #0]
    4028:	06db      	lsls	r3, r3, #27
    402a:	d400      	bmi.n	402e <USB_Handler+0x51a>
    402c:	e770      	b.n	3f10 <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    402e:	0010      	movs	r0, r2
    4030:	0152      	lsls	r2, r2, #5
    4032:	4b3d      	ldr	r3, [pc, #244]	; (4128 <USB_Handler+0x614>)
    4034:	189b      	adds	r3, r3, r2
    4036:	685b      	ldr	r3, [r3, #4]
    4038:	049b      	lsls	r3, r3, #18
    403a:	0c9b      	lsrs	r3, r3, #18
    403c:	493b      	ldr	r1, [pc, #236]	; (412c <USB_Handler+0x618>)
    403e:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4040:	0103      	lsls	r3, r0, #4
    4042:	18fb      	adds	r3, r7, r3
    4044:	33dc      	adds	r3, #220	; 0xdc
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	4640      	mov	r0, r8
    404a:	4798      	blx	r3
    404c:	e760      	b.n	3f10 <USB_Handler+0x3fc>
    404e:	002a      	movs	r2, r5
    4050:	003d      	movs	r5, r7
    4052:	4647      	mov	r7, r8
    4054:	4690      	mov	r8, r2
    4056:	015b      	lsls	r3, r3, #5
    4058:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    405a:	2308      	movs	r3, #8
    405c:	33ff      	adds	r3, #255	; 0xff
    405e:	5ceb      	ldrb	r3, [r5, r3]
    4060:	079b      	lsls	r3, r3, #30
    4062:	d51e      	bpl.n	40a2 <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4064:	2202      	movs	r2, #2
    4066:	2308      	movs	r3, #8
    4068:	33ff      	adds	r3, #255	; 0xff
    406a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    406c:	482f      	ldr	r0, [pc, #188]	; (412c <USB_Handler+0x618>)
    406e:	3b88      	subs	r3, #136	; 0x88
    4070:	3bff      	subs	r3, #255	; 0xff
    4072:	4642      	mov	r2, r8
    4074:	4313      	orrs	r3, r2
    4076:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4078:	9b01      	ldr	r3, [sp, #4]
    407a:	015a      	lsls	r2, r3, #5
    407c:	4b2a      	ldr	r3, [pc, #168]	; (4128 <USB_Handler+0x614>)
    407e:	189b      	adds	r3, r3, r2
    4080:	3310      	adds	r3, #16
    4082:	685b      	ldr	r3, [r3, #4]
    4084:	049b      	lsls	r3, r3, #18
    4086:	0c9b      	lsrs	r3, r3, #18
    4088:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    408a:	078b      	lsls	r3, r1, #30
    408c:	d100      	bne.n	4090 <USB_Handler+0x57c>
    408e:	e73f      	b.n	3f10 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4090:	9b01      	ldr	r3, [sp, #4]
    4092:	330d      	adds	r3, #13
    4094:	011b      	lsls	r3, r3, #4
    4096:	18fb      	adds	r3, r7, r3
    4098:	685b      	ldr	r3, [r3, #4]
    409a:	4924      	ldr	r1, [pc, #144]	; (412c <USB_Handler+0x618>)
    409c:	0038      	movs	r0, r7
    409e:	4798      	blx	r3
    40a0:	e736      	b.n	3f10 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    40a2:	2308      	movs	r3, #8
    40a4:	33ff      	adds	r3, #255	; 0xff
    40a6:	5ceb      	ldrb	r3, [r5, r3]
    40a8:	07db      	lsls	r3, r3, #31
    40aa:	d5ee      	bpl.n	408a <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    40ac:	2201      	movs	r2, #1
    40ae:	2308      	movs	r3, #8
    40b0:	33ff      	adds	r3, #255	; 0xff
    40b2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    40b4:	481d      	ldr	r0, [pc, #116]	; (412c <USB_Handler+0x618>)
    40b6:	4643      	mov	r3, r8
    40b8:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    40ba:	9b01      	ldr	r3, [sp, #4]
    40bc:	015b      	lsls	r3, r3, #5
    40be:	4a1a      	ldr	r2, [pc, #104]	; (4128 <USB_Handler+0x614>)
    40c0:	18d2      	adds	r2, r2, r3
    40c2:	6853      	ldr	r3, [r2, #4]
    40c4:	049b      	lsls	r3, r3, #18
    40c6:	0c9b      	lsrs	r3, r3, #18
    40c8:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    40ca:	6853      	ldr	r3, [r2, #4]
    40cc:	011b      	lsls	r3, r3, #4
    40ce:	0c9b      	lsrs	r3, r3, #18
    40d0:	8083      	strh	r3, [r0, #4]
    40d2:	e7da      	b.n	408a <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    40d4:	2208      	movs	r2, #8
    40d6:	32ff      	adds	r2, #255	; 0xff
    40d8:	5c9a      	ldrb	r2, [r3, r2]
    40da:	0752      	lsls	r2, r2, #29
    40dc:	d579      	bpl.n	41d2 <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    40de:	2004      	movs	r0, #4
    40e0:	2208      	movs	r2, #8
    40e2:	32ff      	adds	r2, #255	; 0xff
    40e4:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    40e6:	9801      	ldr	r0, [sp, #4]
    40e8:	0142      	lsls	r2, r0, #5
    40ea:	4b0f      	ldr	r3, [pc, #60]	; (4128 <USB_Handler+0x614>)
    40ec:	189b      	adds	r3, r3, r2
    40ee:	7a9b      	ldrb	r3, [r3, #10]
    40f0:	079b      	lsls	r3, r3, #30
    40f2:	d505      	bpl.n	4100 <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    40f4:	4b0c      	ldr	r3, [pc, #48]	; (4128 <USB_Handler+0x614>)
    40f6:	189b      	adds	r3, r3, r2
    40f8:	7a9a      	ldrb	r2, [r3, #10]
    40fa:	2002      	movs	r0, #2
    40fc:	4382      	bics	r2, r0
    40fe:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4100:	4b0a      	ldr	r3, [pc, #40]	; (412c <USB_Handler+0x618>)
    4102:	4642      	mov	r2, r8
    4104:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4106:	9b01      	ldr	r3, [sp, #4]
    4108:	3308      	adds	r3, #8
    410a:	015b      	lsls	r3, r3, #5
    410c:	683a      	ldr	r2, [r7, #0]
    410e:	4694      	mov	ip, r2
    4110:	4463      	add	r3, ip
    4112:	79db      	ldrb	r3, [r3, #7]
    4114:	07db      	lsls	r3, r3, #31
    4116:	d55c      	bpl.n	41d2 <USB_Handler+0x6be>
    4118:	e6fa      	b.n	3f10 <USB_Handler+0x3fc>
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	20000298 	.word	0x20000298
    4120:	20000288 	.word	0x20000288
    4124:	2000028c 	.word	0x2000028c
    4128:	20000764 	.word	0x20000764
    412c:	20000290 	.word	0x20000290
    4130:	3301      	adds	r3, #1
    4132:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4134:	2b08      	cmp	r3, #8
    4136:	d100      	bne.n	413a <USB_Handler+0x626>
    4138:	e6ea      	b.n	3f10 <USB_Handler+0x3fc>
    413a:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    413c:	9301      	str	r3, [sp, #4]
    413e:	0032      	movs	r2, r6
    4140:	411a      	asrs	r2, r3
    4142:	4661      	mov	r1, ip
    4144:	4211      	tst	r1, r2
    4146:	d0f3      	beq.n	4130 <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4148:	001a      	movs	r2, r3
    414a:	3208      	adds	r2, #8
    414c:	0152      	lsls	r2, r2, #5
    414e:	18ba      	adds	r2, r7, r2
    4150:	79d2      	ldrb	r2, [r2, #7]
    4152:	b2d2      	uxtb	r2, r2
    4154:	7a21      	ldrb	r1, [r4, #8]
    4156:	4011      	ands	r1, r2
    4158:	7820      	ldrb	r0, [r4, #0]
    415a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    415c:	4648      	mov	r0, r9
    415e:	4210      	tst	r0, r2
    4160:	d000      	beq.n	4164 <USB_Handler+0x650>
    4162:	e726      	b.n	3fb2 <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4164:	4650      	mov	r0, sl
    4166:	4210      	tst	r0, r2
    4168:	d000      	beq.n	416c <USB_Handler+0x658>
    416a:	e750      	b.n	400e <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    416c:	4658      	mov	r0, fp
    416e:	4210      	tst	r0, r2
    4170:	d000      	beq.n	4174 <USB_Handler+0x660>
    4172:	e76c      	b.n	404e <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4174:	200c      	movs	r0, #12
    4176:	4210      	tst	r0, r2
    4178:	d0da      	beq.n	4130 <USB_Handler+0x61c>
    417a:	002a      	movs	r2, r5
    417c:	003d      	movs	r5, r7
    417e:	4647      	mov	r7, r8
    4180:	4690      	mov	r8, r2
    4182:	015b      	lsls	r3, r3, #5
    4184:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4186:	2208      	movs	r2, #8
    4188:	32ff      	adds	r2, #255	; 0xff
    418a:	5c9a      	ldrb	r2, [r3, r2]
    418c:	0712      	lsls	r2, r2, #28
    418e:	d5a1      	bpl.n	40d4 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4190:	3804      	subs	r0, #4
    4192:	2208      	movs	r2, #8
    4194:	32ff      	adds	r2, #255	; 0xff
    4196:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4198:	9801      	ldr	r0, [sp, #4]
    419a:	0142      	lsls	r2, r0, #5
    419c:	4b13      	ldr	r3, [pc, #76]	; (41ec <USB_Handler+0x6d8>)
    419e:	189b      	adds	r3, r3, r2
    41a0:	7e9b      	ldrb	r3, [r3, #26]
    41a2:	079b      	lsls	r3, r3, #30
    41a4:	d505      	bpl.n	41b2 <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    41a6:	4b11      	ldr	r3, [pc, #68]	; (41ec <USB_Handler+0x6d8>)
    41a8:	189b      	adds	r3, r3, r2
    41aa:	7e9a      	ldrb	r2, [r3, #26]
    41ac:	2002      	movs	r0, #2
    41ae:	4382      	bics	r2, r0
    41b0:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    41b2:	2380      	movs	r3, #128	; 0x80
    41b4:	425b      	negs	r3, r3
    41b6:	4642      	mov	r2, r8
    41b8:	4313      	orrs	r3, r2
    41ba:	4a0d      	ldr	r2, [pc, #52]	; (41f0 <USB_Handler+0x6dc>)
    41bc:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    41be:	9b01      	ldr	r3, [sp, #4]
    41c0:	3308      	adds	r3, #8
    41c2:	015b      	lsls	r3, r3, #5
    41c4:	683a      	ldr	r2, [r7, #0]
    41c6:	4694      	mov	ip, r2
    41c8:	4463      	add	r3, ip
    41ca:	79db      	ldrb	r3, [r3, #7]
    41cc:	079b      	lsls	r3, r3, #30
    41ce:	d500      	bpl.n	41d2 <USB_Handler+0x6be>
    41d0:	e69e      	b.n	3f10 <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    41d2:	230c      	movs	r3, #12
    41d4:	420b      	tst	r3, r1
    41d6:	d100      	bne.n	41da <USB_Handler+0x6c6>
    41d8:	e69a      	b.n	3f10 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    41da:	9b01      	ldr	r3, [sp, #4]
    41dc:	011b      	lsls	r3, r3, #4
    41de:	18fb      	adds	r3, r7, r3
    41e0:	33d8      	adds	r3, #216	; 0xd8
    41e2:	681b      	ldr	r3, [r3, #0]
    41e4:	4902      	ldr	r1, [pc, #8]	; (41f0 <USB_Handler+0x6dc>)
    41e6:	0038      	movs	r0, r7
    41e8:	4798      	blx	r3
    41ea:	e691      	b.n	3f10 <USB_Handler+0x3fc>
    41ec:	20000764 	.word	0x20000764
    41f0:	20000290 	.word	0x20000290

000041f4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    41f4:	2200      	movs	r2, #0
    41f6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    41f8:	2301      	movs	r3, #1
    41fa:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    41fc:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    41fe:	70c3      	strb	r3, [r0, #3]
}
    4200:	4770      	bx	lr
	...

00004204 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4204:	b5f0      	push	{r4, r5, r6, r7, lr}
    4206:	46ce      	mov	lr, r9
    4208:	4647      	mov	r7, r8
    420a:	b580      	push	{r7, lr}
    420c:	b083      	sub	sp, #12
    420e:	0004      	movs	r4, r0
    4210:	000d      	movs	r5, r1
    4212:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4214:	2300      	movs	r3, #0
    4216:	4a6e      	ldr	r2, [pc, #440]	; (43d0 <usb_init+0x1cc>)
    4218:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    421a:	4a6e      	ldr	r2, [pc, #440]	; (43d4 <usb_init+0x1d0>)
    421c:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    421e:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    4220:	496d      	ldr	r1, [pc, #436]	; (43d8 <usb_init+0x1d4>)
    4222:	69ca      	ldr	r2, [r1, #28]
    4224:	2020      	movs	r0, #32
    4226:	4302      	orrs	r2, r0
    4228:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    422a:	af01      	add	r7, sp, #4
    422c:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    422e:	2201      	movs	r2, #1
    4230:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    4232:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4234:	3306      	adds	r3, #6
    4236:	4699      	mov	r9, r3
    4238:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    423a:	0039      	movs	r1, r7
    423c:	3808      	subs	r0, #8
    423e:	4b67      	ldr	r3, [pc, #412]	; (43dc <usb_init+0x1d8>)
    4240:	4698      	mov	r8, r3
    4242:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4244:	464b      	mov	r3, r9
    4246:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4248:	0039      	movs	r1, r7
    424a:	2019      	movs	r0, #25
    424c:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    424e:	78b3      	ldrb	r3, [r6, #2]
    4250:	466a      	mov	r2, sp
    4252:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4254:	4669      	mov	r1, sp
    4256:	2006      	movs	r0, #6
    4258:	4b61      	ldr	r3, [pc, #388]	; (43e0 <usb_init+0x1dc>)
    425a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    425c:	2006      	movs	r0, #6
    425e:	4b61      	ldr	r3, [pc, #388]	; (43e4 <usb_init+0x1e0>)
    4260:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4262:	782b      	ldrb	r3, [r5, #0]
    4264:	2201      	movs	r2, #1
    4266:	4313      	orrs	r3, r2
    4268:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    426a:	78ab      	ldrb	r3, [r5, #2]
    426c:	07db      	lsls	r3, r3, #31
    426e:	d4fc      	bmi.n	426a <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4270:	4a5d      	ldr	r2, [pc, #372]	; (43e8 <usb_init+0x1e4>)
    4272:	78d3      	ldrb	r3, [r2, #3]
    4274:	2103      	movs	r1, #3
    4276:	438b      	bics	r3, r1
    4278:	2102      	movs	r1, #2
    427a:	430b      	orrs	r3, r1
    427c:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    427e:	78d3      	ldrb	r3, [r2, #3]
    4280:	210c      	movs	r1, #12
    4282:	438b      	bics	r3, r1
    4284:	2108      	movs	r1, #8
    4286:	430b      	orrs	r3, r1
    4288:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    428a:	4b58      	ldr	r3, [pc, #352]	; (43ec <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    428c:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    428e:	039b      	lsls	r3, r3, #14
    4290:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4292:	2b1f      	cmp	r3, #31
    4294:	d100      	bne.n	4298 <usb_init+0x94>
    4296:	e08f      	b.n	43b8 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4298:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    429a:	019b      	lsls	r3, r3, #6
    429c:	4954      	ldr	r1, [pc, #336]	; (43f0 <usb_init+0x1ec>)
    429e:	400a      	ands	r2, r1
    42a0:	4313      	orrs	r3, r2
    42a2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    42a4:	4b51      	ldr	r3, [pc, #324]	; (43ec <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    42aa:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    42ac:	2b1f      	cmp	r3, #31
    42ae:	d100      	bne.n	42b2 <usb_init+0xae>
    42b0:	e084      	b.n	43bc <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    42b2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    42b4:	211f      	movs	r1, #31
    42b6:	438a      	bics	r2, r1
    42b8:	4313      	orrs	r3, r2
    42ba:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    42bc:	4b4b      	ldr	r3, [pc, #300]	; (43ec <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    42be:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    42c0:	019b      	lsls	r3, r3, #6
    42c2:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    42c4:	2b07      	cmp	r3, #7
    42c6:	d100      	bne.n	42ca <usb_init+0xc6>
    42c8:	e07a      	b.n	43c0 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    42ca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    42cc:	031b      	lsls	r3, r3, #12
    42ce:	4949      	ldr	r1, [pc, #292]	; (43f4 <usb_init+0x1f0>)
    42d0:	400a      	ands	r2, r1
    42d2:	4313      	orrs	r3, r2
    42d4:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    42d6:	7832      	ldrb	r2, [r6, #0]
    42d8:	7829      	ldrb	r1, [r5, #0]
    42da:	01d2      	lsls	r2, r2, #7
    42dc:	237f      	movs	r3, #127	; 0x7f
    42de:	400b      	ands	r3, r1
    42e0:	4313      	orrs	r3, r2
    42e2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    42e4:	7871      	ldrb	r1, [r6, #1]
    42e6:	782b      	ldrb	r3, [r5, #0]
    42e8:	2201      	movs	r2, #1
    42ea:	400a      	ands	r2, r1
    42ec:	0092      	lsls	r2, r2, #2
    42ee:	2104      	movs	r1, #4
    42f0:	438b      	bics	r3, r1
    42f2:	4313      	orrs	r3, r2
    42f4:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    42f6:	4b40      	ldr	r3, [pc, #256]	; (43f8 <usb_init+0x1f4>)
    42f8:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    42fa:	78f3      	ldrb	r3, [r6, #3]
    42fc:	2b01      	cmp	r3, #1
    42fe:	d061      	beq.n	43c4 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4300:	2b00      	cmp	r3, #0
    4302:	d106      	bne.n	4312 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4304:	6822      	ldr	r2, [r4, #0]
    4306:	8913      	ldrh	r3, [r2, #8]
    4308:	210c      	movs	r1, #12
    430a:	438b      	bics	r3, r1
    430c:	2104      	movs	r1, #4
    430e:	430b      	orrs	r3, r1
    4310:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	0052      	lsls	r2, r2, #1
    4316:	2100      	movs	r1, #0
    4318:	4837      	ldr	r0, [pc, #220]	; (43f8 <usb_init+0x1f4>)
    431a:	4b38      	ldr	r3, [pc, #224]	; (43fc <usb_init+0x1f8>)
    431c:	4798      	blx	r3
    431e:	1d23      	adds	r3, r4, #4
    4320:	0021      	movs	r1, r4
    4322:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4324:	2200      	movs	r2, #0
    4326:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4328:	428b      	cmp	r3, r1
    432a:	d1fc      	bne.n	4326 <usb_init+0x122>
    432c:	0021      	movs	r1, r4
    432e:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4330:	2200      	movs	r2, #0
    4332:	601a      	str	r2, [r3, #0]
    4334:	605a      	str	r2, [r3, #4]
    4336:	609a      	str	r2, [r3, #8]
    4338:	60da      	str	r2, [r3, #12]
    433a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    433c:	428b      	cmp	r3, r1
    433e:	d1f8      	bne.n	4332 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4340:	2300      	movs	r3, #0
    4342:	22a4      	movs	r2, #164	; 0xa4
    4344:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4346:	3201      	adds	r2, #1
    4348:	54a3      	strb	r3, [r4, r2]
    434a:	0023      	movs	r3, r4
    434c:	33a6      	adds	r3, #166	; 0xa6
    434e:	0021      	movs	r1, r4
    4350:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    4352:	2200      	movs	r2, #0
    4354:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4356:	721a      	strb	r2, [r3, #8]
    4358:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    435a:	4299      	cmp	r1, r3
    435c:	d1fa      	bne.n	4354 <usb_init+0x150>
    435e:	0023      	movs	r3, r4
    4360:	33b8      	adds	r3, #184	; 0xb8
    4362:	0021      	movs	r1, r4
    4364:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4366:	2200      	movs	r2, #0
    4368:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    436a:	428b      	cmp	r3, r1
    436c:	d1fc      	bne.n	4368 <usb_init+0x164>
    436e:	0021      	movs	r1, r4
    4370:	3155      	adds	r1, #85	; 0x55
    4372:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4374:	2200      	movs	r2, #0
    4376:	601a      	str	r2, [r3, #0]
    4378:	605a      	str	r2, [r3, #4]
    437a:	609a      	str	r2, [r3, #8]
    437c:	60da      	str	r2, [r3, #12]
    437e:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4380:	428b      	cmp	r3, r1
    4382:	d1f8      	bne.n	4376 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4384:	2300      	movs	r3, #0
    4386:	22aa      	movs	r2, #170	; 0xaa
    4388:	0052      	lsls	r2, r2, #1
    438a:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    438c:	3202      	adds	r2, #2
    438e:	52a3      	strh	r3, [r4, r2]
    4390:	0023      	movs	r3, r4
    4392:	3359      	adds	r3, #89	; 0x59
    4394:	33ff      	adds	r3, #255	; 0xff
    4396:	3461      	adds	r4, #97	; 0x61
    4398:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    439a:	2200      	movs	r2, #0
    439c:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    439e:	721a      	strb	r2, [r3, #8]
    43a0:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    43a2:	42a3      	cmp	r3, r4
    43a4:	d1fa      	bne.n	439c <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    43a6:	2280      	movs	r2, #128	; 0x80
    43a8:	4b15      	ldr	r3, [pc, #84]	; (4400 <usb_init+0x1fc>)
    43aa:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    43ac:	2000      	movs	r0, #0
    43ae:	b003      	add	sp, #12
    43b0:	bc0c      	pop	{r2, r3}
    43b2:	4690      	mov	r8, r2
    43b4:	4699      	mov	r9, r3
    43b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    43b8:	3b1a      	subs	r3, #26
    43ba:	e76d      	b.n	4298 <usb_init+0x94>
		pad_transp = 29;
    43bc:	3b02      	subs	r3, #2
    43be:	e778      	b.n	42b2 <usb_init+0xae>
		pad_trim = 3;
    43c0:	3b04      	subs	r3, #4
    43c2:	e782      	b.n	42ca <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    43c4:	6822      	ldr	r2, [r4, #0]
    43c6:	8913      	ldrh	r3, [r2, #8]
    43c8:	3108      	adds	r1, #8
    43ca:	438b      	bics	r3, r1
    43cc:	8113      	strh	r3, [r2, #8]
    43ce:	e7a0      	b.n	4312 <usb_init+0x10e>
    43d0:	20000298 	.word	0x20000298
    43d4:	20000288 	.word	0x20000288
    43d8:	40000400 	.word	0x40000400
    43dc:	00002119 	.word	0x00002119
    43e0:	00002055 	.word	0x00002055
    43e4:	00001fc9 	.word	0x00001fc9
    43e8:	41005000 	.word	0x41005000
    43ec:	00806024 	.word	0x00806024
    43f0:	fffff83f 	.word	0xfffff83f
    43f4:	ffff8fff 	.word	0xffff8fff
    43f8:	20000764 	.word	0x20000764
    43fc:	00005e13 	.word	0x00005e13
    4400:	e000e100 	.word	0xe000e100

00004404 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4404:	e7fe      	b.n	4404 <Dummy_Handler>
	...

00004408 <Reset_Handler>:
{
    4408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    440a:	4a2a      	ldr	r2, [pc, #168]	; (44b4 <Reset_Handler+0xac>)
    440c:	4b2a      	ldr	r3, [pc, #168]	; (44b8 <Reset_Handler+0xb0>)
    440e:	429a      	cmp	r2, r3
    4410:	d011      	beq.n	4436 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4412:	001a      	movs	r2, r3
    4414:	4b29      	ldr	r3, [pc, #164]	; (44bc <Reset_Handler+0xb4>)
    4416:	429a      	cmp	r2, r3
    4418:	d20d      	bcs.n	4436 <Reset_Handler+0x2e>
    441a:	4a29      	ldr	r2, [pc, #164]	; (44c0 <Reset_Handler+0xb8>)
    441c:	3303      	adds	r3, #3
    441e:	1a9b      	subs	r3, r3, r2
    4420:	089b      	lsrs	r3, r3, #2
    4422:	3301      	adds	r3, #1
    4424:	009b      	lsls	r3, r3, #2
    4426:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4428:	4823      	ldr	r0, [pc, #140]	; (44b8 <Reset_Handler+0xb0>)
    442a:	4922      	ldr	r1, [pc, #136]	; (44b4 <Reset_Handler+0xac>)
    442c:	588c      	ldr	r4, [r1, r2]
    442e:	5084      	str	r4, [r0, r2]
    4430:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    4432:	429a      	cmp	r2, r3
    4434:	d1fa      	bne.n	442c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4436:	4a23      	ldr	r2, [pc, #140]	; (44c4 <Reset_Handler+0xbc>)
    4438:	4b23      	ldr	r3, [pc, #140]	; (44c8 <Reset_Handler+0xc0>)
    443a:	429a      	cmp	r2, r3
    443c:	d20a      	bcs.n	4454 <Reset_Handler+0x4c>
    443e:	43d3      	mvns	r3, r2
    4440:	4921      	ldr	r1, [pc, #132]	; (44c8 <Reset_Handler+0xc0>)
    4442:	185b      	adds	r3, r3, r1
    4444:	2103      	movs	r1, #3
    4446:	438b      	bics	r3, r1
    4448:	3304      	adds	r3, #4
    444a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    444c:	2100      	movs	r1, #0
    444e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4450:	4293      	cmp	r3, r2
    4452:	d1fc      	bne.n	444e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4454:	4a1d      	ldr	r2, [pc, #116]	; (44cc <Reset_Handler+0xc4>)
    4456:	21ff      	movs	r1, #255	; 0xff
    4458:	4b1d      	ldr	r3, [pc, #116]	; (44d0 <Reset_Handler+0xc8>)
    445a:	438b      	bics	r3, r1
    445c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    445e:	39fd      	subs	r1, #253	; 0xfd
    4460:	2390      	movs	r3, #144	; 0x90
    4462:	005b      	lsls	r3, r3, #1
    4464:	4a1b      	ldr	r2, [pc, #108]	; (44d4 <Reset_Handler+0xcc>)
    4466:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4468:	4a1b      	ldr	r2, [pc, #108]	; (44d8 <Reset_Handler+0xd0>)
    446a:	78d3      	ldrb	r3, [r2, #3]
    446c:	2503      	movs	r5, #3
    446e:	43ab      	bics	r3, r5
    4470:	2402      	movs	r4, #2
    4472:	4323      	orrs	r3, r4
    4474:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4476:	78d3      	ldrb	r3, [r2, #3]
    4478:	270c      	movs	r7, #12
    447a:	43bb      	bics	r3, r7
    447c:	2608      	movs	r6, #8
    447e:	4333      	orrs	r3, r6
    4480:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4482:	4b16      	ldr	r3, [pc, #88]	; (44dc <Reset_Handler+0xd4>)
    4484:	7b98      	ldrb	r0, [r3, #14]
    4486:	2230      	movs	r2, #48	; 0x30
    4488:	4390      	bics	r0, r2
    448a:	2220      	movs	r2, #32
    448c:	4310      	orrs	r0, r2
    448e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4490:	7b99      	ldrb	r1, [r3, #14]
    4492:	43b9      	bics	r1, r7
    4494:	4331      	orrs	r1, r6
    4496:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4498:	7b9a      	ldrb	r2, [r3, #14]
    449a:	43aa      	bics	r2, r5
    449c:	4322      	orrs	r2, r4
    449e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    44a0:	4a0f      	ldr	r2, [pc, #60]	; (44e0 <Reset_Handler+0xd8>)
    44a2:	6853      	ldr	r3, [r2, #4]
    44a4:	2180      	movs	r1, #128	; 0x80
    44a6:	430b      	orrs	r3, r1
    44a8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    44aa:	4b0e      	ldr	r3, [pc, #56]	; (44e4 <Reset_Handler+0xdc>)
    44ac:	4798      	blx	r3
        main();
    44ae:	4b0e      	ldr	r3, [pc, #56]	; (44e8 <Reset_Handler+0xe0>)
    44b0:	4798      	blx	r3
    44b2:	e7fe      	b.n	44b2 <Reset_Handler+0xaa>
    44b4:	00006704 	.word	0x00006704
    44b8:	20000000 	.word	0x20000000
    44bc:	200000b4 	.word	0x200000b4
    44c0:	20000004 	.word	0x20000004
    44c4:	200000c0 	.word	0x200000c0
    44c8:	200008b0 	.word	0x200008b0
    44cc:	e000ed00 	.word	0xe000ed00
    44d0:	00000000 	.word	0x00000000
    44d4:	41007000 	.word	0x41007000
    44d8:	41005000 	.word	0x41005000
    44dc:	41004800 	.word	0x41004800
    44e0:	41004000 	.word	0x41004000
    44e4:	00005d91 	.word	0x00005d91
    44e8:	00005535 	.word	0x00005535

000044ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    44ec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    44ee:	4a06      	ldr	r2, [pc, #24]	; (4508 <_sbrk+0x1c>)
    44f0:	6812      	ldr	r2, [r2, #0]
    44f2:	2a00      	cmp	r2, #0
    44f4:	d004      	beq.n	4500 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    44f6:	4a04      	ldr	r2, [pc, #16]	; (4508 <_sbrk+0x1c>)
    44f8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    44fa:	18c3      	adds	r3, r0, r3
    44fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    44fe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4500:	4902      	ldr	r1, [pc, #8]	; (450c <_sbrk+0x20>)
    4502:	4a01      	ldr	r2, [pc, #4]	; (4508 <_sbrk+0x1c>)
    4504:	6011      	str	r1, [r2, #0]
    4506:	e7f6      	b.n	44f6 <_sbrk+0xa>
    4508:	200002a4 	.word	0x200002a4
    450c:	200038b0 	.word	0x200038b0

00004510 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    4510:	b530      	push	{r4, r5, lr}
    4512:	b087      	sub	sp, #28
    4514:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    4516:	aa01      	add	r2, sp, #4
    4518:	23a0      	movs	r3, #160	; 0xa0
    451a:	011b      	lsls	r3, r3, #4
    451c:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    451e:	2300      	movs	r3, #0
    4520:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    4522:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    4524:	21fa      	movs	r1, #250	; 0xfa
    4526:	00c9      	lsls	r1, r1, #3
    4528:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    452a:	2101      	movs	r1, #1
    452c:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    452e:	2004      	movs	r0, #4
    4530:	7210      	strb	r0, [r2, #8]
    4532:	7253      	strb	r3, [r2, #9]
    4534:	7293      	strb	r3, [r2, #10]
    4536:	72d3      	strb	r3, [r2, #11]
    4538:	7311      	strb	r1, [r2, #12]
    453a:	7351      	strb	r1, [r2, #13]
    453c:	4b15      	ldr	r3, [pc, #84]	; (4594 <disk_initialize+0x84>)
    453e:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    4540:	2306      	movs	r3, #6
    4542:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    4544:	4d14      	ldr	r5, [pc, #80]	; (4598 <disk_initialize+0x88>)
    4546:	4915      	ldr	r1, [pc, #84]	; (459c <disk_initialize+0x8c>)
    4548:	0028      	movs	r0, r5
    454a:	4b15      	ldr	r3, [pc, #84]	; (45a0 <disk_initialize+0x90>)
    454c:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    454e:	0028      	movs	r0, r5
    4550:	4b14      	ldr	r3, [pc, #80]	; (45a4 <disk_initialize+0x94>)
    4552:	4798      	blx	r3
	configure_rtc_calendar();
#endif

#if LUN_USB
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
    4554:	4b14      	ldr	r3, [pc, #80]	; (45a8 <disk_initialize+0x98>)
    4556:	4798      	blx	r3
		return STA_NOINIT;
    4558:	2201      	movs	r2, #1
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
    455a:	4284      	cmp	r4, r0
    455c:	dc0a      	bgt.n	4574 <disk_initialize+0x64>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
    455e:	0020      	movs	r0, r4
    4560:	4b12      	ldr	r3, [pc, #72]	; (45ac <disk_initialize+0x9c>)
    4562:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
    4564:	2803      	cmp	r0, #3
    4566:	d108      	bne.n	457a <disk_initialize+0x6a>
		mem_status = mem_test_unit_ready(drv);
    4568:	0020      	movs	r0, r4
    456a:	4b10      	ldr	r3, [pc, #64]	; (45ac <disk_initialize+0x9c>)
    456c:	4798      	blx	r3
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
    456e:	2201      	movs	r2, #1
		if (CTRL_BUSY != mem_status) {
    4570:	2803      	cmp	r0, #3
    4572:	d102      	bne.n	457a <disk_initialize+0x6a>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    4574:	0010      	movs	r0, r2
    4576:	b007      	add	sp, #28
    4578:	bd30      	pop	{r4, r5, pc}
	if (mem_status != CTRL_GOOD) {
    457a:	2800      	cmp	r0, #0
    457c:	d107      	bne.n	458e <disk_initialize+0x7e>
	if (mem_wr_protect(drv)) {
    457e:	0020      	movs	r0, r4
    4580:	4b0b      	ldr	r3, [pc, #44]	; (45b0 <disk_initialize+0xa0>)
    4582:	4798      	blx	r3
	return 0;
    4584:	0002      	movs	r2, r0
    4586:	1e50      	subs	r0, r2, #1
    4588:	4182      	sbcs	r2, r0
    458a:	0092      	lsls	r2, r2, #2
    458c:	e7f2      	b.n	4574 <disk_initialize+0x64>
		return STA_NOINIT;
    458e:	2201      	movs	r2, #1
    4590:	e7f0      	b.n	4574 <disk_initialize+0x64>
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	000007de 	.word	0x000007de
    4598:	20000864 	.word	0x20000864
    459c:	40001400 	.word	0x40001400
    45a0:	00001a65 	.word	0x00001a65
    45a4:	000019a5 	.word	0x000019a5
    45a8:	00000a21 	.word	0x00000a21
    45ac:	00000115 	.word	0x00000115
    45b0:	00000139 	.word	0x00000139

000045b4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    45b4:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    45b6:	4b05      	ldr	r3, [pc, #20]	; (45cc <disk_status+0x18>)
    45b8:	4798      	blx	r3
    45ba:	1e03      	subs	r3, r0, #0
    45bc:	d004      	beq.n	45c8 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    45be:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    45c0:	2b02      	cmp	r3, #2
    45c2:	d000      	beq.n	45c6 <disk_status+0x12>
	default:
		return STA_NOINIT;
    45c4:	3802      	subs	r0, #2
	}
}
    45c6:	bd10      	pop	{r4, pc}
		return 0;
    45c8:	2000      	movs	r0, #0
    45ca:	e7fc      	b.n	45c6 <disk_status+0x12>
    45cc:	00000115 	.word	0x00000115

000045d0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    45d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45d2:	46de      	mov	lr, fp
    45d4:	464f      	mov	r7, r9
    45d6:	4646      	mov	r6, r8
    45d8:	b5c0      	push	{r6, r7, lr}
    45da:	b084      	sub	sp, #16
    45dc:	9001      	str	r0, [sp, #4]
    45de:	000d      	movs	r5, r1
    45e0:	0014      	movs	r4, r2
    45e2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    45e4:	4b18      	ldr	r3, [pc, #96]	; (4648 <disk_read+0x78>)
    45e6:	4798      	blx	r3
    45e8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    45ea:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    45ec:	2e00      	cmp	r6, #0
    45ee:	d105      	bne.n	45fc <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    45f0:	b004      	add	sp, #16
    45f2:	bc1c      	pop	{r2, r3, r4}
    45f4:	4690      	mov	r8, r2
    45f6:	4699      	mov	r9, r3
    45f8:	46a3      	mov	fp, r4
    45fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    45fc:	a903      	add	r1, sp, #12
    45fe:	9801      	ldr	r0, [sp, #4]
    4600:	4b12      	ldr	r3, [pc, #72]	; (464c <disk_read+0x7c>)
    4602:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    4604:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    4606:	0032      	movs	r2, r6
    4608:	437a      	muls	r2, r7
    460a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    460c:	9b03      	ldr	r3, [sp, #12]
    460e:	3301      	adds	r3, #1
    4610:	4373      	muls	r3, r6
		return RES_PARERR;
    4612:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    4614:	429a      	cmp	r2, r3
    4616:	d8eb      	bhi.n	45f0 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    4618:	2f00      	cmp	r7, #0
    461a:	d011      	beq.n	4640 <disk_read+0x70>
    461c:	0273      	lsls	r3, r6, #9
    461e:	4698      	mov	r8, r3
    4620:	1c7b      	adds	r3, r7, #1
    4622:	469b      	mov	fp, r3
    4624:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    4626:	4e0a      	ldr	r6, [pc, #40]	; (4650 <disk_read+0x80>)
    4628:	002a      	movs	r2, r5
    462a:	0021      	movs	r1, r4
    462c:	9801      	ldr	r0, [sp, #4]
    462e:	47b0      	blx	r6
    4630:	2800      	cmp	r0, #0
    4632:	d107      	bne.n	4644 <disk_read+0x74>
    4634:	3701      	adds	r7, #1
    4636:	444c      	add	r4, r9
    4638:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    463a:	455f      	cmp	r7, fp
    463c:	d1f4      	bne.n	4628 <disk_read+0x58>
    463e:	e7d7      	b.n	45f0 <disk_read+0x20>
	return RES_OK;
    4640:	2000      	movs	r0, #0
    4642:	e7d5      	b.n	45f0 <disk_read+0x20>
			return RES_ERROR;
    4644:	2001      	movs	r0, #1
    4646:	e7d3      	b.n	45f0 <disk_read+0x20>
    4648:	0000012d 	.word	0x0000012d
    464c:	00000121 	.word	0x00000121
    4650:	00000145 	.word	0x00000145

00004654 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    4654:	0002      	movs	r2, r0
	clst -= 2;
    4656:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4658:	68c3      	ldr	r3, [r0, #12]
    465a:	3b02      	subs	r3, #2
    465c:	2000      	movs	r0, #0
    465e:	4299      	cmp	r1, r3
    4660:	d203      	bcs.n	466a <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    4662:	7890      	ldrb	r0, [r2, #2]
    4664:	4341      	muls	r1, r0
    4666:	69d0      	ldr	r0, [r2, #28]
    4668:	1808      	adds	r0, r1, r0
}
    466a:	4770      	bx	lr

0000466c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    466c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    466e:	2800      	cmp	r0, #0
    4670:	d010      	beq.n	4694 <validate+0x28>
    4672:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    4674:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    4676:	2a00      	cmp	r2, #0
    4678:	d101      	bne.n	467e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    467a:	0018      	movs	r0, r3
    467c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    467e:	88c2      	ldrh	r2, [r0, #6]
    4680:	428a      	cmp	r2, r1
    4682:	d1fa      	bne.n	467a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    4684:	7840      	ldrb	r0, [r0, #1]
    4686:	4b04      	ldr	r3, [pc, #16]	; (4698 <validate+0x2c>)
    4688:	4798      	blx	r3
		return FR_NOT_READY;
    468a:	2303      	movs	r3, #3
	return FR_OK;
    468c:	07c0      	lsls	r0, r0, #31
    468e:	17c0      	asrs	r0, r0, #31
    4690:	4003      	ands	r3, r0
    4692:	e7f2      	b.n	467a <validate+0xe>
		return FR_INVALID_OBJECT;
    4694:	2309      	movs	r3, #9
    4696:	e7f0      	b.n	467a <validate+0xe>
    4698:	000045b5 	.word	0x000045b5

0000469c <check_fs>:
{
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	0004      	movs	r4, r0
    46a0:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    46a2:	0001      	movs	r1, r0
    46a4:	3124      	adds	r1, #36	; 0x24
    46a6:	7840      	ldrb	r0, [r0, #1]
    46a8:	2301      	movs	r3, #1
    46aa:	4d1f      	ldr	r5, [pc, #124]	; (4728 <check_fs+0x8c>)
    46ac:	47a8      	blx	r5
		return 3;
    46ae:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    46b0:	2800      	cmp	r0, #0
    46b2:	d001      	beq.n	46b8 <check_fs+0x1c>
}
    46b4:	0018      	movs	r0, r3
    46b6:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    46b8:	4b1c      	ldr	r3, [pc, #112]	; (472c <check_fs+0x90>)
    46ba:	5ce3      	ldrb	r3, [r4, r3]
    46bc:	021b      	lsls	r3, r3, #8
    46be:	4a1c      	ldr	r2, [pc, #112]	; (4730 <check_fs+0x94>)
    46c0:	5ca2      	ldrb	r2, [r4, r2]
    46c2:	431a      	orrs	r2, r3
    46c4:	491b      	ldr	r1, [pc, #108]	; (4734 <check_fs+0x98>)
    46c6:	b212      	sxth	r2, r2
		return 2;
    46c8:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    46ca:	428a      	cmp	r2, r1
    46cc:	d1f2      	bne.n	46b4 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    46ce:	335b      	adds	r3, #91	; 0x5b
    46d0:	5ce3      	ldrb	r3, [r4, r3]
    46d2:	061b      	lsls	r3, r3, #24
    46d4:	225c      	movs	r2, #92	; 0x5c
    46d6:	5ca2      	ldrb	r2, [r4, r2]
    46d8:	0412      	lsls	r2, r2, #16
    46da:	4313      	orrs	r3, r2
    46dc:	225a      	movs	r2, #90	; 0x5a
    46de:	5ca2      	ldrb	r2, [r4, r2]
    46e0:	4313      	orrs	r3, r2
    46e2:	225b      	movs	r2, #91	; 0x5b
    46e4:	5ca2      	ldrb	r2, [r4, r2]
    46e6:	0212      	lsls	r2, r2, #8
    46e8:	4313      	orrs	r3, r2
    46ea:	021b      	lsls	r3, r3, #8
    46ec:	0a1b      	lsrs	r3, r3, #8
    46ee:	4a12      	ldr	r2, [pc, #72]	; (4738 <check_fs+0x9c>)
    46f0:	4293      	cmp	r3, r2
    46f2:	d016      	beq.n	4722 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    46f4:	2379      	movs	r3, #121	; 0x79
    46f6:	5ce3      	ldrb	r3, [r4, r3]
    46f8:	061b      	lsls	r3, r3, #24
    46fa:	2278      	movs	r2, #120	; 0x78
    46fc:	5ca2      	ldrb	r2, [r4, r2]
    46fe:	0412      	lsls	r2, r2, #16
    4700:	4313      	orrs	r3, r2
    4702:	2276      	movs	r2, #118	; 0x76
    4704:	5ca2      	ldrb	r2, [r4, r2]
    4706:	4313      	orrs	r3, r2
    4708:	2277      	movs	r2, #119	; 0x77
    470a:	5ca2      	ldrb	r2, [r4, r2]
    470c:	0212      	lsls	r2, r2, #8
    470e:	4313      	orrs	r3, r2
    4710:	021b      	lsls	r3, r3, #8
    4712:	0a1b      	lsrs	r3, r3, #8
    4714:	4a09      	ldr	r2, [pc, #36]	; (473c <check_fs+0xa0>)
    4716:	4694      	mov	ip, r2
    4718:	4463      	add	r3, ip
    471a:	1e58      	subs	r0, r3, #1
    471c:	4183      	sbcs	r3, r0
		return 3;
    471e:	b2db      	uxtb	r3, r3
    4720:	e7c8      	b.n	46b4 <check_fs+0x18>
		return 0;
    4722:	2300      	movs	r3, #0
    4724:	e7c6      	b.n	46b4 <check_fs+0x18>
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	000045d1 	.word	0x000045d1
    472c:	00000223 	.word	0x00000223
    4730:	00000222 	.word	0x00000222
    4734:	ffffaa55 	.word	0xffffaa55
    4738:	00544146 	.word	0x00544146
    473c:	ffabbeba 	.word	0xffabbeba

00004740 <chk_mounted>:
{
    4740:	b5f0      	push	{r4, r5, r6, r7, lr}
    4742:	46d6      	mov	lr, sl
    4744:	464f      	mov	r7, r9
    4746:	4646      	mov	r6, r8
    4748:	b5c0      	push	{r6, r7, lr}
	const TCHAR *p = *path;
    474a:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    474c:	781c      	ldrb	r4, [r3, #0]
    474e:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    4750:	2c09      	cmp	r4, #9
    4752:	d80a      	bhi.n	476a <chk_mounted+0x2a>
    4754:	785a      	ldrb	r2, [r3, #1]
    4756:	2a3a      	cmp	r2, #58	; 0x3a
    4758:	d001      	beq.n	475e <chk_mounted+0x1e>
    475a:	2400      	movs	r4, #0
    475c:	e006      	b.n	476c <chk_mounted+0x2c>
		p += 2; *path = p;				/* Return pointer to the path name */
    475e:	3302      	adds	r3, #2
    4760:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    4762:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    4764:	2c07      	cmp	r4, #7
    4766:	d81c      	bhi.n	47a2 <chk_mounted+0x62>
    4768:	e000      	b.n	476c <chk_mounted+0x2c>
    476a:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    476c:	00a3      	lsls	r3, r4, #2
    476e:	4a86      	ldr	r2, [pc, #536]	; (4988 <chk_mounted+0x248>)
    4770:	589d      	ldr	r5, [r3, r2]
    4772:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    4774:	2d00      	cmp	r5, #0
    4776:	d100      	bne.n	477a <chk_mounted+0x3a>
    4778:	e0d2      	b.n	4920 <chk_mounted+0x1e0>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    477a:	782b      	ldrb	r3, [r5, #0]
    477c:	2b00      	cmp	r3, #0
    477e:	d006      	beq.n	478e <chk_mounted+0x4e>
		stat = disk_status(fs->drv);
    4780:	7868      	ldrb	r0, [r5, #1]
    4782:	4b82      	ldr	r3, [pc, #520]	; (498c <chk_mounted+0x24c>)
    4784:	4798      	blx	r3
    4786:	0003      	movs	r3, r0
			return FR_OK;				/* The file system object is valid */
    4788:	2000      	movs	r0, #0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    478a:	07db      	lsls	r3, r3, #31
    478c:	d509      	bpl.n	47a2 <chk_mounted+0x62>
	fs->fs_type = 0;					/* Clear the file system object */
    478e:	2300      	movs	r3, #0
    4790:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    4792:	b2e0      	uxtb	r0, r4
    4794:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    4796:	4b7e      	ldr	r3, [pc, #504]	; (4990 <chk_mounted+0x250>)
    4798:	4798      	blx	r3
    479a:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    479c:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    479e:	07db      	lsls	r3, r3, #31
    47a0:	d504      	bpl.n	47ac <chk_mounted+0x6c>
}
    47a2:	bc1c      	pop	{r2, r3, r4}
    47a4:	4690      	mov	r8, r2
    47a6:	4699      	mov	r9, r3
    47a8:	46a2      	mov	sl, r4
    47aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    47ac:	2100      	movs	r1, #0
    47ae:	0028      	movs	r0, r5
    47b0:	4b78      	ldr	r3, [pc, #480]	; (4994 <chk_mounted+0x254>)
    47b2:	4798      	blx	r3
    47b4:	0003      	movs	r3, r0
    47b6:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    47b8:	2801      	cmp	r0, #1
    47ba:	d100      	bne.n	47be <chk_mounted+0x7e>
    47bc:	e092      	b.n	48e4 <chk_mounted+0x1a4>
	if (fmt == 3) return FR_DISK_ERR;
    47be:	2b03      	cmp	r3, #3
    47c0:	d100      	bne.n	47c4 <chk_mounted+0x84>
    47c2:	e0af      	b.n	4924 <chk_mounted+0x1e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    47c4:	200d      	movs	r0, #13
    47c6:	2b00      	cmp	r3, #0
    47c8:	d1eb      	bne.n	47a2 <chk_mounted+0x62>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    47ca:	3330      	adds	r3, #48	; 0x30
    47cc:	5cea      	ldrb	r2, [r5, r3]
    47ce:	0212      	lsls	r2, r2, #8
    47d0:	3b01      	subs	r3, #1
    47d2:	5ceb      	ldrb	r3, [r5, r3]
    47d4:	4313      	orrs	r3, r2
    47d6:	2280      	movs	r2, #128	; 0x80
    47d8:	0092      	lsls	r2, r2, #2
    47da:	b21b      	sxth	r3, r3
    47dc:	4293      	cmp	r3, r2
    47de:	d1e0      	bne.n	47a2 <chk_mounted+0x62>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    47e0:	233b      	movs	r3, #59	; 0x3b
    47e2:	5ceb      	ldrb	r3, [r5, r3]
    47e4:	021b      	lsls	r3, r3, #8
    47e6:	3ac7      	subs	r2, #199	; 0xc7
    47e8:	3aff      	subs	r2, #255	; 0xff
    47ea:	5cae      	ldrb	r6, [r5, r2]
    47ec:	431e      	orrs	r6, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    47ee:	d10d      	bne.n	480c <chk_mounted+0xcc>
    47f0:	234b      	movs	r3, #75	; 0x4b
    47f2:	5cee      	ldrb	r6, [r5, r3]
    47f4:	0636      	lsls	r6, r6, #24
    47f6:	3b01      	subs	r3, #1
    47f8:	5ceb      	ldrb	r3, [r5, r3]
    47fa:	041b      	lsls	r3, r3, #16
    47fc:	431e      	orrs	r6, r3
    47fe:	2348      	movs	r3, #72	; 0x48
    4800:	5ceb      	ldrb	r3, [r5, r3]
    4802:	431e      	orrs	r6, r3
    4804:	2349      	movs	r3, #73	; 0x49
    4806:	5ceb      	ldrb	r3, [r5, r3]
    4808:	021b      	lsls	r3, r3, #8
    480a:	431e      	orrs	r6, r3
	fs->fsize = fasize;
    480c:	612e      	str	r6, [r5, #16]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    480e:	2334      	movs	r3, #52	; 0x34
    4810:	5cea      	ldrb	r2, [r5, r3]
    4812:	70ea      	strb	r2, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    4814:	1e53      	subs	r3, r2, #1
    4816:	200d      	movs	r0, #13
    4818:	2b01      	cmp	r3, #1
    481a:	d8c2      	bhi.n	47a2 <chk_mounted+0x62>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    481c:	2331      	movs	r3, #49	; 0x31
    481e:	5ce9      	ldrb	r1, [r5, r3]
    4820:	70a9      	strb	r1, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    4822:	2900      	cmp	r1, #0
    4824:	d0bd      	beq.n	47a2 <chk_mounted+0x62>
    4826:	1e4b      	subs	r3, r1, #1
    4828:	4219      	tst	r1, r3
    482a:	d1ba      	bne.n	47a2 <chk_mounted+0x62>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    482c:	2336      	movs	r3, #54	; 0x36
    482e:	5ceb      	ldrb	r3, [r5, r3]
    4830:	021b      	lsls	r3, r3, #8
    4832:	3028      	adds	r0, #40	; 0x28
    4834:	5c28      	ldrb	r0, [r5, r0]
    4836:	4318      	orrs	r0, r3
    4838:	4680      	mov	r8, r0
    483a:	8128      	strh	r0, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    483c:	200d      	movs	r0, #13
    483e:	4643      	mov	r3, r8
    4840:	071b      	lsls	r3, r3, #28
    4842:	d1ae      	bne.n	47a2 <chk_mounted+0x62>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    4844:	2338      	movs	r3, #56	; 0x38
    4846:	5ceb      	ldrb	r3, [r5, r3]
    4848:	021b      	lsls	r3, r3, #8
    484a:	302a      	adds	r0, #42	; 0x2a
    484c:	5c28      	ldrb	r0, [r5, r0]
    484e:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    4850:	d10d      	bne.n	486e <chk_mounted+0x12e>
    4852:	3347      	adds	r3, #71	; 0x47
    4854:	5ceb      	ldrb	r3, [r5, r3]
    4856:	061b      	lsls	r3, r3, #24
    4858:	2046      	movs	r0, #70	; 0x46
    485a:	5c28      	ldrb	r0, [r5, r0]
    485c:	0400      	lsls	r0, r0, #16
    485e:	4303      	orrs	r3, r0
    4860:	2044      	movs	r0, #68	; 0x44
    4862:	5c28      	ldrb	r0, [r5, r0]
    4864:	4303      	orrs	r3, r0
    4866:	2045      	movs	r0, #69	; 0x45
    4868:	5c28      	ldrb	r0, [r5, r0]
    486a:	0200      	lsls	r0, r0, #8
    486c:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    486e:	2033      	movs	r0, #51	; 0x33
    4870:	5c28      	ldrb	r0, [r5, r0]
    4872:	0200      	lsls	r0, r0, #8
    4874:	2732      	movs	r7, #50	; 0x32
    4876:	5def      	ldrb	r7, [r5, r7]
    4878:	4307      	orrs	r7, r0
    487a:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    487c:	200d      	movs	r0, #13
    487e:	2f00      	cmp	r7, #0
    4880:	d100      	bne.n	4884 <chk_mounted+0x144>
    4882:	e78e      	b.n	47a2 <chk_mounted+0x62>
	fasize *= b;										/* Number of sectors for FAT area */
    4884:	4372      	muls	r2, r6
    4886:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    4888:	4642      	mov	r2, r8
    488a:	0917      	lsrs	r7, r2, #4
    488c:	4457      	add	r7, sl
    488e:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    4890:	42bb      	cmp	r3, r7
    4892:	d200      	bcs.n	4896 <chk_mounted+0x156>
    4894:	e785      	b.n	47a2 <chk_mounted+0x62>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    4896:	1bd8      	subs	r0, r3, r7
    4898:	4b3f      	ldr	r3, [pc, #252]	; (4998 <chk_mounted+0x258>)
    489a:	4798      	blx	r3
    489c:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    489e:	200d      	movs	r0, #13
    48a0:	2b00      	cmp	r3, #0
    48a2:	d100      	bne.n	48a6 <chk_mounted+0x166>
    48a4:	e77d      	b.n	47a2 <chk_mounted+0x62>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    48a6:	4a3d      	ldr	r2, [pc, #244]	; (499c <chk_mounted+0x25c>)
	fmt = FS_FAT12;
    48a8:	429a      	cmp	r2, r3
    48aa:	4192      	sbcs	r2, r2
    48ac:	4252      	negs	r2, r2
    48ae:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    48b0:	493b      	ldr	r1, [pc, #236]	; (49a0 <chk_mounted+0x260>)
    48b2:	428b      	cmp	r3, r1
    48b4:	d838      	bhi.n	4928 <chk_mounted+0x1e8>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    48b6:	1c99      	adds	r1, r3, #2
    48b8:	60e9      	str	r1, [r5, #12]
	fs->database = bsect + sysect;						/* Data start sector */
    48ba:	19e7      	adds	r7, r4, r7
    48bc:	61ef      	str	r7, [r5, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    48be:	4454      	add	r4, sl
    48c0:	616c      	str	r4, [r5, #20]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    48c2:	200d      	movs	r0, #13
    48c4:	4643      	mov	r3, r8
    48c6:	2b00      	cmp	r3, #0
    48c8:	d100      	bne.n	48cc <chk_mounted+0x18c>
    48ca:	e76a      	b.n	47a2 <chk_mounted+0x62>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    48cc:	444c      	add	r4, r9
    48ce:	61ac      	str	r4, [r5, #24]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    48d0:	004b      	lsls	r3, r1, #1
    48d2:	2a02      	cmp	r2, #2
    48d4:	d044      	beq.n	4960 <chk_mounted+0x220>
    48d6:	2303      	movs	r3, #3
    48d8:	434b      	muls	r3, r1
    48da:	085b      	lsrs	r3, r3, #1
    48dc:	2001      	movs	r0, #1
    48de:	4001      	ands	r1, r0
    48e0:	185b      	adds	r3, r3, r1
    48e2:	e03d      	b.n	4960 <chk_mounted+0x220>
		if (tbl[4]) {						/* Is the partition existing? */
    48e4:	33e6      	adds	r3, #230	; 0xe6
    48e6:	33ff      	adds	r3, #255	; 0xff
    48e8:	5ceb      	ldrb	r3, [r5, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    48ea:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    48ec:	2b00      	cmp	r3, #0
    48ee:	d100      	bne.n	48f2 <chk_mounted+0x1b2>
    48f0:	e757      	b.n	47a2 <chk_mounted+0x62>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    48f2:	23ee      	movs	r3, #238	; 0xee
    48f4:	33ff      	adds	r3, #255	; 0xff
    48f6:	5cec      	ldrb	r4, [r5, r3]
    48f8:	0624      	lsls	r4, r4, #24
    48fa:	3b01      	subs	r3, #1
    48fc:	5ceb      	ldrb	r3, [r5, r3]
    48fe:	041b      	lsls	r3, r3, #16
    4900:	431c      	orrs	r4, r3
    4902:	23f5      	movs	r3, #245	; 0xf5
    4904:	005b      	lsls	r3, r3, #1
    4906:	5ceb      	ldrb	r3, [r5, r3]
    4908:	431c      	orrs	r4, r3
    490a:	23ec      	movs	r3, #236	; 0xec
    490c:	33ff      	adds	r3, #255	; 0xff
    490e:	5ceb      	ldrb	r3, [r5, r3]
    4910:	021b      	lsls	r3, r3, #8
    4912:	431c      	orrs	r4, r3
			fmt = check_fs(fs, bsect);		/* Check the partition */
    4914:	0021      	movs	r1, r4
    4916:	0028      	movs	r0, r5
    4918:	4b1e      	ldr	r3, [pc, #120]	; (4994 <chk_mounted+0x254>)
    491a:	4798      	blx	r3
    491c:	0003      	movs	r3, r0
    491e:	e74e      	b.n	47be <chk_mounted+0x7e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    4920:	200c      	movs	r0, #12
    4922:	e73e      	b.n	47a2 <chk_mounted+0x62>
	if (fmt == 3) return FR_DISK_ERR;
    4924:	2001      	movs	r0, #1
    4926:	e73c      	b.n	47a2 <chk_mounted+0x62>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    4928:	3302      	adds	r3, #2
    492a:	60eb      	str	r3, [r5, #12]
	fs->database = bsect + sysect;						/* Data start sector */
    492c:	19e7      	adds	r7, r4, r7
    492e:	61ef      	str	r7, [r5, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    4930:	4454      	add	r4, sl
    4932:	616c      	str	r4, [r5, #20]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    4934:	200d      	movs	r0, #13
    4936:	4642      	mov	r2, r8
    4938:	2a00      	cmp	r2, #0
    493a:	d000      	beq.n	493e <chk_mounted+0x1fe>
    493c:	e731      	b.n	47a2 <chk_mounted+0x62>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    493e:	2253      	movs	r2, #83	; 0x53
    4940:	5caa      	ldrb	r2, [r5, r2]
    4942:	0612      	lsls	r2, r2, #24
    4944:	2152      	movs	r1, #82	; 0x52
    4946:	5c69      	ldrb	r1, [r5, r1]
    4948:	0409      	lsls	r1, r1, #16
    494a:	430a      	orrs	r2, r1
    494c:	2150      	movs	r1, #80	; 0x50
    494e:	5c69      	ldrb	r1, [r5, r1]
    4950:	430a      	orrs	r2, r1
    4952:	2151      	movs	r1, #81	; 0x51
    4954:	5c69      	ldrb	r1, [r5, r1]
    4956:	0209      	lsls	r1, r1, #8
    4958:	430a      	orrs	r2, r1
    495a:	61aa      	str	r2, [r5, #24]
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    495c:	009b      	lsls	r3, r3, #2
    495e:	2203      	movs	r2, #3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4960:	4910      	ldr	r1, [pc, #64]	; (49a4 <chk_mounted+0x264>)
    4962:	468c      	mov	ip, r1
    4964:	4463      	add	r3, ip
    4966:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    4968:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    496a:	429e      	cmp	r6, r3
    496c:	d200      	bcs.n	4970 <chk_mounted+0x230>
    496e:	e718      	b.n	47a2 <chk_mounted+0x62>
	fs->fs_type = fmt;		/* FAT sub-type */
    4970:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    4972:	4a0d      	ldr	r2, [pc, #52]	; (49a8 <chk_mounted+0x268>)
    4974:	8813      	ldrh	r3, [r2, #0]
    4976:	3301      	adds	r3, #1
    4978:	b29b      	uxth	r3, r3
    497a:	8013      	strh	r3, [r2, #0]
    497c:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    497e:	2000      	movs	r0, #0
    4980:	6228      	str	r0, [r5, #32]
	fs->wflag = 0;
    4982:	7128      	strb	r0, [r5, #4]
	return FR_OK;
    4984:	e70d      	b.n	47a2 <chk_mounted+0x62>
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	200002a8 	.word	0x200002a8
    498c:	000045b5 	.word	0x000045b5
    4990:	00004511 	.word	0x00004511
    4994:	0000469d 	.word	0x0000469d
    4998:	00005a29 	.word	0x00005a29
    499c:	00000ff5 	.word	0x00000ff5
    49a0:	0000fff5 	.word	0x0000fff5
    49a4:	000001ff 	.word	0x000001ff
    49a8:	200002c8 	.word	0x200002c8

000049ac <move_window>:
{
    49ac:	b570      	push	{r4, r5, r6, lr}
    49ae:	0005      	movs	r5, r0
    49b0:	000c      	movs	r4, r1
	if (wsect != sector) {	/* Changed current window */
    49b2:	6a03      	ldr	r3, [r0, #32]
    49b4:	428b      	cmp	r3, r1
    49b6:	d011      	beq.n	49dc <move_window+0x30>
	return FR_OK;
    49b8:	2000      	movs	r0, #0
		if (sector) {
    49ba:	2900      	cmp	r1, #0
    49bc:	d100      	bne.n	49c0 <move_window+0x14>
}
    49be:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    49c0:	0029      	movs	r1, r5
    49c2:	3124      	adds	r1, #36	; 0x24
    49c4:	7868      	ldrb	r0, [r5, #1]
    49c6:	2301      	movs	r3, #1
    49c8:	0022      	movs	r2, r4
    49ca:	4e05      	ldr	r6, [pc, #20]	; (49e0 <move_window+0x34>)
    49cc:	47b0      	blx	r6
    49ce:	0003      	movs	r3, r0
				return FR_DISK_ERR;
    49d0:	2001      	movs	r0, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    49d2:	2b00      	cmp	r3, #0
    49d4:	d1f3      	bne.n	49be <move_window+0x12>
			fs->winsect = sector;
    49d6:	622c      	str	r4, [r5, #32]
	return FR_OK;
    49d8:	2000      	movs	r0, #0
    49da:	e7f0      	b.n	49be <move_window+0x12>
    49dc:	2000      	movs	r0, #0
    49de:	e7ee      	b.n	49be <move_window+0x12>
    49e0:	000045d1 	.word	0x000045d1

000049e4 <get_fat>:
{
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e6:	0005      	movs	r5, r0
    49e8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    49ea:	2901      	cmp	r1, #1
    49ec:	d974      	bls.n	4ad8 <get_fat+0xf4>
		return 1;
    49ee:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    49f0:	68eb      	ldr	r3, [r5, #12]
    49f2:	4299      	cmp	r1, r3
    49f4:	d271      	bcs.n	4ada <get_fat+0xf6>
	switch (fs->fs_type) {
    49f6:	782b      	ldrb	r3, [r5, #0]
    49f8:	2b02      	cmp	r3, #2
    49fa:	d034      	beq.n	4a66 <get_fat+0x82>
    49fc:	2b03      	cmp	r3, #3
    49fe:	d049      	beq.n	4a94 <get_fat+0xb0>
    4a00:	2b01      	cmp	r3, #1
    4a02:	d002      	beq.n	4a0a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4a04:	2001      	movs	r0, #1
    4a06:	4240      	negs	r0, r0
    4a08:	e067      	b.n	4ada <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    4a0a:	084e      	lsrs	r6, r1, #1
    4a0c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4a0e:	0a71      	lsrs	r1, r6, #9
    4a10:	696b      	ldr	r3, [r5, #20]
    4a12:	469c      	mov	ip, r3
    4a14:	4461      	add	r1, ip
    4a16:	0028      	movs	r0, r5
    4a18:	4b30      	ldr	r3, [pc, #192]	; (4adc <get_fat+0xf8>)
    4a1a:	4798      	blx	r3
    4a1c:	2800      	cmp	r0, #0
    4a1e:	d002      	beq.n	4a26 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4a20:	2001      	movs	r0, #1
    4a22:	4240      	negs	r0, r0
    4a24:	e059      	b.n	4ada <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    4a26:	05f3      	lsls	r3, r6, #23
    4a28:	0ddb      	lsrs	r3, r3, #23
    4a2a:	18eb      	adds	r3, r5, r3
    4a2c:	3324      	adds	r3, #36	; 0x24
    4a2e:	781f      	ldrb	r7, [r3, #0]
    4a30:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4a32:	0a71      	lsrs	r1, r6, #9
    4a34:	696b      	ldr	r3, [r5, #20]
    4a36:	469c      	mov	ip, r3
    4a38:	4461      	add	r1, ip
    4a3a:	0028      	movs	r0, r5
    4a3c:	4b27      	ldr	r3, [pc, #156]	; (4adc <get_fat+0xf8>)
    4a3e:	4798      	blx	r3
    4a40:	2800      	cmp	r0, #0
    4a42:	d002      	beq.n	4a4a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4a44:	2001      	movs	r0, #1
    4a46:	4240      	negs	r0, r0
    4a48:	e047      	b.n	4ada <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    4a4a:	05f6      	lsls	r6, r6, #23
    4a4c:	0df6      	lsrs	r6, r6, #23
    4a4e:	19ad      	adds	r5, r5, r6
    4a50:	3524      	adds	r5, #36	; 0x24
    4a52:	7828      	ldrb	r0, [r5, #0]
    4a54:	0200      	lsls	r0, r0, #8
    4a56:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4a58:	07e3      	lsls	r3, r4, #31
    4a5a:	d501      	bpl.n	4a60 <get_fat+0x7c>
    4a5c:	0900      	lsrs	r0, r0, #4
    4a5e:	e03c      	b.n	4ada <get_fat+0xf6>
    4a60:	0500      	lsls	r0, r0, #20
    4a62:	0d00      	lsrs	r0, r0, #20
    4a64:	e039      	b.n	4ada <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4a66:	0a09      	lsrs	r1, r1, #8
    4a68:	696b      	ldr	r3, [r5, #20]
    4a6a:	469c      	mov	ip, r3
    4a6c:	4461      	add	r1, ip
    4a6e:	0028      	movs	r0, r5
    4a70:	4b1a      	ldr	r3, [pc, #104]	; (4adc <get_fat+0xf8>)
    4a72:	4798      	blx	r3
    4a74:	2800      	cmp	r0, #0
    4a76:	d002      	beq.n	4a7e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4a78:	2001      	movs	r0, #1
    4a7a:	4240      	negs	r0, r0
    4a7c:	e02d      	b.n	4ada <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    4a7e:	0064      	lsls	r4, r4, #1
    4a80:	23ff      	movs	r3, #255	; 0xff
    4a82:	005b      	lsls	r3, r3, #1
    4a84:	401c      	ands	r4, r3
		return LD_WORD(p);
    4a86:	192d      	adds	r5, r5, r4
    4a88:	3524      	adds	r5, #36	; 0x24
    4a8a:	786b      	ldrb	r3, [r5, #1]
    4a8c:	021b      	lsls	r3, r3, #8
    4a8e:	7828      	ldrb	r0, [r5, #0]
    4a90:	4318      	orrs	r0, r3
    4a92:	e022      	b.n	4ada <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4a94:	09c9      	lsrs	r1, r1, #7
    4a96:	696b      	ldr	r3, [r5, #20]
    4a98:	469c      	mov	ip, r3
    4a9a:	4461      	add	r1, ip
    4a9c:	0028      	movs	r0, r5
    4a9e:	4b0f      	ldr	r3, [pc, #60]	; (4adc <get_fat+0xf8>)
    4aa0:	4798      	blx	r3
    4aa2:	2800      	cmp	r0, #0
    4aa4:	d002      	beq.n	4aac <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4aa6:	2001      	movs	r0, #1
    4aa8:	4240      	negs	r0, r0
    4aaa:	e016      	b.n	4ada <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    4aac:	00a4      	lsls	r4, r4, #2
    4aae:	23fe      	movs	r3, #254	; 0xfe
    4ab0:	005b      	lsls	r3, r3, #1
    4ab2:	401c      	ands	r4, r3
    4ab4:	0023      	movs	r3, r4
    4ab6:	3324      	adds	r3, #36	; 0x24
    4ab8:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    4aba:	78d8      	ldrb	r0, [r3, #3]
    4abc:	0600      	lsls	r0, r0, #24
    4abe:	789a      	ldrb	r2, [r3, #2]
    4ac0:	0412      	lsls	r2, r2, #16
    4ac2:	4310      	orrs	r0, r2
    4ac4:	192c      	adds	r4, r5, r4
    4ac6:	3424      	adds	r4, #36	; 0x24
    4ac8:	7822      	ldrb	r2, [r4, #0]
    4aca:	4310      	orrs	r0, r2
    4acc:	785b      	ldrb	r3, [r3, #1]
    4ace:	021b      	lsls	r3, r3, #8
    4ad0:	4318      	orrs	r0, r3
    4ad2:	0100      	lsls	r0, r0, #4
    4ad4:	0900      	lsrs	r0, r0, #4
    4ad6:	e000      	b.n	4ada <get_fat+0xf6>
		return 1;
    4ad8:	2001      	movs	r0, #1
}
    4ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4adc:	000049ad 	.word	0x000049ad

00004ae0 <dir_sdi>:
{
    4ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ae2:	0004      	movs	r4, r0
    4ae4:	000d      	movs	r5, r1
	dj->index = idx;
    4ae6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    4ae8:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    4aea:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    4aec:	2901      	cmp	r1, #1
    4aee:	d003      	beq.n	4af8 <dir_sdi+0x18>
    4af0:	6823      	ldr	r3, [r4, #0]
    4af2:	68da      	ldr	r2, [r3, #12]
    4af4:	4291      	cmp	r1, r2
    4af6:	d300      	bcc.n	4afa <dir_sdi+0x1a>
}
    4af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4afa:	2900      	cmp	r1, #0
    4afc:	d119      	bne.n	4b32 <dir_sdi+0x52>
    4afe:	781a      	ldrb	r2, [r3, #0]
    4b00:	2a03      	cmp	r2, #3
    4b02:	d013      	beq.n	4b2c <dir_sdi+0x4c>
		dj->clust = clst;
    4b04:	2200      	movs	r2, #0
    4b06:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4b08:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    4b0a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4b0c:	42aa      	cmp	r2, r5
    4b0e:	d9f3      	bls.n	4af8 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4b10:	092a      	lsrs	r2, r5, #4
    4b12:	b292      	uxth	r2, r2
    4b14:	699b      	ldr	r3, [r3, #24]
    4b16:	189b      	adds	r3, r3, r2
    4b18:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4b1a:	6823      	ldr	r3, [r4, #0]
    4b1c:	3324      	adds	r3, #36	; 0x24
    4b1e:	220f      	movs	r2, #15
    4b20:	4015      	ands	r5, r2
    4b22:	016d      	lsls	r5, r5, #5
    4b24:	195d      	adds	r5, r3, r5
    4b26:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    4b28:	2000      	movs	r0, #0
    4b2a:	e7e5      	b.n	4af8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4b2c:	6999      	ldr	r1, [r3, #24]
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4b2e:	2900      	cmp	r1, #0
    4b30:	d0e8      	beq.n	4b04 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    4b32:	789e      	ldrb	r6, [r3, #2]
    4b34:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    4b36:	42b5      	cmp	r5, r6
    4b38:	d313      	bcc.n	4b62 <dir_sdi+0x82>
    4b3a:	1bad      	subs	r5, r5, r6
    4b3c:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    4b3e:	4f10      	ldr	r7, [pc, #64]	; (4b80 <dir_sdi+0xa0>)
    4b40:	e000      	b.n	4b44 <dir_sdi+0x64>
    4b42:	001d      	movs	r5, r3
    4b44:	6820      	ldr	r0, [r4, #0]
    4b46:	47b8      	blx	r7
    4b48:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4b4a:	1c43      	adds	r3, r0, #1
    4b4c:	d012      	beq.n	4b74 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4b4e:	2801      	cmp	r0, #1
    4b50:	d912      	bls.n	4b78 <dir_sdi+0x98>
    4b52:	6823      	ldr	r3, [r4, #0]
    4b54:	68db      	ldr	r3, [r3, #12]
    4b56:	4298      	cmp	r0, r3
    4b58:	d210      	bcs.n	4b7c <dir_sdi+0x9c>
    4b5a:	1bab      	subs	r3, r5, r6
    4b5c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    4b5e:	42b5      	cmp	r5, r6
    4b60:	d2ef      	bcs.n	4b42 <dir_sdi+0x62>
		dj->clust = clst;
    4b62:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4b64:	6820      	ldr	r0, [r4, #0]
    4b66:	4b07      	ldr	r3, [pc, #28]	; (4b84 <dir_sdi+0xa4>)
    4b68:	4798      	blx	r3
    4b6a:	092b      	lsrs	r3, r5, #4
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	1818      	adds	r0, r3, r0
    4b70:	6120      	str	r0, [r4, #16]
    4b72:	e7d2      	b.n	4b1a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4b74:	2001      	movs	r0, #1
    4b76:	e7bf      	b.n	4af8 <dir_sdi+0x18>
				return FR_INT_ERR;
    4b78:	2002      	movs	r0, #2
    4b7a:	e7bd      	b.n	4af8 <dir_sdi+0x18>
    4b7c:	2002      	movs	r0, #2
    4b7e:	e7bb      	b.n	4af8 <dir_sdi+0x18>
    4b80:	000049e5 	.word	0x000049e5
    4b84:	00004655 	.word	0x00004655

00004b88 <dir_next>:
{
    4b88:	b570      	push	{r4, r5, r6, lr}
    4b8a:	0005      	movs	r5, r0
	i = dj->index + 1;
    4b8c:	88c4      	ldrh	r4, [r0, #6]
    4b8e:	3401      	adds	r4, #1
    4b90:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4b92:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4b94:	2c00      	cmp	r4, #0
    4b96:	d100      	bne.n	4b9a <dir_next+0x12>
}
    4b98:	bd70      	pop	{r4, r5, r6, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4b9a:	692b      	ldr	r3, [r5, #16]
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d0fb      	beq.n	4b98 <dir_next+0x10>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4ba0:	260f      	movs	r6, #15
    4ba2:	4026      	ands	r6, r4
    4ba4:	d10f      	bne.n	4bc6 <dir_next+0x3e>
		dj->sect++;					/* Next sector */
    4ba6:	3301      	adds	r3, #1
    4ba8:	612b      	str	r3, [r5, #16]
		if (dj->clust == 0) {	/* Static table */
    4baa:	68e9      	ldr	r1, [r5, #12]
    4bac:	2900      	cmp	r1, #0
    4bae:	d104      	bne.n	4bba <dir_next+0x32>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4bb0:	682b      	ldr	r3, [r5, #0]
    4bb2:	891b      	ldrh	r3, [r3, #8]
    4bb4:	42a3      	cmp	r3, r4
    4bb6:	d9ef      	bls.n	4b98 <dir_next+0x10>
    4bb8:	e005      	b.n	4bc6 <dir_next+0x3e>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4bba:	6828      	ldr	r0, [r5, #0]
    4bbc:	7883      	ldrb	r3, [r0, #2]
    4bbe:	3b01      	subs	r3, #1
    4bc0:	0922      	lsrs	r2, r4, #4
    4bc2:	421a      	tst	r2, r3
    4bc4:	d007      	beq.n	4bd6 <dir_next+0x4e>
	dj->index = i;
    4bc6:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4bc8:	682b      	ldr	r3, [r5, #0]
    4bca:	3324      	adds	r3, #36	; 0x24
    4bcc:	0176      	lsls	r6, r6, #5
    4bce:	199e      	adds	r6, r3, r6
    4bd0:	616e      	str	r6, [r5, #20]
	return FR_OK;
    4bd2:	2000      	movs	r0, #0
    4bd4:	e7e0      	b.n	4b98 <dir_next+0x10>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4bd6:	4b0a      	ldr	r3, [pc, #40]	; (4c00 <dir_next+0x78>)
    4bd8:	4798      	blx	r3
    4bda:	0001      	movs	r1, r0
				if (clst <= 1) return FR_INT_ERR;
    4bdc:	2002      	movs	r0, #2
    4bde:	2901      	cmp	r1, #1
    4be0:	d9da      	bls.n	4b98 <dir_next+0x10>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4be2:	1c4b      	adds	r3, r1, #1
    4be4:	d00a      	beq.n	4bfc <dir_next+0x74>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4be6:	682b      	ldr	r3, [r5, #0]
					return FR_NO_FILE;			/* Report EOT */
    4be8:	3002      	adds	r0, #2
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4bea:	68da      	ldr	r2, [r3, #12]
    4bec:	4291      	cmp	r1, r2
    4bee:	d2d3      	bcs.n	4b98 <dir_next+0x10>
				dj->clust = clst;				/* Initialize data for new cluster */
    4bf0:	60e9      	str	r1, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4bf2:	0018      	movs	r0, r3
    4bf4:	4b03      	ldr	r3, [pc, #12]	; (4c04 <dir_next+0x7c>)
    4bf6:	4798      	blx	r3
    4bf8:	6128      	str	r0, [r5, #16]
    4bfa:	e7e4      	b.n	4bc6 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4bfc:	2001      	movs	r0, #1
    4bfe:	e7cb      	b.n	4b98 <dir_next+0x10>
    4c00:	000049e5 	.word	0x000049e5
    4c04:	00004655 	.word	0x00004655

00004c08 <follow_path>:
{
    4c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c0a:	46de      	mov	lr, fp
    4c0c:	4657      	mov	r7, sl
    4c0e:	464e      	mov	r6, r9
    4c10:	4645      	mov	r5, r8
    4c12:	b5e0      	push	{r5, r6, r7, lr}
    4c14:	b083      	sub	sp, #12
    4c16:	0004      	movs	r4, r0
    4c18:	000e      	movs	r6, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4c1a:	780b      	ldrb	r3, [r1, #0]
    4c1c:	2b2f      	cmp	r3, #47	; 0x2f
    4c1e:	d00d      	beq.n	4c3c <follow_path+0x34>
    4c20:	2b5c      	cmp	r3, #92	; 0x5c
    4c22:	d00b      	beq.n	4c3c <follow_path+0x34>
	dj->sclust = 0;						/* Start from the root dir */
    4c24:	2300      	movs	r3, #0
    4c26:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4c28:	7833      	ldrb	r3, [r6, #0]
    4c2a:	2b1f      	cmp	r3, #31
    4c2c:	d809      	bhi.n	4c42 <follow_path+0x3a>
		res = dir_sdi(dj, 0);
    4c2e:	2100      	movs	r1, #0
    4c30:	0020      	movs	r0, r4
    4c32:	4bb6      	ldr	r3, [pc, #728]	; (4f0c <follow_path+0x304>)
    4c34:	4798      	blx	r3
		dj->dir = 0;
    4c36:	2300      	movs	r3, #0
    4c38:	6163      	str	r3, [r4, #20]
    4c3a:	e20f      	b.n	505c <follow_path+0x454>
		path++;
    4c3c:	3601      	adds	r6, #1
    4c3e:	e7f1      	b.n	4c24 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4c40:	3601      	adds	r6, #1
    4c42:	7830      	ldrb	r0, [r6, #0]
    4c44:	282f      	cmp	r0, #47	; 0x2f
    4c46:	d0fb      	beq.n	4c40 <follow_path+0x38>
    4c48:	285c      	cmp	r0, #92	; 0x5c
    4c4a:	d0f9      	beq.n	4c40 <follow_path+0x38>
	lfn = dj->lfn;
    4c4c:	69e3      	ldr	r3, [r4, #28]
    4c4e:	469b      	mov	fp, r3
		w = p[si++];					/* Get a character */
    4c50:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4c52:	281f      	cmp	r0, #31
    4c54:	d800      	bhi.n	4c58 <follow_path+0x50>
    4c56:	e1e5      	b.n	5024 <follow_path+0x41c>
    4c58:	282f      	cmp	r0, #47	; 0x2f
    4c5a:	d100      	bne.n	4c5e <follow_path+0x56>
    4c5c:	e1e5      	b.n	502a <follow_path+0x422>
    4c5e:	285c      	cmp	r0, #92	; 0x5c
    4c60:	d100      	bne.n	4c64 <follow_path+0x5c>
    4c62:	e1e5      	b.n	5030 <follow_path+0x428>
    4c64:	1c77      	adds	r7, r6, #1
    4c66:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4c68:	4ba9      	ldr	r3, [pc, #676]	; (4f10 <follow_path+0x308>)
    4c6a:	4699      	mov	r9, r3
		if (di >= _MAX_LFN)				/* Reject too long name */
    4c6c:	2380      	movs	r3, #128	; 0x80
    4c6e:	005b      	lsls	r3, r3, #1
    4c70:	469a      	mov	sl, r3
    4c72:	0023      	movs	r3, r4
    4c74:	465c      	mov	r4, fp
    4c76:	9600      	str	r6, [sp, #0]
    4c78:	4698      	mov	r8, r3
    4c7a:	e011      	b.n	4ca0 <follow_path+0x98>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d133      	bne.n	4ce8 <follow_path+0xe0>
		lfn[di++] = w;					/* Store the Unicode char */
    4c80:	8020      	strh	r0, [r4, #0]
		w = p[si++];					/* Get a character */
    4c82:	1c6b      	adds	r3, r5, #1
    4c84:	7838      	ldrb	r0, [r7, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4c86:	281f      	cmp	r0, #31
    4c88:	d91d      	bls.n	4cc6 <follow_path+0xbe>
    4c8a:	282f      	cmp	r0, #47	; 0x2f
    4c8c:	d100      	bne.n	4c90 <follow_path+0x88>
    4c8e:	e1d2      	b.n	5036 <follow_path+0x42e>
    4c90:	285c      	cmp	r0, #92	; 0x5c
    4c92:	d100      	bne.n	4c96 <follow_path+0x8e>
    4c94:	e1db      	b.n	504e <follow_path+0x446>
    4c96:	3402      	adds	r4, #2
    4c98:	3701      	adds	r7, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4c9a:	4553      	cmp	r3, sl
    4c9c:	d024      	beq.n	4ce8 <follow_path+0xe0>
		w = p[si++];					/* Get a character */
    4c9e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4ca0:	2101      	movs	r1, #1
    4ca2:	47c8      	blx	r9
    4ca4:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4ca6:	d01f      	beq.n	4ce8 <follow_path+0xe0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4ca8:	287f      	cmp	r0, #127	; 0x7f
    4caa:	d8e9      	bhi.n	4c80 <follow_path+0x78>
	while (*str && *str != chr) str++;
    4cac:	2822      	cmp	r0, #34	; 0x22
    4cae:	d100      	bne.n	4cb2 <follow_path+0xaa>
    4cb0:	e0ef      	b.n	4e92 <follow_path+0x28a>
    4cb2:	232a      	movs	r3, #42	; 0x2a
    4cb4:	4a97      	ldr	r2, [pc, #604]	; (4f14 <follow_path+0x30c>)
    4cb6:	b29e      	uxth	r6, r3
    4cb8:	428e      	cmp	r6, r1
    4cba:	d0df      	beq.n	4c7c <follow_path+0x74>
    4cbc:	3201      	adds	r2, #1
    4cbe:	7813      	ldrb	r3, [r2, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d1f8      	bne.n	4cb6 <follow_path+0xae>
    4cc4:	e7dc      	b.n	4c80 <follow_path+0x78>
    4cc6:	4644      	mov	r4, r8
    4cc8:	9e00      	ldr	r6, [sp, #0]
	*path = &p[si];						/* Return pointer to the next segment */
    4cca:	18f6      	adds	r6, r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4ccc:	2704      	movs	r7, #4
    4cce:	e1b6      	b.n	503e <follow_path+0x436>
		di--;
    4cd0:	3d01      	subs	r5, #1
    4cd2:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4cd4:	2d00      	cmp	r5, #0
    4cd6:	d100      	bne.n	4cda <follow_path+0xd2>
    4cd8:	e0db      	b.n	4e92 <follow_path+0x28a>
		w = lfn[di-1];
    4cda:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4cdc:	2a20      	cmp	r2, #32
    4cde:	d0f7      	beq.n	4cd0 <follow_path+0xc8>
    4ce0:	2a2e      	cmp	r2, #46	; 0x2e
    4ce2:	d0f5      	beq.n	4cd0 <follow_path+0xc8>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4ce4:	2d00      	cmp	r5, #0
    4ce6:	d101      	bne.n	4cec <follow_path+0xe4>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4ce8:	2006      	movs	r0, #6
    4cea:	e1b7      	b.n	505c <follow_path+0x454>
	lfn[di] = 0;						/* LFN is created */
    4cec:	0068      	lsls	r0, r5, #1
    4cee:	2300      	movs	r3, #0
    4cf0:	465a      	mov	r2, fp
    4cf2:	5213      	strh	r3, [r2, r0]
	mem_set(dj->fn, ' ', 11);
    4cf4:	69a3      	ldr	r3, [r4, #24]
    4cf6:	0019      	movs	r1, r3
    4cf8:	310b      	adds	r1, #11
		*d++ = (BYTE)val;
    4cfa:	2220      	movs	r2, #32
    4cfc:	701a      	strb	r2, [r3, #0]
    4cfe:	3301      	adds	r3, #1
	while (cnt--)
    4d00:	4299      	cmp	r1, r3
    4d02:	d1fb      	bne.n	4cfc <follow_path+0xf4>
    4d04:	465a      	mov	r2, fp
    4d06:	2300      	movs	r3, #0
    4d08:	e001      	b.n	4d0e <follow_path+0x106>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4d0a:	3301      	adds	r3, #1
    4d0c:	3202      	adds	r2, #2
    4d0e:	8811      	ldrh	r1, [r2, #0]
    4d10:	2920      	cmp	r1, #32
    4d12:	d0fa      	beq.n	4d0a <follow_path+0x102>
    4d14:	292e      	cmp	r1, #46	; 0x2e
    4d16:	d0f8      	beq.n	4d0a <follow_path+0x102>
	if (si) cf |= NS_LOSS | NS_LFN;
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d001      	beq.n	4d20 <follow_path+0x118>
    4d1c:	2203      	movs	r2, #3
    4d1e:	4317      	orrs	r7, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4d20:	465a      	mov	r2, fp
    4d22:	1812      	adds	r2, r2, r0
    4d24:	3a02      	subs	r2, #2
    4d26:	8812      	ldrh	r2, [r2, #0]
    4d28:	2a2e      	cmp	r2, #46	; 0x2e
    4d2a:	d008      	beq.n	4d3e <follow_path+0x136>
    4d2c:	1f02      	subs	r2, r0, #4
    4d2e:	445a      	add	r2, fp
    4d30:	3d01      	subs	r5, #1
    4d32:	2d00      	cmp	r5, #0
    4d34:	d003      	beq.n	4d3e <follow_path+0x136>
    4d36:	3a02      	subs	r2, #2
    4d38:	8851      	ldrh	r1, [r2, #2]
    4d3a:	292e      	cmp	r1, #46	; 0x2e
    4d3c:	d1f8      	bne.n	4d30 <follow_path+0x128>
		dj->fn[i++] = (BYTE)w;
    4d3e:	2208      	movs	r2, #8
    4d40:	4691      	mov	r9, r2
    4d42:	2200      	movs	r2, #0
    4d44:	4692      	mov	sl, r2
    4d46:	9200      	str	r2, [sp, #0]
    4d48:	46a8      	mov	r8, r5
    4d4a:	e005      	b.n	4d58 <follow_path+0x150>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4d4c:	4545      	cmp	r5, r8
    4d4e:	d00d      	beq.n	4d6c <follow_path+0x164>
			cf |= NS_LOSS | NS_LFN; continue;
    4d50:	2303      	movs	r3, #3
    4d52:	431f      	orrs	r7, r3
    4d54:	b2ff      	uxtb	r7, r7
		w = lfn[si++];					/* Get an LFN char */
    4d56:	002b      	movs	r3, r5
    4d58:	1c5d      	adds	r5, r3, #1
    4d5a:	005b      	lsls	r3, r3, #1
    4d5c:	465a      	mov	r2, fp
    4d5e:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4d60:	2800      	cmp	r0, #0
    4d62:	d02b      	beq.n	4dbc <follow_path+0x1b4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4d64:	2820      	cmp	r0, #32
    4d66:	d0f3      	beq.n	4d50 <follow_path+0x148>
    4d68:	282e      	cmp	r0, #46	; 0x2e
    4d6a:	d0ef      	beq.n	4d4c <follow_path+0x144>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4d6c:	45ca      	cmp	sl, r9
    4d6e:	d219      	bcs.n	4da4 <follow_path+0x19c>
    4d70:	4545      	cmp	r5, r8
    4d72:	d100      	bne.n	4d76 <follow_path+0x16e>
    4d74:	e17b      	b.n	506e <follow_path+0x466>
		if (w >= 0x80) {				/* Non ASCII char */
    4d76:	287f      	cmp	r0, #127	; 0x7f
    4d78:	d853      	bhi.n	4e22 <follow_path+0x21a>
	while (*str && *str != chr) str++;
    4d7a:	282b      	cmp	r0, #43	; 0x2b
    4d7c:	d063      	beq.n	4e46 <follow_path+0x23e>
    4d7e:	232c      	movs	r3, #44	; 0x2c
    4d80:	4a65      	ldr	r2, [pc, #404]	; (4f18 <follow_path+0x310>)
    4d82:	b299      	uxth	r1, r3
    4d84:	4281      	cmp	r1, r0
    4d86:	d05c      	beq.n	4e42 <follow_path+0x23a>
    4d88:	3201      	adds	r2, #1
    4d8a:	7813      	ldrb	r3, [r2, #0]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d1f8      	bne.n	4d82 <follow_path+0x17a>
				if (IsUpper(w)) {		/* ASCII large capital */
    4d90:	0003      	movs	r3, r0
    4d92:	3b41      	subs	r3, #65	; 0x41
    4d94:	b29b      	uxth	r3, r3
    4d96:	2b19      	cmp	r3, #25
    4d98:	d861      	bhi.n	4e5e <follow_path+0x256>
					b |= 2;
    4d9a:	2302      	movs	r3, #2
    4d9c:	9a00      	ldr	r2, [sp, #0]
    4d9e:	431a      	orrs	r2, r3
    4da0:	9200      	str	r2, [sp, #0]
    4da2:	e054      	b.n	4e4e <follow_path+0x246>
			if (ni == 11) {				/* Long extension */
    4da4:	464b      	mov	r3, r9
    4da6:	2b0b      	cmp	r3, #11
    4da8:	d030      	beq.n	4e0c <follow_path+0x204>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4daa:	4545      	cmp	r5, r8
    4dac:	d100      	bne.n	4db0 <follow_path+0x1a8>
    4dae:	e162      	b.n	5076 <follow_path+0x46e>
    4db0:	2303      	movs	r3, #3
    4db2:	431f      	orrs	r7, r3
    4db4:	b2ff      	uxtb	r7, r7
			if (si > di) break;			/* No extension */
    4db6:	4545      	cmp	r5, r8
    4db8:	d800      	bhi.n	4dbc <follow_path+0x1b4>
    4dba:	e15c      	b.n	5076 <follow_path+0x46e>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4dbc:	69a3      	ldr	r3, [r4, #24]
    4dbe:	781a      	ldrb	r2, [r3, #0]
    4dc0:	2ae5      	cmp	r2, #229	; 0xe5
    4dc2:	d02b      	beq.n	4e1c <follow_path+0x214>
	if (ni == 8) b <<= 2;
    4dc4:	464b      	mov	r3, r9
    4dc6:	2b08      	cmp	r3, #8
    4dc8:	d055      	beq.n	4e76 <follow_path+0x26e>
    4dca:	230c      	movs	r3, #12
    4dcc:	9a00      	ldr	r2, [sp, #0]
    4dce:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4dd0:	2b0c      	cmp	r3, #12
    4dd2:	d055      	beq.n	4e80 <follow_path+0x278>
    4dd4:	43d2      	mvns	r2, r2
    4dd6:	0792      	lsls	r2, r2, #30
    4dd8:	d052      	beq.n	4e80 <follow_path+0x278>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4dda:	07ba      	lsls	r2, r7, #30
    4ddc:	d406      	bmi.n	4dec <follow_path+0x1e4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4dde:	2203      	movs	r2, #3
    4de0:	9900      	ldr	r1, [sp, #0]
    4de2:	400a      	ands	r2, r1
    4de4:	2a01      	cmp	r2, #1
    4de6:	d04e      	beq.n	4e86 <follow_path+0x27e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4de8:	2b04      	cmp	r3, #4
    4dea:	d04f      	beq.n	4e8c <follow_path+0x284>
	dj->fn[NS] = cf;	/* SFN is created */
    4dec:	69a3      	ldr	r3, [r4, #24]
    4dee:	72df      	strb	r7, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4df0:	2100      	movs	r1, #0
    4df2:	0020      	movs	r0, r4
    4df4:	4b45      	ldr	r3, [pc, #276]	; (4f0c <follow_path+0x304>)
    4df6:	4798      	blx	r3
	if (res != FR_OK) return res;
    4df8:	2800      	cmp	r0, #0
    4dfa:	d000      	beq.n	4dfe <follow_path+0x1f6>
    4dfc:	e12a      	b.n	5054 <follow_path+0x44c>
    4dfe:	23ff      	movs	r3, #255	; 0xff
    4e00:	4699      	mov	r9, r3
    4e02:	25ff      	movs	r5, #255	; 0xff
		res = move_window(dj->fs, dj->sect);
    4e04:	4b45      	ldr	r3, [pc, #276]	; (4f1c <follow_path+0x314>)
    4e06:	4698      	mov	r8, r3
    4e08:	46b3      	mov	fp, r6
    4e0a:	e067      	b.n	4edc <follow_path+0x2d4>
				cf |= NS_LOSS | NS_LFN; break;
    4e0c:	2303      	movs	r3, #3
    4e0e:	431f      	orrs	r7, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4e10:	69a3      	ldr	r3, [r4, #24]
    4e12:	781a      	ldrb	r2, [r3, #0]
    4e14:	2ae5      	cmp	r2, #229	; 0xe5
    4e16:	d1d8      	bne.n	4dca <follow_path+0x1c2>
    4e18:	220b      	movs	r2, #11
    4e1a:	4691      	mov	r9, r2
    4e1c:	2205      	movs	r2, #5
    4e1e:	701a      	strb	r2, [r3, #0]
    4e20:	e7d0      	b.n	4dc4 <follow_path+0x1bc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4e22:	2100      	movs	r1, #0
    4e24:	4b3a      	ldr	r3, [pc, #232]	; (4f10 <follow_path+0x308>)
    4e26:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4e28:	2800      	cmp	r0, #0
    4e2a:	d100      	bne.n	4e2e <follow_path+0x226>
    4e2c:	e12d      	b.n	508a <follow_path+0x482>
    4e2e:	4b3c      	ldr	r3, [pc, #240]	; (4f20 <follow_path+0x318>)
    4e30:	469c      	mov	ip, r3
    4e32:	4460      	add	r0, ip
    4e34:	3880      	subs	r0, #128	; 0x80
    4e36:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4e38:	2302      	movs	r3, #2
    4e3a:	431f      	orrs	r7, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d002      	beq.n	4e46 <follow_path+0x23e>
    4e40:	e79b      	b.n	4d7a <follow_path+0x172>
    4e42:	2b00      	cmp	r3, #0
    4e44:	d0a4      	beq.n	4d90 <follow_path+0x188>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4e46:	2303      	movs	r3, #3
    4e48:	431f      	orrs	r7, r3
    4e4a:	b2ff      	uxtb	r7, r7
    4e4c:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4e4e:	69a3      	ldr	r3, [r4, #24]
    4e50:	4652      	mov	r2, sl
    4e52:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4e54:	002b      	movs	r3, r5
		dj->fn[i++] = (BYTE)w;
    4e56:	2201      	movs	r2, #1
    4e58:	4694      	mov	ip, r2
    4e5a:	44e2      	add	sl, ip
    4e5c:	e77c      	b.n	4d58 <follow_path+0x150>
					if (IsLower(w)) {	/* ASCII small capital */
    4e5e:	0003      	movs	r3, r0
    4e60:	3b61      	subs	r3, #97	; 0x61
    4e62:	b29b      	uxth	r3, r3
    4e64:	2b19      	cmp	r3, #25
    4e66:	d8f2      	bhi.n	4e4e <follow_path+0x246>
						b |= 1; w -= 0x20;
    4e68:	2301      	movs	r3, #1
    4e6a:	9a00      	ldr	r2, [sp, #0]
    4e6c:	431a      	orrs	r2, r3
    4e6e:	9200      	str	r2, [sp, #0]
    4e70:	3820      	subs	r0, #32
    4e72:	b280      	uxth	r0, r0
    4e74:	e7eb      	b.n	4e4e <follow_path+0x246>
	if (ni == 8) b <<= 2;
    4e76:	9b00      	ldr	r3, [sp, #0]
    4e78:	009b      	lsls	r3, r3, #2
    4e7a:	b2db      	uxtb	r3, r3
    4e7c:	9300      	str	r3, [sp, #0]
    4e7e:	e7a4      	b.n	4dca <follow_path+0x1c2>
		cf |= NS_LFN;
    4e80:	2202      	movs	r2, #2
    4e82:	4317      	orrs	r7, r2
    4e84:	e7a9      	b.n	4dda <follow_path+0x1d2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4e86:	320f      	adds	r2, #15
    4e88:	4317      	orrs	r7, r2
    4e8a:	e7ad      	b.n	4de8 <follow_path+0x1e0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4e8c:	3304      	adds	r3, #4
    4e8e:	431f      	orrs	r7, r3
    4e90:	e7ac      	b.n	4dec <follow_path+0x1e4>
    4e92:	2006      	movs	r0, #6
    4e94:	e0e2      	b.n	505c <follow_path+0x454>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4e96:	2b0f      	cmp	r3, #15
    4e98:	d046      	beq.n	4f28 <follow_path+0x320>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4e9a:	2d00      	cmp	r5, #0
    4e9c:	d10e      	bne.n	4ebc <follow_path+0x2b4>
    4e9e:	003a      	movs	r2, r7
    4ea0:	0039      	movs	r1, r7
    4ea2:	310b      	adds	r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    4ea4:	086b      	lsrs	r3, r5, #1
    4ea6:	01ed      	lsls	r5, r5, #7
    4ea8:	431d      	orrs	r5, r3
    4eaa:	7813      	ldrb	r3, [r2, #0]
    4eac:	18ed      	adds	r5, r5, r3
    4eae:	b2ed      	uxtb	r5, r5
    4eb0:	3201      	adds	r2, #1
    4eb2:	428a      	cmp	r2, r1
    4eb4:	d1f6      	bne.n	4ea4 <follow_path+0x29c>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4eb6:	45a9      	cmp	r9, r5
    4eb8:	d100      	bne.n	4ebc <follow_path+0x2b4>
    4eba:	e0d6      	b.n	506a <follow_path+0x462>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4ebc:	2301      	movs	r3, #1
    4ebe:	425b      	negs	r3, r3
    4ec0:	8423      	strh	r3, [r4, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4ec2:	69a5      	ldr	r5, [r4, #24]
    4ec4:	7aeb      	ldrb	r3, [r5, #11]
    4ec6:	07db      	lsls	r3, r3, #31
    4ec8:	d400      	bmi.n	4ecc <follow_path+0x2c4>
    4eca:	e081      	b.n	4fd0 <follow_path+0x3c8>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4ecc:	25ff      	movs	r5, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
    4ece:	2100      	movs	r1, #0
    4ed0:	0020      	movs	r0, r4
    4ed2:	4b14      	ldr	r3, [pc, #80]	; (4f24 <follow_path+0x31c>)
    4ed4:	4798      	blx	r3
	} while (res == FR_OK);
    4ed6:	2800      	cmp	r0, #0
    4ed8:	d000      	beq.n	4edc <follow_path+0x2d4>
    4eda:	e0bb      	b.n	5054 <follow_path+0x44c>
		res = move_window(dj->fs, dj->sect);
    4edc:	6921      	ldr	r1, [r4, #16]
    4ede:	6820      	ldr	r0, [r4, #0]
    4ee0:	47c0      	blx	r8
		if (res != FR_OK) break;
    4ee2:	2800      	cmp	r0, #0
    4ee4:	d000      	beq.n	4ee8 <follow_path+0x2e0>
    4ee6:	e0b5      	b.n	5054 <follow_path+0x44c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4ee8:	6967      	ldr	r7, [r4, #20]
		c = dir[DIR_Name];
    4eea:	783a      	ldrb	r2, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4eec:	2a00      	cmp	r2, #0
    4eee:	d100      	bne.n	4ef2 <follow_path+0x2ea>
    4ef0:	e08e      	b.n	5010 <follow_path+0x408>
		a = dir[DIR_Attr] & AM_MASK;
    4ef2:	7af9      	ldrb	r1, [r7, #11]
    4ef4:	233f      	movs	r3, #63	; 0x3f
    4ef6:	400b      	ands	r3, r1
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4ef8:	2ae5      	cmp	r2, #229	; 0xe5
    4efa:	d100      	bne.n	4efe <follow_path+0x2f6>
    4efc:	e086      	b.n	500c <follow_path+0x404>
    4efe:	0709      	lsls	r1, r1, #28
    4f00:	d5c9      	bpl.n	4e96 <follow_path+0x28e>
    4f02:	2b0f      	cmp	r3, #15
    4f04:	d010      	beq.n	4f28 <follow_path+0x320>
			ord = 0xFF;
    4f06:	25ff      	movs	r5, #255	; 0xff
    4f08:	e7e1      	b.n	4ece <follow_path+0x2c6>
    4f0a:	46c0      	nop			; (mov r8, r8)
    4f0c:	00004ae1 	.word	0x00004ae1
    4f10:	000054b1 	.word	0x000054b1
    4f14:	00006201 	.word	0x00006201
    4f18:	0000620d 	.word	0x0000620d
    4f1c:	000049ad 	.word	0x000049ad
    4f20:	00006180 	.word	0x00006180
    4f24:	00004b89 	.word	0x00004b89
				if (dj->lfn) {
    4f28:	69e6      	ldr	r6, [r4, #28]
    4f2a:	2e00      	cmp	r6, #0
    4f2c:	d0cf      	beq.n	4ece <follow_path+0x2c6>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4f2e:	0653      	lsls	r3, r2, #25
    4f30:	d50b      	bpl.n	4f4a <follow_path+0x342>
						sum = dir[LDIR_Chksum];
    4f32:	7b7b      	ldrb	r3, [r7, #13]
    4f34:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4f36:	2340      	movs	r3, #64	; 0x40
    4f38:	439a      	bics	r2, r3
    4f3a:	0015      	movs	r5, r2
						dj->lfn_idx = dj->index;
    4f3c:	88e3      	ldrh	r3, [r4, #6]
    4f3e:	8423      	strh	r3, [r4, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4f40:	7b7b      	ldrb	r3, [r7, #13]
    4f42:	454b      	cmp	r3, r9
    4f44:	d005      	beq.n	4f52 <follow_path+0x34a>
    4f46:	25ff      	movs	r5, #255	; 0xff
    4f48:	e7c1      	b.n	4ece <follow_path+0x2c6>
    4f4a:	42aa      	cmp	r2, r5
    4f4c:	d0f8      	beq.n	4f40 <follow_path+0x338>
    4f4e:	25ff      	movs	r5, #255	; 0xff
    4f50:	e7bd      	b.n	4ece <follow_path+0x2c6>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4f52:	783b      	ldrb	r3, [r7, #0]
    4f54:	2240      	movs	r2, #64	; 0x40
    4f56:	4393      	bics	r3, r2
    4f58:	3b01      	subs	r3, #1
    4f5a:	005a      	lsls	r2, r3, #1
    4f5c:	18d2      	adds	r2, r2, r3
    4f5e:	0092      	lsls	r2, r2, #2
    4f60:	18d3      	adds	r3, r2, r3
    4f62:	9300      	str	r3, [sp, #0]
	s = 0; wc = 1;
    4f64:	2201      	movs	r2, #1
    4f66:	2300      	movs	r3, #0
    4f68:	469a      	mov	sl, r3
    4f6a:	e015      	b.n	4f98 <follow_path+0x390>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4f6c:	4b48      	ldr	r3, [pc, #288]	; (5090 <follow_path+0x488>)
    4f6e:	4798      	blx	r3
    4f70:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4f72:	9b00      	ldr	r3, [sp, #0]
    4f74:	2bfe      	cmp	r3, #254	; 0xfe
    4f76:	d81c      	bhi.n	4fb2 <follow_path+0x3aa>
    4f78:	1c5a      	adds	r2, r3, #1
    4f7a:	9200      	str	r2, [sp, #0]
    4f7c:	005b      	lsls	r3, r3, #1
    4f7e:	5b98      	ldrh	r0, [r3, r6]
    4f80:	4943      	ldr	r1, [pc, #268]	; (5090 <follow_path+0x488>)
    4f82:	4788      	blx	r1
    4f84:	0002      	movs	r2, r0
    4f86:	9901      	ldr	r1, [sp, #4]
    4f88:	4281      	cmp	r1, r0
    4f8a:	d112      	bne.n	4fb2 <follow_path+0x3aa>
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4f8c:	2301      	movs	r3, #1
    4f8e:	469c      	mov	ip, r3
    4f90:	44e2      	add	sl, ip
    4f92:	4653      	mov	r3, sl
    4f94:	2b0d      	cmp	r3, #13
    4f96:	d00e      	beq.n	4fb6 <follow_path+0x3ae>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4f98:	4b3e      	ldr	r3, [pc, #248]	; (5094 <follow_path+0x48c>)
    4f9a:	4651      	mov	r1, sl
    4f9c:	5cc9      	ldrb	r1, [r1, r3]
    4f9e:	187b      	adds	r3, r7, r1
    4fa0:	785b      	ldrb	r3, [r3, #1]
    4fa2:	021b      	lsls	r3, r3, #8
    4fa4:	5c78      	ldrb	r0, [r7, r1]
    4fa6:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4fa8:	2a00      	cmp	r2, #0
    4faa:	d1df      	bne.n	4f6c <follow_path+0x364>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4fac:	4b3a      	ldr	r3, [pc, #232]	; (5098 <follow_path+0x490>)
    4fae:	4298      	cmp	r0, r3
    4fb0:	d0ec      	beq.n	4f8c <follow_path+0x384>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4fb2:	25ff      	movs	r5, #255	; 0xff
    4fb4:	e78b      	b.n	4ece <follow_path+0x2c6>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4fb6:	783b      	ldrb	r3, [r7, #0]
    4fb8:	065b      	lsls	r3, r3, #25
    4fba:	d506      	bpl.n	4fca <follow_path+0x3c2>
    4fbc:	2a00      	cmp	r2, #0
    4fbe:	d004      	beq.n	4fca <follow_path+0x3c2>
    4fc0:	9b00      	ldr	r3, [sp, #0]
    4fc2:	005b      	lsls	r3, r3, #1
    4fc4:	5b9b      	ldrh	r3, [r3, r6]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d1f3      	bne.n	4fb2 <follow_path+0x3aa>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4fca:	3d01      	subs	r5, #1
    4fcc:	b2ed      	uxtb	r5, r5
    4fce:	e77e      	b.n	4ece <follow_path+0x2c6>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4fd0:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4fd2:	5cf9      	ldrb	r1, [r7, r3]
    4fd4:	5cea      	ldrb	r2, [r5, r3]
    4fd6:	4291      	cmp	r1, r2
    4fd8:	d116      	bne.n	5008 <follow_path+0x400>
    4fda:	3301      	adds	r3, #1
    4fdc:	2b0b      	cmp	r3, #11
    4fde:	d1f8      	bne.n	4fd2 <follow_path+0x3ca>
    4fe0:	465e      	mov	r6, fp
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4fe2:	69a3      	ldr	r3, [r4, #24]
    4fe4:	7adb      	ldrb	r3, [r3, #11]
    4fe6:	075b      	lsls	r3, r3, #29
    4fe8:	d438      	bmi.n	505c <follow_path+0x454>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4fea:	7afb      	ldrb	r3, [r7, #11]
    4fec:	06db      	lsls	r3, r3, #27
    4fee:	d517      	bpl.n	5020 <follow_path+0x418>
			dj->sclust = LD_CLUST(dir);
    4ff0:	7d7a      	ldrb	r2, [r7, #21]
    4ff2:	0212      	lsls	r2, r2, #8
    4ff4:	7d3b      	ldrb	r3, [r7, #20]
    4ff6:	4313      	orrs	r3, r2
    4ff8:	041b      	lsls	r3, r3, #16
    4ffa:	7ef9      	ldrb	r1, [r7, #27]
    4ffc:	0209      	lsls	r1, r1, #8
    4ffe:	7eba      	ldrb	r2, [r7, #26]
    5000:	430a      	orrs	r2, r1
    5002:	4313      	orrs	r3, r2
    5004:	60a3      	str	r3, [r4, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5006:	e61c      	b.n	4c42 <follow_path+0x3a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    5008:	25ff      	movs	r5, #255	; 0xff
    500a:	e760      	b.n	4ece <follow_path+0x2c6>
			ord = 0xFF;
    500c:	25ff      	movs	r5, #255	; 0xff
    500e:	e75e      	b.n	4ece <follow_path+0x2c6>
			ns = *(dj->fn+NS);
    5010:	69a3      	ldr	r3, [r4, #24]
    5012:	7adb      	ldrb	r3, [r3, #11]
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5014:	2004      	movs	r0, #4
    5016:	4003      	ands	r3, r0
			res = dir_find(dj);				/* Find it */
    5018:	4258      	negs	r0, r3
    501a:	4158      	adcs	r0, r3
    501c:	3004      	adds	r0, #4
    501e:	e01d      	b.n	505c <follow_path+0x454>
				res = FR_NO_PATH; break;
    5020:	2005      	movs	r0, #5
    5022:	e01b      	b.n	505c <follow_path+0x454>
		w = p[si++];					/* Get a character */
    5024:	2301      	movs	r3, #1
	si = di = 0;
    5026:	2500      	movs	r5, #0
    5028:	e64f      	b.n	4cca <follow_path+0xc2>
		w = p[si++];					/* Get a character */
    502a:	2301      	movs	r3, #1
	si = di = 0;
    502c:	2500      	movs	r5, #0
    502e:	e004      	b.n	503a <follow_path+0x432>
		w = p[si++];					/* Get a character */
    5030:	2301      	movs	r3, #1
	si = di = 0;
    5032:	2500      	movs	r5, #0
    5034:	e001      	b.n	503a <follow_path+0x432>
    5036:	4644      	mov	r4, r8
    5038:	9e00      	ldr	r6, [sp, #0]
	*path = &p[si];						/* Return pointer to the next segment */
    503a:	18f6      	adds	r6, r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    503c:	2700      	movs	r7, #0
	while (di) {						/* Strip trailing spaces and dots */
    503e:	2d00      	cmp	r5, #0
    5040:	d100      	bne.n	5044 <follow_path+0x43c>
    5042:	e726      	b.n	4e92 <follow_path+0x28a>
    5044:	4b15      	ldr	r3, [pc, #84]	; (509c <follow_path+0x494>)
    5046:	18eb      	adds	r3, r5, r3
    5048:	005b      	lsls	r3, r3, #1
    504a:	445b      	add	r3, fp
    504c:	e645      	b.n	4cda <follow_path+0xd2>
    504e:	4644      	mov	r4, r8
    5050:	9e00      	ldr	r6, [sp, #0]
    5052:	e7f2      	b.n	503a <follow_path+0x432>
			ns = *(dj->fn+NS);
    5054:	69a3      	ldr	r3, [r4, #24]
    5056:	7adb      	ldrb	r3, [r3, #11]
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5058:	2804      	cmp	r0, #4
    505a:	d0db      	beq.n	5014 <follow_path+0x40c>
}
    505c:	b003      	add	sp, #12
    505e:	bc3c      	pop	{r2, r3, r4, r5}
    5060:	4690      	mov	r8, r2
    5062:	4699      	mov	r9, r3
    5064:	46a2      	mov	sl, r4
    5066:	46ab      	mov	fp, r5
    5068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    506a:	465e      	mov	r6, fp
    506c:	e7b9      	b.n	4fe2 <follow_path+0x3da>
			if (ni == 11) {				/* Long extension */
    506e:	464b      	mov	r3, r9
    5070:	2b0b      	cmp	r3, #11
    5072:	d100      	bne.n	5076 <follow_path+0x46e>
    5074:	e6ca      	b.n	4e0c <follow_path+0x204>
			b <<= 2; continue;
    5076:	9b00      	ldr	r3, [sp, #0]
    5078:	009b      	lsls	r3, r3, #2
    507a:	b2db      	uxtb	r3, r3
    507c:	9300      	str	r3, [sp, #0]
    507e:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    5080:	220b      	movs	r2, #11
    5082:	4691      	mov	r9, r2
    5084:	3a03      	subs	r2, #3
    5086:	4692      	mov	sl, r2
    5088:	e666      	b.n	4d58 <follow_path+0x150>
			cf |= NS_LFN;				/* Force create LFN entry */
    508a:	2302      	movs	r3, #2
    508c:	431f      	orrs	r7, r3
    508e:	e6da      	b.n	4e46 <follow_path+0x23e>
    5090:	000054f9 	.word	0x000054f9
    5094:	00006170 	.word	0x00006170
    5098:	0000ffff 	.word	0x0000ffff
    509c:	7fffffff 	.word	0x7fffffff

000050a0 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    50a0:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    50a2:	2807      	cmp	r0, #7
    50a4:	d901      	bls.n	50aa <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    50a6:	0018      	movs	r0, r3
    50a8:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    50aa:	0083      	lsls	r3, r0, #2
    50ac:	4a07      	ldr	r2, [pc, #28]	; (50cc <f_mount+0x2c>)
    50ae:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    50b0:	2b00      	cmp	r3, #0
    50b2:	d001      	beq.n	50b8 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    50b4:	2200      	movs	r2, #0
    50b6:	701a      	strb	r2, [r3, #0]
	if (fs) {
    50b8:	2900      	cmp	r1, #0
    50ba:	d001      	beq.n	50c0 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    50bc:	2300      	movs	r3, #0
    50be:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    50c0:	0080      	lsls	r0, r0, #2
    50c2:	4b02      	ldr	r3, [pc, #8]	; (50cc <f_mount+0x2c>)
    50c4:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    50c6:	2300      	movs	r3, #0
    50c8:	e7ed      	b.n	50a6 <f_mount+0x6>
    50ca:	46c0      	nop			; (mov r8, r8)
    50cc:	200002a8 	.word	0x200002a8

000050d0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    50d0:	b530      	push	{r4, r5, lr}
    50d2:	4c23      	ldr	r4, [pc, #140]	; (5160 <f_open+0x90>)
    50d4:	44a5      	add	sp, r4
    50d6:	0004      	movs	r4, r0
    50d8:	9101      	str	r1, [sp, #4]
    50da:	0015      	movs	r5, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    50dc:	2300      	movs	r3, #0
    50de:	6003      	str	r3, [r0, #0]
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
    50e0:	2200      	movs	r2, #0
    50e2:	a985      	add	r1, sp, #532	; 0x214
    50e4:	a801      	add	r0, sp, #4
    50e6:	4b1f      	ldr	r3, [pc, #124]	; (5164 <f_open+0x94>)
    50e8:	4798      	blx	r3
#endif
	INIT_BUF(dj);
    50ea:	ab82      	add	r3, sp, #520	; 0x208
    50ec:	938b      	str	r3, [sp, #556]	; 0x22c
    50ee:	ab02      	add	r3, sp, #8
    50f0:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    50f2:	2800      	cmp	r0, #0
    50f4:	d003      	beq.n	50fe <f_open+0x2e>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
    50f6:	238f      	movs	r3, #143	; 0x8f
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	449d      	add	sp, r3
    50fc:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
    50fe:	9901      	ldr	r1, [sp, #4]
    5100:	a885      	add	r0, sp, #532	; 0x214
    5102:	4b19      	ldr	r3, [pc, #100]	; (5168 <f_open+0x98>)
    5104:	4798      	blx	r3
	dir = dj.dir;
    5106:	998a      	ldr	r1, [sp, #552]	; 0x228
	if (res == FR_OK) {					/* Follow succeeded */
    5108:	2800      	cmp	r0, #0
    510a:	d1f4      	bne.n	50f6 <f_open+0x26>
		if (!dir) {						/* Current dir itself */
    510c:	2900      	cmp	r1, #0
    510e:	d025      	beq.n	515c <f_open+0x8c>
			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
    5110:	7acb      	ldrb	r3, [r1, #11]
    5112:	06db      	lsls	r3, r3, #27
    5114:	d501      	bpl.n	511a <f_open+0x4a>
				res = FR_NO_FILE;
    5116:	2004      	movs	r0, #4
	LEAVE_FF(dj.fs, res);
    5118:	e7ed      	b.n	50f6 <f_open+0x26>
	mode &= FA_READ;
    511a:	2201      	movs	r2, #1
    511c:	402a      	ands	r2, r5
		fp->flag = mode;					/* File access mode */
    511e:	71a2      	strb	r2, [r4, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5120:	7d4a      	ldrb	r2, [r1, #21]
    5122:	0212      	lsls	r2, r2, #8
    5124:	7d0b      	ldrb	r3, [r1, #20]
    5126:	4313      	orrs	r3, r2
    5128:	041b      	lsls	r3, r3, #16
    512a:	7ecd      	ldrb	r5, [r1, #27]
    512c:	022d      	lsls	r5, r5, #8
    512e:	7e8a      	ldrb	r2, [r1, #26]
    5130:	432a      	orrs	r2, r5
    5132:	4313      	orrs	r3, r2
    5134:	6123      	str	r3, [r4, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    5136:	7fcb      	ldrb	r3, [r1, #31]
    5138:	061b      	lsls	r3, r3, #24
    513a:	7f8a      	ldrb	r2, [r1, #30]
    513c:	0412      	lsls	r2, r2, #16
    513e:	4313      	orrs	r3, r2
    5140:	7f0a      	ldrb	r2, [r1, #28]
    5142:	4313      	orrs	r3, r2
    5144:	7f4a      	ldrb	r2, [r1, #29]
    5146:	0212      	lsls	r2, r2, #8
    5148:	4313      	orrs	r3, r2
    514a:	60e3      	str	r3, [r4, #12]
		fp->fptr = 0;						/* File pointer */
    514c:	2300      	movs	r3, #0
    514e:	60a3      	str	r3, [r4, #8]
		fp->dsect = 0;
    5150:	61a3      	str	r3, [r4, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    5152:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5154:	6023      	str	r3, [r4, #0]
    5156:	88db      	ldrh	r3, [r3, #6]
    5158:	80a3      	strh	r3, [r4, #4]
    515a:	e7cc      	b.n	50f6 <f_open+0x26>
			res = FR_INVALID_NAME;
    515c:	2006      	movs	r0, #6
    515e:	e7ca      	b.n	50f6 <f_open+0x26>
    5160:	fffffdc4 	.word	0xfffffdc4
    5164:	00004741 	.word	0x00004741
    5168:	00004c09 	.word	0x00004c09

0000516c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    516c:	b5f0      	push	{r4, r5, r6, r7, lr}
    516e:	46de      	mov	lr, fp
    5170:	4657      	mov	r7, sl
    5172:	464e      	mov	r6, r9
    5174:	4645      	mov	r5, r8
    5176:	b5e0      	push	{r5, r6, r7, lr}
    5178:	b083      	sub	sp, #12
    517a:	0005      	movs	r5, r0
    517c:	000e      	movs	r6, r1
    517e:	0014      	movs	r4, r2
    5180:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    5182:	2300      	movs	r3, #0
    5184:	464a      	mov	r2, r9
    5186:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    5188:	8881      	ldrh	r1, [r0, #4]
    518a:	6800      	ldr	r0, [r0, #0]
    518c:	4b58      	ldr	r3, [pc, #352]	; (52f0 <f_read+0x184>)
    518e:	4798      	blx	r3
    5190:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5192:	2800      	cmp	r0, #0
    5194:	d000      	beq.n	5198 <f_read+0x2c>
    5196:	e0a2      	b.n	52de <f_read+0x172>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    5198:	79ab      	ldrb	r3, [r5, #6]
    519a:	b25a      	sxtb	r2, r3
    519c:	2a00      	cmp	r2, #0
    519e:	da00      	bge.n	51a2 <f_read+0x36>
    51a0:	e09b      	b.n	52da <f_read+0x16e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    51a2:	07db      	lsls	r3, r3, #31
    51a4:	d402      	bmi.n	51ac <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    51a6:	2307      	movs	r3, #7
    51a8:	9300      	str	r3, [sp, #0]
    51aa:	e098      	b.n	52de <f_read+0x172>
	remain = fp->fsize - fp->fptr;
    51ac:	68eb      	ldr	r3, [r5, #12]
    51ae:	68aa      	ldr	r2, [r5, #8]
    51b0:	1a9f      	subs	r7, r3, r2
    51b2:	42a7      	cmp	r7, r4
    51b4:	d900      	bls.n	51b8 <f_read+0x4c>
    51b6:	0027      	movs	r7, r4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    51b8:	2f00      	cmp	r7, #0
    51ba:	d14e      	bne.n	525a <f_read+0xee>
    51bc:	e08f      	b.n	52de <f_read+0x172>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    51be:	6969      	ldr	r1, [r5, #20]
    51c0:	4b4c      	ldr	r3, [pc, #304]	; (52f4 <f_read+0x188>)
    51c2:	4798      	blx	r3
    51c4:	e058      	b.n	5278 <f_read+0x10c>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    51c6:	79aa      	ldrb	r2, [r5, #6]
    51c8:	2380      	movs	r3, #128	; 0x80
    51ca:	425b      	negs	r3, r3
    51cc:	4313      	orrs	r3, r2
    51ce:	71ab      	strb	r3, [r5, #6]
    51d0:	2302      	movs	r3, #2
    51d2:	9300      	str	r3, [sp, #0]
    51d4:	e083      	b.n	52de <f_read+0x172>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    51d6:	79aa      	ldrb	r2, [r5, #6]
    51d8:	2380      	movs	r3, #128	; 0x80
    51da:	425b      	negs	r3, r3
    51dc:	4313      	orrs	r3, r2
    51de:	71ab      	strb	r3, [r5, #6]
    51e0:	2301      	movs	r3, #1
    51e2:	9300      	str	r3, [sp, #0]
    51e4:	e07b      	b.n	52de <f_read+0x172>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    51e6:	79aa      	ldrb	r2, [r5, #6]
    51e8:	2380      	movs	r3, #128	; 0x80
    51ea:	425b      	negs	r3, r3
    51ec:	4313      	orrs	r3, r2
    51ee:	71ab      	strb	r3, [r5, #6]
    51f0:	2302      	movs	r3, #2
    51f2:	9300      	str	r3, [sp, #0]
    51f4:	e073      	b.n	52de <f_read+0x172>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    51f6:	79aa      	ldrb	r2, [r5, #6]
    51f8:	2380      	movs	r3, #128	; 0x80
    51fa:	425b      	negs	r3, r3
    51fc:	4313      	orrs	r3, r2
    51fe:	71ab      	strb	r3, [r5, #6]
    5200:	2301      	movs	r3, #1
    5202:	9300      	str	r3, [sp, #0]
    5204:	e06b      	b.n	52de <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    5206:	61aa      	str	r2, [r5, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    5208:	68ab      	ldr	r3, [r5, #8]
    520a:	05dc      	lsls	r4, r3, #23
    520c:	0de4      	lsrs	r4, r4, #23
    520e:	2380      	movs	r3, #128	; 0x80
    5210:	009b      	lsls	r3, r3, #2
    5212:	1b1c      	subs	r4, r3, r4
    5214:	42bc      	cmp	r4, r7
    5216:	d900      	bls.n	521a <f_read+0xae>
    5218:	003c      	movs	r4, r7
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    521a:	69a9      	ldr	r1, [r5, #24]
    521c:	6828      	ldr	r0, [r5, #0]
    521e:	4b36      	ldr	r3, [pc, #216]	; (52f8 <f_read+0x18c>)
    5220:	4798      	blx	r3
    5222:	2800      	cmp	r0, #0
    5224:	d151      	bne.n	52ca <f_read+0x15e>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    5226:	68ab      	ldr	r3, [r5, #8]
    5228:	05d9      	lsls	r1, r3, #23
    522a:	0dc9      	lsrs	r1, r1, #23
    522c:	3124      	adds	r1, #36	; 0x24
    522e:	682b      	ldr	r3, [r5, #0]
    5230:	469c      	mov	ip, r3
    5232:	4461      	add	r1, ip
	while (cnt--)
    5234:	2c00      	cmp	r4, #0
    5236:	d005      	beq.n	5244 <f_read+0xd8>
    5238:	2300      	movs	r3, #0
		*d++ = *s++;
    523a:	5cca      	ldrb	r2, [r1, r3]
    523c:	54f2      	strb	r2, [r6, r3]
    523e:	3301      	adds	r3, #1
	while (cnt--)
    5240:	429c      	cmp	r4, r3
    5242:	d1fa      	bne.n	523a <f_read+0xce>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    5244:	1936      	adds	r6, r6, r4
    5246:	68ab      	ldr	r3, [r5, #8]
    5248:	191b      	adds	r3, r3, r4
    524a:	60ab      	str	r3, [r5, #8]
    524c:	464b      	mov	r3, r9
    524e:	681b      	ldr	r3, [r3, #0]
    5250:	191b      	adds	r3, r3, r4
    5252:	464a      	mov	r2, r9
    5254:	6013      	str	r3, [r2, #0]
    5256:	1b3f      	subs	r7, r7, r4
	for ( ;  btr;								/* Repeat until all data read */
    5258:	d041      	beq.n	52de <f_read+0x172>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    525a:	68ab      	ldr	r3, [r5, #8]
    525c:	05da      	lsls	r2, r3, #23
    525e:	d1d3      	bne.n	5208 <f_read+0x9c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    5260:	6828      	ldr	r0, [r5, #0]
    5262:	7881      	ldrb	r1, [r0, #2]
    5264:	3901      	subs	r1, #1
    5266:	0a5a      	lsrs	r2, r3, #9
    5268:	400a      	ands	r2, r1
    526a:	b2d2      	uxtb	r2, r2
    526c:	4692      	mov	sl, r2
			if (!csect) {						/* On the cluster boundary? */
    526e:	2a00      	cmp	r2, #0
    5270:	d107      	bne.n	5282 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
    5272:	2b00      	cmp	r3, #0
    5274:	d1a3      	bne.n	51be <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    5276:	6928      	ldr	r0, [r5, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    5278:	2801      	cmp	r0, #1
    527a:	d9a4      	bls.n	51c6 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    527c:	1c43      	adds	r3, r0, #1
    527e:	d0aa      	beq.n	51d6 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    5280:	6168      	str	r0, [r5, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5282:	682b      	ldr	r3, [r5, #0]
    5284:	469b      	mov	fp, r3
    5286:	6969      	ldr	r1, [r5, #20]
    5288:	0018      	movs	r0, r3
    528a:	4b1c      	ldr	r3, [pc, #112]	; (52fc <f_read+0x190>)
    528c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    528e:	2800      	cmp	r0, #0
    5290:	d0a9      	beq.n	51e6 <f_read+0x7a>
			sect += csect;
    5292:	0002      	movs	r2, r0
    5294:	4452      	add	r2, sl
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    5296:	0a7b      	lsrs	r3, r7, #9
    5298:	4698      	mov	r8, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    529a:	d0b4      	beq.n	5206 <f_read+0x9a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    529c:	465b      	mov	r3, fp
    529e:	789b      	ldrb	r3, [r3, #2]
    52a0:	4651      	mov	r1, sl
    52a2:	4441      	add	r1, r8
    52a4:	4299      	cmp	r1, r3
    52a6:	d902      	bls.n	52ae <f_read+0x142>
					cc = fp->fs->csize - csect;
    52a8:	4651      	mov	r1, sl
    52aa:	1a5b      	subs	r3, r3, r1
    52ac:	4698      	mov	r8, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    52ae:	4643      	mov	r3, r8
    52b0:	4669      	mov	r1, sp
    52b2:	71cb      	strb	r3, [r1, #7]
    52b4:	79cb      	ldrb	r3, [r1, #7]
    52b6:	4659      	mov	r1, fp
    52b8:	7848      	ldrb	r0, [r1, #1]
    52ba:	0031      	movs	r1, r6
    52bc:	4c10      	ldr	r4, [pc, #64]	; (5300 <f_read+0x194>)
    52be:	47a0      	blx	r4
    52c0:	2800      	cmp	r0, #0
    52c2:	d198      	bne.n	51f6 <f_read+0x8a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    52c4:	4643      	mov	r3, r8
    52c6:	025c      	lsls	r4, r3, #9
				continue;
    52c8:	e7bc      	b.n	5244 <f_read+0xd8>
			ABORT(fp->fs, FR_DISK_ERR);
    52ca:	79aa      	ldrb	r2, [r5, #6]
    52cc:	2380      	movs	r3, #128	; 0x80
    52ce:	425b      	negs	r3, r3
    52d0:	4313      	orrs	r3, r2
    52d2:	71ab      	strb	r3, [r5, #6]
    52d4:	2301      	movs	r3, #1
    52d6:	9300      	str	r3, [sp, #0]
    52d8:	e001      	b.n	52de <f_read+0x172>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    52da:	2302      	movs	r3, #2
    52dc:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    52de:	9800      	ldr	r0, [sp, #0]
    52e0:	b003      	add	sp, #12
    52e2:	bc3c      	pop	{r2, r3, r4, r5}
    52e4:	4690      	mov	r8, r2
    52e6:	4699      	mov	r9, r3
    52e8:	46a2      	mov	sl, r4
    52ea:	46ab      	mov	fp, r5
    52ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	0000466d 	.word	0x0000466d
    52f4:	000049e5 	.word	0x000049e5
    52f8:	000049ad 	.word	0x000049ad
    52fc:	00004655 	.word	0x00004655
    5300:	000045d1 	.word	0x000045d1

00005304 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5304:	b510      	push	{r4, lr}
    5306:	0004      	movs	r4, r0
	FRESULT res;

#if _FS_READONLY
	FATFS *fs = fp->fs;
	res = validate(fs, fp->id);
    5308:	8881      	ldrh	r1, [r0, #4]
    530a:	6800      	ldr	r0, [r0, #0]
    530c:	4b03      	ldr	r3, [pc, #12]	; (531c <f_close+0x18>)
    530e:	4798      	blx	r3
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5310:	2800      	cmp	r0, #0
    5312:	d101      	bne.n	5318 <f_close+0x14>
    5314:	2300      	movs	r3, #0
    5316:	6023      	str	r3, [r4, #0]
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    5318:	bd10      	pop	{r4, pc}
    531a:	46c0      	nop			; (mov r8, r8)
    531c:	0000466d 	.word	0x0000466d

00005320 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5320:	b5f0      	push	{r4, r5, r6, r7, lr}
    5322:	46d6      	mov	lr, sl
    5324:	464f      	mov	r7, r9
    5326:	4646      	mov	r6, r8
    5328:	b5c0      	push	{r6, r7, lr}
    532a:	0004      	movs	r4, r0
    532c:	000f      	movs	r7, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    532e:	8881      	ldrh	r1, [r0, #4]
    5330:	6800      	ldr	r0, [r0, #0]
    5332:	4b3b      	ldr	r3, [pc, #236]	; (5420 <f_lseek+0x100>)
    5334:	4798      	blx	r3
    5336:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5338:	d16c      	bne.n	5414 <f_lseek+0xf4>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    533a:	79a3      	ldrb	r3, [r4, #6]
    533c:	2b7f      	cmp	r3, #127	; 0x7f
    533e:	d868      	bhi.n	5412 <f_lseek+0xf2>
    5340:	68e6      	ldr	r6, [r4, #12]
    5342:	42be      	cmp	r6, r7
    5344:	d900      	bls.n	5348 <f_lseek+0x28>
    5346:	003e      	movs	r6, r7
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    5348:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    534a:	2300      	movs	r3, #0
    534c:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    534e:	2e00      	cmp	r6, #0
    5350:	d060      	beq.n	5414 <f_lseek+0xf4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5352:	6823      	ldr	r3, [r4, #0]
    5354:	789f      	ldrb	r7, [r3, #2]
    5356:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    5358:	2800      	cmp	r0, #0
    535a:	d01c      	beq.n	5396 <f_lseek+0x76>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    535c:	1e43      	subs	r3, r0, #1
    535e:	4698      	mov	r8, r3
    5360:	1e70      	subs	r0, r6, #1
    5362:	4b30      	ldr	r3, [pc, #192]	; (5424 <f_lseek+0x104>)
    5364:	4699      	mov	r9, r3
    5366:	0039      	movs	r1, r7
    5368:	4798      	blx	r3
    536a:	4682      	mov	sl, r0
    536c:	0039      	movs	r1, r7
    536e:	4640      	mov	r0, r8
    5370:	47c8      	blx	r9
			if (ifptr > 0 &&
    5372:	4582      	cmp	sl, r0
    5374:	d30f      	bcc.n	5396 <f_lseek+0x76>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    5376:	4278      	negs	r0, r7
    5378:	4643      	mov	r3, r8
    537a:	4003      	ands	r3, r0
    537c:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
				clst = fp->clust;
    537e:	6961      	ldr	r1, [r4, #20]
				ofs -= fp->fptr;
    5380:	1af6      	subs	r6, r6, r3
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
    5382:	2900      	cmp	r1, #0
    5384:	d10b      	bne.n	539e <f_lseek+0x7e>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    5386:	68a3      	ldr	r3, [r4, #8]
    5388:	05db      	lsls	r3, r3, #23
    538a:	d043      	beq.n	5414 <f_lseek+0xf4>
    538c:	69a3      	ldr	r3, [r4, #24]
    538e:	4299      	cmp	r1, r3
    5390:	d040      	beq.n	5414 <f_lseek+0xf4>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5392:	61a1      	str	r1, [r4, #24]
    5394:	e03e      	b.n	5414 <f_lseek+0xf4>
				clst = fp->sclust;						/* start from the first cluster */
    5396:	6921      	ldr	r1, [r4, #16]
				fp->clust = clst;
    5398:	6161      	str	r1, [r4, #20]
			if (clst != 0) {
    539a:	2900      	cmp	r1, #0
    539c:	d03a      	beq.n	5414 <f_lseek+0xf4>
				while (ofs > bcs) {						/* Cluster following loop */
    539e:	42b7      	cmp	r7, r6
    53a0:	d213      	bcs.n	53ca <f_lseek+0xaa>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    53a2:	4b21      	ldr	r3, [pc, #132]	; (5428 <f_lseek+0x108>)
    53a4:	4698      	mov	r8, r3
    53a6:	6820      	ldr	r0, [r4, #0]
    53a8:	47c0      	blx	r8
    53aa:	0001      	movs	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    53ac:	1c43      	adds	r3, r0, #1
    53ae:	d01d      	beq.n	53ec <f_lseek+0xcc>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    53b0:	2801      	cmp	r0, #1
    53b2:	d922      	bls.n	53fa <f_lseek+0xda>
    53b4:	6823      	ldr	r3, [r4, #0]
    53b6:	68db      	ldr	r3, [r3, #12]
    53b8:	4298      	cmp	r0, r3
    53ba:	d21e      	bcs.n	53fa <f_lseek+0xda>
					fp->clust = clst;
    53bc:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    53be:	68a3      	ldr	r3, [r4, #8]
    53c0:	19db      	adds	r3, r3, r7
    53c2:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    53c4:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    53c6:	42b7      	cmp	r7, r6
    53c8:	d3ed      	bcc.n	53a6 <f_lseek+0x86>
				fp->fptr += ofs;
    53ca:	68a3      	ldr	r3, [r4, #8]
    53cc:	199b      	adds	r3, r3, r6
    53ce:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    53d0:	05f3      	lsls	r3, r6, #23
    53d2:	d01c      	beq.n	540e <f_lseek+0xee>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    53d4:	6820      	ldr	r0, [r4, #0]
    53d6:	4b15      	ldr	r3, [pc, #84]	; (542c <f_lseek+0x10c>)
    53d8:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    53da:	2800      	cmp	r0, #0
    53dc:	d114      	bne.n	5408 <f_lseek+0xe8>
    53de:	79a2      	ldrb	r2, [r4, #6]
    53e0:	2380      	movs	r3, #128	; 0x80
    53e2:	425b      	negs	r3, r3
    53e4:	4313      	orrs	r3, r2
    53e6:	71a3      	strb	r3, [r4, #6]
    53e8:	2502      	movs	r5, #2
    53ea:	e013      	b.n	5414 <f_lseek+0xf4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    53ec:	79a2      	ldrb	r2, [r4, #6]
    53ee:	2380      	movs	r3, #128	; 0x80
    53f0:	425b      	negs	r3, r3
    53f2:	4313      	orrs	r3, r2
    53f4:	71a3      	strb	r3, [r4, #6]
    53f6:	2501      	movs	r5, #1
    53f8:	e00c      	b.n	5414 <f_lseek+0xf4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    53fa:	79a2      	ldrb	r2, [r4, #6]
    53fc:	2380      	movs	r3, #128	; 0x80
    53fe:	425b      	negs	r3, r3
    5400:	4313      	orrs	r3, r2
    5402:	71a3      	strb	r3, [r4, #6]
    5404:	2502      	movs	r5, #2
    5406:	e005      	b.n	5414 <f_lseek+0xf4>
					nsect += ofs / SS(fp->fs);
    5408:	0a76      	lsrs	r6, r6, #9
    540a:	1831      	adds	r1, r6, r0
    540c:	e7bb      	b.n	5386 <f_lseek+0x66>
		fp->fptr = nsect = 0;
    540e:	2100      	movs	r1, #0
    5410:	e7b9      	b.n	5386 <f_lseek+0x66>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5412:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    5414:	0028      	movs	r0, r5
    5416:	bc1c      	pop	{r2, r3, r4}
    5418:	4690      	mov	r8, r2
    541a:	4699      	mov	r9, r3
    541c:	46a2      	mov	sl, r4
    541e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5420:	0000466d 	.word	0x0000466d
    5424:	00005a29 	.word	0x00005a29
    5428:	000049e5 	.word	0x000049e5
    542c:	00004655 	.word	0x00004655

00005430 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    5430:	b510      	push	{r4, lr}
    5432:	4c1b      	ldr	r4, [pc, #108]	; (54a0 <f_opendir+0x70>)
    5434:	44a5      	add	sp, r4
    5436:	0004      	movs	r4, r0
    5438:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    543a:	2200      	movs	r2, #0
    543c:	0001      	movs	r1, r0
    543e:	a801      	add	r0, sp, #4
    5440:	4b18      	ldr	r3, [pc, #96]	; (54a4 <f_opendir+0x74>)
    5442:	4798      	blx	r3
	if (res == FR_OK) {
    5444:	2800      	cmp	r0, #0
    5446:	d003      	beq.n	5450 <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    5448:	2386      	movs	r3, #134	; 0x86
    544a:	009b      	lsls	r3, r3, #2
    544c:	449d      	add	sp, r3
    544e:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
    5450:	ab83      	add	r3, sp, #524	; 0x20c
    5452:	61a3      	str	r3, [r4, #24]
    5454:	ab03      	add	r3, sp, #12
    5456:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
    5458:	9901      	ldr	r1, [sp, #4]
    545a:	0020      	movs	r0, r4
    545c:	4b12      	ldr	r3, [pc, #72]	; (54a8 <f_opendir+0x78>)
    545e:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
    5460:	2800      	cmp	r0, #0
    5462:	d118      	bne.n	5496 <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
    5464:	6963      	ldr	r3, [r4, #20]
    5466:	2b00      	cmp	r3, #0
    5468:	d00e      	beq.n	5488 <f_opendir+0x58>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    546a:	7ada      	ldrb	r2, [r3, #11]
					res = FR_NO_PATH;
    546c:	3005      	adds	r0, #5
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    546e:	06d2      	lsls	r2, r2, #27
    5470:	d5ea      	bpl.n	5448 <f_opendir+0x18>
					dj->sclust = LD_CLUST(dj->dir);
    5472:	7d59      	ldrb	r1, [r3, #21]
    5474:	0209      	lsls	r1, r1, #8
    5476:	7d1a      	ldrb	r2, [r3, #20]
    5478:	430a      	orrs	r2, r1
    547a:	0412      	lsls	r2, r2, #16
    547c:	7ed9      	ldrb	r1, [r3, #27]
    547e:	0209      	lsls	r1, r1, #8
    5480:	7e9b      	ldrb	r3, [r3, #26]
    5482:	430b      	orrs	r3, r1
    5484:	4313      	orrs	r3, r2
    5486:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
    5488:	6823      	ldr	r3, [r4, #0]
    548a:	88db      	ldrh	r3, [r3, #6]
    548c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    548e:	2100      	movs	r1, #0
    5490:	0020      	movs	r0, r4
    5492:	4b06      	ldr	r3, [pc, #24]	; (54ac <f_opendir+0x7c>)
    5494:	4798      	blx	r3
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    5496:	2804      	cmp	r0, #4
    5498:	d1d6      	bne.n	5448 <f_opendir+0x18>
    549a:	3001      	adds	r0, #1
    549c:	e7d4      	b.n	5448 <f_opendir+0x18>
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	fffffde8 	.word	0xfffffde8
    54a4:	00004741 	.word	0x00004741
    54a8:	00004c09 	.word	0x00004c09
    54ac:	00004ae1 	.word	0x00004ae1

000054b0 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    54b0:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    54b2:	287f      	cmp	r0, #127	; 0x7f
    54b4:	d911      	bls.n	54da <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    54b6:	2900      	cmp	r1, #0
    54b8:	d111      	bne.n	54de <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    54ba:	28c7      	cmp	r0, #199	; 0xc7
    54bc:	d017      	beq.n	54ee <ff_convert+0x3e>
    54be:	4a0d      	ldr	r2, [pc, #52]	; (54f4 <ff_convert+0x44>)
    54c0:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    54c2:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    54c4:	8811      	ldrh	r1, [r2, #0]
    54c6:	4281      	cmp	r1, r0
    54c8:	d004      	beq.n	54d4 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    54ca:	3301      	adds	r3, #1
    54cc:	b29b      	uxth	r3, r3
    54ce:	3202      	adds	r2, #2
    54d0:	2b80      	cmp	r3, #128	; 0x80
    54d2:	d1f7      	bne.n	54c4 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    54d4:	3380      	adds	r3, #128	; 0x80
    54d6:	20ff      	movs	r0, #255	; 0xff
    54d8:	4003      	ands	r3, r0
		}
	}

	return c;
}
    54da:	0018      	movs	r0, r3
    54dc:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    54de:	2300      	movs	r3, #0
    54e0:	28ff      	cmp	r0, #255	; 0xff
    54e2:	d8fa      	bhi.n	54da <ff_convert+0x2a>
    54e4:	3880      	subs	r0, #128	; 0x80
    54e6:	0040      	lsls	r0, r0, #1
    54e8:	4b02      	ldr	r3, [pc, #8]	; (54f4 <ff_convert+0x44>)
    54ea:	5ac3      	ldrh	r3, [r0, r3]
    54ec:	e7f5      	b.n	54da <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    54ee:	2300      	movs	r3, #0
    54f0:	e7f0      	b.n	54d4 <ff_convert+0x24>
    54f2:	46c0      	nop			; (mov r8, r8)
    54f4:	00006214 	.word	0x00006214

000054f8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    54f8:	2861      	cmp	r0, #97	; 0x61
    54fa:	d014      	beq.n	5526 <ff_wtoupper+0x2e>
    54fc:	4b0b      	ldr	r3, [pc, #44]	; (552c <ff_wtoupper+0x34>)
    54fe:	3304      	adds	r3, #4
    5500:	2101      	movs	r1, #1
    5502:	2262      	movs	r2, #98	; 0x62
    5504:	4290      	cmp	r0, r2
    5506:	d007      	beq.n	5518 <ff_wtoupper+0x20>
    5508:	3101      	adds	r1, #1
    550a:	3302      	adds	r3, #2
    550c:	1e9a      	subs	r2, r3, #2
    550e:	8812      	ldrh	r2, [r2, #0]
    5510:	2a00      	cmp	r2, #0
    5512:	d1f7      	bne.n	5504 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5514:	0003      	movs	r3, r0
    5516:	e004      	b.n	5522 <ff_wtoupper+0x2a>
    5518:	1e03      	subs	r3, r0, #0
    551a:	d002      	beq.n	5522 <ff_wtoupper+0x2a>
    551c:	0049      	lsls	r1, r1, #1
    551e:	4b04      	ldr	r3, [pc, #16]	; (5530 <ff_wtoupper+0x38>)
    5520:	5acb      	ldrh	r3, [r1, r3]
}
    5522:	0018      	movs	r0, r3
    5524:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5526:	2100      	movs	r1, #0
    5528:	e7f8      	b.n	551c <ff_wtoupper+0x24>
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	00006314 	.word	0x00006314
    5530:	000064f4 	.word	0x000064f4

00005534 <main>:

/**
 * \brief Main function. Execution starts here.
 */
int main(void)
{
    5534:	b5f0      	push	{r4, r5, r6, r7, lr}
    5536:	46de      	mov	lr, fp
    5538:	4657      	mov	r7, sl
    553a:	464e      	mov	r6, r9
    553c:	4645      	mov	r5, r8
    553e:	b5e0      	push	{r5, r6, r7, lr}
    5540:	b0a3      	sub	sp, #140	; 0x8c
	if (!(WDT->CTRL.reg & WDT_CTRL_ALWAYSON)) {
    5542:	4bc4      	ldr	r3, [pc, #784]	; (5854 <main+0x320>)
    5544:	781b      	ldrb	r3, [r3, #0]
    5546:	b25b      	sxtb	r3, r3
    5548:	2b00      	cmp	r3, #0
    554a:	db04      	blt.n	5556 <main+0x22>
		WDT->CTRL.reg &= ~WDT_CTRL_ENABLE;
    554c:	4ac1      	ldr	r2, [pc, #772]	; (5854 <main+0x320>)
    554e:	7813      	ldrb	r3, [r2, #0]
    5550:	2102      	movs	r1, #2
    5552:	438b      	bics	r3, r1
    5554:	7013      	strb	r3, [r2, #0]
    5556:	4bc0      	ldr	r3, [pc, #768]	; (5858 <main+0x324>)
    5558:	6a1b      	ldr	r3, [r3, #32]
	if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    555a:	041b      	lsls	r3, r3, #16
    555c:	d50d      	bpl.n	557a <main+0x46>
	if (*app_check_address_ptr == 0xFFFFFFFF) {
    555e:	2380      	movs	r3, #128	; 0x80
    5560:	025b      	lsls	r3, r3, #9
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	1c5a      	adds	r2, r3, #1
    5566:	d008      	beq.n	557a <main+0x46>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5568:	f383 8808 	msr	MSP, r3
	SCB->VTOR = ((uint32_t)APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    556c:	2280      	movs	r2, #128	; 0x80
    556e:	0252      	lsls	r2, r2, #9
    5570:	4bba      	ldr	r3, [pc, #744]	; (585c <main+0x328>)
    5572:	609a      	str	r2, [r3, #8]
	application_code_entry = (void (*)(void))(unsigned *)(*(unsigned *)
    5574:	4bba      	ldr	r3, [pc, #744]	; (5860 <main+0x32c>)
	application_code_entry();
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	4798      	blx	r3
	system_init();
    557a:	4bba      	ldr	r3, [pc, #744]	; (5864 <main+0x330>)
    557c:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    557e:	a902      	add	r1, sp, #8
    5580:	2501      	movs	r5, #1
    5582:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    5584:	2400      	movs	r4, #0
    5586:	708c      	strb	r4, [r1, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
    5588:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    558a:	2007      	movs	r0, #7
    558c:	4bb6      	ldr	r3, [pc, #728]	; (5868 <main+0x334>)
    558e:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    5590:	a812      	add	r0, sp, #72	; 0x48
    5592:	7004      	strb	r4, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    5594:	4bb5      	ldr	r3, [pc, #724]	; (586c <main+0x338>)
    5596:	685b      	ldr	r3, [r3, #4]
    5598:	06db      	lsls	r3, r3, #27
    559a:	0f1b      	lsrs	r3, r3, #28
    559c:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
    559e:	70c4      	strb	r4, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    55a0:	7104      	strb	r4, [r0, #4]
	nvm_cfg.manual_page_write = false;
    55a2:	7044      	strb	r4, [r0, #1]
	nvm_set_config(&nvm_cfg);
    55a4:	4bb2      	ldr	r3, [pc, #712]	; (5870 <main+0x33c>)
    55a6:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
    55a8:	4bb2      	ldr	r3, [pc, #712]	; (5874 <main+0x340>)
    55aa:	701c      	strb	r4, [r3, #0]
    55ac:	705c      	strb	r4, [r3, #1]
    55ae:	709c      	strb	r4, [r3, #2]
    55b0:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    55b2:	711d      	strb	r5, [r3, #4]
	cpu_irq_enable();
    55b4:	4bb0      	ldr	r3, [pc, #704]	; (5878 <main+0x344>)
    55b6:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    55b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    55bc:	b662      	cpsie	i
	uhc_start();
    55be:	4baf      	ldr	r3, [pc, #700]	; (587c <main+0x348>)
    55c0:	4798      	blx	r3
    55c2:	e1f1      	b.n	59a8 <main+0x474>
#if CONSOLE_OUTPUT_ENABLED
				/* Print task output */
				puts(TASK_FAILED);
#endif
				/* LUN error */
				f_close(&file_object);
    55c4:	48ae      	ldr	r0, [pc, #696]	; (5880 <main+0x34c>)
    55c6:	4baf      	ldr	r3, [pc, #700]	; (5884 <main+0x350>)
    55c8:	4798      	blx	r3
		for (lun = 0; (lun < uhi_msc_mem_get_lun()) && (lun < 8); lun++) {
    55ca:	3401      	adds	r4, #1
    55cc:	b2e4      	uxtb	r4, r4
    55ce:	4bae      	ldr	r3, [pc, #696]	; (5888 <main+0x354>)
    55d0:	4798      	blx	r3
    55d2:	4284      	cmp	r4, r0
    55d4:	d300      	bcc.n	55d8 <main+0xa4>
    55d6:	e1e4      	b.n	59a2 <main+0x46e>
    55d8:	2c08      	cmp	r4, #8
    55da:	d100      	bne.n	55de <main+0xaa>
    55dc:	e1e1      	b.n	59a2 <main+0x46e>
    55de:	0025      	movs	r5, r4
    55e0:	3530      	adds	r5, #48	; 0x30
    55e2:	b2ed      	uxtb	r5, r5
			root_directory[0] = '0' + lun;
    55e4:	4ba9      	ldr	r3, [pc, #676]	; (588c <main+0x358>)
    55e6:	701d      	strb	r5, [r3, #0]
			memset(&fs, 0, sizeof(FATFS));
    55e8:	4ea9      	ldr	r6, [pc, #676]	; (5890 <main+0x35c>)
    55ea:	2289      	movs	r2, #137	; 0x89
    55ec:	0092      	lsls	r2, r2, #2
    55ee:	2100      	movs	r1, #0
    55f0:	0030      	movs	r0, r6
    55f2:	4ba8      	ldr	r3, [pc, #672]	; (5894 <main+0x360>)
    55f4:	4798      	blx	r3
			res = f_mount(lun, &fs);
    55f6:	0031      	movs	r1, r6
    55f8:	0020      	movs	r0, r4
    55fa:	4ba7      	ldr	r3, [pc, #668]	; (5898 <main+0x364>)
    55fc:	4798      	blx	r3
			if (res != FR_OK) {
    55fe:	2800      	cmp	r0, #0
    5600:	d1e3      	bne.n	55ca <main+0x96>
			res = f_opendir(&file_dir, root_directory);
    5602:	49a2      	ldr	r1, [pc, #648]	; (588c <main+0x358>)
    5604:	48a5      	ldr	r0, [pc, #660]	; (589c <main+0x368>)
    5606:	4ba6      	ldr	r3, [pc, #664]	; (58a0 <main+0x36c>)
    5608:	4798      	blx	r3
			if (res != FR_OK) {
    560a:	2800      	cmp	r0, #0
    560c:	d1dd      	bne.n	55ca <main+0x96>
			input_file_name[0] = lun + '0';
    560e:	49a5      	ldr	r1, [pc, #660]	; (58a4 <main+0x370>)
    5610:	700d      	strb	r5, [r1, #0]
			res = f_open(&file_object,
    5612:	4d9b      	ldr	r5, [pc, #620]	; (5880 <main+0x34c>)
    5614:	2201      	movs	r2, #1
    5616:	0028      	movs	r0, r5
    5618:	4ba3      	ldr	r3, [pc, #652]	; (58a8 <main+0x374>)
    561a:	4798      	blx	r3
			if (!(file_size && (file_size < APP_MAX_SIZE)
    561c:	68eb      	ldr	r3, [r5, #12]
    561e:	3b01      	subs	r3, #1
    5620:	4aa2      	ldr	r2, [pc, #648]	; (58ac <main+0x378>)
    5622:	4293      	cmp	r3, r2
    5624:	d8ce      	bhi.n	55c4 <main+0x90>
    5626:	2800      	cmp	r0, #0
    5628:	d1cc      	bne.n	55c4 <main+0x90>
				continue;
			}

			/* Close the File after operation. */
			f_close(&file_object);
    562a:	4d95      	ldr	r5, [pc, #596]	; (5880 <main+0x34c>)
    562c:	0028      	movs	r0, r5
    562e:	4b95      	ldr	r3, [pc, #596]	; (5884 <main+0x350>)
    5630:	4798      	blx	r3
	uint32_t buffer_size = 0;
    5632:	2300      	movs	r3, #0
    5634:	9312      	str	r3, [sp, #72]	; 0x48
	f_open(&file_object,
    5636:	2201      	movs	r2, #1
    5638:	499a      	ldr	r1, [pc, #616]	; (58a4 <main+0x370>)
    563a:	0028      	movs	r0, r5
    563c:	4b9a      	ldr	r3, [pc, #616]	; (58a8 <main+0x374>)
    563e:	4798      	blx	r3
	f_read(&file_object, (void *)buffer, APP_BINARY_OFFSET, &buffer_size);
    5640:	ab12      	add	r3, sp, #72	; 0x48
    5642:	2210      	movs	r2, #16
    5644:	499a      	ldr	r1, [pc, #616]	; (58b0 <main+0x37c>)
    5646:	0028      	movs	r0, r5
    5648:	4d9a      	ldr	r5, [pc, #616]	; (58b4 <main+0x380>)
    564a:	47a8      	blx	r5
	if (!buffer_size) {
    564c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    564e:	2b00      	cmp	r3, #0
    5650:	d014      	beq.n	567c <main+0x148>
	firmware_crc = *(uint32_t *)buf;
    5652:	4a97      	ldr	r2, [pc, #604]	; (58b0 <main+0x37c>)
    5654:	6811      	ldr	r1, [r2, #0]
    5656:	4a98      	ldr	r2, [pc, #608]	; (58b8 <main+0x384>)
    5658:	6011      	str	r1, [r2, #0]
	buffer_size -= 4;
    565a:	1f1a      	subs	r2, r3, #4
    565c:	9212      	str	r2, [sp, #72]	; 0x48
    565e:	3b05      	subs	r3, #5
    5660:	2200      	movs	r2, #0
		if (*buf++ != *signature_bytes++) {
    5662:	4e93      	ldr	r6, [pc, #588]	; (58b0 <main+0x37c>)
    5664:	4d95      	ldr	r5, [pc, #596]	; (58bc <main+0x388>)
	while (buffer_size--) {
    5666:	1c59      	adds	r1, r3, #1
    5668:	d011      	beq.n	568e <main+0x15a>
		if (*buf++ != *signature_bytes++) {
    566a:	1991      	adds	r1, r2, r6
    566c:	790f      	ldrb	r7, [r1, #4]
    566e:	5ca8      	ldrb	r0, [r5, r2]
    5670:	3201      	adds	r2, #1
    5672:	1e59      	subs	r1, r3, #1
    5674:	4287      	cmp	r7, r0
    5676:	d105      	bne.n	5684 <main+0x150>
    5678:	000b      	movs	r3, r1
    567a:	e7f4      	b.n	5666 <main+0x132>
		f_close(&file_object);
    567c:	4880      	ldr	r0, [pc, #512]	; (5880 <main+0x34c>)
    567e:	4b81      	ldr	r3, [pc, #516]	; (5884 <main+0x350>)
    5680:	4798      	blx	r3
    5682:	e7a2      	b.n	55ca <main+0x96>
    5684:	9312      	str	r3, [sp, #72]	; 0x48
			f_close(&file_object);
    5686:	487e      	ldr	r0, [pc, #504]	; (5880 <main+0x34c>)
    5688:	4b7e      	ldr	r3, [pc, #504]	; (5884 <main+0x350>)
    568a:	4798      	blx	r3
    568c:	e79d      	b.n	55ca <main+0x96>
    568e:	9312      	str	r3, [sp, #72]	; 0x48
	f_lseek(&file_object, APP_BINARY_OFFSET);
    5690:	2110      	movs	r1, #16
    5692:	487b      	ldr	r0, [pc, #492]	; (5880 <main+0x34c>)
    5694:	4b8a      	ldr	r3, [pc, #552]	; (58c0 <main+0x38c>)
    5696:	4798      	blx	r3
 * \retval STATUS_BUSY DMA CRC module is already taken and not ready yet
 */
static inline enum status_code dma_crc_io_enable(
		struct dma_crc_config *config)
{
	if (DMAC->CRCSTATUS.reg & DMAC_CRCSTATUS_CRCBUSY) {
    5698:	4b8a      	ldr	r3, [pc, #552]	; (58c4 <main+0x390>)
    569a:	7b1b      	ldrb	r3, [r3, #12]
    569c:	07db      	lsls	r3, r3, #31
    569e:	d403      	bmi.n	56a8 <main+0x174>
		return STATUS_BUSY;
	}

	if (DMAC->CTRL.reg & DMAC_CTRL_CRCENABLE) {
    56a0:	4b88      	ldr	r3, [pc, #544]	; (58c4 <main+0x390>)
    56a2:	881b      	ldrh	r3, [r3, #0]
    56a4:	075b      	lsls	r3, r3, #29
    56a6:	d50f      	bpl.n	56c8 <main+0x194>
		f_read(&file_object, (void *)buffer, FLASH_BUFFER_SIZE, &buffer_size);
    56a8:	4f81      	ldr	r7, [pc, #516]	; (58b0 <main+0x37c>)
    56aa:	4b75      	ldr	r3, [pc, #468]	; (5880 <main+0x34c>)
    56ac:	4698      	mov	r8, r3
    56ae:	ab12      	add	r3, sp, #72	; 0x48
    56b0:	2240      	movs	r2, #64	; 0x40
    56b2:	0039      	movs	r1, r7
    56b4:	4640      	mov	r0, r8
    56b6:	4d7f      	ldr	r5, [pc, #508]	; (58b4 <main+0x380>)
    56b8:	47a8      	blx	r5
		if (!buffer_size) {
    56ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
    56bc:	2d00      	cmp	r5, #0
    56be:	d030      	beq.n	5722 <main+0x1ee>
    56c0:	2200      	movs	r2, #0
	uint8_t *buffer_8;
	uint16_t *buffer_16;
	uint32_t *buffer_32;

	for (counter=0; counter<total_beat_size; counter++) {
		if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_BYTE) {
    56c2:	4980      	ldr	r1, [pc, #512]	; (58c4 <main+0x390>)
			buffer_8 = buffer;
			DMAC->CRCDATAIN.reg = buffer_8[counter];
    56c4:	487a      	ldr	r0, [pc, #488]	; (58b0 <main+0x37c>)
    56c6:	e01c      	b.n	5702 <main+0x1ce>
	DMAC->CRCCTRL.reg = DMAC_CRCCTRL_CRCBEATSIZE(config->size) |
    56c8:	4b7e      	ldr	r3, [pc, #504]	; (58c4 <main+0x390>)
    56ca:	2282      	movs	r2, #130	; 0x82
    56cc:	0052      	lsls	r2, r2, #1
    56ce:	805a      	strh	r2, [r3, #2]
		DMAC->CRCCHKSUM.reg = 0xFFFFFFFF;
    56d0:	3a06      	subs	r2, #6
    56d2:	3aff      	subs	r2, #255	; 0xff
    56d4:	609a      	str	r2, [r3, #8]
	DMAC->CTRL.reg |= DMAC_CTRL_CRCENABLE;
    56d6:	881a      	ldrh	r2, [r3, #0]
    56d8:	2104      	movs	r1, #4
    56da:	430a      	orrs	r2, r1
    56dc:	801a      	strh	r2, [r3, #0]
    56de:	e7e3      	b.n	56a8 <main+0x174>
		} else if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_HWORD) {
    56e0:	884b      	ldrh	r3, [r1, #2]
    56e2:	079b      	lsls	r3, r3, #30
    56e4:	0f9b      	lsrs	r3, r3, #30
    56e6:	2b01      	cmp	r3, #1
    56e8:	d011      	beq.n	570e <main+0x1da>
			buffer_16 = buffer;
			DMAC->CRCDATAIN.reg = buffer_16[counter];
		} else if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_WORD) {
    56ea:	884b      	ldrh	r3, [r1, #2]
    56ec:	079b      	lsls	r3, r3, #30
    56ee:	0f9b      	lsrs	r3, r3, #30
    56f0:	2b02      	cmp	r3, #2
    56f2:	d011      	beq.n	5718 <main+0x1e4>
			buffer_32 = buffer;
			DMAC->CRCDATAIN.reg = buffer_32[counter];
		}
		/* Wait several cycle to make sure CRC complete */
		nop();
    56f4:	46c0      	nop			; (mov r8, r8)
		nop();
    56f6:	46c0      	nop			; (mov r8, r8)
		nop();
    56f8:	46c0      	nop			; (mov r8, r8)
		nop();
    56fa:	46c0      	nop			; (mov r8, r8)
	for (counter=0; counter<total_beat_size; counter++) {
    56fc:	3201      	adds	r2, #1
    56fe:	4295      	cmp	r5, r2
    5700:	d0d5      	beq.n	56ae <main+0x17a>
		if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_BYTE) {
    5702:	884b      	ldrh	r3, [r1, #2]
    5704:	079b      	lsls	r3, r3, #30
    5706:	d1eb      	bne.n	56e0 <main+0x1ac>
			DMAC->CRCDATAIN.reg = buffer_8[counter];
    5708:	5c83      	ldrb	r3, [r0, r2]
    570a:	604b      	str	r3, [r1, #4]
    570c:	e7f2      	b.n	56f4 <main+0x1c0>
			DMAC->CRCDATAIN.reg = buffer_16[counter];
    570e:	0053      	lsls	r3, r2, #1
    5710:	4e67      	ldr	r6, [pc, #412]	; (58b0 <main+0x37c>)
    5712:	5af3      	ldrh	r3, [r6, r3]
    5714:	604b      	str	r3, [r1, #4]
    5716:	e7ed      	b.n	56f4 <main+0x1c0>
			DMAC->CRCDATAIN.reg = buffer_32[counter];
    5718:	0093      	lsls	r3, r2, #2
    571a:	4e65      	ldr	r6, [pc, #404]	; (58b0 <main+0x37c>)
    571c:	58f3      	ldr	r3, [r6, r3]
    571e:	604b      	str	r3, [r1, #4]
    5720:	e7e8      	b.n	56f4 <main+0x1c0>
	if (DMAC->CRCCTRL.bit.CRCSRC == DMAC_CRCCTRL_CRCSRC_IO_Val) {
    5722:	4b68      	ldr	r3, [pc, #416]	; (58c4 <main+0x390>)
    5724:	885b      	ldrh	r3, [r3, #2]
    5726:	049b      	lsls	r3, r3, #18
    5728:	0e9b      	lsrs	r3, r3, #26
    572a:	2b01      	cmp	r3, #1
    572c:	d102      	bne.n	5734 <main+0x200>
		DMAC->CRCSTATUS.reg = DMAC_CRCSTATUS_CRCBUSY;
    572e:	2201      	movs	r2, #1
    5730:	4b64      	ldr	r3, [pc, #400]	; (58c4 <main+0x390>)
    5732:	731a      	strb	r2, [r3, #12]
	return DMAC->CRCCHKSUM.reg;
    5734:	4b63      	ldr	r3, [pc, #396]	; (58c4 <main+0x390>)
    5736:	6899      	ldr	r1, [r3, #8]
	DMAC->CTRL.reg &= ~DMAC_CTRL_CRCENABLE;
    5738:	881a      	ldrh	r2, [r3, #0]
    573a:	2004      	movs	r0, #4
    573c:	4382      	bics	r2, r0
    573e:	801a      	strh	r2, [r3, #0]
	DMAC->CRCCTRL.reg = 0;
    5740:	2200      	movs	r2, #0
    5742:	805a      	strh	r2, [r3, #2]
	if (firmware_crc != firmware_crc_output) {
    5744:	4b5c      	ldr	r3, [pc, #368]	; (58b8 <main+0x384>)
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	4299      	cmp	r1, r3
    574a:	d003      	beq.n	5754 <main+0x220>
		f_close(&file_object);
    574c:	484c      	ldr	r0, [pc, #304]	; (5880 <main+0x34c>)
    574e:	4b4d      	ldr	r3, [pc, #308]	; (5884 <main+0x350>)
    5750:	4798      	blx	r3
    5752:	e73a      	b.n	55ca <main+0x96>
	f_close(&file_object);
    5754:	4e4a      	ldr	r6, [pc, #296]	; (5880 <main+0x34c>)
    5756:	0030      	movs	r0, r6
    5758:	4b4a      	ldr	r3, [pc, #296]	; (5884 <main+0x350>)
    575a:	4798      	blx	r3
	uint32_t buffer_size = 0;
    575c:	2300      	movs	r3, #0
    575e:	9301      	str	r3, [sp, #4]
	f_open(&file_object,
    5760:	2201      	movs	r2, #1
    5762:	4950      	ldr	r1, [pc, #320]	; (58a4 <main+0x370>)
    5764:	0030      	movs	r0, r6
    5766:	4b50      	ldr	r3, [pc, #320]	; (58a8 <main+0x374>)
    5768:	4798      	blx	r3
	file_size = file_object.fsize - APP_BINARY_OFFSET;
    576a:	68f7      	ldr	r7, [r6, #12]
	f_read(&file_object, (void *)buffer, APP_BINARY_OFFSET, &buffer_size);
    576c:	ab01      	add	r3, sp, #4
    576e:	2210      	movs	r2, #16
    5770:	494f      	ldr	r1, [pc, #316]	; (58b0 <main+0x37c>)
    5772:	0030      	movs	r0, r6
    5774:	4e4f      	ldr	r6, [pc, #316]	; (58b4 <main+0x380>)
    5776:	47b0      	blx	r6
	if (!buffer_size) {
    5778:	9b01      	ldr	r3, [sp, #4]
    577a:	2b00      	cmp	r3, #0
    577c:	d100      	bne.n	5780 <main+0x24c>
    577e:	e724      	b.n	55ca <main+0x96>
	file_size = file_object.fsize - APP_BINARY_OFFSET;
    5780:	2310      	movs	r3, #16
    5782:	425b      	negs	r3, r3
    5784:	4698      	mov	r8, r3
    5786:	44b8      	add	r8, r7
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5788:	2280      	movs	r2, #128	; 0x80
    578a:	4b33      	ldr	r3, [pc, #204]	; (5858 <main+0x324>)
    578c:	615a      	str	r2, [r3, #20]
	rows_clear = ((file_size / NVMCTRL_ROW_SIZE) + 1);
    578e:	4643      	mov	r3, r8
    5790:	0a1b      	lsrs	r3, r3, #8
	for (i = 0; i < rows_clear; i++) {
    5792:	b299      	uxth	r1, r3
    5794:	4a4c      	ldr	r2, [pc, #304]	; (58c8 <main+0x394>)
    5796:	4291      	cmp	r1, r2
    5798:	d00f      	beq.n	57ba <main+0x286>
    579a:	041b      	lsls	r3, r3, #16
    579c:	0a1b      	lsrs	r3, r3, #8
    579e:	4a4b      	ldr	r2, [pc, #300]	; (58cc <main+0x398>)
    57a0:	4691      	mov	r9, r2
    57a2:	4499      	add	r9, r3
    57a4:	2680      	movs	r6, #128	; 0x80
    57a6:	0276      	lsls	r6, r6, #9
			error_code =
    57a8:	4f49      	ldr	r7, [pc, #292]	; (58d0 <main+0x39c>)
    57aa:	0030      	movs	r0, r6
    57ac:	47b8      	blx	r7
		} while (error_code == STATUS_BUSY);
    57ae:	2805      	cmp	r0, #5
    57b0:	d0fb      	beq.n	57aa <main+0x276>
    57b2:	3601      	adds	r6, #1
    57b4:	36ff      	adds	r6, #255	; 0xff
	for (i = 0; i < rows_clear; i++) {
    57b6:	454e      	cmp	r6, r9
    57b8:	d1f7      	bne.n	57aa <main+0x276>
    57ba:	46a9      	mov	r9, r5
    57bc:	2680      	movs	r6, #128	; 0x80
    57be:	0276      	lsls	r6, r6, #9
		f_read(&file_object, (void *)page_buffer, FLASH_BUFFER_SIZE, &buffer_size);
    57c0:	4b2f      	ldr	r3, [pc, #188]	; (5880 <main+0x34c>)
    57c2:	469b      	mov	fp, r3
    57c4:	4b3b      	ldr	r3, [pc, #236]	; (58b4 <main+0x380>)
    57c6:	469a      	mov	sl, r3
    57c8:	ab01      	add	r3, sp, #4
    57ca:	2240      	movs	r2, #64	; 0x40
    57cc:	a902      	add	r1, sp, #8
    57ce:	4658      	mov	r0, fp
    57d0:	47d0      	blx	sl
		if (!buffer_size) {
    57d2:	9b01      	ldr	r3, [sp, #4]
    57d4:	2b00      	cmp	r3, #0
    57d6:	d017      	beq.n	5808 <main+0x2d4>
		curr_address +=  buffer_size;
    57d8:	4499      	add	r9, r3
  __ASM volatile ("cpsid i" : : : "memory");
    57da:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    57dc:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    57e0:	2300      	movs	r3, #0
    57e2:	4a25      	ldr	r2, [pc, #148]	; (5878 <main+0x344>)
    57e4:	7013      	strb	r3, [r2, #0]
			error_code = nvm_write_buffer(current_page * NVMCTRL_PAGE_SIZE,
    57e6:	4f3b      	ldr	r7, [pc, #236]	; (58d4 <main+0x3a0>)
    57e8:	466b      	mov	r3, sp
    57ea:	889a      	ldrh	r2, [r3, #4]
    57ec:	a902      	add	r1, sp, #8
    57ee:	0030      	movs	r0, r6
    57f0:	47b8      	blx	r7
		} while (error_code == STATUS_BUSY);
    57f2:	2805      	cmp	r0, #5
    57f4:	d0f8      	beq.n	57e8 <main+0x2b4>
		cpu_irq_enable();
    57f6:	2201      	movs	r2, #1
    57f8:	4b1f      	ldr	r3, [pc, #124]	; (5878 <main+0x344>)
    57fa:	701a      	strb	r2, [r3, #0]
    57fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5800:	b662      	cpsie	i
    5802:	3640      	adds	r6, #64	; 0x40
	} while (curr_address < file_size);
    5804:	45c8      	cmp	r8, r9
    5806:	d8df      	bhi.n	57c8 <main+0x294>
	f_close(&file_object);
    5808:	4e1d      	ldr	r6, [pc, #116]	; (5880 <main+0x34c>)
    580a:	0030      	movs	r0, r6
    580c:	4b1d      	ldr	r3, [pc, #116]	; (5884 <main+0x350>)
    580e:	4798      	blx	r3
	file_size = file_object.fsize - APP_BINARY_OFFSET;
    5810:	68f3      	ldr	r3, [r6, #12]
    5812:	2210      	movs	r2, #16
    5814:	4252      	negs	r2, r2
    5816:	4690      	mov	r8, r2
    5818:	4498      	add	r8, r3
	if (DMAC->CRCSTATUS.reg & DMAC_CRCSTATUS_CRCBUSY) {
    581a:	4b2a      	ldr	r3, [pc, #168]	; (58c4 <main+0x390>)
    581c:	7b1b      	ldrb	r3, [r3, #12]
    581e:	07db      	lsls	r3, r3, #31
    5820:	d508      	bpl.n	5834 <main+0x300>
	while (curr_address < file_size) {
    5822:	4643      	mov	r3, r8
    5824:	2b00      	cmp	r3, #0
    5826:	d100      	bne.n	582a <main+0x2f6>
    5828:	e090      	b.n	594c <main+0x418>
    582a:	46aa      	mov	sl, r5
    582c:	2380      	movs	r3, #128	; 0x80
    582e:	025b      	lsls	r3, r3, #9
    5830:	4699      	mov	r9, r3
    5832:	e07b      	b.n	592c <main+0x3f8>
	if (DMAC->CTRL.reg & DMAC_CTRL_CRCENABLE) {
    5834:	4b23      	ldr	r3, [pc, #140]	; (58c4 <main+0x390>)
    5836:	881b      	ldrh	r3, [r3, #0]
    5838:	075b      	lsls	r3, r3, #29
    583a:	d4f2      	bmi.n	5822 <main+0x2ee>
	DMAC->CRCCTRL.reg = DMAC_CRCCTRL_CRCBEATSIZE(config->size) |
    583c:	4b21      	ldr	r3, [pc, #132]	; (58c4 <main+0x390>)
    583e:	3215      	adds	r2, #21
    5840:	32ff      	adds	r2, #255	; 0xff
    5842:	805a      	strh	r2, [r3, #2]
		DMAC->CRCCHKSUM.reg = 0xFFFFFFFF;
    5844:	3a06      	subs	r2, #6
    5846:	3aff      	subs	r2, #255	; 0xff
    5848:	609a      	str	r2, [r3, #8]
	DMAC->CTRL.reg |= DMAC_CTRL_CRCENABLE;
    584a:	881a      	ldrh	r2, [r3, #0]
    584c:	2104      	movs	r1, #4
    584e:	430a      	orrs	r2, r1
    5850:	801a      	strh	r2, [r3, #0]
    5852:	e7e6      	b.n	5822 <main+0x2ee>
    5854:	40001000 	.word	0x40001000
    5858:	41004400 	.word	0x41004400
    585c:	e000ed00 	.word	0xe000ed00
    5860:	00010004 	.word	0x00010004
    5864:	0000214d 	.word	0x0000214d
    5868:	00001981 	.word	0x00001981
    586c:	41004000 	.word	0x41004000
    5870:	000016e9 	.word	0x000016e9
    5874:	20000544 	.word	0x20000544
    5878:	20000023 	.word	0x20000023
    587c:	00001395 	.word	0x00001395
    5880:	200002f0 	.word	0x200002f0
    5884:	00005305 	.word	0x00005305
    5888:	00000a21 	.word	0x00000a21
    588c:	2000003c 	.word	0x2000003c
    5890:	20000310 	.word	0x20000310
    5894:	00005e13 	.word	0x00005e13
    5898:	000050a1 	.word	0x000050a1
    589c:	200002cc 	.word	0x200002cc
    58a0:	00005431 	.word	0x00005431
    58a4:	2000002c 	.word	0x2000002c
    58a8:	000050d1 	.word	0x000050d1
    58ac:	0002fffe 	.word	0x0002fffe
    58b0:	2000086c 	.word	0x2000086c
    58b4:	0000516d 	.word	0x0000516d
    58b8:	2000030c 	.word	0x2000030c
    58bc:	000066d4 	.word	0x000066d4
    58c0:	00005321 	.word	0x00005321
    58c4:	41004800 	.word	0x41004800
    58c8:	0000ffff 	.word	0x0000ffff
    58cc:	00010100 	.word	0x00010100
    58d0:	00001925 	.word	0x00001925
    58d4:	00001811 	.word	0x00001811
		} else if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_HWORD) {
    58d8:	884b      	ldrh	r3, [r1, #2]
    58da:	079b      	lsls	r3, r3, #30
    58dc:	0f9b      	lsrs	r3, r3, #30
    58de:	2b01      	cmp	r3, #1
    58e0:	d018      	beq.n	5914 <main+0x3e0>
		} else if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_WORD) {
    58e2:	884b      	ldrh	r3, [r1, #2]
    58e4:	079b      	lsls	r3, r3, #30
    58e6:	0f9b      	lsrs	r3, r3, #30
    58e8:	2b02      	cmp	r3, #2
    58ea:	d016      	beq.n	591a <main+0x3e6>
		nop();
    58ec:	46c0      	nop			; (mov r8, r8)
		nop();
    58ee:	46c0      	nop			; (mov r8, r8)
		nop();
    58f0:	46c0      	nop			; (mov r8, r8)
		nop();
    58f2:	46c0      	nop			; (mov r8, r8)
	for (counter=0; counter<total_beat_size; counter++) {
    58f4:	3201      	adds	r2, #1
    58f6:	3002      	adds	r0, #2
    58f8:	2304      	movs	r3, #4
    58fa:	469b      	mov	fp, r3
    58fc:	44dc      	add	ip, fp
    58fe:	4297      	cmp	r7, r2
    5900:	d90f      	bls.n	5922 <main+0x3ee>
		if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_BYTE) {
    5902:	884b      	ldrh	r3, [r1, #2]
    5904:	079b      	lsls	r3, r3, #30
    5906:	d1e7      	bne.n	58d8 <main+0x3a4>
			DMAC->CRCDATAIN.reg = buffer_8[counter];
    5908:	466b      	mov	r3, sp
    590a:	2648      	movs	r6, #72	; 0x48
    590c:	199b      	adds	r3, r3, r6
    590e:	5c9b      	ldrb	r3, [r3, r2]
    5910:	604b      	str	r3, [r1, #4]
    5912:	e7eb      	b.n	58ec <main+0x3b8>
			DMAC->CRCDATAIN.reg = buffer_16[counter];
    5914:	8803      	ldrh	r3, [r0, #0]
    5916:	604b      	str	r3, [r1, #4]
    5918:	e7e8      	b.n	58ec <main+0x3b8>
			DMAC->CRCDATAIN.reg = buffer_32[counter];
    591a:	4663      	mov	r3, ip
    591c:	681b      	ldr	r3, [r3, #0]
    591e:	604b      	str	r3, [r1, #4]
    5920:	e7e4      	b.n	58ec <main+0x3b8>
    5922:	333c      	adds	r3, #60	; 0x3c
    5924:	469c      	mov	ip, r3
    5926:	44e1      	add	r9, ip
    5928:	45c2      	cmp	sl, r8
    592a:	d20f      	bcs.n	594c <main+0x418>
		if ((curr_address + FLASH_BUFFER_SIZE) < file_size) {
    592c:	4657      	mov	r7, sl
    592e:	3740      	adds	r7, #64	; 0x40
    5930:	45b8      	cmp	r8, r7
    5932:	d844      	bhi.n	59be <main+0x48a>
			read_size = file_size - curr_address;
    5934:	4643      	mov	r3, r8
    5936:	4652      	mov	r2, sl
    5938:	1a9f      	subs	r7, r3, r2
		nvm_read_buffer(current_page * NVMCTRL_PAGE_SIZE,
    593a:	2240      	movs	r2, #64	; 0x40
    593c:	a912      	add	r1, sp, #72	; 0x48
    593e:	4648      	mov	r0, r9
    5940:	4b25      	ldr	r3, [pc, #148]	; (59d8 <main+0x4a4>)
    5942:	4798      	blx	r3
	for (counter=0; counter<total_beat_size; counter++) {
    5944:	2f00      	cmp	r7, #0
    5946:	d001      	beq.n	594c <main+0x418>
		curr_address +=  read_size;
    5948:	46c2      	mov	sl, r8
    594a:	e03f      	b.n	59cc <main+0x498>
	if (DMAC->CRCCTRL.bit.CRCSRC == DMAC_CRCCTRL_CRCSRC_IO_Val) {
    594c:	4b23      	ldr	r3, [pc, #140]	; (59dc <main+0x4a8>)
    594e:	885b      	ldrh	r3, [r3, #2]
    5950:	049b      	lsls	r3, r3, #18
    5952:	0e9b      	lsrs	r3, r3, #26
    5954:	2b01      	cmp	r3, #1
    5956:	d020      	beq.n	599a <main+0x466>
	return DMAC->CRCCHKSUM.reg;
    5958:	4b20      	ldr	r3, [pc, #128]	; (59dc <main+0x4a8>)
    595a:	6899      	ldr	r1, [r3, #8]
	DMAC->CTRL.reg &= ~DMAC_CTRL_CRCENABLE;
    595c:	881a      	ldrh	r2, [r3, #0]
    595e:	2004      	movs	r0, #4
    5960:	4382      	bics	r2, r0
    5962:	801a      	strh	r2, [r3, #0]
	DMAC->CRCCTRL.reg = 0;
    5964:	2200      	movs	r2, #0
    5966:	805a      	strh	r2, [r3, #2]
	if (firmware_crc != firmware_crc_output) {
    5968:	4b1d      	ldr	r3, [pc, #116]	; (59e0 <main+0x4ac>)
    596a:	681b      	ldr	r3, [r3, #0]
	if (!integrity_check_in_flash()) {
    596c:	4299      	cmp	r1, r3
    596e:	d000      	beq.n	5972 <main+0x43e>
    5970:	e62b      	b.n	55ca <main+0x96>
		port_base->OUTSET.reg = pin_mask;
    5972:	3280      	adds	r2, #128	; 0x80
    5974:	4b1b      	ldr	r3, [pc, #108]	; (59e4 <main+0x4b0>)
    5976:	619a      	str	r2, [r3, #24]
#endif
				continue;
			}

			/* Unmount the MSC device */
			f_mount(lun, NULL);
    5978:	2100      	movs	r1, #0
    597a:	0020      	movs	r0, r4
    597c:	4b1a      	ldr	r3, [pc, #104]	; (59e8 <main+0x4b4>)
    597e:	4798      	blx	r3

			/* Stop the USB Host */
			uhc_stop(true);
    5980:	2001      	movs	r0, #1
    5982:	4b1a      	ldr	r3, [pc, #104]	; (59ec <main+0x4b8>)
    5984:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    5986:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    5988:	f3bf 8f5f 	dmb	sy

			/* Disable global interrupts. */
			cpu_irq_disable();
    598c:	2200      	movs	r2, #0
    598e:	4b18      	ldr	r3, [pc, #96]	; (59f0 <main+0x4bc>)
    5990:	701a      	strb	r2, [r3, #0]
	WDT->CTRL.reg = WDT_CTRL_ENABLE;
    5992:	3202      	adds	r2, #2
    5994:	4b17      	ldr	r3, [pc, #92]	; (59f4 <main+0x4c0>)
    5996:	701a      	strb	r2, [r3, #0]
    5998:	e7fe      	b.n	5998 <main+0x464>
		DMAC->CRCSTATUS.reg = DMAC_CRCSTATUS_CRCBUSY;
    599a:	2201      	movs	r2, #1
    599c:	4b0f      	ldr	r3, [pc, #60]	; (59dc <main+0x4a8>)
    599e:	731a      	strb	r2, [r3, #12]
    59a0:	e7da      	b.n	5958 <main+0x424>

			/* Start the application with a WDT Reset */
			start_application_with_wdt();
		}
		/* None of the connected LUN has the upgrade file. */
		lun_connected = false;
    59a2:	2200      	movs	r2, #0
    59a4:	4b14      	ldr	r3, [pc, #80]	; (59f8 <main+0x4c4>)
    59a6:	701a      	strb	r2, [r3, #0]
		if (!lun_connected) {
    59a8:	4b13      	ldr	r3, [pc, #76]	; (59f8 <main+0x4c4>)
    59aa:	781a      	ldrb	r2, [r3, #0]
    59ac:	2a00      	cmp	r2, #0
    59ae:	d0fc      	beq.n	59aa <main+0x476>
		while (sof_count < MSC_DELAY_SOF_COUNT);
    59b0:	4912      	ldr	r1, [pc, #72]	; (59fc <main+0x4c8>)
    59b2:	4a13      	ldr	r2, [pc, #76]	; (5a00 <main+0x4cc>)
    59b4:	680b      	ldr	r3, [r1, #0]
    59b6:	4293      	cmp	r3, r2
    59b8:	d9fc      	bls.n	59b4 <main+0x480>
    59ba:	2400      	movs	r4, #0
    59bc:	e607      	b.n	55ce <main+0x9a>
		nvm_read_buffer(current_page * NVMCTRL_PAGE_SIZE,
    59be:	2240      	movs	r2, #64	; 0x40
    59c0:	a912      	add	r1, sp, #72	; 0x48
    59c2:	4648      	mov	r0, r9
    59c4:	4b04      	ldr	r3, [pc, #16]	; (59d8 <main+0x4a4>)
    59c6:	4798      	blx	r3
		curr_address +=  read_size;
    59c8:	46ba      	mov	sl, r7
			read_size = FLASH_BUFFER_SIZE;
    59ca:	2740      	movs	r7, #64	; 0x40
    59cc:	a812      	add	r0, sp, #72	; 0x48
    59ce:	4684      	mov	ip, r0
    59d0:	002a      	movs	r2, r5
		if (DMAC->CRCCTRL.bit.CRCBEATSIZE == CRC_BEAT_SIZE_BYTE) {
    59d2:	4902      	ldr	r1, [pc, #8]	; (59dc <main+0x4a8>)
    59d4:	e795      	b.n	5902 <main+0x3ce>
    59d6:	46c0      	nop			; (mov r8, r8)
    59d8:	000018b9 	.word	0x000018b9
    59dc:	41004800 	.word	0x41004800
    59e0:	2000030c 	.word	0x2000030c
    59e4:	41004400 	.word	0x41004400
    59e8:	000050a1 	.word	0x000050a1
    59ec:	000013b5 	.word	0x000013b5
    59f0:	20000023 	.word	0x20000023
    59f4:	40001000 	.word	0x40001000
    59f8:	20000534 	.word	0x20000534
    59fc:	20000538 	.word	0x20000538
    5a00:	000003e7 	.word	0x000003e7

00005a04 <main_usb_sof_event>:
/**
 * \brief Notify that a SOF has been sent (each 1 ms)
 */
void main_usb_sof_event(void)
{
	sof_count++;
    5a04:	4a02      	ldr	r2, [pc, #8]	; (5a10 <main_usb_sof_event+0xc>)
    5a06:	6813      	ldr	r3, [r2, #0]
    5a08:	3301      	adds	r3, #1
    5a0a:	6013      	str	r3, [r2, #0]
}
    5a0c:	4770      	bx	lr
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	20000538 	.word	0x20000538

00005a14 <main_usb_connection_event>:
{
	/* To remove compiler warning */
	UNUSED(dev);

	/* Enumeration status of the connected MSC device */
	lun_connected = b_present;
    5a14:	4b02      	ldr	r3, [pc, #8]	; (5a20 <main_usb_connection_event+0xc>)
    5a16:	7019      	strb	r1, [r3, #0]

	/* Reset sof_count to start MSC delay*/
	sof_count = 0;
    5a18:	2200      	movs	r2, #0
    5a1a:	4b02      	ldr	r3, [pc, #8]	; (5a24 <main_usb_connection_event+0x10>)
    5a1c:	601a      	str	r2, [r3, #0]
}
    5a1e:	4770      	bx	lr
    5a20:	20000534 	.word	0x20000534
    5a24:	20000538 	.word	0x20000538

00005a28 <__udivsi3>:
    5a28:	2200      	movs	r2, #0
    5a2a:	0843      	lsrs	r3, r0, #1
    5a2c:	428b      	cmp	r3, r1
    5a2e:	d374      	bcc.n	5b1a <__udivsi3+0xf2>
    5a30:	0903      	lsrs	r3, r0, #4
    5a32:	428b      	cmp	r3, r1
    5a34:	d35f      	bcc.n	5af6 <__udivsi3+0xce>
    5a36:	0a03      	lsrs	r3, r0, #8
    5a38:	428b      	cmp	r3, r1
    5a3a:	d344      	bcc.n	5ac6 <__udivsi3+0x9e>
    5a3c:	0b03      	lsrs	r3, r0, #12
    5a3e:	428b      	cmp	r3, r1
    5a40:	d328      	bcc.n	5a94 <__udivsi3+0x6c>
    5a42:	0c03      	lsrs	r3, r0, #16
    5a44:	428b      	cmp	r3, r1
    5a46:	d30d      	bcc.n	5a64 <__udivsi3+0x3c>
    5a48:	22ff      	movs	r2, #255	; 0xff
    5a4a:	0209      	lsls	r1, r1, #8
    5a4c:	ba12      	rev	r2, r2
    5a4e:	0c03      	lsrs	r3, r0, #16
    5a50:	428b      	cmp	r3, r1
    5a52:	d302      	bcc.n	5a5a <__udivsi3+0x32>
    5a54:	1212      	asrs	r2, r2, #8
    5a56:	0209      	lsls	r1, r1, #8
    5a58:	d065      	beq.n	5b26 <__udivsi3+0xfe>
    5a5a:	0b03      	lsrs	r3, r0, #12
    5a5c:	428b      	cmp	r3, r1
    5a5e:	d319      	bcc.n	5a94 <__udivsi3+0x6c>
    5a60:	e000      	b.n	5a64 <__udivsi3+0x3c>
    5a62:	0a09      	lsrs	r1, r1, #8
    5a64:	0bc3      	lsrs	r3, r0, #15
    5a66:	428b      	cmp	r3, r1
    5a68:	d301      	bcc.n	5a6e <__udivsi3+0x46>
    5a6a:	03cb      	lsls	r3, r1, #15
    5a6c:	1ac0      	subs	r0, r0, r3
    5a6e:	4152      	adcs	r2, r2
    5a70:	0b83      	lsrs	r3, r0, #14
    5a72:	428b      	cmp	r3, r1
    5a74:	d301      	bcc.n	5a7a <__udivsi3+0x52>
    5a76:	038b      	lsls	r3, r1, #14
    5a78:	1ac0      	subs	r0, r0, r3
    5a7a:	4152      	adcs	r2, r2
    5a7c:	0b43      	lsrs	r3, r0, #13
    5a7e:	428b      	cmp	r3, r1
    5a80:	d301      	bcc.n	5a86 <__udivsi3+0x5e>
    5a82:	034b      	lsls	r3, r1, #13
    5a84:	1ac0      	subs	r0, r0, r3
    5a86:	4152      	adcs	r2, r2
    5a88:	0b03      	lsrs	r3, r0, #12
    5a8a:	428b      	cmp	r3, r1
    5a8c:	d301      	bcc.n	5a92 <__udivsi3+0x6a>
    5a8e:	030b      	lsls	r3, r1, #12
    5a90:	1ac0      	subs	r0, r0, r3
    5a92:	4152      	adcs	r2, r2
    5a94:	0ac3      	lsrs	r3, r0, #11
    5a96:	428b      	cmp	r3, r1
    5a98:	d301      	bcc.n	5a9e <__udivsi3+0x76>
    5a9a:	02cb      	lsls	r3, r1, #11
    5a9c:	1ac0      	subs	r0, r0, r3
    5a9e:	4152      	adcs	r2, r2
    5aa0:	0a83      	lsrs	r3, r0, #10
    5aa2:	428b      	cmp	r3, r1
    5aa4:	d301      	bcc.n	5aaa <__udivsi3+0x82>
    5aa6:	028b      	lsls	r3, r1, #10
    5aa8:	1ac0      	subs	r0, r0, r3
    5aaa:	4152      	adcs	r2, r2
    5aac:	0a43      	lsrs	r3, r0, #9
    5aae:	428b      	cmp	r3, r1
    5ab0:	d301      	bcc.n	5ab6 <__udivsi3+0x8e>
    5ab2:	024b      	lsls	r3, r1, #9
    5ab4:	1ac0      	subs	r0, r0, r3
    5ab6:	4152      	adcs	r2, r2
    5ab8:	0a03      	lsrs	r3, r0, #8
    5aba:	428b      	cmp	r3, r1
    5abc:	d301      	bcc.n	5ac2 <__udivsi3+0x9a>
    5abe:	020b      	lsls	r3, r1, #8
    5ac0:	1ac0      	subs	r0, r0, r3
    5ac2:	4152      	adcs	r2, r2
    5ac4:	d2cd      	bcs.n	5a62 <__udivsi3+0x3a>
    5ac6:	09c3      	lsrs	r3, r0, #7
    5ac8:	428b      	cmp	r3, r1
    5aca:	d301      	bcc.n	5ad0 <__udivsi3+0xa8>
    5acc:	01cb      	lsls	r3, r1, #7
    5ace:	1ac0      	subs	r0, r0, r3
    5ad0:	4152      	adcs	r2, r2
    5ad2:	0983      	lsrs	r3, r0, #6
    5ad4:	428b      	cmp	r3, r1
    5ad6:	d301      	bcc.n	5adc <__udivsi3+0xb4>
    5ad8:	018b      	lsls	r3, r1, #6
    5ada:	1ac0      	subs	r0, r0, r3
    5adc:	4152      	adcs	r2, r2
    5ade:	0943      	lsrs	r3, r0, #5
    5ae0:	428b      	cmp	r3, r1
    5ae2:	d301      	bcc.n	5ae8 <__udivsi3+0xc0>
    5ae4:	014b      	lsls	r3, r1, #5
    5ae6:	1ac0      	subs	r0, r0, r3
    5ae8:	4152      	adcs	r2, r2
    5aea:	0903      	lsrs	r3, r0, #4
    5aec:	428b      	cmp	r3, r1
    5aee:	d301      	bcc.n	5af4 <__udivsi3+0xcc>
    5af0:	010b      	lsls	r3, r1, #4
    5af2:	1ac0      	subs	r0, r0, r3
    5af4:	4152      	adcs	r2, r2
    5af6:	08c3      	lsrs	r3, r0, #3
    5af8:	428b      	cmp	r3, r1
    5afa:	d301      	bcc.n	5b00 <__udivsi3+0xd8>
    5afc:	00cb      	lsls	r3, r1, #3
    5afe:	1ac0      	subs	r0, r0, r3
    5b00:	4152      	adcs	r2, r2
    5b02:	0883      	lsrs	r3, r0, #2
    5b04:	428b      	cmp	r3, r1
    5b06:	d301      	bcc.n	5b0c <__udivsi3+0xe4>
    5b08:	008b      	lsls	r3, r1, #2
    5b0a:	1ac0      	subs	r0, r0, r3
    5b0c:	4152      	adcs	r2, r2
    5b0e:	0843      	lsrs	r3, r0, #1
    5b10:	428b      	cmp	r3, r1
    5b12:	d301      	bcc.n	5b18 <__udivsi3+0xf0>
    5b14:	004b      	lsls	r3, r1, #1
    5b16:	1ac0      	subs	r0, r0, r3
    5b18:	4152      	adcs	r2, r2
    5b1a:	1a41      	subs	r1, r0, r1
    5b1c:	d200      	bcs.n	5b20 <__udivsi3+0xf8>
    5b1e:	4601      	mov	r1, r0
    5b20:	4152      	adcs	r2, r2
    5b22:	4610      	mov	r0, r2
    5b24:	4770      	bx	lr
    5b26:	e7ff      	b.n	5b28 <__udivsi3+0x100>
    5b28:	b501      	push	{r0, lr}
    5b2a:	2000      	movs	r0, #0
    5b2c:	f000 f8f0 	bl	5d10 <__aeabi_idiv0>
    5b30:	bd02      	pop	{r1, pc}
    5b32:	46c0      	nop			; (mov r8, r8)

00005b34 <__aeabi_uidivmod>:
    5b34:	2900      	cmp	r1, #0
    5b36:	d0f7      	beq.n	5b28 <__udivsi3+0x100>
    5b38:	e776      	b.n	5a28 <__udivsi3>
    5b3a:	4770      	bx	lr

00005b3c <__divsi3>:
    5b3c:	4603      	mov	r3, r0
    5b3e:	430b      	orrs	r3, r1
    5b40:	d47f      	bmi.n	5c42 <__divsi3+0x106>
    5b42:	2200      	movs	r2, #0
    5b44:	0843      	lsrs	r3, r0, #1
    5b46:	428b      	cmp	r3, r1
    5b48:	d374      	bcc.n	5c34 <__divsi3+0xf8>
    5b4a:	0903      	lsrs	r3, r0, #4
    5b4c:	428b      	cmp	r3, r1
    5b4e:	d35f      	bcc.n	5c10 <__divsi3+0xd4>
    5b50:	0a03      	lsrs	r3, r0, #8
    5b52:	428b      	cmp	r3, r1
    5b54:	d344      	bcc.n	5be0 <__divsi3+0xa4>
    5b56:	0b03      	lsrs	r3, r0, #12
    5b58:	428b      	cmp	r3, r1
    5b5a:	d328      	bcc.n	5bae <__divsi3+0x72>
    5b5c:	0c03      	lsrs	r3, r0, #16
    5b5e:	428b      	cmp	r3, r1
    5b60:	d30d      	bcc.n	5b7e <__divsi3+0x42>
    5b62:	22ff      	movs	r2, #255	; 0xff
    5b64:	0209      	lsls	r1, r1, #8
    5b66:	ba12      	rev	r2, r2
    5b68:	0c03      	lsrs	r3, r0, #16
    5b6a:	428b      	cmp	r3, r1
    5b6c:	d302      	bcc.n	5b74 <__divsi3+0x38>
    5b6e:	1212      	asrs	r2, r2, #8
    5b70:	0209      	lsls	r1, r1, #8
    5b72:	d065      	beq.n	5c40 <__divsi3+0x104>
    5b74:	0b03      	lsrs	r3, r0, #12
    5b76:	428b      	cmp	r3, r1
    5b78:	d319      	bcc.n	5bae <__divsi3+0x72>
    5b7a:	e000      	b.n	5b7e <__divsi3+0x42>
    5b7c:	0a09      	lsrs	r1, r1, #8
    5b7e:	0bc3      	lsrs	r3, r0, #15
    5b80:	428b      	cmp	r3, r1
    5b82:	d301      	bcc.n	5b88 <__divsi3+0x4c>
    5b84:	03cb      	lsls	r3, r1, #15
    5b86:	1ac0      	subs	r0, r0, r3
    5b88:	4152      	adcs	r2, r2
    5b8a:	0b83      	lsrs	r3, r0, #14
    5b8c:	428b      	cmp	r3, r1
    5b8e:	d301      	bcc.n	5b94 <__divsi3+0x58>
    5b90:	038b      	lsls	r3, r1, #14
    5b92:	1ac0      	subs	r0, r0, r3
    5b94:	4152      	adcs	r2, r2
    5b96:	0b43      	lsrs	r3, r0, #13
    5b98:	428b      	cmp	r3, r1
    5b9a:	d301      	bcc.n	5ba0 <__divsi3+0x64>
    5b9c:	034b      	lsls	r3, r1, #13
    5b9e:	1ac0      	subs	r0, r0, r3
    5ba0:	4152      	adcs	r2, r2
    5ba2:	0b03      	lsrs	r3, r0, #12
    5ba4:	428b      	cmp	r3, r1
    5ba6:	d301      	bcc.n	5bac <__divsi3+0x70>
    5ba8:	030b      	lsls	r3, r1, #12
    5baa:	1ac0      	subs	r0, r0, r3
    5bac:	4152      	adcs	r2, r2
    5bae:	0ac3      	lsrs	r3, r0, #11
    5bb0:	428b      	cmp	r3, r1
    5bb2:	d301      	bcc.n	5bb8 <__divsi3+0x7c>
    5bb4:	02cb      	lsls	r3, r1, #11
    5bb6:	1ac0      	subs	r0, r0, r3
    5bb8:	4152      	adcs	r2, r2
    5bba:	0a83      	lsrs	r3, r0, #10
    5bbc:	428b      	cmp	r3, r1
    5bbe:	d301      	bcc.n	5bc4 <__divsi3+0x88>
    5bc0:	028b      	lsls	r3, r1, #10
    5bc2:	1ac0      	subs	r0, r0, r3
    5bc4:	4152      	adcs	r2, r2
    5bc6:	0a43      	lsrs	r3, r0, #9
    5bc8:	428b      	cmp	r3, r1
    5bca:	d301      	bcc.n	5bd0 <__divsi3+0x94>
    5bcc:	024b      	lsls	r3, r1, #9
    5bce:	1ac0      	subs	r0, r0, r3
    5bd0:	4152      	adcs	r2, r2
    5bd2:	0a03      	lsrs	r3, r0, #8
    5bd4:	428b      	cmp	r3, r1
    5bd6:	d301      	bcc.n	5bdc <__divsi3+0xa0>
    5bd8:	020b      	lsls	r3, r1, #8
    5bda:	1ac0      	subs	r0, r0, r3
    5bdc:	4152      	adcs	r2, r2
    5bde:	d2cd      	bcs.n	5b7c <__divsi3+0x40>
    5be0:	09c3      	lsrs	r3, r0, #7
    5be2:	428b      	cmp	r3, r1
    5be4:	d301      	bcc.n	5bea <__divsi3+0xae>
    5be6:	01cb      	lsls	r3, r1, #7
    5be8:	1ac0      	subs	r0, r0, r3
    5bea:	4152      	adcs	r2, r2
    5bec:	0983      	lsrs	r3, r0, #6
    5bee:	428b      	cmp	r3, r1
    5bf0:	d301      	bcc.n	5bf6 <__divsi3+0xba>
    5bf2:	018b      	lsls	r3, r1, #6
    5bf4:	1ac0      	subs	r0, r0, r3
    5bf6:	4152      	adcs	r2, r2
    5bf8:	0943      	lsrs	r3, r0, #5
    5bfa:	428b      	cmp	r3, r1
    5bfc:	d301      	bcc.n	5c02 <__divsi3+0xc6>
    5bfe:	014b      	lsls	r3, r1, #5
    5c00:	1ac0      	subs	r0, r0, r3
    5c02:	4152      	adcs	r2, r2
    5c04:	0903      	lsrs	r3, r0, #4
    5c06:	428b      	cmp	r3, r1
    5c08:	d301      	bcc.n	5c0e <__divsi3+0xd2>
    5c0a:	010b      	lsls	r3, r1, #4
    5c0c:	1ac0      	subs	r0, r0, r3
    5c0e:	4152      	adcs	r2, r2
    5c10:	08c3      	lsrs	r3, r0, #3
    5c12:	428b      	cmp	r3, r1
    5c14:	d301      	bcc.n	5c1a <__divsi3+0xde>
    5c16:	00cb      	lsls	r3, r1, #3
    5c18:	1ac0      	subs	r0, r0, r3
    5c1a:	4152      	adcs	r2, r2
    5c1c:	0883      	lsrs	r3, r0, #2
    5c1e:	428b      	cmp	r3, r1
    5c20:	d301      	bcc.n	5c26 <__divsi3+0xea>
    5c22:	008b      	lsls	r3, r1, #2
    5c24:	1ac0      	subs	r0, r0, r3
    5c26:	4152      	adcs	r2, r2
    5c28:	0843      	lsrs	r3, r0, #1
    5c2a:	428b      	cmp	r3, r1
    5c2c:	d301      	bcc.n	5c32 <__divsi3+0xf6>
    5c2e:	004b      	lsls	r3, r1, #1
    5c30:	1ac0      	subs	r0, r0, r3
    5c32:	4152      	adcs	r2, r2
    5c34:	1a41      	subs	r1, r0, r1
    5c36:	d200      	bcs.n	5c3a <__divsi3+0xfe>
    5c38:	4601      	mov	r1, r0
    5c3a:	4152      	adcs	r2, r2
    5c3c:	4610      	mov	r0, r2
    5c3e:	4770      	bx	lr
    5c40:	e05d      	b.n	5cfe <__divsi3+0x1c2>
    5c42:	0fca      	lsrs	r2, r1, #31
    5c44:	d000      	beq.n	5c48 <__divsi3+0x10c>
    5c46:	4249      	negs	r1, r1
    5c48:	1003      	asrs	r3, r0, #32
    5c4a:	d300      	bcc.n	5c4e <__divsi3+0x112>
    5c4c:	4240      	negs	r0, r0
    5c4e:	4053      	eors	r3, r2
    5c50:	2200      	movs	r2, #0
    5c52:	469c      	mov	ip, r3
    5c54:	0903      	lsrs	r3, r0, #4
    5c56:	428b      	cmp	r3, r1
    5c58:	d32d      	bcc.n	5cb6 <__divsi3+0x17a>
    5c5a:	0a03      	lsrs	r3, r0, #8
    5c5c:	428b      	cmp	r3, r1
    5c5e:	d312      	bcc.n	5c86 <__divsi3+0x14a>
    5c60:	22fc      	movs	r2, #252	; 0xfc
    5c62:	0189      	lsls	r1, r1, #6
    5c64:	ba12      	rev	r2, r2
    5c66:	0a03      	lsrs	r3, r0, #8
    5c68:	428b      	cmp	r3, r1
    5c6a:	d30c      	bcc.n	5c86 <__divsi3+0x14a>
    5c6c:	0189      	lsls	r1, r1, #6
    5c6e:	1192      	asrs	r2, r2, #6
    5c70:	428b      	cmp	r3, r1
    5c72:	d308      	bcc.n	5c86 <__divsi3+0x14a>
    5c74:	0189      	lsls	r1, r1, #6
    5c76:	1192      	asrs	r2, r2, #6
    5c78:	428b      	cmp	r3, r1
    5c7a:	d304      	bcc.n	5c86 <__divsi3+0x14a>
    5c7c:	0189      	lsls	r1, r1, #6
    5c7e:	d03a      	beq.n	5cf6 <__divsi3+0x1ba>
    5c80:	1192      	asrs	r2, r2, #6
    5c82:	e000      	b.n	5c86 <__divsi3+0x14a>
    5c84:	0989      	lsrs	r1, r1, #6
    5c86:	09c3      	lsrs	r3, r0, #7
    5c88:	428b      	cmp	r3, r1
    5c8a:	d301      	bcc.n	5c90 <__divsi3+0x154>
    5c8c:	01cb      	lsls	r3, r1, #7
    5c8e:	1ac0      	subs	r0, r0, r3
    5c90:	4152      	adcs	r2, r2
    5c92:	0983      	lsrs	r3, r0, #6
    5c94:	428b      	cmp	r3, r1
    5c96:	d301      	bcc.n	5c9c <__divsi3+0x160>
    5c98:	018b      	lsls	r3, r1, #6
    5c9a:	1ac0      	subs	r0, r0, r3
    5c9c:	4152      	adcs	r2, r2
    5c9e:	0943      	lsrs	r3, r0, #5
    5ca0:	428b      	cmp	r3, r1
    5ca2:	d301      	bcc.n	5ca8 <__divsi3+0x16c>
    5ca4:	014b      	lsls	r3, r1, #5
    5ca6:	1ac0      	subs	r0, r0, r3
    5ca8:	4152      	adcs	r2, r2
    5caa:	0903      	lsrs	r3, r0, #4
    5cac:	428b      	cmp	r3, r1
    5cae:	d301      	bcc.n	5cb4 <__divsi3+0x178>
    5cb0:	010b      	lsls	r3, r1, #4
    5cb2:	1ac0      	subs	r0, r0, r3
    5cb4:	4152      	adcs	r2, r2
    5cb6:	08c3      	lsrs	r3, r0, #3
    5cb8:	428b      	cmp	r3, r1
    5cba:	d301      	bcc.n	5cc0 <__divsi3+0x184>
    5cbc:	00cb      	lsls	r3, r1, #3
    5cbe:	1ac0      	subs	r0, r0, r3
    5cc0:	4152      	adcs	r2, r2
    5cc2:	0883      	lsrs	r3, r0, #2
    5cc4:	428b      	cmp	r3, r1
    5cc6:	d301      	bcc.n	5ccc <__divsi3+0x190>
    5cc8:	008b      	lsls	r3, r1, #2
    5cca:	1ac0      	subs	r0, r0, r3
    5ccc:	4152      	adcs	r2, r2
    5cce:	d2d9      	bcs.n	5c84 <__divsi3+0x148>
    5cd0:	0843      	lsrs	r3, r0, #1
    5cd2:	428b      	cmp	r3, r1
    5cd4:	d301      	bcc.n	5cda <__divsi3+0x19e>
    5cd6:	004b      	lsls	r3, r1, #1
    5cd8:	1ac0      	subs	r0, r0, r3
    5cda:	4152      	adcs	r2, r2
    5cdc:	1a41      	subs	r1, r0, r1
    5cde:	d200      	bcs.n	5ce2 <__divsi3+0x1a6>
    5ce0:	4601      	mov	r1, r0
    5ce2:	4663      	mov	r3, ip
    5ce4:	4152      	adcs	r2, r2
    5ce6:	105b      	asrs	r3, r3, #1
    5ce8:	4610      	mov	r0, r2
    5cea:	d301      	bcc.n	5cf0 <__divsi3+0x1b4>
    5cec:	4240      	negs	r0, r0
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d500      	bpl.n	5cf4 <__divsi3+0x1b8>
    5cf2:	4249      	negs	r1, r1
    5cf4:	4770      	bx	lr
    5cf6:	4663      	mov	r3, ip
    5cf8:	105b      	asrs	r3, r3, #1
    5cfa:	d300      	bcc.n	5cfe <__divsi3+0x1c2>
    5cfc:	4240      	negs	r0, r0
    5cfe:	b501      	push	{r0, lr}
    5d00:	2000      	movs	r0, #0
    5d02:	f000 f805 	bl	5d10 <__aeabi_idiv0>
    5d06:	bd02      	pop	{r1, pc}

00005d08 <__aeabi_idivmod>:
    5d08:	2900      	cmp	r1, #0
    5d0a:	d0f8      	beq.n	5cfe <__divsi3+0x1c2>
    5d0c:	e716      	b.n	5b3c <__divsi3>
    5d0e:	4770      	bx	lr

00005d10 <__aeabi_idiv0>:
    5d10:	4770      	bx	lr
    5d12:	46c0      	nop			; (mov r8, r8)

00005d14 <__clzsi2>:
    5d14:	211c      	movs	r1, #28
    5d16:	2301      	movs	r3, #1
    5d18:	041b      	lsls	r3, r3, #16
    5d1a:	4298      	cmp	r0, r3
    5d1c:	d301      	bcc.n	5d22 <__clzsi2+0xe>
    5d1e:	0c00      	lsrs	r0, r0, #16
    5d20:	3910      	subs	r1, #16
    5d22:	0a1b      	lsrs	r3, r3, #8
    5d24:	4298      	cmp	r0, r3
    5d26:	d301      	bcc.n	5d2c <__clzsi2+0x18>
    5d28:	0a00      	lsrs	r0, r0, #8
    5d2a:	3908      	subs	r1, #8
    5d2c:	091b      	lsrs	r3, r3, #4
    5d2e:	4298      	cmp	r0, r3
    5d30:	d301      	bcc.n	5d36 <__clzsi2+0x22>
    5d32:	0900      	lsrs	r0, r0, #4
    5d34:	3904      	subs	r1, #4
    5d36:	a202      	add	r2, pc, #8	; (adr r2, 5d40 <__clzsi2+0x2c>)
    5d38:	5c10      	ldrb	r0, [r2, r0]
    5d3a:	1840      	adds	r0, r0, r1
    5d3c:	4770      	bx	lr
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	02020304 	.word	0x02020304
    5d44:	01010101 	.word	0x01010101
	...

00005d50 <__ctzsi2>:
    5d50:	4241      	negs	r1, r0
    5d52:	4008      	ands	r0, r1
    5d54:	211c      	movs	r1, #28
    5d56:	2301      	movs	r3, #1
    5d58:	041b      	lsls	r3, r3, #16
    5d5a:	4298      	cmp	r0, r3
    5d5c:	d301      	bcc.n	5d62 <__ctzsi2+0x12>
    5d5e:	0c00      	lsrs	r0, r0, #16
    5d60:	3910      	subs	r1, #16
    5d62:	0a1b      	lsrs	r3, r3, #8
    5d64:	4298      	cmp	r0, r3
    5d66:	d301      	bcc.n	5d6c <__ctzsi2+0x1c>
    5d68:	0a00      	lsrs	r0, r0, #8
    5d6a:	3908      	subs	r1, #8
    5d6c:	091b      	lsrs	r3, r3, #4
    5d6e:	4298      	cmp	r0, r3
    5d70:	d301      	bcc.n	5d76 <__ctzsi2+0x26>
    5d72:	0900      	lsrs	r0, r0, #4
    5d74:	3904      	subs	r1, #4
    5d76:	a202      	add	r2, pc, #8	; (adr r2, 5d80 <__ctzsi2+0x30>)
    5d78:	5c10      	ldrb	r0, [r2, r0]
    5d7a:	1a40      	subs	r0, r0, r1
    5d7c:	4770      	bx	lr
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	1d1d1c1b 	.word	0x1d1d1c1b
    5d84:	1e1e1e1e 	.word	0x1e1e1e1e
    5d88:	1f1f1f1f 	.word	0x1f1f1f1f
    5d8c:	1f1f1f1f 	.word	0x1f1f1f1f

00005d90 <__libc_init_array>:
    5d90:	b570      	push	{r4, r5, r6, lr}
    5d92:	2600      	movs	r6, #0
    5d94:	4d0c      	ldr	r5, [pc, #48]	; (5dc8 <__libc_init_array+0x38>)
    5d96:	4c0d      	ldr	r4, [pc, #52]	; (5dcc <__libc_init_array+0x3c>)
    5d98:	1b64      	subs	r4, r4, r5
    5d9a:	10a4      	asrs	r4, r4, #2
    5d9c:	42a6      	cmp	r6, r4
    5d9e:	d109      	bne.n	5db4 <__libc_init_array+0x24>
    5da0:	2600      	movs	r6, #0
    5da2:	f000 fc9f 	bl	66e4 <_init>
    5da6:	4d0a      	ldr	r5, [pc, #40]	; (5dd0 <__libc_init_array+0x40>)
    5da8:	4c0a      	ldr	r4, [pc, #40]	; (5dd4 <__libc_init_array+0x44>)
    5daa:	1b64      	subs	r4, r4, r5
    5dac:	10a4      	asrs	r4, r4, #2
    5dae:	42a6      	cmp	r6, r4
    5db0:	d105      	bne.n	5dbe <__libc_init_array+0x2e>
    5db2:	bd70      	pop	{r4, r5, r6, pc}
    5db4:	00b3      	lsls	r3, r6, #2
    5db6:	58eb      	ldr	r3, [r5, r3]
    5db8:	4798      	blx	r3
    5dba:	3601      	adds	r6, #1
    5dbc:	e7ee      	b.n	5d9c <__libc_init_array+0xc>
    5dbe:	00b3      	lsls	r3, r6, #2
    5dc0:	58eb      	ldr	r3, [r5, r3]
    5dc2:	4798      	blx	r3
    5dc4:	3601      	adds	r6, #1
    5dc6:	e7f2      	b.n	5dae <__libc_init_array+0x1e>
    5dc8:	000066f0 	.word	0x000066f0
    5dcc:	000066f0 	.word	0x000066f0
    5dd0:	000066f0 	.word	0x000066f0
    5dd4:	000066f4 	.word	0x000066f4

00005dd8 <malloc>:
    5dd8:	b510      	push	{r4, lr}
    5dda:	4b03      	ldr	r3, [pc, #12]	; (5de8 <malloc+0x10>)
    5ddc:	0001      	movs	r1, r0
    5dde:	6818      	ldr	r0, [r3, #0]
    5de0:	f000 f86a 	bl	5eb8 <_malloc_r>
    5de4:	bd10      	pop	{r4, pc}
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	20000050 	.word	0x20000050

00005dec <free>:
    5dec:	b510      	push	{r4, lr}
    5dee:	4b03      	ldr	r3, [pc, #12]	; (5dfc <free+0x10>)
    5df0:	0001      	movs	r1, r0
    5df2:	6818      	ldr	r0, [r3, #0]
    5df4:	f000 f816 	bl	5e24 <_free_r>
    5df8:	bd10      	pop	{r4, pc}
    5dfa:	46c0      	nop			; (mov r8, r8)
    5dfc:	20000050 	.word	0x20000050

00005e00 <memcpy>:
    5e00:	2300      	movs	r3, #0
    5e02:	b510      	push	{r4, lr}
    5e04:	429a      	cmp	r2, r3
    5e06:	d100      	bne.n	5e0a <memcpy+0xa>
    5e08:	bd10      	pop	{r4, pc}
    5e0a:	5ccc      	ldrb	r4, [r1, r3]
    5e0c:	54c4      	strb	r4, [r0, r3]
    5e0e:	3301      	adds	r3, #1
    5e10:	e7f8      	b.n	5e04 <memcpy+0x4>

00005e12 <memset>:
    5e12:	0003      	movs	r3, r0
    5e14:	1882      	adds	r2, r0, r2
    5e16:	4293      	cmp	r3, r2
    5e18:	d100      	bne.n	5e1c <memset+0xa>
    5e1a:	4770      	bx	lr
    5e1c:	7019      	strb	r1, [r3, #0]
    5e1e:	3301      	adds	r3, #1
    5e20:	e7f9      	b.n	5e16 <memset+0x4>
	...

00005e24 <_free_r>:
    5e24:	b570      	push	{r4, r5, r6, lr}
    5e26:	0005      	movs	r5, r0
    5e28:	2900      	cmp	r1, #0
    5e2a:	d010      	beq.n	5e4e <_free_r+0x2a>
    5e2c:	1f0c      	subs	r4, r1, #4
    5e2e:	6823      	ldr	r3, [r4, #0]
    5e30:	2b00      	cmp	r3, #0
    5e32:	da00      	bge.n	5e36 <_free_r+0x12>
    5e34:	18e4      	adds	r4, r4, r3
    5e36:	0028      	movs	r0, r5
    5e38:	f000 f8ae 	bl	5f98 <__malloc_lock>
    5e3c:	4a1d      	ldr	r2, [pc, #116]	; (5eb4 <_free_r+0x90>)
    5e3e:	6813      	ldr	r3, [r2, #0]
    5e40:	2b00      	cmp	r3, #0
    5e42:	d105      	bne.n	5e50 <_free_r+0x2c>
    5e44:	6063      	str	r3, [r4, #4]
    5e46:	6014      	str	r4, [r2, #0]
    5e48:	0028      	movs	r0, r5
    5e4a:	f000 f8a6 	bl	5f9a <__malloc_unlock>
    5e4e:	bd70      	pop	{r4, r5, r6, pc}
    5e50:	42a3      	cmp	r3, r4
    5e52:	d909      	bls.n	5e68 <_free_r+0x44>
    5e54:	6821      	ldr	r1, [r4, #0]
    5e56:	1860      	adds	r0, r4, r1
    5e58:	4283      	cmp	r3, r0
    5e5a:	d1f3      	bne.n	5e44 <_free_r+0x20>
    5e5c:	6818      	ldr	r0, [r3, #0]
    5e5e:	685b      	ldr	r3, [r3, #4]
    5e60:	1841      	adds	r1, r0, r1
    5e62:	6021      	str	r1, [r4, #0]
    5e64:	e7ee      	b.n	5e44 <_free_r+0x20>
    5e66:	0013      	movs	r3, r2
    5e68:	685a      	ldr	r2, [r3, #4]
    5e6a:	2a00      	cmp	r2, #0
    5e6c:	d001      	beq.n	5e72 <_free_r+0x4e>
    5e6e:	42a2      	cmp	r2, r4
    5e70:	d9f9      	bls.n	5e66 <_free_r+0x42>
    5e72:	6819      	ldr	r1, [r3, #0]
    5e74:	1858      	adds	r0, r3, r1
    5e76:	42a0      	cmp	r0, r4
    5e78:	d10b      	bne.n	5e92 <_free_r+0x6e>
    5e7a:	6820      	ldr	r0, [r4, #0]
    5e7c:	1809      	adds	r1, r1, r0
    5e7e:	1858      	adds	r0, r3, r1
    5e80:	6019      	str	r1, [r3, #0]
    5e82:	4282      	cmp	r2, r0
    5e84:	d1e0      	bne.n	5e48 <_free_r+0x24>
    5e86:	6810      	ldr	r0, [r2, #0]
    5e88:	6852      	ldr	r2, [r2, #4]
    5e8a:	1841      	adds	r1, r0, r1
    5e8c:	6019      	str	r1, [r3, #0]
    5e8e:	605a      	str	r2, [r3, #4]
    5e90:	e7da      	b.n	5e48 <_free_r+0x24>
    5e92:	42a0      	cmp	r0, r4
    5e94:	d902      	bls.n	5e9c <_free_r+0x78>
    5e96:	230c      	movs	r3, #12
    5e98:	602b      	str	r3, [r5, #0]
    5e9a:	e7d5      	b.n	5e48 <_free_r+0x24>
    5e9c:	6821      	ldr	r1, [r4, #0]
    5e9e:	1860      	adds	r0, r4, r1
    5ea0:	4282      	cmp	r2, r0
    5ea2:	d103      	bne.n	5eac <_free_r+0x88>
    5ea4:	6810      	ldr	r0, [r2, #0]
    5ea6:	6852      	ldr	r2, [r2, #4]
    5ea8:	1841      	adds	r1, r0, r1
    5eaa:	6021      	str	r1, [r4, #0]
    5eac:	6062      	str	r2, [r4, #4]
    5eae:	605c      	str	r4, [r3, #4]
    5eb0:	e7ca      	b.n	5e48 <_free_r+0x24>
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	2000053c 	.word	0x2000053c

00005eb8 <_malloc_r>:
    5eb8:	2303      	movs	r3, #3
    5eba:	b570      	push	{r4, r5, r6, lr}
    5ebc:	1ccd      	adds	r5, r1, #3
    5ebe:	439d      	bics	r5, r3
    5ec0:	3508      	adds	r5, #8
    5ec2:	0006      	movs	r6, r0
    5ec4:	2d0c      	cmp	r5, #12
    5ec6:	d21e      	bcs.n	5f06 <_malloc_r+0x4e>
    5ec8:	250c      	movs	r5, #12
    5eca:	42a9      	cmp	r1, r5
    5ecc:	d81d      	bhi.n	5f0a <_malloc_r+0x52>
    5ece:	0030      	movs	r0, r6
    5ed0:	f000 f862 	bl	5f98 <__malloc_lock>
    5ed4:	4a25      	ldr	r2, [pc, #148]	; (5f6c <_malloc_r+0xb4>)
    5ed6:	6814      	ldr	r4, [r2, #0]
    5ed8:	0021      	movs	r1, r4
    5eda:	2900      	cmp	r1, #0
    5edc:	d119      	bne.n	5f12 <_malloc_r+0x5a>
    5ede:	4c24      	ldr	r4, [pc, #144]	; (5f70 <_malloc_r+0xb8>)
    5ee0:	6823      	ldr	r3, [r4, #0]
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d103      	bne.n	5eee <_malloc_r+0x36>
    5ee6:	0030      	movs	r0, r6
    5ee8:	f000 f844 	bl	5f74 <_sbrk_r>
    5eec:	6020      	str	r0, [r4, #0]
    5eee:	0029      	movs	r1, r5
    5ef0:	0030      	movs	r0, r6
    5ef2:	f000 f83f 	bl	5f74 <_sbrk_r>
    5ef6:	1c43      	adds	r3, r0, #1
    5ef8:	d12c      	bne.n	5f54 <_malloc_r+0x9c>
    5efa:	230c      	movs	r3, #12
    5efc:	0030      	movs	r0, r6
    5efe:	6033      	str	r3, [r6, #0]
    5f00:	f000 f84b 	bl	5f9a <__malloc_unlock>
    5f04:	e003      	b.n	5f0e <_malloc_r+0x56>
    5f06:	2d00      	cmp	r5, #0
    5f08:	dadf      	bge.n	5eca <_malloc_r+0x12>
    5f0a:	230c      	movs	r3, #12
    5f0c:	6033      	str	r3, [r6, #0]
    5f0e:	2000      	movs	r0, #0
    5f10:	bd70      	pop	{r4, r5, r6, pc}
    5f12:	680b      	ldr	r3, [r1, #0]
    5f14:	1b5b      	subs	r3, r3, r5
    5f16:	d41a      	bmi.n	5f4e <_malloc_r+0x96>
    5f18:	2b0b      	cmp	r3, #11
    5f1a:	d903      	bls.n	5f24 <_malloc_r+0x6c>
    5f1c:	600b      	str	r3, [r1, #0]
    5f1e:	18cc      	adds	r4, r1, r3
    5f20:	6025      	str	r5, [r4, #0]
    5f22:	e003      	b.n	5f2c <_malloc_r+0x74>
    5f24:	428c      	cmp	r4, r1
    5f26:	d10e      	bne.n	5f46 <_malloc_r+0x8e>
    5f28:	6863      	ldr	r3, [r4, #4]
    5f2a:	6013      	str	r3, [r2, #0]
    5f2c:	0030      	movs	r0, r6
    5f2e:	f000 f834 	bl	5f9a <__malloc_unlock>
    5f32:	0020      	movs	r0, r4
    5f34:	2207      	movs	r2, #7
    5f36:	300b      	adds	r0, #11
    5f38:	1d23      	adds	r3, r4, #4
    5f3a:	4390      	bics	r0, r2
    5f3c:	1ac3      	subs	r3, r0, r3
    5f3e:	d0e7      	beq.n	5f10 <_malloc_r+0x58>
    5f40:	425a      	negs	r2, r3
    5f42:	50e2      	str	r2, [r4, r3]
    5f44:	e7e4      	b.n	5f10 <_malloc_r+0x58>
    5f46:	684b      	ldr	r3, [r1, #4]
    5f48:	6063      	str	r3, [r4, #4]
    5f4a:	000c      	movs	r4, r1
    5f4c:	e7ee      	b.n	5f2c <_malloc_r+0x74>
    5f4e:	000c      	movs	r4, r1
    5f50:	6849      	ldr	r1, [r1, #4]
    5f52:	e7c2      	b.n	5eda <_malloc_r+0x22>
    5f54:	2303      	movs	r3, #3
    5f56:	1cc4      	adds	r4, r0, #3
    5f58:	439c      	bics	r4, r3
    5f5a:	42a0      	cmp	r0, r4
    5f5c:	d0e0      	beq.n	5f20 <_malloc_r+0x68>
    5f5e:	1a21      	subs	r1, r4, r0
    5f60:	0030      	movs	r0, r6
    5f62:	f000 f807 	bl	5f74 <_sbrk_r>
    5f66:	1c43      	adds	r3, r0, #1
    5f68:	d1da      	bne.n	5f20 <_malloc_r+0x68>
    5f6a:	e7c6      	b.n	5efa <_malloc_r+0x42>
    5f6c:	2000053c 	.word	0x2000053c
    5f70:	20000540 	.word	0x20000540

00005f74 <_sbrk_r>:
    5f74:	2300      	movs	r3, #0
    5f76:	b570      	push	{r4, r5, r6, lr}
    5f78:	4c06      	ldr	r4, [pc, #24]	; (5f94 <_sbrk_r+0x20>)
    5f7a:	0005      	movs	r5, r0
    5f7c:	0008      	movs	r0, r1
    5f7e:	6023      	str	r3, [r4, #0]
    5f80:	f7fe fab4 	bl	44ec <_sbrk>
    5f84:	1c43      	adds	r3, r0, #1
    5f86:	d103      	bne.n	5f90 <_sbrk_r+0x1c>
    5f88:	6823      	ldr	r3, [r4, #0]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d000      	beq.n	5f90 <_sbrk_r+0x1c>
    5f8e:	602b      	str	r3, [r5, #0]
    5f90:	bd70      	pop	{r4, r5, r6, pc}
    5f92:	46c0      	nop			; (mov r8, r8)
    5f94:	200008ac 	.word	0x200008ac

00005f98 <__malloc_lock>:
    5f98:	4770      	bx	lr

00005f9a <__malloc_unlock>:
    5f9a:	4770      	bx	lr
    5f9c:	000017f8 	.word	0x000017f8
    5fa0:	000017f8 	.word	0x000017f8
    5fa4:	000017d4 	.word	0x000017d4
    5fa8:	000017f8 	.word	0x000017f8
    5fac:	000017d4 	.word	0x000017d4
    5fb0:	000017ba 	.word	0x000017ba
    5fb4:	000017ba 	.word	0x000017ba
    5fb8:	000017f8 	.word	0x000017f8
    5fbc:	000017f8 	.word	0x000017f8
    5fc0:	000017f8 	.word	0x000017f8
    5fc4:	000017f8 	.word	0x000017f8
    5fc8:	000017f8 	.word	0x000017f8
    5fcc:	000017f8 	.word	0x000017f8
    5fd0:	000017f8 	.word	0x000017f8
    5fd4:	000017f8 	.word	0x000017f8
    5fd8:	000017f8 	.word	0x000017f8
    5fdc:	000017f8 	.word	0x000017f8
    5fe0:	000017f8 	.word	0x000017f8
    5fe4:	000017f8 	.word	0x000017f8
    5fe8:	000017f8 	.word	0x000017f8
    5fec:	000017f8 	.word	0x000017f8
    5ff0:	000017f8 	.word	0x000017f8
    5ff4:	000017f8 	.word	0x000017f8
    5ff8:	000017f8 	.word	0x000017f8
    5ffc:	000017f8 	.word	0x000017f8
    6000:	000017f8 	.word	0x000017f8
    6004:	000017f8 	.word	0x000017f8
    6008:	000017f8 	.word	0x000017f8
    600c:	000017f8 	.word	0x000017f8
    6010:	000017f8 	.word	0x000017f8
    6014:	000017f8 	.word	0x000017f8
    6018:	000017f8 	.word	0x000017f8
    601c:	000017f8 	.word	0x000017f8
    6020:	000017f8 	.word	0x000017f8
    6024:	000017f8 	.word	0x000017f8
    6028:	000017f8 	.word	0x000017f8
    602c:	000017f8 	.word	0x000017f8
    6030:	000017f8 	.word	0x000017f8
    6034:	000017f8 	.word	0x000017f8
    6038:	000017f8 	.word	0x000017f8
    603c:	000017f8 	.word	0x000017f8
    6040:	000017f8 	.word	0x000017f8
    6044:	000017f8 	.word	0x000017f8
    6048:	000017f8 	.word	0x000017f8
    604c:	000017f8 	.word	0x000017f8
    6050:	000017f8 	.word	0x000017f8
    6054:	000017f8 	.word	0x000017f8
    6058:	000017f8 	.word	0x000017f8
    605c:	000017f8 	.word	0x000017f8
    6060:	000017f8 	.word	0x000017f8
    6064:	000017f8 	.word	0x000017f8
    6068:	000017f8 	.word	0x000017f8
    606c:	000017f8 	.word	0x000017f8
    6070:	000017f8 	.word	0x000017f8
    6074:	000017f8 	.word	0x000017f8
    6078:	000017f8 	.word	0x000017f8
    607c:	000017f8 	.word	0x000017f8
    6080:	000017f8 	.word	0x000017f8
    6084:	000017f8 	.word	0x000017f8
    6088:	000017f8 	.word	0x000017f8
    608c:	000017f8 	.word	0x000017f8
    6090:	000017f8 	.word	0x000017f8
    6094:	000017f8 	.word	0x000017f8
    6098:	000017f8 	.word	0x000017f8
    609c:	000017d4 	.word	0x000017d4
    60a0:	000017d4 	.word	0x000017d4
    60a4:	000017dc 	.word	0x000017dc
    60a8:	000017dc 	.word	0x000017dc
    60ac:	000017dc 	.word	0x000017dc
    60b0:	000017dc 	.word	0x000017dc
    60b4:	00001cd8 	.word	0x00001cd8
    60b8:	00001cb8 	.word	0x00001cb8
    60bc:	00001cb8 	.word	0x00001cb8
    60c0:	00001d44 	.word	0x00001d44
    60c4:	00001cca 	.word	0x00001cca
    60c8:	00001ce6 	.word	0x00001ce6
    60cc:	00001cbc 	.word	0x00001cbc
    60d0:	00001cf4 	.word	0x00001cf4
    60d4:	00001d34 	.word	0x00001d34
    60d8:	00002a1c 	.word	0x00002a1c
    60dc:	00002a20 	.word	0x00002a20
    60e0:	00002a18 	.word	0x00002a18
    60e4:	00002a1c 	.word	0x00002a1c
    60e8:	00002a18 	.word	0x00002a18
    60ec:	00002a1c 	.word	0x00002a1c
    60f0:	00002a1c 	.word	0x00002a1c
    60f4:	00002a1c 	.word	0x00002a1c
    60f8:	00002a10 	.word	0x00002a10
    60fc:	00002a1c 	.word	0x00002a1c
    6100:	00002a1c 	.word	0x00002a1c
    6104:	00002a1c 	.word	0x00002a1c
    6108:	00002a1c 	.word	0x00002a1c
    610c:	00002a1c 	.word	0x00002a1c
    6110:	00002a1c 	.word	0x00002a1c
    6114:	00002a1c 	.word	0x00002a1c
    6118:	00002a14 	.word	0x00002a14
    611c:	0000307a 	.word	0x0000307a
    6120:	0000307e 	.word	0x0000307e
    6124:	00003076 	.word	0x00003076
    6128:	0000307a 	.word	0x0000307a
    612c:	00003076 	.word	0x00003076
    6130:	0000307a 	.word	0x0000307a
    6134:	0000307a 	.word	0x0000307a
    6138:	0000307a 	.word	0x0000307a
    613c:	0000306e 	.word	0x0000306e
    6140:	0000307a 	.word	0x0000307a
    6144:	0000307a 	.word	0x0000307a
    6148:	0000307a 	.word	0x0000307a
    614c:	0000307a 	.word	0x0000307a
    6150:	0000307a 	.word	0x0000307a
    6154:	0000307a 	.word	0x0000307a
    6158:	0000307a 	.word	0x0000307a
    615c:	00003072 	.word	0x00003072

00006160 <_usb_device_irq_bits>:
    6160:	00080004 00800070 01000001 00000200     ....p...........

00006170 <LfnOfs>:
    6170:	07050301 12100e09 1c181614 0000001e     ................

00006180 <excvt.4466>:
    6180:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    6190:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    61a0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    61b0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    61c0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    61d0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    61e0:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    61f0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    6200:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    6210:	00005d5b                                []..

00006214 <Tbl>:
    6214:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6224:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6234:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    6244:	00d600ff 00f800dc 00d800a3 019200d7     ................
    6254:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    6264:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    6274:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    6284:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    6294:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    62a4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    62b4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    62c4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    62d4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    62e4:	00da00de 00d900db 00dd00fd 00b400af     ................
    62f4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    6304:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00006314 <tbl_lower.4301>:
    6314:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    6324:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    6334:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    6344:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    6354:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    6364:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    6374:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    6384:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    6394:	01050103 01090107 010d010b 0111010f     ................
    63a4:	01150113 01190117 011d011b 0121011f     ..............!.
    63b4:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    63c4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    63d4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    63e4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    63f4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    6404:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    6414:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    6424:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    6434:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    6444:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    6454:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    6464:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    6474:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    6484:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    6494:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    64a4:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    64b4:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    64c4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    64d4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    64e4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

000064f4 <tbl_upper.4302>:
    64f4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    6504:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    6514:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    6524:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    6534:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    6544:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    6554:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    6564:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    6574:	01040102 01080106 010c010a 0110010e     ................
    6584:	01140112 01180116 011c011a 0120011e     .............. .
    6594:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    65a4:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    65b4:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    65c4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    65d4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    65e4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    65f4:	03940393 03960395 03980397 039a0399     ................
    6604:	039c039b 039e039d 03a0039f 03a303a1     ................
    6614:	03a503a4 03a703a6 03a903a8 041003aa     ................
    6624:	04120411 04140413 04160415 04180417     ................
    6634:	041a0419 041c041b 041e041d 0420041f     .............. .
    6644:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    6654:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    6664:	04030402 04050404 04070406 04090408     ................
    6674:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    6684:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    6694:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    66a4:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    66b4:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    66c4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    66d4:	454d5441 4153204c 3132444d 00000000     ATMEL SAMD21....

000066e4 <_init>:
    66e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66ea:	bc08      	pop	{r3}
    66ec:	469e      	mov	lr, r3
    66ee:	4770      	bx	lr

000066f0 <__init_array_start>:
    66f0:	000000dd 	.word	0x000000dd

000066f4 <_fini>:
    66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66fa:	bc08      	pop	{r3}
    66fc:	469e      	mov	lr, r3
    66fe:	4770      	bx	lr

00006700 <__fini_array_start>:
    6700:	000000b5 	.word	0x000000b5
